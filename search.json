[{"title":"Git-C7下Gitlab-12.3.5安装","url":"/forward/60c1bc2d.html","content":"<h2 id=\"GitLab-概述：\"><a href=\"#GitLab-概述：\" class=\"headerlink\" title=\"GitLab 概述：\"></a>GitLab 概述：</h2><p>　　是一个利用 Ruby on Rails 开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web界面进行访问公开的或者私人项目。Ruby on Rails 是一个可以使你开发、部署、维护 web 应用程序变得简单的框架。</p>\n<p>   GitLab 拥有不 Github 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。<br><strong>GitLab 中文网：</strong><a href=\"https://www.gitlab.cc/installation/#centos-7\">https://www.gitlab.cc/installation/#centos-7</a></p>\n<h2 id=\"GitHub-和-GitLab-的区别\"><a href=\"#GitHub-和-GitLab-的区别\" class=\"headerlink\" title=\"GitHub 和 GitLab 的区别:\"></a>GitHub 和 GitLab 的区别:</h2><h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点:\"></a>相同点:</h3><ul>\n<li>二者都是基于 web 的 Git 仓库，在很大程度上 GitLab 是仿照 GitHub 来做的，它们都提供了分享开源项目的平台，为开发团队提供了存储、分享、发布和合作开发项目的中心化云存储的场所。</li>\n</ul>\n<h3 id=\"不同点：\"><a href=\"#不同点：\" class=\"headerlink\" title=\"不同点：\"></a>不同点：</h3><ul>\n<li>GitHub 如果要使用私有仓库，超过 3 个人就收费。GitLab 可以在上面创建私人的克费仓库。</li>\n<li>GitLab 让开发团队对他们的代码仓库拥有更多的控制，相比于 GitHub，它有不少的特色：允许免费设置仓库权限；允许用户选择分享一个 project 的部分代码；允许用户设置 project 的获取权限，进一步的提升安全性；可以设置获取到团队整体的改进进度；通过 innersourcing 让不在权限范围内的人访问不到该资源。</li>\n</ul>\n<p>总结：从代码私有性方面来看，有时公司并不希望员工获取到全部的代码，这个时候 GitLab 无疑是更好的选择。但对于开源项目而言，GitHub 依然是代码托管的首选。</p>\n<h2 id=\"git-相关概念：\"><a href=\"#git-相关概念：\" class=\"headerlink\" title=\"git 相关概念：\"></a>git 相关概念：</h2><ul>\n<li>git 是一种版本控制系统，是一个命令，是一种工具</li>\n<li>gitlib 是用于实现 git 功能的开发库</li>\n<li>github 是一个基于 git 实现的在线代码托管仓库，包含一个网站界面，向互联网开放</li>\n<li>gitlab 是一个基于 git 实现的在线代码仓库托管软件，一般用于在企业内部网络搭建 git 私服</li>\n</ul>\n<p>注： gitlab-ce 社区版，免费； gitlab-ee 是企业版，收费</p>\n<h2 id=\"安装Gitlab组件\"><a href=\"#安装Gitlab组件\" class=\"headerlink\" title=\"安装Gitlab组件:\"></a>安装Gitlab组件:</h2><p><strong>需要最少6G内存，内存不足后期访问报502</strong><br><code>yum install curl policycoreutils openssh-server openssh-clients postfix -y</code></p>\n<h2 id=\"下载Gitlab\"><a href=\"#下载Gitlab\" class=\"headerlink\" title=\"下载Gitlab\"></a>下载Gitlab</h2><p>github下载：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.3.5-ce.0.el7.x86_64.rpm\">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.3.5-ce.0.el7.x86_64.rpm</a><br>汉化包下载：<a href=\"https://gitlab.com/xhang/gitlab/-/tags\">https://gitlab.com/xhang/gitlab/-/tags</a></p>\n<h2 id=\"安装完成之后，修改gitlab访问地址\"><a href=\"#安装完成之后，修改gitlab访问地址\" class=\"headerlink\" title=\"安装完成之后，修改gitlab访问地址:\"></a>安装完成之后，修改gitlab访问地址:</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum localinstall gitlab-ce-12.3.5-ce.0.el7.x86_64.rpm -y</span><br><span class=\"line\">vim /etc/gitlab/gitlab.rb</span><br><span class=\"line\"><span class=\"comment\">#设置访问url和关闭prometheus</span></span><br><span class=\"line\">external_url <span class=\"string\">&#x27;http://git.cakepanit.com&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#如果安装普罗米修斯全家桶需要4G内存</span></span><br><span class=\"line\">prometheus_monitoring[<span class=\"string\">&#x27;enable&#x27;</span>] = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">#配置gitlab通过smtp发送邮件</span></span><br><span class=\"line\"></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;gitlab_email_enabled&#x27;</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;gitlab_email_from&#x27;</span>] = <span class=\"string\">&#x27;felixwww@163.com&#x27;</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;gitlab_email_display_name&#x27;</span>] = <span class=\"string\">&#x27;china&#x27;</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;smtp_enable&#x27;</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;smtp_address&#x27;</span>] = <span class=\"string\">&quot;smtp.163.com&quot;</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;smtp_port&#x27;</span>] = 25</span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;smtp_user_name&#x27;</span>] = <span class=\"string\">&quot;felixwww@163.com&quot;</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;smtp_password&#x27;</span>] = <span class=\"string\">&quot;IVKCTETTCMZWTGWW&quot;</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;smtp_domain&#x27;</span>] = <span class=\"string\">&quot;163.com&quot;</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;smtp_authentication&#x27;</span>] = <span class=\"string\">&quot;login&quot;</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#应用重新配好的配置并重启gitlab</span></span><br><span class=\"line\">gitlab-ctl  reconfigure</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h2><p>本机host添加<code>192.168.200.155 git.cakepanit.com</code><br><a href=\"http://git.cakepanit.com/\">http://git.cakepanit.com/</a><br>为root用户设置初始密码，并登录。</p>\n<p><img src=\"/images/img-158.png\" alt=\"gitlab\"></p>\n<h2 id=\"Gitlab汉化\"><a href=\"#Gitlab汉化\" class=\"headerlink\" title=\"Gitlab汉化\"></a>Gitlab汉化</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># unzip AEIOUAEIOU-xhang_gitlab-v12.3.5-zh.zip</span></span><br><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># cat xhang_gitlab/VERSION </span></span><br><span class=\"line\">12.3.5</span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"built_in\">cp</span> -a xhang_gitlab/*  /opt/gitlab/embedded/service/gitlab-rails/</span><br><span class=\"line\"><span class=\"comment\">#这里会有两个报错，因为这里两个软连接</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># gitlab-ctl start</span></span><br><span class=\"line\">ok: run: gitaly: (pid 1960) 556s</span><br><span class=\"line\">ok: run: gitlab-workhorse: (pid 1985) 555s</span><br><span class=\"line\">ok: run: logrotate: (pid 1848) 594s</span><br><span class=\"line\">ok: run: nginx: (pid 1827) 600s</span><br><span class=\"line\">ok: run: postgresql: (pid 1579) 691s</span><br><span class=\"line\">ok: run: redis: (pid 1416) 708s</span><br><span class=\"line\">ok: run: sidekiq: (pid 1779) 614s</span><br><span class=\"line\">ok: run: unicorn: (pid 1747) 620s</span><br><span class=\"line\">注：等待！8080端口起不来会出现 502 报错</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/img-159.png\" alt=\"hanhu\"></p>\n","categories":["OPS"],"tags":["Git","GitLab","OPS"]},{"title":"Docker-安装&基础管理","url":"/forward/408a4bb8.html","content":"<h2 id=\"Docker介绍\"><a href=\"#Docker介绍\" class=\"headerlink\" title=\"Docker介绍\"></a>Docker介绍</h2><h3 id=\"什么是容器？\"><a href=\"#什么是容器？\" class=\"headerlink\" title=\"什么是容器？\"></a>什么是容器？</h3><p>容器就是在隔离的环境运行的一个进程，如果进程停止，容器就会销毁。隔离的环境拥有自己的系统文件，ip地址， 主机名等。</p>\n<h3 id=\"docker的主要组成部分\"><a href=\"#docker的主要组成部分\" class=\"headerlink\" title=\"docker的主要组成部分\"></a>docker的主要组成部分</h3><p>docker是传统的CS架构分为docker client和docker server,向mysql一样<br>docker主要组件有：镜像、容器、仓库、网络、存储 </p>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># uname -r</span></span><br><span class=\"line\">3.10.0-1127.13.1.el7.x86_64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置网卡转发-看值是否为1\"><a href=\"#配置网卡转发-看值是否为1\" class=\"headerlink\" title=\"配置网卡转发,看值是否为1\"></a>配置网卡转发,看值是否为1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sysctl -a |grep -w net.ipv4.ip_forward</span><br><span class=\"line\">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"若未配置，需要执行如下\"><a href=\"#若未配置，需要执行如下\" class=\"headerlink\" title=\"若未配置，需要执行如下\"></a>若未配置，需要执行如下</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOF &gt;  /etc/sysctl.d/docker.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">net.ipv4.ip_forward=1</span><br><span class=\"line\">EOF</span><br><span class=\"line\">$ sysctl -p /etc/sysctl.d/docker.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"yum源准备：\"><a href=\"#yum源准备：\" class=\"headerlink\" title=\"yum源准备：\"></a>yum源准备：</h3><p><code>curl -o /etc/yum.repos.d/docker-ce.repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p>\n<h3 id=\"更新-yum-缓存：\"><a href=\"#更新-yum-缓存：\" class=\"headerlink\" title=\"更新 yum 缓存：\"></a>更新 yum 缓存：</h3><p><code>sudo yum makecache fast</code></p>\n<h3 id=\"查看可用版本的-Docker-ce：\"><a href=\"#查看可用版本的-Docker-ce：\" class=\"headerlink\" title=\"查看可用版本的 Docker-ce：\"></a>查看可用版本的 Docker-ce：</h3><p><code>yum list docker-ce --showduplicates | sort -r</code></p>\n<h3 id=\"安装依赖：\"><a href=\"#安装依赖：\" class=\"headerlink\" title=\"安装依赖：\"></a>安装依赖：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br><span class=\"line\"><span class=\"comment\">#yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装指定版本：\"><a href=\"#安装指定版本：\" class=\"headerlink\" title=\"安装指定版本：\"></a>安装指定版本：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># yum install docker-ce-18.06.3.ce -y</span></span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker version </span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:         1.13.1</span><br><span class=\"line\"> API version:     1.26</span><br><span class=\"line\"> Package version: </span><br><span class=\"line\">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br></pre></td></tr></table></figure>\n<h2 id=\"Docker-hub镜像\"><a href=\"#Docker-hub镜像\" class=\"headerlink\" title=\"Docker-hub镜像\"></a>Docker-hub镜像</h2><p>加速源配置[华为源]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tee</span> /etc/docker/daemon.json &lt;&lt;- <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span> : [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://8xpk5wnt.mirror.aliyuncs.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;https://dockerhub.azk8s.cn&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;https://ot2k4d59.mirror.aliyuncs.com/&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\">#  docker version \t#查看Docker版本信息</span></span><br><span class=\"line\">Client:\t\t\t\t<span class=\"comment\">#Docker Client版本信息</span></span><br><span class=\"line\"> Version:           18.06.3-ce\t\t<span class=\"comment\">#Docker版本为18.06.3-ce为社区版</span></span><br><span class=\"line\"> API version:       1.38\t\t\t<span class=\"comment\">#API远程管理版本为1.38</span></span><br><span class=\"line\"> Go version:        go1.10.3\t\t<span class=\"comment\">#Go版本为1.10.3</span></span><br><span class=\"line\"> Git commit:        d7080c1</span><br><span class=\"line\"> Built:             Wed Feb 20 02:26:51 2019\t <span class=\"comment\">#该版本发布时间</span></span><br><span class=\"line\"> OS/Arch:           linux/amd64\t\t<span class=\"comment\">#系统信息</span></span><br><span class=\"line\"> Experimental:      <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">Server:\t\t\t\t\t\t\t\t<span class=\"comment\">#Docker Server版本信息</span></span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:          18.06.3-ce</span><br><span class=\"line\">  API version:      1.38 (minimum version 1.12)</span><br><span class=\"line\">  Go version:       go1.10.3</span><br><span class=\"line\">  Git commit:       d7080c1</span><br><span class=\"line\">  Built:            Wed Feb 20 02:28:17 2019</span><br><span class=\"line\">  OS/Arch:          linux/amd64</span><br><span class=\"line\">  Experimental:     <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\">#  docker info \t\t#查看docker系统的详细信息</span></span><br><span class=\"line\">Containers: 2\t\t\t\t\t\t<span class=\"comment\">#容器数量</span></span><br><span class=\"line\"> Running: 0\t\t\t\t\t\t\t<span class=\"comment\">#正在运行的容器数</span></span><br><span class=\"line\"> Paused: 0\t\t\t\t\t\t\t<span class=\"comment\">#暂停的容器数量</span></span><br><span class=\"line\"> Stopped: 2\t\t\t\t\t\t\t<span class=\"comment\">#停止的容器数量</span></span><br><span class=\"line\">Images: 1\t\t\t\t\t\t\t<span class=\"comment\">#镜像数量</span></span><br><span class=\"line\">Server Version: 18.06.3-ce\t\t<span class=\"comment\">#Docker Server版本信息</span></span><br><span class=\"line\">Storage Driver: overlay2\t\t<span class=\"comment\">#docker文件系统</span></span><br><span class=\"line\"> Backing Filesystem: xfs\t\t<span class=\"comment\">#docker文件系统是建立在本地文件系统之上，xfs为本地文件系统</span></span><br><span class=\"line\"> Supports d_type: <span class=\"literal\">true</span></span><br><span class=\"line\"> Native Overlay Diff: <span class=\"literal\">true</span></span><br><span class=\"line\">Logging Driver: json-file</span><br><span class=\"line\">Cgroup Driver: cgroupfs\t\t<span class=\"comment\">#Cgroups控制硬件资源系统</span></span><br><span class=\"line\">Plugins:\t\t\t\t\t<span class=\"comment\">#插件</span></span><br><span class=\"line\"> Volume: <span class=\"built_in\">local</span>\t\t\t\t<span class=\"comment\">#存储卷插件</span></span><br><span class=\"line\"> Network: bridge host macvlan null overlay\t<span class=\"comment\">#网络插件</span></span><br><span class=\"line\"> Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\t<span class=\"comment\">#日志插件</span></span><br><span class=\"line\">Swarm: inactive\t\t\t\t<span class=\"comment\">#Docker Swarm管理工具状态</span></span><br><span class=\"line\">Runtimes: runc</span><br><span class=\"line\">Default Runtime: runc</span><br><span class=\"line\">Init Binary: docker-init</span><br><span class=\"line\">containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e</span><br><span class=\"line\">runc version: a592beb5bc4c4092b1b1bac971afed27687340c5</span><br><span class=\"line\">init version: fec3683</span><br><span class=\"line\">Security Options:</span><br><span class=\"line\"> seccomp</span><br><span class=\"line\">  Profile: default</span><br><span class=\"line\">Kernel Version: 3.10.0-1127.13.1.el7.x86_64\t<span class=\"comment\">#系统内核版本</span></span><br><span class=\"line\">Operating System: CentOS Linux 7 (Core)\t\t<span class=\"comment\">#系统版本</span></span><br><span class=\"line\">OSType: linux\t\t\t\t\t\t\t\t<span class=\"comment\">#系统类型</span></span><br><span class=\"line\">Architecture: x86_64\t\t\t\t\t\t<span class=\"comment\">#系统结构</span></span><br><span class=\"line\">CPUs: 4\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">#CPU数量</span></span><br><span class=\"line\">Total Memory: 9.764GiB\t\t\t\t\t\t<span class=\"comment\">#内存大小</span></span><br><span class=\"line\">Name: wikifx2\t\t\t\t\t\t\t\t<span class=\"comment\">#主机名称</span></span><br><span class=\"line\">ID: SKJ4:YG5I:2S44:EMQM:PDH2:4EGG:NXLK:5HRF:LBLM:J6QX:5RXX:BZVJ</span><br><span class=\"line\">Docker Root Dir: /var/lib/docker\t\t<span class=\"comment\">#Docker根目录</span></span><br><span class=\"line\">Debug Mode (client): <span class=\"literal\">false</span>\t\t\t\t<span class=\"comment\">#Docker Clinet的Debug模块状态</span></span><br><span class=\"line\">Debug Mode (server): <span class=\"literal\">false</span>\t\t\t\t<span class=\"comment\">#Docker Server的Debug模块状态</span></span><br><span class=\"line\">Registry: https://index.docker.io/v1/\t<span class=\"comment\">#Docker仓库API地址</span></span><br><span class=\"line\">Labels:\t\t\t\t\t\t\t\t\t<span class=\"comment\">#最新版本</span></span><br><span class=\"line\">Experimental: <span class=\"literal\">false</span></span><br><span class=\"line\">Insecure Registries:</span><br><span class=\"line\"> 127.0.0.0/8</span><br><span class=\"line\">Registry Mirrors:\t\t\t\t\t\t<span class=\"comment\">#Docker仓库镜像加速地址</span></span><br><span class=\"line\"> https://51d27ab892014e7db8daac09c3d669ec.mirror.swr.myhuaweicloud.com/</span><br><span class=\"line\">Live Restore Enabled: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: bridge-nf-call-iptables is disabled</span><br><span class=\"line\">WARNING: bridge-nf-call-ip6tables is disabled</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># du -sh /var/lib/docker/*             #Docker的镜像及一些数据都在此目录下</span></span><br><span class=\"line\">16K\t/var/lib/docker/builder</span><br><span class=\"line\">56K\t/var/lib/docker/buildkit</span><br><span class=\"line\">24K\t/var/lib/docker/containerd</span><br><span class=\"line\">72K\t/var/lib/docker/containers</span><br><span class=\"line\">500K\t/var/lib/docker/image</span><br><span class=\"line\">44K\t/var/lib/docker/network</span><br><span class=\"line\">137M\t/var/lib/docker/overlay2</span><br><span class=\"line\">0\t/var/lib/docker/plugins</span><br><span class=\"line\">0\t/var/lib/docker/runtimes</span><br><span class=\"line\">0\t/var/lib/docker/swarm</span><br><span class=\"line\">0\t/var/lib/docker/tmp</span><br><span class=\"line\">0\t/var/lib/docker/trust</span><br><span class=\"line\">24K\t/var/lib/docker/volumes</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动第一个容器\"><a href=\"#启动第一个容器\" class=\"headerlink\" title=\"启动第一个容器\"></a>启动第一个容器</h2><p><code>docker run -d -p 80:80 nginx</code> （创建并运行一个容器） </p>\n<ul>\n<li> -d 放在后台 </li>\n<li> -p 端口映射 </li>\n<li>nginx docker镜像的名字</li>\n</ul>\n<h2 id=\"Docker管理\"><a href=\"#Docker管理\" class=\"headerlink\" title=\"Docker管理\"></a>Docker管理</h2><h3 id=\"Docker镜像管理\"><a href=\"#Docker镜像管理\" class=\"headerlink\" title=\"Docker镜像管理\"></a>Docker镜像管理</h3><p><code>docker search</code>：搜索镜像 建议： 1，优先考虑官方 2，stars数量多<br><code>docker pull (push)</code>：下载镜像<br><code>docker pull centos:7</code>：（没有指定版本，默认下载最新版）官方pull<br><code>docker login -u user -p passwd</code>：登录到镜像仓库地址，如果未指定，默认登录到 Docker Hub<br><code>docker logout</code>：登出该仓库<br><code>docker pull daocloud.io/huangzhichong/alpine-cn:latest</code>：私有仓库pull<br><code>docker push &lt;自己镜像仓库名&gt; nginx</code>：上传本地镜像nginx到镜像仓库中</p>\n<p><code>docker image ls</code>：查看本地镜像<br><code>docker image save abreto/alpine-cn &gt; alpine-cn.tar.gz</code>：导出镜像<br><code>docker image rm abreto/alpine-cn:latest</code>：删除镜像<br><code>docker image load &lt; alpine-cn.tar.gz</code>：导入镜像<br><code>docker tag nginx nginx:v3</code>：给nginx镜像加上标签，以便分类<br><code>docker rmi nginx:v3</code>：删除本地镜像，有时候可能会报错是因为该镜像被容器使用，所以要删除关联的容器或者去标签</p>\n<h3 id=\"Docker容器管理\"><a href=\"#Docker容器管理\" class=\"headerlink\" title=\"Docker容器管理\"></a>Docker容器管理</h3><p><code>docker run image_name</code>：容器启动<br><code>docker run ==== docker create  &amp;&amp; docker start</code>：相当于创建并启动容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --name centos7 centos:7 /bin/bash </span><br><span class=\"line\">常用：-it 分配交互式的终端 </span><br><span class=\"line\">* /bin/bash覆盖容器的初始命令</span><br><span class=\"line\">* -a stdin：指定标准输入输出内容类型，可选STDIN|STDOUT|STDERR三项</span><br><span class=\"line\">* -d：后台运行容器，并返回容器ID</span><br><span class=\"line\">* -P：将容器内的某端口映射到宿主机的任意端口</span><br><span class=\"line\">* -p：将容器内的某端口指定映射到宿主机的某端口</span><br><span class=\"line\">* -v：将宿主机的某目录指定映射到容器的某目录</span><br><span class=\"line\">* -i：以交互式运行容器，通常与-t同时使用</span><br><span class=\"line\">* -t：为该容器分配一个伪终端，通常与-i同时使用</span><br><span class=\"line\">* --name centos7：为容器指定一个名称为nginx</span><br><span class=\"line\">* --dns 8.8.8.8：指定容器使用的DNS服务器，默认不指定和宿主机一致</span><br><span class=\"line\">* --dns-search example.com：指定容器DNS搜索域名，默认和宿主机一致</span><br><span class=\"line\">* -h <span class=\"string\">&quot;localhost&quot;</span>：指定容器的hostname</span><br><span class=\"line\">* -e username=“ritchie”：设置环境变量</span><br><span class=\"line\">* --env-file[]：从指令读入环境变量</span><br><span class=\"line\">* --cpuset=<span class=\"string\">&quot;0-2&quot;</span> or --cpuset=<span class=\"string\">&quot;0,1,2&quot;</span>：绑定容器到指定CPU运行</span><br><span class=\"line\">* -m：设置容器使用的内存最大值</span><br><span class=\"line\">* --net=<span class=\"string\">&quot;bridge&quot;</span>：指定容器的网络连接类型，支持bridge/host/none/container，四种类型</span><br><span class=\"line\">* --<span class=\"built_in\">link</span>=[]：添加链接到另一容器</span><br><span class=\"line\">* --expose=[]:开放一个端口或一组端口</span><br></pre></td></tr></table></figure>\n<h4 id=\"资源限制\"><a href=\"#资源限制\" class=\"headerlink\" title=\"资源限制\"></a>资源限制</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-cpuset-cpus用于设置容器可以使用的 vCPU 核。</span><br><span class=\"line\">-c,--cpu-shares用于设置多个容器竞争 CPU 时，各个容器相对能分配到的 CPU 时间比例。</span><br><span class=\"line\">假设有三个正在运行的容器，这三个容器中的任务都是 CPU 密集型的。</span><br><span class=\"line\">第一个容器的 cpu 共享权值是 1024，其它两个容器的 cpu 共享权值是 512。</span><br><span class=\"line\">第一个容器将得到 50% 的 CPU 时间，而其它两个容器就只能各得到 25% 的 CPU 时间了。</span><br><span class=\"line\"></span><br><span class=\"line\">如果再添加第四个 cpu 共享值为 1024 的容器，每个容器得到的 CPU 时间将重新计算。</span><br><span class=\"line\">第一个容器的CPU 时间变为 33%，其它容器分得的 CPU 时间分别为 16.5%、16.5%、33%。</span><br><span class=\"line\">必须注意的是，这个比例只有在 CPU 密集型的任务执行时才有用。</span><br><span class=\"line\">在四核的系统上，假设有四个单进程的容器，它们都能各自使用一个核的 100% CPU 时间，不管它们的 cpu 共享权值是多少。</span><br><span class=\"line\">$ docker run --cpuset-cpus=<span class=\"string\">&quot;0-3&quot;</span> --cpu-shares=512 --memory=500m nginx:alpine</span><br></pre></td></tr></table></figure>\n<p><code>docker container ls</code>：查看正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class=\"line\">6fd1af39a2b2        nginx               <span class=\"string\">&quot;/docker-entrypoint.…&quot;</span>   56 seconds ago      Up 55 seconds       0.0.0.0:80-&gt;80/tcp   naughty_goldwasser</span><br><span class=\"line\">容器ID\t\t镜像名字\t\t初始命令\t\t创建时间\t\t状态\t  端口映射\t\t容器名称</span><br></pre></td></tr></table></figure>\n<p><code>docker ps</code>：查看正在运行的容器 -a 查看所有 -q 静默只显示id</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker inspect --format=<span class=\"string\">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> 6fd1af39a2b2：获取指定容器IP</span><br></pre></td></tr></table></figure>\n<p><code>docker container stop 6fd1af39a2b2</code>：停止指定容器<br><code>docker container start 9087b0a0896f</code>：启动指定容器<br><code>docker kill CONTAINER_ID</code>：杀死指定容器<br><code>docker exec -it 9087b0a0896f /bin/bash</code>：调试指定容器<br><code>docker rm &#39;docker ps -a -q&#39;</code>：删除所有容器<br><code>docker logs -f d0c3e9bafb35</code>：跟踪容器centos的日志输出</p>\n<p><strong>ps</strong>：docker容器内的第一个进程（初始命令）必须一直处于前台运行状态（必须夯住），否则这个容器就会处于退出状态！<br>生产环境：夯住&amp;&amp;启动服务</p>\n<h3 id=\"Docker网络管理\"><a href=\"#Docker网络管理\" class=\"headerlink\" title=\"Docker网络管理\"></a>Docker网络管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker port d0c3e9bafb35 <span class=\"comment\">#检查指定容器端口映射状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">-p hostPort:containerPort </span><br><span class=\"line\">指定映射（docker 会自动添加一条iptables规则来实现端口映射）</span><br><span class=\"line\"></span><br><span class=\"line\">-p  ip:hostPort:containerPort </span><br><span class=\"line\">多个容器都想使用80端口[前提主机存在多个ip]</span><br><span class=\"line\"></span><br><span class=\"line\">-p ip::containerPort</span><br><span class=\"line\">随机端口[由内核参数控制]</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># cat /etc/sysctl.conf | grep ip_local_port_range</span></span><br><span class=\"line\">net.ipv4.ip_local_port_range = 4000    65000</span><br><span class=\"line\">测试启动容器并随机进行端口映射</span><br><span class=\"line\">docker run -d -p 192.168.200.163::80 nginx</span><br><span class=\"line\">docker run -d -p 192.168.200.163::80 nginx</span><br><span class=\"line\">docker run -d -p 192.168.200.163::80 nginx</span><br><span class=\"line\"></span><br><span class=\"line\">[root@wikifx2 /var/lib/docker/overlay2]<span class=\"comment\"># netstat -lntup</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 192.168.200.163:4000    0.0.0.0:*               LISTEN      20395/docker-proxy  </span><br><span class=\"line\">tcp        0      0 192.168.200.163:4001    0.0.0.0:*               LISTEN      20510/docker-proxy  </span><br><span class=\"line\">tcp        0      0 192.168.200.163:4002    0.0.0.0:*               LISTEN      20630/docker-proxy </span><br><span class=\"line\"></span><br><span class=\"line\">-p hostPort:containerPort:udp</span><br><span class=\"line\">-p 10.0.0.100::53:udp 使用宿主机的10.0.0.100的这个ip地址的随机端口的udp协议映射容器的udp53端口</span><br><span class=\"line\">-p hostPort:containerPort -p hostPort:containerPort 一个容器映射多个端口</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker数据卷使用\"><a href=\"#Docker数据卷使用\" class=\"headerlink\" title=\"Docker数据卷使用\"></a>Docker数据卷使用</h3><p>数据卷的创建：<br>官方的解释是：数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS.</p>\n<ol>\n<li>UFS即UNIX文件系统的简称</li>\n<li>数据卷可以在容器之间共享和重用</li>\n<li>对数据卷的修改会立马生效</li>\n<li>对数据卷的更新，不会影响镜像</li>\n<li>数据卷默认会一直存在，即使容器被删除</li>\n<li>数据卷的使用，类似于Linux下对目录或文件进行mount，镜像中的被指定为挂载点的目录中的文件会被隐藏掉，能显示看的是挂载的数据卷</li>\n</ol>\n<p>docker run<br>-v 宿主机绝对目录:容器目录<br>-v 容器目录             #创建一个随机卷，来持久化容器的目录下的数据,可添加多个<br>-v 卷名:容器目录        #创建一个固定名字的卷，来持久化容器的目录下的数据<br>–volumes-from          #继承一个容器挂载所有的卷</p>\n<p><strong>注意：</strong>如果挂载的数据卷不存在，Docker会自动创建该目录。</p>\n<p>1.拷贝本机文件到容器中指定目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker container <span class=\"built_in\">cp</span> 本机目录或文件 &lt;容器名字或_ID&gt;:容器内目录</span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> jenkins.war 5c5aea2de2e4:/opt/</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker exec -it 5c5aea2de2e4 /bin/bash</span></span><br><span class=\"line\">root@5c5aea2de2e4:/<span class=\"comment\"># ls /opt</span></span><br><span class=\"line\">jenkins.war</span><br></pre></td></tr></table></figure>\n<p>2.挂载本机目录到容器内指定目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker rm -f `docker ps -q -a`</span></span><br><span class=\"line\">44e79e25ab11</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># echo &quot;`hostname -i`______`hostname`&quot; &gt; /opt/index.html   #本地目录写入首页文件</span></span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># ls /opt/</span></span><br><span class=\"line\">gitlab  index.html  nginx.tar.gz  rh</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker run -d -p 80:80 -v /opt/:/usr/share/nginx/html nginx:latest  #挂载本地目录到容器</span></span><br><span class=\"line\">f3e1daca1805a9b95d79bac52d9b17d58bf6529eecb89205fae42095cb758ca4</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># echo &quot;cakepanit.com&quot; &gt;&gt; /opt/index.html #更改本机首页文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker run --name nginx -d  -v /opt:/opt -v /var/log:/var/log nginx:alpine</span><br><span class=\"line\">$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d -v /opt/mysql/:/var/lib/mysql mysql:5.7</span><br></pre></td></tr></table></figure>\n<p>3.挂载容器数据卷</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker rm -f `docker ps -q -a`</span></span><br><span class=\"line\">f3e1daca1805</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker volume create pincheng #创建容器数据卷</span></span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker run -d -p 80:80 -v pincheng:/usr/share/nginx/html nginx:latest #若不存在则自动创建容器数据卷pincheng</span></span><br><span class=\"line\">b34ceac10eb50f11122df2c303cec951c5168e3b2e38a266f75057cfbd0bfbc4</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker volume ls #查看所有数据卷</span></span><br><span class=\"line\">DRIVER              VOLUME NAME</span><br><span class=\"line\"><span class=\"built_in\">local</span>               pincheng</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker volume inspect pincheng #查看数据卷详细信息</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;CreatedAt&quot;</span>: <span class=\"string\">&quot;2020-07-21T14:55:29+08:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Driver&quot;</span>: <span class=\"string\">&quot;local&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Labels&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;Mountpoint&quot;</span>: <span class=\"string\">&quot;/var/lib/docker/volumes/pincheng/_data&quot;</span>, <span class=\"comment\">#找到数据卷所在目录</span></span><br><span class=\"line\">        <span class=\"string\">&quot;Name&quot;</span>: <span class=\"string\">&quot;pincheng&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Options&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;Scope&quot;</span>: <span class=\"string\">&quot;local&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># cd /var/lib/docker/volumes/pincheng/_data</span></span><br><span class=\"line\">[root@wikifx2 /var/lib/docker/volumes/pincheng/_data]<span class=\"comment\"># ls</span></span><br><span class=\"line\">50x.html  index.html</span><br><span class=\"line\">[root@wikifx2 /var/lib/docker/volumes/pincheng/_data]<span class=\"comment\"># echo &quot;cakepanit.com `date`&quot; &gt; index.html</span></span><br></pre></td></tr></table></figure>\n<p>4.挂载相同的目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#挂载到之前容器相同目录</span></span><br><span class=\"line\">docker run -d -p 83:80 —volume-from 容器ID nginx:latest</span><br></pre></td></tr></table></figure>\n<p>参考文档：<a href=\"https://abcops.cn/254.html\">https://abcops.cn/254.html</a></p>\n","categories":["OPS"],"tags":["OPS","Docker"]},{"title":"Containerd与Docker","url":"/forward/d17c8c9b.html","content":"<h2 id=\"容器运行时\"><a href=\"#容器运行时\" class=\"headerlink\" title=\"容器运行时\"></a>容器运行时</h2><p>容器运行时（Container Runtime）是一种负责在操作系统层面创建和管理容器的软件工具或组件。它是容器化技术的核心组件之一，用于在容器内部运行应用程序，并提供隔离、资源管理和安全等功能。在Kubernetes中，容器运行时是负责管理和运行容器的组件。在过去，Docker是最常用的容器运行时，但随着时间的推移，containerd成为Kubernetes的另一个受欢迎的容器运行时选择。</p>\n<blockquote>\n<p>说明：自 kubernetes 1.24 版起，Dockershim 已从 Kubernetes 项目中移除。</p>\n</blockquote>\n<p><strong>容器运行时的主要任务包括：</strong></p>\n<ol>\n<li>容器创建和启动：容器运行时负责根据预定义的容器配置信息（如镜像、命令、环境变量等），创建并启动容器实例。</li>\n<li>容器文件系统管理：容器运行时处理容器的文件系统，负责将镜像的内容挂载到容器的文件系统，并在容器之间提供隔离。</li>\n<li>资源限制和管理：容器运行时可以根据用户或管理员定义的资源限制，管理容器对CPU、内存、磁盘等资源的使用。</li>\n<li>容器网络：容器运行时协助配置容器的网络，使得容器可以与其他容器或外部网络进行通信。</li>\n<li>安全性：容器运行时实施安全机制，确保容器之间和宿主机之间的隔离，并防止容器中的恶意行为影响其他容器或宿主机。</li>\n</ol>\n<p>在当今云原生技术的潮流中，容器化技术已经成为现代应用部署的主流选择。Kubernetes (K8s) 作为一种流行的容器编排系统，广泛应用于大规模的容器集群管理。而在K8s中，容器运行时的选择对于性能、可靠性和安全性都起着至关重要的作用。本文将对比两种常见的K8s容器运行时：Containerd和Docker，并探讨它们的异同点。</p>\n<h2 id=\"Docker：原先的翘楚\"><a href=\"#Docker：原先的翘楚\" class=\"headerlink\" title=\"Docker：原先的翘楚\"></a>Docker：原先的翘楚</h2><p>Docker作为一种早期的容器技术，它的出现颠覆了传统虚拟化方式，通过轻量级容器化的方式实现了应用的打包、交付和运行。Docker在容器技术的普及过程中发挥了关键作用，其用户友好的命令行工具和图形化界面让容器技术对广大开发者变得更加友好和易用。一度，Docker几乎成为容器化的代名词。然而，随着Kubernetes的兴起，Docker在K8s中的地位逐渐受到挑战。一方面，Docker作为一个完整的容器平台，包含了许多K8s并不需要的功能，导致资源浪费。另一方面，K8s本身提供了容器编排和调度的功能，与Docker重叠，造成了一定程度上的冲突。为了防止docker一家独大，docker当年的实现被拆分出了几个标准化的模块，标准化的目的是模块是可被其他实现替换的，不由任何一个厂商控制。Docker 由</p>\n<ul>\n<li>docker-client</li>\n<li>dockerd</li>\n<li>containerd</li>\n<li>docker-shim</li>\n<li>runc</li>\n</ul>\n<p>组成，所以containerd是docker的基础组件之一，docker 对容器的管理和操作基本都是通过 containerd 完成的。那么，containerd 是什么呢？</p>\n<h2 id=\"Containerd：K8s生态系统的标配\"><a href=\"#Containerd：K8s生态系统的标配\" class=\"headerlink\" title=\"Containerd：K8s生态系统的标配\"></a>Containerd：K8s生态系统的标配</h2><p>Containerd是由Docker团队开源的容器运行时，它专注于提供轻量级、高性能的容器运行环境。作为一个纯粹的容器运行时，Containerd被设计为更加符合K8s的架构和需求。它具有更小的资源占用，更快的启动时间，以及更好的性能表现。K8s社区认可了Containerd的优势，并将其作为K8s生态系统的标配容器运行时。Containerd 可以在宿主机中管理完整的容器生命周期：容器镜像的传输和存储、容器的执行和管理、存储和网络等。详细点说，Containerd 负责干下面这些事情：</p>\n<ul>\n<li>管理容器的生命周期(从创建容器到销毁容器)</li>\n<li>拉取/推送容器镜像</li>\n<li>存储管理(管理镜像及容器数据的存储)</li>\n<li>调用 runC 运行容器(与 runC 等容器运行时交互)</li>\n<li>管理容器网络接口及网络</li>\n</ul>\n<h2 id=\"容器运行时接口（CRI）\"><a href=\"#容器运行时接口（CRI）\" class=\"headerlink\" title=\"容器运行时接口（CRI）\"></a>容器运行时接口（CRI）</h2><p>容器运行时接口（Container Runtime Interface），简称 CRI。CRI 是一个插件接口，它使 kubelet 能够使用各种容器运行时，无需重新编译集群组件。你需要在集群中的每个节点上都有一个可以正常工作的容器运行时， 这样 kubelet 能启动 Pod 及其容器。容器运行时接口（CRI）是 kubelet 和容器运行时之间通信的主要协议。</p>\n<h2 id=\"Kubernetes-与-dockershim\"><a href=\"#Kubernetes-与-dockershim\" class=\"headerlink\" title=\"Kubernetes 与 dockershim\"></a>Kubernetes 与 dockershim</h2><p><img src=\"/images/pasted-330.png\" alt=\"Kubernetes 与 dockershim\"><br>从Kubernetes的架构图中，可以看到 Kubelet 下面还有一层Contianer runtime （容器运行时）是作为真正和OS去交互的，这个容器运行时是真正地管理容器的整个生命周期的以及拉取镜像等操作的。</p>\n<h2 id=\"当前支持的-CRI-后端\"><a href=\"#当前支持的-CRI-后端\" class=\"headerlink\" title=\"当前支持的 CRI 后端\"></a>当前支持的 CRI 后端</h2><p>我们最初在使用 Kubernetes 时通常会默认使用 Docker 作为容器运行时，其实从 Kubernetes 1.5 开始已经支持 CRI，通过 CRI 接口可以指定使用其它容器运行时作为 Pod 的后端，目前支持 CRI 的后端有：</p>\n<ul>\n<li>cri-o：cri-o 是 Kubernetes 的 CRI 标准的实现，并且允许 Kubernetes 间接使用 OCI 兼容的容器运行时，可以把 cri-o 看成 Kubernetes 使用 OCI 兼容的容器运行时的中间层。</li>\n<li>cri-containerd：基于 Containerd 的 Kubernetes CRI 实现，Containerd是一个进程,是CRI-Containerd的实现</li>\n<li>rkt：由 CoreOS 主推的用来跟 docker 抗衡的容器运行时</li>\n<li>frakti：基于 hypervisor 的 CRI</li>\n<li>docker：Kuberentes 最初就开始支持的容器运行时，目前还没完全从 kubelet 中解耦，Docker 公司同时推广了 OCI 标准</li>\n</ul>\n<h2 id=\"Dockershim\"><a href=\"#Dockershim\" class=\"headerlink\" title=\"Dockershim\"></a>Dockershim</h2><p>在 Kubernetes 提出 CRI 操作规范时，Docker刚拆出 containerd，并不支持 CRI 标准。由于当时Docker是容器技术最主流也是最权威的存在，Kuberentes虽然提出了CRI接口规范，但仍然需要去适配CRI与Docker的对接，因此它需要一个中间层或 shim 来对接 Kubelet 和 Docker 的 contianer runtime。于是 kubelet 中加入了 Dockershim （shim为临时、兼容的意思）。使用 docker 作为 runtime 时，实际启动一个容器的过程是：<br><img src=\"/images/pasted-331.png\" alt=\"Dockershim\"></p>\n<p>在这个阶段 dockershim组件在Kubelet 的代码中，这也就意味着Dockershim是由K8S组织进行开发和维护！由于Docker公司的版本发布K8S组织是无法控制和管理，所以每次Docker发布新的Release，K8S组织都要集中精力去快速地更新维护Dockershim。Kubernetes1.24版本正式删除和弃用dockershim。这件事情的本质是废弃了内置的 dockershim 功能，直接对接Containerd（后续已经支持 CRI）。这种方式更加标准，调用的链路更加的简洁。<br><img src=\"/images/pasted-332.png\" alt=\"Containerd\"></p>\n<h2 id=\"调用关系对比\"><a href=\"#调用关系对比\" class=\"headerlink\" title=\"调用关系对比\"></a>调用关系对比</h2><p>runtime 是 docker 时的调用链：</p>\n<ul>\n<li>调用关系为：kubelet –&gt; dockershim （在 kubelet 进程中） –&gt; dockerd –&gt; containerd<br>runtime 是 containerd 时的调用链：</li>\n<li>调用关系为：kubelet –&gt; cri plugin（在 containerd 进程中） –&gt; containerd</li>\n</ul>\n<p><strong>总结：</strong>从k8s的角度看，选择 Containerd 作为运行时组件更胜一筹，因为 Containerd 调用链更短，组件更少，更稳定，占用节点资源更少调用链</p>\n<p><strong>常用命令</strong><br>ctr 是 containerd 的一个客户端工具。crictl 是 CRI 兼容的容器运行时命令行接口，可以使用它来检查和调试 k8s 节点上的容器运行时和应用程序。ctr -v 输出的是 containerd 的版本，crictl -v 输出的是当前 k8s 的版本，从结果显而易见你可以认为 crictl 是用于 k8s 的。</p>\n<h2 id=\"两种容器引擎常用命令对比\"><a href=\"#两种容器引擎常用命令对比\" class=\"headerlink\" title=\"两种容器引擎常用命令对比\"></a>两种容器引擎常用命令对比</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>Docker</th>\n<th>ctr（containerd）</th>\n<th>crictl（kubernetes）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看运行的容器</td>\n<td>docker ps</td>\n<td>ctr task ls/ctr container ls</td>\n<td>crictl ps</td>\n</tr>\n<tr>\n<td>查看镜像</td>\n<td>docker images</td>\n<td>ctr image ls</td>\n<td>crictl images</td>\n</tr>\n<tr>\n<td>查看容器日志</td>\n<td>docker logs</td>\n<td>无</td>\n<td>crictl logs</td>\n</tr>\n<tr>\n<td>查看容器数据信息</td>\n<td>docker inspect</td>\n<td>ctr container info</td>\n<td>crictl inspect</td>\n</tr>\n<tr>\n<td>查看容器资源</td>\n<td>docker stats</td>\n<td>无</td>\n<td>crictl stats</td>\n</tr>\n<tr>\n<td>启动/关闭已有的容器</td>\n<td>docker start/stop</td>\n<td>ctr task start/kill</td>\n<td>crictl start/stop</td>\n</tr>\n<tr>\n<td>运行一个新的容器</td>\n<td>docker run</td>\n<td>ctr run</td>\n<td>无（最小单元为 pod）</td>\n</tr>\n<tr>\n<td>修改镜像标签</td>\n<td>docker tag</td>\n<td>ctr image tag</td>\n<td>无</td>\n</tr>\n<tr>\n<td>创建一个新的容器</td>\n<td>docker create</td>\n<td>ctr container create</td>\n<td>crictl create</td>\n</tr>\n<tr>\n<td>导入镜像</td>\n<td>docker load</td>\n<td>ctr image import</td>\n<td>无</td>\n</tr>\n<tr>\n<td>导出镜像</td>\n<td>docker save</td>\n<td>ctr image export</td>\n<td>无</td>\n</tr>\n<tr>\n<td>删除容器</td>\n<td>docker rm</td>\n<td>ctr container rm</td>\n<td>crictl rm</td>\n</tr>\n<tr>\n<td>删除镜像</td>\n<td>docker rmi</td>\n<td>ctr image rm</td>\n<td>crictl rmi</td>\n</tr>\n<tr>\n<td>拉取镜像</td>\n<td>docker pull</td>\n<td>ctr image pull</td>\n<td>ctictl pull</td>\n</tr>\n<tr>\n<td>推送镜像</td>\n<td>docker push</td>\n<td>ctr image push</td>\n<td>无</td>\n</tr>\n<tr>\n<td>在容器内部执行命令</td>\n<td>docker exec</td>\n<td>ctr task exec -t –exec-id xxx container sh</td>\n<td>crictl exec</td>\n</tr>\n<tr>\n<td>挂载容器</td>\n<td>docker attach</td>\n<td>无</td>\n<td>crictl attach</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>查看Pod列表</td>\n<td>无</td>\n<td>无</td>\n<td>crictl pods</td>\n</tr>\n<tr>\n<td>查看Pod详情</td>\n<td>无</td>\n<td>无</td>\n<td>crictl inspectp</td>\n</tr>\n<tr>\n<td>启动Pod</td>\n<td>无</td>\n<td>无</td>\n<td>crictl runp</td>\n</tr>\n<tr>\n<td>停止Pod</td>\n<td>无</td>\n<td>无</td>\n<td>crictl stop</td>\n</tr>\n</tbody></table>\n","categories":["OPS"],"tags":["Docker","Containerd"]},{"title":"Download","url":"/forward/download.html","content":"<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">System</th>\n<th align=\"center\">Passwd</th>\n<th align=\"center\">Links</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Cisco AnyConnect Secure Mobility Client</td>\n<td align=\"center\"><i class=\"fab fa-windows\"></i> <i class=\"fab fa-apple\"></i> <i class=\"fab fa-android\"></i> <i class=\"fab fa-linux\"></i></td>\n<td align=\"center\"><span class=\"hide-inline\"><button type=\"button\" class=\"hide-button\" style=\"\">See\n  </button><span class=\"hide-content\">pinc</span></span></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://pincheng.lanzoui.com/b015co9na\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>V2ray</td>\n<td align=\"center\"><i class=\"fab fa-apple\"></i> <i class=\"fab fa-android\"></i></td>\n<td align=\"center\"><span class=\"hide-inline\"><button type=\"button\" class=\"hide-button\" style=\"\">See\n  </button><span class=\"hide-content\">1f8p</span></span></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://pincheng.lanzoui.com/b016do2bi\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>PhotoshopCC 2020</td>\n<td align=\"center\"><i class=\"fab fa-windows\"></i></td>\n<td align=\"center\"><span class=\"hide-inline\"><button type=\"button\" class=\"hide-button\" style=\"\">See\n  </button><span class=\"hide-content\">jwc9</span></span></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://pan.baidu.com/s/1a9ekaTKEKTuFqo9h-rXMtg\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>Windows激活</td>\n<td align=\"center\"><i class=\"fab fa-windows\"></i></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://www.lanzoui.com/ib07xgh\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>Office install</td>\n<td align=\"center\"><i class=\"fab fa-windows\"></i></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://www.lanzoui.com/ib07xij\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>Wise Care 365</td>\n<td align=\"center\"><i class=\"fab fa-windows\"></i></td>\n<td align=\"center\"><span class=\"hide-inline\"><button type=\"button\" class=\"hide-button\" style=\"\">See\n  </button><span class=\"hide-content\">9kk4</span></span></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://pincheng.lanzouw.com/b0176279i\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>CleanMyMac X</td>\n<td align=\"center\"><i class=\"fab fa-apple\"></i></td>\n<td align=\"center\"><span class=\"hide-inline\"><button type=\"button\" class=\"hide-button\" style=\"\">See\n  </button><span class=\"hide-content\">i4ri</span></span></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://pincheng.lanzoui.com/b016dnz0j\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>VNCViewer</td>\n<td align=\"center\"><i class=\"fab fa-apple\"></i></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://www.lanzoui.com/ib07yqd\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>Termius</td>\n<td align=\"center\"><i class=\"fab fa-apple\"></i></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://www.lanzoui.com/ib0ql5i\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>IObit Uninstaller</td>\n<td align=\"center\"><i class=\"fab fa-windows\"></i></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://www.lanzoui.com/ib2qg2h\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>Another Redis Desktop Manager</td>\n<td align=\"center\"><i class=\"fab fa-windows\"></i> <i class=\"fab fa-apple\"></i> <i class=\"fab fa-linux\"></i></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://github.com/qishibo/AnotherRedisDesktopManager/releases\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n<tr>\n<td>PrettyZoo</td>\n<td align=\"center\"><i class=\"fab fa-windows\"></i> <i class=\"fab fa-apple\"></i> <i class=\"fab fa-linux\"></i></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a class=\"btn-beautify outline blue larger\" href=\"https://github.com/vran-dev/PrettyZoo/releases\" \n  title=\"Download\"><i class=\"fas fa-cloud-download-alt\"></i><span>Download</span></a></td>\n</tr>\n</tbody></table>\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">免责声明</summary><div class=\"toggle-content\"><p>以上的所有软件和资料仅供个人学习和研究使用，不得用于任何商业用途。如有侵犯您商标权、著作权或其他合法权利的，请按照网站右侧提供的联系方式联系站长并提供相关证明材料，站长将在第一时间对此进行核实并处理。</p>\n<p>—translation—<br>All the above software and materials are for personal study and research only, and shall not be used for any commercial purpose. In case of infringement of your trademark, copyright or other legal rights, please contact the webmaster according to the contact information provided on the right side of the website and provide relevant supporting materials. The webmaster will verify and deal with it at the first time.</p>\n</div></details>","tags":["Download"]},{"title":"Docker-手动构建dotnet镜像","url":"/forward/882d9505.html","content":"<h2 id=\"docker环境\"><a href=\"#docker环境\" class=\"headerlink\" title=\"docker环境\"></a>docker环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker image ls</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">nginx               latest              0901fa9da894        10 days ago         132MB</span><br><span class=\"line\">nginx               latest              0901fa9da894        10 days ago         132MB</span><br><span class=\"line\">alpine              latest              a24bb4013296        7 weeks ago         5.57MB</span><br><span class=\"line\">centos              7                   b5b4d78bc90c        2 months ago        203MB</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker run -it a24bb4013296</span></span><br><span class=\"line\">/ <span class=\"comment\"># </span></span><br><span class=\"line\">/ <span class=\"comment\"># [root@wikifx2 ~]# ctrl + p &amp;&amp; ctrl + q #临时退出</span></span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">173daf6285ba        a24bb4013296        <span class=\"string\">&quot;/bin/sh&quot;</span>           9 seconds ago       Up 8 seconds                            tender_ramanujan</span><br><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\">#  docker attach 173daf6285ba #再次进入</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看源：\"><a href=\"#查看源：\" class=\"headerlink\" title=\"查看源：\"></a>查看源：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/ <span class=\"comment\"># cat /etc/apk/repositories </span></span><br><span class=\"line\">http://dl-cdn.alpinelinux.org/alpine/v3.12/main</span><br><span class=\"line\">http://dl-cdn.alpinelinux.org/alpine/v3.12/community</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改源：\"><a href=\"#修改源：\" class=\"headerlink\" title=\"修改源：\"></a>修改源：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/ <span class=\"comment\"># sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apk/repositories </span></span><br><span class=\"line\">/ <span class=\"comment\"># cat /etc/apk/repositories </span></span><br><span class=\"line\">http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.12/main</span><br><span class=\"line\">http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.12/community</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建缓存：\"><a href=\"#构建缓存：\" class=\"headerlink\" title=\"构建缓存：\"></a>构建缓存：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apk update</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装依赖：\"><a href=\"#安装依赖：\" class=\"headerlink\" title=\"安装依赖：\"></a>安装依赖：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/ <span class=\"comment\"># apk add libstdc++ icu libintl</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-NET-Core-Runtime\"><a href=\"#安装-NET-Core-Runtime\" class=\"headerlink\" title=\"安装 .NET Core Runtime\"></a>安装 .NET Core Runtime</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/ <span class=\"comment\"># wget https://download.visualstudio.microsoft.com/download/pr/34014520-3b9c-43a0-bc79-a5323655e235/fda26e0a67b9cf21ad648ff0c6259668/aspnet</span></span><br><span class=\"line\">core-runtime-3.1.6-linux-musl-x64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">/ <span class=\"comment\"># mkdir -p /app/dotnet</span></span><br><span class=\"line\">/ <span class=\"comment\"># tar -xf aspnetcore-runtime-3.1.6-linux-musl-x64.tar.gz -C /app/dotnet/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写启动脚本：\"><a href=\"#编写启动脚本：\" class=\"headerlink\" title=\"编写启动脚本：\"></a>编写启动脚本：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /wwwroot/ &amp;&amp; /app/dotnet/dotnet WebApplication5.dll --urls http://0.0.0.0:8000</span><br><span class=\"line\"><span class=\"built_in\">tail</span> -f /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">docker commit a35e206825ed wikifx_dotnet:v4   <span class=\"comment\">#存储为镜像</span></span><br><span class=\"line\">docker image save  7a4ab67f3701 &gt; wikifx_dotnetv4.tar.gz  <span class=\"comment\">#导出</span></span><br></pre></td></tr></table></figure>\n<p>宿主机dotnet写的hello word项目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx2 ~]<span class=\"comment\"># tree /wwwroot/</span></span><br><span class=\"line\">/wwwroot/</span><br><span class=\"line\">├── a624669980.tar.gz</span><br><span class=\"line\">├── appsettings.Development.json</span><br><span class=\"line\">├── appsettings.json</span><br><span class=\"line\">├── WebApplication5</span><br><span class=\"line\">├── WebApplication5.deps.json</span><br><span class=\"line\">├── WebApplication5.dll</span><br><span class=\"line\">├── WebApplication5.pdb</span><br><span class=\"line\">├── WebApplication5.runtimeconfig.json</span><br><span class=\"line\">└── web.config</span><br><span class=\"line\"></span><br><span class=\"line\">0 directories, 9 files</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动：\"><a href=\"#启动：\" class=\"headerlink\" title=\"启动：\"></a>启动：</h2><p><code>docker run -it -d -p 80:8000 -v /wwwroot:/wwwroot 7a4ab67f3701 /bin/sh /etc/init.sh</code><br><img src=\"/images/img-164.png\" alt=\"test\"></p>\n","categories":["OPS"],"tags":["OPS","Docker"]},{"title":"ELK-Filebeat7.4.0单机多实例","url":"/forward/131c756.html","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>业务需求，已经转成json格式的nginx日志直接通过filebeat传入了Elasticsearch中，而其他程序日志需要通过filebeat传入logstash进行二次过滤。就需要解决多output的问题。而根据<a href=\"https://www.elastic.co/guide/en/beats/filebeat/7.x/configuring-output.html\">官方文档</a>:</p>\n<blockquote>\n<p>You configure Filebeat to write to a specific output by setting options in the Outputs section of the <code>filebeat.yml</code> config file. Only a single output may be defined.</p>\n</blockquote>\n<p>可知<code>filebeat.yml</code>中output有且只能有一个。当然你可以在<code>filebeat.yml</code>input模块中添加多个tags，并传递给logstash，并在logstash上通过不同的标签区分后传入不同的index中。</p>\n<h2 id=\"配置单机多实例\"><a href=\"#配置单机多实例\" class=\"headerlink\" title=\"配置单机多实例\"></a>配置单机多实例</h2><h3 id=\"filebeat介绍\"><a href=\"#filebeat介绍\" class=\"headerlink\" title=\"filebeat介绍\"></a>filebeat介绍</h3><p>logstash 和filebeat都具有日志收集功能，因为filebeat由Golang编写相较于logstash更轻量，占用资源更少。所以决定在同一台机器上启动两个filebeat实例，分别用于拉取不同程序日志。</p>\n<h3 id=\"分析原版filebeat的systemd启动脚本：\"><a href=\"#分析原版filebeat的systemd启动脚本：\" class=\"headerlink\" title=\"分析原版filebeat的systemd启动脚本：\"></a>分析原版filebeat的systemd启动脚本：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /usr/lib/systemd/system/filebeat.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Filebeat sends <span class=\"built_in\">log</span> files to Logstash or directly to Elasticsearch.</span><br><span class=\"line\">Documentation=https://www.elastic.co/products/beats/filebeat</span><br><span class=\"line\">Wants=network-online.target</span><br><span class=\"line\">After=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=<span class=\"string\">&quot;BEAT_LOG_OPTS=-e&quot;</span></span><br><span class=\"line\">Environment=<span class=\"string\">&quot;BEAT_CONFIG_OPTS=-c /etc/filebeat/filebeat.yml&quot;</span></span><br><span class=\"line\">Environment=<span class=\"string\">&quot;BEAT_PATH_OPTS=-path.home /usr/share/filebeat -path.config /etc/filebeat -path.data /var/lib/filebeat -path.logs /var/log/filebeat&quot;</span></span><br><span class=\"line\">ExecStart=/usr/share/filebeat/bin/filebeat <span class=\"variable\">$BEAT_LOG_OPTS</span> <span class=\"variable\">$BEAT_CONFIG_OPTS</span> <span class=\"variable\">$BEAT_PATH_OPTS</span></span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<h3 id=\"结合filebeat-yml可知：\"><a href=\"#结合filebeat-yml可知：\" class=\"headerlink\" title=\"结合filebeat.yml可知：\"></a>结合filebeat.yml可知：</h3><ul>\n<li>filebeat并不需要占用独立端口</li>\n<li>依赖/etc/filebeat/filebeat.yml作为程序配置文件</li>\n<li>依赖/var/lib/filebeat目录记录上次抓取指定日志的偏移量和时间戳</li>\n<li>其他目录：<ul>\n<li>/usr/share/filebeat #filebeat程序家目录</li>\n<li>/var/log/filebeat  #filebeat日志目录</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分别创建以上文件-目录\"><a href=\"#分别创建以上文件-目录\" class=\"headerlink\" title=\"分别创建以上文件/目录\"></a>分别创建以上文件/目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/log/filebeat2</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/lib/filebeat2</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/filebeat/filebeat_logstash.yml &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">filebeat.inputs:</span><br><span class=\"line\">- <span class=\"built_in\">type</span>: <span class=\"built_in\">log</span></span><br><span class=\"line\">  enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">    - /var/applogs/*/*.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\">  multiline.pattern: <span class=\"string\">&#x27;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span></span><br><span class=\"line\">  multiline.negate: <span class=\"literal\">true</span></span><br><span class=\"line\">  multiline.match: after</span><br><span class=\"line\"></span><br><span class=\"line\">filebeat.config.modules:</span><br><span class=\"line\">  path: <span class=\"variable\">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class=\"line\">    reload.enabled: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">setup.template.settings:</span><br><span class=\"line\">  index.number_of_shards: 1</span><br><span class=\"line\"></span><br><span class=\"line\">setup.kibana:</span><br><span class=\"line\"></span><br><span class=\"line\">output.logstash:</span><br><span class=\"line\">  hosts: [<span class=\"string\">&quot;172.19.111.144:8080&quot;</span>]</span><br><span class=\"line\">  </span><br><span class=\"line\">processors:</span><br><span class=\"line\">  - add_host_metadata:</span><br><span class=\"line\">        netinfo.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">        cache.ttl: 5m</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">修改systemd启动脚本：</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /usr/lib/systemd/system/filebeat_logstash.service &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Filebeat sends <span class=\"built_in\">log</span> files to Logstash or directly to Elasticsearch.</span><br><span class=\"line\">Documentation=https://www.elastic.co/products/beats/filebeat</span><br><span class=\"line\">Wants=network-online.target</span><br><span class=\"line\">After=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=<span class=\"string\">&quot;BEAT_LOG_OPTS=-e&quot;</span></span><br><span class=\"line\">Environment=<span class=\"string\">&quot;BEAT_CONFIG_OPTS=-c /etc/filebeat/filebeat_logstash.yml&quot;</span></span><br><span class=\"line\">Environment=<span class=\"string\">&quot;BEAT_PATH_OPTS=-path.home /usr/share/filebeat -path.logs /var/log/filebeat2 -path.data /var/lib/filebeat2&quot;</span></span><br><span class=\"line\">ExecStart=/usr/share/filebeat/bin/filebeat <span class=\"variable\">$BEAT_LOG_OPTS</span> <span class=\"variable\">$BEAT_CONFIG_OPTS</span> <span class=\"variable\">$BEAT_PATH_OPTS</span></span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n","categories":["OPS"],"tags":["OPS","ELK"]},{"title":"Docker安装Skywalking","url":"/forward/d063782.html","content":"<h2 id=\"采用H2部署oap\"><a href=\"#采用H2部署oap\" class=\"headerlink\" title=\"采用H2部署oap\"></a>采用H2部署oap</h2><p>skywalking默认的数据存储方式即是内存数据库H2。该方式用于方便体验skywalking，但不推荐使用在生产环境。</p>\n<p>运行容器命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --name oap-h2 --restart always -d \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">-e TZ=Asia/Shanghai \\</span><br><span class=\"line\">-p 12800:12800 \\</span><br><span class=\"line\">-p 11800:11800 \\</span><br><span class=\"line\">-e SW_STORAGE=h2 \\</span><br><span class=\"line\">apache/skywalking-oap-server:8.3.0-es7</span><br></pre></td></tr></table></figure>\n<h2 id=\"采用MySQL部署oap\"><a href=\"#采用MySQL部署oap\" class=\"headerlink\" title=\"采用MySQL部署oap\"></a>采用MySQL部署oap</h2><p>需要注意原生的docker镜像中没有mysql驱动，所以需要手动上传mysql的驱动到/skywalking/oap-libs/下，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">cp</span> mysql-connector-java-8.0.19.jar e2ea45eb7118124cf1d89bdf4eac1e798f857d1a2b6d7b43416bf30a57d2af6b:/skywalking/oap-libs/mysql-connector-java-8.0.19.jar</span><br></pre></td></tr></table></figure>\n<p>下面是运行容器命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --name oap-mysql --restart always -d \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">-e TZ=Asia/Shanghai -p 12800:12800 -p 11800:11800 \\</span><br><span class=\"line\">-e SW_STORAGE=mysql \\</span><br><span class=\"line\">-e SW_JDBC_URL=jdbc:mysql://192.168.101.204:3306/swtest \\</span><br><span class=\"line\">-e SW_DATA_SOURCE_USER=root \\</span><br><span class=\"line\">-e SW_DATA_SOURCE_PASSWORD=12345678 \\</span><br><span class=\"line\">apache/skywalking-oap-server:8.3.0-es7</span><br></pre></td></tr></table></figure>\n<h2 id=\"采用ES部署oap\"><a href=\"#采用ES部署oap\" class=\"headerlink\" title=\"采用ES部署oap\"></a>采用ES部署oap</h2><p>注意ES分为 es6和es7两个版本，所以在配置SW_STORAGE参数时需要注意区分elasticsearch7或者elasticsearch</p>\n<p>下面是运行容器命令：ES7</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull apache/skywalking-oap-server:8.4.0-es7</span><br><span class=\"line\">docker pull apache/skywalking-ui:8.4.0</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name skywalking-oap-server --restart always -d -p 11800:11800 -p 12800:12800 -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">-e SW_STORAGE=elasticsearch7 \\</span><br><span class=\"line\">-e SW_NAMESPACE=<span class=\"string\">&quot;sw_test&quot;</span> \\</span><br><span class=\"line\">-e SW_STORAGE_ES_CLUSTER_NODES=192.168.200.148:9200 \\</span><br><span class=\"line\">-e SW_ES_USER=<span class=\"string\">&quot;elastic&quot;</span> \\</span><br><span class=\"line\">-e SW_ES_PASSWORD=<span class=\"string\">&quot;elastic1234&quot;</span> \\</span><br><span class=\"line\">b4eaf1c3054e</span><br></pre></td></tr></table></figure>\n<p>4、运行skywalking-ui容器<br>运行容器命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name skywalking-ui --restart=always \\</span><br><span class=\"line\">-e TZ=Asia/Shanghai \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-e SW_OAP_ADDRESS=192.168.1.55:12800 \\</span><br><span class=\"line\">5f4d7292cd19</span><br></pre></td></tr></table></figure>\n<p>PS：oap运行的很多参数详见：<code>apache-skywalking-apm-bin\\config\\application.yml</code> 配置文件</p>\n","categories":["OPS"],"tags":["OPS","Skywalking","链路追踪"]},{"title":"ELK-Logstah 定义管道解析Nginx日志传递至Elasticsearch","url":"/forward/47eea66c.html","content":"<p>通过filebeat读取日志后传送至logstash进行处理，处理完成再保存在elasticsearch中。其中最重要的一步就是logstash的处理，我们需要根据日志的格式编写相关的匹配代码，以便logstash进行匹配处理。</p>\n<p>在这里我使用过滤插件中的Grok插件，具体技术文档请点击以下链接：<br><a href=\"https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html\">https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html</a></p>\n<p>在编写grok捕获规则时，可以使用以下网站进行辅助：<br><a href=\"https://grokdebug.herokuapp.com/\">https://grokdebug.herokuapp.com/</a></p>\n<p>相关的语法可以参考以下GitHub页面：<br><a href=\"https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns\">https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns</a></p>\n<p>Logstash Reference [7.12] » Filter plugins<br><a href=\"https://www.elastic.co/guide/en/logstash/current/filter-plugins.html\">https://www.elastic.co/guide/en/logstash/current/filter-plugins.html</a></p>\n<h2 id=\"nginx日志分析\"><a href=\"#nginx日志分析\" class=\"headerlink\" title=\"nginx日志分析\"></a>nginx日志分析</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $http_host $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$upstream_addr&quot; &quot;$upstream_status&quot; $upstream_cache_status &quot;$upstream_http_content_type&quot; &quot;$upstream_response_time&quot; &gt; $request_time&#x27;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">110.110.110.110 - - [18/Jun/2020:18:36:51 +0800] &quot;GET /forward/61316209.html HTTP/1.1&quot; cakepanit.com 200 158441 &quot;https://cakepanit.com/&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36&quot; &quot;120.120.120.120&quot; &quot;127.0.0.1:8080&quot; &quot;200&quot; MISS &quot;text/html; charset=UTF-8&quot; &quot;1.884&quot; &gt; 2.189</span><br></pre></td></tr></table></figure>\n\n<p>字段分析：<br>用以记录客户端的ip地址:<br><code>$remote_addr 110.110.110.110</code></p>\n<p>用以记录短破折号，无意义<code>-</code></p>\n<p>用来记录客户端用户名称(Nginx用户认证):<br><code>$remote_user -</code></p>\n<p>用来记录访问时间与时区:<br><code>$time_local [18/Jun/2020:18:36:51 +0800]</code></p>\n<p>用来记录请求的url与http协议:<br><code>$request &quot;GET /forward/61316209.html  HTTP/1.1&quot;</code></p>\n<p>用来记录请求地址：<br><code>$http_host cakepanit.com</code></p>\n<p>用来记录请求状态成功是200:<br><code>$status 200</code></p>\n<p>记录发送给客户端文件主体内容大小:<br><code>$body_bytes_sent 158441</code></p>\n<p>用来记录从那个页面链接访问过来的:<br><code>$http_referer &quot;https://cakepanit.com/&quot;</code></p>\n<p>记录客户端浏览器的相关信息:<br><code>$http_user_agent &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36&quot;</code></p>\n<p>记录前端代理时HTTP 客户端的真实 IP<br><code>$http_x_forwarded_for &quot;-&quot;</code></p>\n<p>记录后台upstream的地址，即真正提供服务的主机地址(可能为多个)<br><code>$upstream_addr &quot;127.0.0.1:8080&quot;</code></p>\n<p>记录upstream状态(可能为多个)<br><code>$upstream_status &quot;200&quot;</code></p>\n<p>记录是否命中缓存<br><code>$upstream_cache_status MISS</code></p>\n<p>记录页面类型<br><code>$upstream_http_content_type &quot;text/html; charset=UTF-8&quot;</code></p>\n<p>记录从Nginx向后端建立连接开始到接受完数据然后关闭连接为止的时间/s(可能为多个)<br><code>$upstream_response_time &quot;1.884&quot;</code></p>\n<p>记录从接受用户请求的第一个字节到发送完响应数据的时间/s<br><code>$request_time 2.189</code></p>\n<h2 id=\"筛选处理\"><a href=\"#筛选处理\" class=\"headerlink\" title=\"筛选处理\"></a>筛选处理</h2><p>输入和输出在logstash配置中是很简单的一步，而对数据进行匹配处理则显得异常复杂。匹配当行日志是入门水平需要掌握的，而多行甚至不规则的日志则可能需要ruby的协助。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">%&#123;IPORHOST:client_ip&#125; - %&#123;USER:auth&#125; \\[%&#123;HTTPDATE:timestamp&#125;\\] \\&quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:http_version&#125;)?|-)\\&quot; (%&#123;IPORHOST:domain&#125;|%&#123;URIHOST:domain&#125;|-) %&#123;NUMBER:response&#125; %&#123;NUMBER:bytes&#125; \\&quot;(%&#123;GREEDYDATA:referrer&#125;)\\&quot; \\&quot;(%&#123;GREEDYDATA:user_agent&#125;)\\&quot; \\&quot;(%&#123;IP:x_forword&#125;|%&#123;GREEDYDATA:x_forword&#125;)\\&quot; \\&quot;(%&#123;GREEDYDATA:upstream_host&#125;)\\&quot; \\&quot;(%&#123;GREEDYDATA:upstream_host_status&#125;)\\&quot; (%&#123;WORD:upstream_cache_status&#125;|-) \\&quot;%&#123;GREEDYDATA:upstream_content_type&#125;\\&quot; \\&quot;(%&#123;GREEDYDATA:upstream_response_time&#125;)\\&quot; &gt; %&#123;NUMBER:request_time:<span class=\"built_in\">float</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入和输出在logstash配置中是很简单的一步，而对数据进行匹配处理则显得异常复杂。匹配当行日志是入门水平需要掌握的，而多行甚至不规则的日志则可能需要ruby的协助。<br><img src=\"/images/pasted-26.png\" alt=\"elk\"></p>\n<table>\n<thead>\n<tr>\n<th>grok-patterns</th>\n<th>解释</th>\n<th>适用于</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IPORHOST (?:%{HOSTNAME}&#124;%{IP})</td>\n<td>匹配主机名或IP</td>\n<td>匹配客户端ip或主机名</td>\n</tr>\n<tr>\n<td>USER %{USERNAME}</td>\n<td>匹配用户名</td>\n<td>匹配用户名</td>\n</tr>\n<tr>\n<td>HTTPDATE %{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} %{INT}</td>\n<td>匹配带时区的日期</td>\n<td>匹配http请求头中的时间</td>\n</tr>\n<tr>\n<td>WORD \\b\\w+\\b</td>\n<td>匹配一个单词</td>\n<td>匹配请求类型、缓存状态码</td>\n</tr>\n<tr>\n<td>NOTSPACE \\S+</td>\n<td>匹配非空白就匹配(没有空格的一段)</td>\n<td>匹配请求URL</td>\n</tr>\n<tr>\n<td>NUMBER (?:%{BASE10NUM})</td>\n<td>匹配十进制数字(包括整数、小数)</td>\n<td>匹配http版本、状态码、发送字节数、响应时间</td>\n</tr>\n<tr>\n<td>URIHOST %{IPORHOST}(?::%{POSINT:port})?</td>\n<td>匹配（主机名或IP）或（带端口的域名或ip）</td>\n<td>匹配请求的域名</td>\n</tr>\n<tr>\n<td>QS %{QUOTEDSTRING}</td>\n<td>匹配用双引号包裹的数据</td>\n<td>匹配来源页面、客户端UA</td>\n</tr>\n</tbody></table>\n<h2 id=\"logstash\"><a href=\"#logstash\" class=\"headerlink\" title=\"logstash\"></a>logstash</h2><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 /application]<span class=\"comment\"># wget https://repo.huaweicloud.com/logstash/7.4.0/logstash-7.4.0.tar.gz</span></span><br><span class=\"line\">[root@es-node03 /application]<span class=\"comment\"># tar -xf logstash-7.4.0.tar.gz </span></span><br><span class=\"line\">[root@es-node03 /application]<span class=\"comment\"># ls</span></span><br><span class=\"line\">logstash-7.4.0  logstash-7.4.0.tar.gz</span><br><span class=\"line\">[root@es-node03 /application]<span class=\"comment\"># cd logstash-7.4.0/</span></span><br></pre></td></tr></table></figure>\n\n<p>里面应该有一个有配置监听信息的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 /application/logstash-7.4.0]<span class=\"comment\"># cat config/logstash-sample.conf </span></span><br><span class=\"line\"><span class=\"comment\"># Sample Logstash configuration for creating a simple</span></span><br><span class=\"line\"><span class=\"comment\"># Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span></span><br><span class=\"line\"></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [<span class=\"string\">&quot;http://localhost:9200&quot;</span>]</span><br><span class=\"line\">    index =&gt; <span class=\"string\">&quot;%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">#user =&gt; &quot;elastic&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">#password =&gt; &quot;changeme&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>新建自己的配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">  port =&gt; 8888</span><br><span class=\"line\">  codec=&gt; plain&#123;charset=&gt;<span class=\"string\">&quot;UTF-8&quot;</span>&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">     mutate &#123;</span><br><span class=\"line\">         add_field =&gt; &#123;<span class=\"string\">&quot;[@metadata][target_index]&quot;</span> =&gt; <span class=\"string\">&quot;&quot;</span>&#125;</span><br><span class=\"line\">         remove_tag =&gt; [<span class=\"string\">&quot;beats_input_codec_plain_applied&quot;</span>]</span><br><span class=\"line\">         remove_field =&gt; [<span class=\"string\">&quot;[agent][type]&quot;</span>,<span class=\"string\">&quot;[agent][version]&quot;</span>,<span class=\"string\">&quot;[log][offset]&quot;</span>,<span class=\"string\">&quot;[log][file][path]&quot;</span>,<span class=\"string\">&quot;[input][type]&quot;</span>,<span class=\"string\">&quot;[agent][ephemeral_id]&quot;</span>,<span class=\"string\">&quot;[agent][id]&quot;</span>,<span class=\"string\">&quot;[agent][hostname]&quot;</span>,<span class=\"string\">&quot;[ecs][version]&quot;</span>]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"string\">&quot;k8s_access&quot;</span> <span class=\"keyword\">in</span> [tags] &#123;</span><br><span class=\"line\">         grok &#123;</span><br><span class=\"line\">            match =&gt; &#123; <span class=\"string\">&quot;message&quot;</span> =&gt; <span class=\"string\">&quot;%&#123;IPORHOST:client_ip&#125; - %&#123;USER:auth&#125; \\[%&#123;HTTPDATE:timestamp&#125;\\] \\&quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:http_version&#125;)?|-)\\&quot; (%&#123;IPORHOST:domain&#125;|%&#123;URIHOST:domain&#125;|-) %&#123;NUMBER:response&#125; %&#123;NUMBER:bytes&#125; \\&quot;(%&#123;GREEDYDATA:referrer&#125;)\\&quot; \\&quot;(%&#123;GREEDYDATA:user_agent&#125;)\\&quot; \\&quot;(%&#123;IP:x_forword&#125;|%&#123;GREEDYDATA:x_forword&#125;)\\&quot; \\&quot;(%&#123;GREEDYDATA:upstream_host&#125;)\\&quot; \\&quot;(%&#123;GREEDYDATA:upstream_host_status&#125;)\\&quot; (%&#123;WORD:upstream_cache_status&#125;|-) \\&quot;%&#123;GREEDYDATA:upstream_content_type&#125;\\&quot; \\&quot;(%&#123;GREEDYDATA:upstream_response_time&#125;)\\&quot; &gt; %&#123;NUMBER:request_time:float&#125;&quot;</span> &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"built_in\">date</span> &#123;</span><br><span class=\"line\">             match =&gt; [ <span class=\"string\">&quot;timestamp&quot;</span> , <span class=\"string\">&quot;dd/MMM/YYYY:HH:mm:ss Z&quot;</span> ]</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         mutate &#123;</span><br><span class=\"line\">             update =&gt; &#123;<span class=\"string\">&quot;[@metadata][target_index]&quot;</span> =&gt; <span class=\"string\">&quot;k8s_access-%&#123;+YYYY.MM&#125;-%&#123;+YYYY.ww&#125;&quot;</span>&#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">     index =&gt; <span class=\"string\">&quot;%&#123;[@metadata][target_index]&#125;&quot;</span></span><br><span class=\"line\">     hosts =&gt; [<span class=\"string\">&quot;es-cn-0pp16xvo90009zf49.elasticsearch.aliyuncs.com:9200&quot;</span>]</span><br><span class=\"line\">     user =&gt;elastic</span><br><span class=\"line\">     password =&gt;Logs1234</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>date：将日志中的时间作为logstash处理的时间</li>\n</ul>\n<p>配置文件中还有以下这句判断：<code>if &quot;wikibit_ngx_access&quot; in [tags]</code></p>\n<p>因为各种各样的日志都通过logstash分析，所以在filebeat添加了自定义tags以便区分不同的log：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@web conf.d]<span class=\"comment\"># cat /etc/filebeat/filebeat.yml</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">########################################</span></span><br><span class=\"line\">- input_type: <span class=\"built_in\">log</span></span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - /var/log/nginx/access.log</span><br><span class=\"line\">  tags: wikibit_ngx_access</span><br><span class=\"line\"><span class=\"comment\">########################################</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>处理数字类型字段<br>管道配置文件中，匹配出的字段默认为文本类型，如果有数字类型的字段（比如响应时间）需要拿来做排序查询。只需要在匹配时在字段末尾加入<code>:float | :int</code>。那么es建立mapping时会给指定类型建立成数字类型。</li>\n</ul>\n<p><img src=\"/images/pasted-59.png\" alt=\"int\"></p>\n<p>完成上面这一切后，请通过以下命令测试并重新加载logstash和：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@web conf.d]<span class=\"comment\"># /application/logstash-7.4.0/bin/logstash -f config/wikibit_ngx.conf</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"/images/pasted-27.png\" alt=\"elk\"></p>\n<blockquote>\n<p>编写匹配代码是最麻烦的一步，要经过很多次的调整才能完美匹配。</p>\n</blockquote>\n<p>特别鸣谢资深软件系统架构师：<strong>Evan</strong></p>\n","categories":["OPS"],"tags":["OPS","ELK","Logstash","Nginx"]},{"title":"Git-Gitlab基本使用","url":"/forward/873540ab.html","content":"<h2 id=\"Gitlab服务运维：\"><a href=\"#Gitlab服务运维：\" class=\"headerlink\" title=\"Gitlab服务运维：\"></a>Gitlab服务运维：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ll /opt/gitlab/                           <span class=\"comment\">#gitlab程序安装目录</span></span><br><span class=\"line\">ll /var/opt/gitlab/git-data/repositories/       \t<span class=\"comment\">#所有项目都在存放在此目录，存放仓库数据</span></span><br><span class=\"line\">ll /var/log/gitlab/                   \t\t  <span class=\"comment\">#所有服务日志目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">查看状态：</span><br><span class=\"line\">gitlab-ctl status</span><br><span class=\"line\"></span><br><span class=\"line\">单独停掉ngixn：</span><br><span class=\"line\">gitlab-ctl stop nginx</span><br><span class=\"line\"></span><br><span class=\"line\">查看所有服务日志：</span><br><span class=\"line\">gitlab-ctl <span class=\"built_in\">tail</span></span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["Git","GitLab","OPS"]},{"title":"ELK-Logstash 按周创建Elasticsearch索引","url":"/forward/eb065b59.html","content":"<p>按月创建的Elasticsearch索引名称，还没到月底，日志单索引9千多万行，es顶不住了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">index =&gt; &quot;nginx-%&#123;beat[hostname]&#125;-access-%&#123;+YYYY.MM&#125;&quot;</span><br></pre></td></tr></table></figure>\n<p>于是决定按周创建Elasticsearch索引。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mutate &#123;</span><br><span class=\"line\">    update =&gt; &#123;&quot;[@metadata][target_index]&quot; =&gt; &quot;k8s_access-%&#123;+YYYY.MM&#125;-%&#123;+YYYY.ww&#125;&quot;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下 %{+YYYY.ww} 即 2021.35 ，第35周<br><img src=\"/images/pasted-87.png\" alt=\"index\"></p>\n","categories":["OPS"],"tags":["OPS","ELK","Logstash"]},{"title":"Golang-23种设计模式","url":"/forward/4e89d84.html","content":"<h1 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式?\"></a>什么是设计模式?</h1><p>设计模式是一套理论, 由软件界先辈们总结出的一套可以反复使用的经验, 可以帮助开发人员降低代码耦合度、提高代码的重用性、扩展性和系统可维护性，以及巧妙解决一系列逻辑复杂的问题(运用套路)。然而需要注意的是，过度使用设计模式也可能会导致代码过于复杂和晦涩，因此在实际开发中需要根据具体情况进行选择和应用。</p>\n<p><img src=\"/images/pasted-326.png\" alt=\"四人组（Gang of Four），简称GoF 图片经过AI修复\"></p>\n<blockquote>\n<p>左到右依次是：Ralph Johnson，Erich Gamma，Richard Helm，John Vlissides。</p>\n</blockquote>\n<p>1995年，艾瑞克·伽马（Erich Gamma）、拉尔夫·约翰森（Ralph Johnson）、理査德·海尔姆（Richard Helm）、约翰·威利斯迪斯（John Vlissides）等4位作者合作出版了《设计模式：可复用面向对象软件的基础》（Design Patterns: Elements of Reusable Object-Oriented Software）一书，在本教程中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）匿名著称。</p>\n<blockquote>\n<p>GoF将模式的概念引入软件工程领域，这标志着软件模式的诞生。软件模式(Software Patterns)是将模式的一般概念应用于软件开发领域，即软件开发的总体指导思路或参照样板。软件模式并非仅限于设计模式，还包括架构模式、分析模式和过程模式等，实际上，在软件开发生命周期的每一个阶段都存在着一些被认同的模式。软件模式与具体的应用领域无关，也就是说无论你从事的是移动应用开发、桌面应用开发、Web应用开发还是嵌入式软件的开发，都可以使用软件模式。无论你是使用Java、C#、Objective-C、VB.net、Smalltalk等纯面向对象编程语言，还是使用C++、PHP、Delphi、JavaScript等可支持面向对象编程 的语言，你都需要了解软件设计模式！“软件设计模式(Design Pattern)是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结，使用设计模式是为了可重用代码、让代码更容易被他人理解并且保证代码可靠性。” （软件设计模式的定义）    ——《Easy搞定Golang设计模式》</p>\n</blockquote>\n<p>Go语言并没有将自己定位成面向对象的编程语言，但讨论23种设计模式对我们理解它也会有一定的帮助。</p>\n<p>详见：<a href=\"https://docs.cakepanit.com/docs/dev/23designpattern/\">23种设计模式</a></p>\n","categories":["DEV"],"tags":["Golang","设计模式"]},{"title":"ELK-Elasticsearch介绍与安装","url":"/forward/17b35260.html","content":"<h2 id=\"什么是倒排索引\"><a href=\"#什么是倒排索引\" class=\"headerlink\" title=\"什么是倒排索引\"></a>什么是倒排索引</h2><ol>\n<li>信息存储到es时，首先把每条语句分成一个一个的词语</li>\n<li>根据搜索的内容，进行分配，有匹配到的权重+1</li>\n<li>把匹配到的语局给呈现出来</li>\n</ol>\n<h2 id=\"elasticsearch介绍\"><a href=\"#elasticsearch介绍\" class=\"headerlink\" title=\"elasticsearch介绍\"></a>elasticsearch介绍</h2><h3 id=\"elasticsearch应用场景\"><a href=\"#elasticsearch应用场景\" class=\"headerlink\" title=\"elasticsearch应用场景\"></a>elasticsearch应用场景</h3><ol>\n<li>电商平台</li>\n<li>高亮显示搜索的词条信息</li>\n<li>日志分析elk</li>\n</ol>\n<h3 id=\"elasticsearch特点\"><a href=\"#elasticsearch特点\" class=\"headerlink\" title=\"elasticsearch特点\"></a>elasticsearch特点</h3><ol>\n<li>高性能：es可以支持一主多从，水平扩展方便</li>\n<li>高可用性：一个主节点宕机后不影响用户的使用。</li>\n<li>用户使用方便快捷：es采用Java开发，即使不懂Java代码，一样可以使用</li>\n<li>功能丰富，配置简单</li>\n<li>采用restful封装的接口，可以通过http发起请求</li>\n</ol>\n<h3 id=\"elasticsearch部署方法\"><a href=\"#elasticsearch部署方法\" class=\"headerlink\" title=\"elasticsearch部署方法\"></a>elasticsearch部署方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">安装方式</th>\n<th align=\"left\">优点</th>\n<th align=\"left\">对运维的要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">docker</td>\n<td align=\"left\">部署方便、开箱即用、启动迅速</td>\n<td align=\"left\">需要会docker知识、需要制作镜像、修改配置麻烦、数据需要挂载目录</td>\n</tr>\n<tr>\n<td align=\"left\">tar</td>\n<td align=\"left\">部署灵活、对系统侵占性小</td>\n<td align=\"left\">需要写启动脚本文件、目录需要提前规划</td>\n</tr>\n<tr>\n<td align=\"left\">rpm</td>\n<td align=\"left\">部署方便、启动脚本安装即用、存放目录标准化</td>\n<td align=\"left\">软件各个组件分散在不同的目录、卸载不彻底、默认配置需要修改</td>\n</tr>\n<tr>\n<td align=\"left\">ansible</td>\n<td align=\"left\">极其灵活、批量部署速度快</td>\n<td align=\"left\">需要学习ansible语法、需要提前规划、需要专人维护</td>\n</tr>\n</tbody></table>\n<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://download.oracle.com/otn/java/jdk/8u60-b27/jdk-8u60-linux-x64.tar.gz</span><br><span class=\"line\">[root@db01 /server/tools]<span class=\"comment\"># tar -xf jdk1.8.0_131.tar.gz -C /application/</span></span><br><span class=\"line\">[root@db01 /application]<span class=\"comment\"># ln -s jdk1.8.0_131/ jdk</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt;/etc/bashrc &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/application/jdk </span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$JAVA_HOME</span>/jre/bin:<span class=\"variable\">$PATH</span> </span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib:<span class=\"variable\">$JAVA_HOME</span>/jre/lib:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 /application]<span class=\"comment\"># . /etc/bashrc</span></span><br><span class=\"line\">[root@db01 /application]<span class=\"comment\"># java -version</span></span><br><span class=\"line\">java version <span class=\"string\">&quot;1.8.0_131&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装elasticsearch\"><a href=\"#安装elasticsearch\" class=\"headerlink\" title=\"安装elasticsearch\"></a>安装elasticsearch</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.0.rpm</span><br><span class=\"line\">//上传elasticsearch-6.6.0.rpm</span><br><span class=\"line\">[root@db01 /server/tools]<span class=\"comment\"># yum install elasticsearch-6.6.0.rpm -y </span></span><br><span class=\"line\"><span class=\"comment\">### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd</span></span><br><span class=\"line\"> sudo systemctl daemon-reload</span><br><span class=\"line\"> sudo systemctl <span class=\"built_in\">enable</span> elasticsearch.service</span><br><span class=\"line\"><span class=\"comment\">### You can start elasticsearch service by executing</span></span><br><span class=\"line\"> sudo systemctl start elasticsearch.service</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置启动\"><a href=\"#配置启动\" class=\"headerlink\" title=\"配置启动\"></a>配置启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s%#JAVA_HOME=%JAVA_HOME=/application/jdk/%g&#x27;</span> /etc/sysconfig/elasticsearch</span><br><span class=\"line\">//更改JAVA_HOME</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> elasticsearch.service</span><br><span class=\"line\">systemctl start elasticsearch.service</span><br><span class=\"line\">systemctl status elasticsearch.service</span><br><span class=\"line\">systemctl is-active elasticsearch.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查启动\"><a href=\"#检查启动\" class=\"headerlink\" title=\"检查启动\"></a>检查启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ps -ef | grep elastic</span><br><span class=\"line\">lsof -i:9200</span><br><span class=\"line\">curl localhost:9200</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看配置文件位置\"><a href=\"#查看配置文件位置\" class=\"headerlink\" title=\"查看配置文件位置\"></a>查看配置文件位置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># rpm -qc elasticsearch</span></span><br><span class=\"line\">/etc/elasticsearch/elasticsearch.yml //主配置文件</span><br><span class=\"line\">/etc/elasticsearch/jvm.options       //java虚拟机配置</span><br><span class=\"line\">/etc/init.d/elasticsearch            //init.d启动脚本 </span><br><span class=\"line\">/etc/sysconfig/elasticsearch         //环境变量，如java_home</span><br><span class=\"line\">/usr/lib/sysctl.d/elasticsearch.conf //最大连接数,不需要动</span><br><span class=\"line\">/usr/lib/systemd/system/elasticsearch.service //systemd启动脚本</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调整jvm配置\"><a href=\"#调整jvm配置\" class=\"headerlink\" title=\"调整jvm配置\"></a>调整jvm配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/elasticsearch/jvm.options</span><br><span class=\"line\">-Xms1500m    //最小内存                                                                                                                                                       </span><br><span class=\"line\">-Xmx1500m    //最大内存，根据服务器配置调整</span><br><span class=\"line\"></span><br><span class=\"line\">1.不要超过30G</span><br><span class=\"line\">2.最好预留总内存的50%</span><br></pre></td></tr></table></figure>\n<h3 id=\"调整elasticsearch配置\"><a href=\"#调整elasticsearch配置\" class=\"headerlink\" title=\"调整elasticsearch配置\"></a>调整elasticsearch配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class=\"line\">node.name: node-1 //节点名称</span><br><span class=\"line\">path.data: /data/elasticsearch //数据目录</span><br><span class=\"line\">path.logs: /var/log/elasticsearch //日志目录</span><br><span class=\"line\">bootstrap.memory_lock: <span class=\"literal\">true</span> //开启jvm内存锁定</span><br><span class=\"line\">network.host: 10.0.0.51,127.0.0.1 //绑定本机ip</span><br><span class=\"line\">http.port: 9200  //默认端口号</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/elasticsearch</span><br><span class=\"line\"><span class=\"built_in\">chown</span> elasticsearch.elasticsearch -R /data/elasticsearch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动报错\"><a href=\"#启动报错\" class=\"headerlink\" title=\"启动报错\"></a>启动报错</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[2019-07-09T10:49:36,109][ERROR][o.e.b.Bootstrap          ] [node-1] node validation exception</span><br><span class=\"line\">[1] bootstrap checks failed</span><br><span class=\"line\">[1]: memory locking requested <span class=\"keyword\">for</span> elasticsearch process but memory is not locked</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h4><p><strong>参考官方文档：</strong><br><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/6.6/setup-configuration-memory.html\">https://www.elastic.co/guide/en/elasticsearch/reference/6.6/setup-configuration-memory.html</a><br><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/6.6/setting-system-settings.html\">https://www.elastic.co/guide/en/elasticsearch/reference/6.6/setting-system-settings.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl edit elasticsearch</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">LimitMEMLOCK=infinity</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start elasticsearch</span><br></pre></td></tr></table></figure>\n<h3 id=\"报错总结：\"><a href=\"#报错总结：\" class=\"headerlink\" title=\"报错总结：\"></a>报错总结：</h3><ol>\n<li>配置文件没有任何修改</li>\n<li>配置文件没有修改IP地址</li>\n<li>系统内存只有1个G，启动失败</li>\n<li>配置文件参数拼写错误，启动失败</li>\n<li>忘记修改内存锁定,启动失败</li>\n<li>重启linux</li>\n</ol>\n<h2 id=\"MySQL对比ES\"><a href=\"#MySQL对比ES\" class=\"headerlink\" title=\"MySQL对比ES\"></a>MySQL对比ES</h2><table>\n<thead>\n<tr>\n<th align=\"left\">MySQL</th>\n<th align=\"left\">ES</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">库</td>\n<td align=\"left\">index（索引）</td>\n</tr>\n<tr>\n<td align=\"left\">表</td>\n<td align=\"left\">type（类型）</td>\n</tr>\n<tr>\n<td align=\"left\">行</td>\n<td align=\"left\">doc（文档）</td>\n</tr>\n<tr>\n<td align=\"left\">字段</td>\n<td align=\"left\">Fields（文档存在多个字段）</td>\n</tr>\n</tbody></table>\n<h2 id=\"检查ES是否正常\"><a href=\"#检查ES是否正常\" class=\"headerlink\" title=\"检查ES是否正常\"></a>检查ES是否正常</h2><ul>\n<li>浏览器访问 <code>http://10.0.0.51:9200</code></li>\n<li>shell运行<code>curl 10.0.0.240:9200</code></li>\n</ul>\n<h2 id=\"ES的交互方式\"><a href=\"#ES的交互方式\" class=\"headerlink\" title=\"ES的交互方式\"></a>ES的交互方式</h2><p><strong>说明：</strong>es还为我们提供了基于http协议——以json为数据交互格式的restful API。通过9200端口与es进行通信，你甚至可以通过curl命令与es通信。</p>\n<ul>\n<li><p>curl命令：</p>\n<ul>\n<li>特点：最繁琐，最复杂，最容易出错</li>\n<li>要求：不需要安装任何软件，只需要有curl命令</li>\n</ul>\n</li>\n<li><p>es-head插件</p>\n<ul>\n<li>特点：查看数据方便，操作相对容易</li>\n<li>要求：需要nodejs环境</li>\n</ul>\n</li>\n<li><p>kibana</p>\n<ul>\n<li>特点：查看数据以及报表格式丰富，操作很简单</li>\n<li>要求：需要java环境和安装配置kibana</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"curl交互演示\"><a href=\"#curl交互演示\" class=\"headerlink\" title=\"curl交互演示\"></a>curl交互演示</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#节点查看</span></span><br><span class=\"line\">curl 10.0.0.51:9200/_cat/nodes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#状态检查</span></span><br><span class=\"line\">curl 10.0.0.51:9200/_cat/health</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建个索引</span></span><br><span class=\"line\">curl -XPUT <span class=\"string\">&#x27;10.0.0.51:9200/pincheng?pretty&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看索引</span></span><br><span class=\"line\">curl 10.0.0.51:9200/_cat/indices</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看分片</span></span><br><span class=\"line\">curl 10.0.0.51:9200/_cat/shards</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#往这个索引里面插入一条指定id号为1的数据,PUT更新，需要填写完整的信息.</span></span><br><span class=\"line\">                           <span class=\"comment\">#“库”     #“表”  #id</span></span><br><span class=\"line\">curl -XPUT <span class=\"string\">&#x27;10.0.0.51:9200/pincheng/student/1?pretty&#x27;</span> -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> -d<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;first_name&quot; : &quot;zhang&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;last_name&quot;: &quot;san&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;age&quot; : 25,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;about&quot; : &quot;I love to go rock climbing&quot;, </span></span><br><span class=\"line\"><span class=\"string\">    &quot;interests&quot;: [ &quot;sports&quot; ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#往这个索引里面插入一条随机生成一个id的数据（不指定id）,POST更新，只需要填写需要更改的信息</span></span><br><span class=\"line\">curl -XPOST  <span class=\"string\">&#x27;10.0.0.51:9200/pincheng/student?pretty&#x27;</span> -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> -d<span class=\"string\">&#x27; </span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">&quot;first_name&quot;: &quot;li&quot;,</span></span><br><span class=\"line\"><span class=\"string\">&quot;last_name&quot; : &quot;si&quot;,</span></span><br><span class=\"line\"><span class=\"string\">&quot;age&quot; : 32,</span></span><br><span class=\"line\"><span class=\"string\">&quot;about&quot; : &quot;I like to collect rock albums&quot;, </span></span><br><span class=\"line\"><span class=\"string\">&quot;interests&quot;: [ &quot;music&quot; ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查询索引当中的所有数据</span></span><br><span class=\"line\">curl -XGET  <span class=\"string\">&#x27;10.0.0.51:9200/pincheng/student/_search?pretty&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查询索引当中的一条数据</span></span><br><span class=\"line\">curl -XGET  <span class=\"string\">&#x27;10.0.0.51:9200/pincheng/student/1?pretty&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#删除索引当中的一条数据</span></span><br><span class=\"line\">curl -XDELETE  <span class=\"string\">&#x27;10.0.0.51:9200/pincheng/student/1?pretty&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#删除索引</span></span><br><span class=\"line\">curl -XDELETE <span class=\"string\">&#x27;localhost:9200/vipinfo?pretty&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#修改系统默认的副本及分片数量</span></span><br><span class=\"line\">curl -XPUT <span class=\"string\">&#x27;10.0.0.51:9200/_template/template_http_request_record&#x27;</span> -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> -d<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;index_patterns&quot;: [&quot;*&quot;],</span></span><br><span class=\"line\"><span class=\"string\">    &quot;settings&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;number_of_shards&quot; : 5,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;number_of_replicas&quot; : 1</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"es-head插件交互\"><a href=\"#es-head插件交互\" class=\"headerlink\" title=\"es-head插件交互\"></a>es-head插件交互</h3><h4 id=\"安装node-js环境\"><a href=\"#安装node-js环境\" class=\"headerlink\" title=\"安装node-js环境\"></a>安装node-js环境</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装node-js环境</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /server/tools</span><br><span class=\"line\">wget https://nodejs.org/dist/v12.16.3/node-v12.16.3-linux-x64.tar.xz</span><br><span class=\"line\">tar -xf node-v12.16.3-linux-x64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装依赖</span></span><br><span class=\"line\">yum -y install openssl screen kernel-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> node-v12.16.3-linux-x64/ /application/</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /application/node-v12.16.3-linux-x64/ /application/node</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; /etc/bashrc &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_HOME=/application/node</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODE_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">. /etc/bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># node -v &amp;&amp; npm -v</span></span><br><span class=\"line\">v12.16.3</span><br><span class=\"line\">6.14.4</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装es-head\"><a href=\"#安装es-head\" class=\"headerlink\" title=\"安装es-head\"></a>安装es-head</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /application/</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/mobz/elasticsearch-head.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> elasticsearch-head/</span><br><span class=\"line\">cnpm install //安装依赖</span><br><span class=\"line\"></span><br><span class=\"line\">screen -S es-head //离线运行</span><br><span class=\"line\">cnpm run start //启动es-head</span><br><span class=\"line\"> <span class=\"comment\">#http://localhost:9100</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/img-153.png\" alt=\"es-head\"></p>\n<h4 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h4><p><strong>官方文档：</strong><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-http.html\">https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-http.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class=\"line\">http.cors.enabled: <span class=\"literal\">true</span>  //如果启用了 HTTP 端口，那么此属性会指定是否允许跨源 REST 请求。</span><br><span class=\"line\">http.cors.allow-origin: <span class=\"string\">&quot;*&quot;</span> //如果 http.cors.enabled 的值为 <span class=\"literal\">true</span>，那么该属性会指定允许 REST 请求来自何处。</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart elasticsearch</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/img-154.png\" alt=\"连接ES\"></p>\n<h4 id=\"Chrome插件\"><a href=\"#Chrome插件\" class=\"headerlink\" title=\"Chrome插件\"></a>Chrome插件</h4><p><strong>安装地址：</strong><a href=\"https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm/related\">https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm/related</a><br><img src=\"/images/img-155.png\" alt=\"es-head插件\"></p>\n","categories":["OPS"],"tags":["OPS","ELK"]},{"title":"Golang-协程&并发安全","url":"/forward/c675163c.html","content":"<p><img src=\"/images/pasted-289.png\" alt=\"GO协程与并发安全\"><br><strong>demo</strong>:</p>\n<ul>\n<li><a href=\"https://github.com/bingdang/demo/tree/main/channel\">GO协程与并发安全</a></li>\n<li><a href=\"https://github.com/bingdang/reptile/tree/main\">并发爬虫实现</a></li>\n</ul>\n<p><img src=\"/images/pasted-290.png\" alt=\"爬虫demo\"></p>\n<ul>\n<li><a href=\"https://github.com/bingdang/DataAnalysis/tree/master\">开房记录分析</a></li>\n</ul>\n<p><img src=\"/images/pasted-291.png\" alt=\"数据分析\"></p>\n","categories":["DEV"],"tags":["协程","goroutine","数据处理","爬虫"]},{"title":"Golang-函数","url":"/forward/d12df344.html","content":"<p>在编程中经常会调用<strong>相同或者类似</strong>的操作，这些相同或者类似的操作由同一段代码完成，函数的出现，可以<strong>避免重复</strong>编写这些代码。函数的作用就是把<strong>相对独立的某个功能抽象</strong>出来，使之成为一个<strong>独立的实体</strong>。</p>\n<p>例如，开发一个支持人与人之间进行对话的社交网站，对话这个功能比较复杂，可以将它封装为一个函数，每次调用该函数就可以发起对话；大型网站都有日志功能，对所有重要操作都会记录日志，而日志处理需要由多行Go文件操作相关代码组成，将这些代码组装为函数，则每次写日志时调用此函数即可。</p>\n<p>Go语言函数支持的特性包括：</p>\n<ul>\n<li>参数数量不固定（可变参数）。</li>\n<li>匿名函数及其闭包。</li>\n<li>函数本身作为值传递。</li>\n<li>函数的延迟执行。</li>\n<li>把函数作为接口调用。</li>\n</ul>\n<div class=\"tabs\" id=\"函数\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#函数-1\">声明函数</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#函数-2\">使用函数</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#函数-3\">函数变量</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#函数-4\">可变参数</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#函数-5\">匿名函数和闭包</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#函数-6\">延迟执行语句</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"函数-1\"><p>函数的声明以关键字func为标识，具体格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> 函数名<span class=\"params\">(参数列表)</span></span> (返回参数列表)&#123;</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>函数名：</strong>函数名由字母、数字和下划线构成，但是函数名不能以数字开头；在同一个包内，函数名不可重复。<br>注意：可暂时简单地将一个包理解为一个文件夹。</li>\n<li><strong>参数列表：</strong>参数列表中的每个参数都由参数名称和参数类型两部分组成，参数变量为函数的局部变量。如果函数的参数数量不固定，Go语言函数还支持可变参数。</li>\n<li><strong>返回参数列表：</strong>返回参数列表中的每个参数由返回的参数名称和参数类型组成，也可简写为返回值类型列表。</li>\n<li><strong>函数体：</strong>函数体指函数的主体代码逻辑，若函数有返回参数列表，则函数体中必须有return语句返回值列表。</li>\n</ul>\n<p>使用标准格式定义一个名为add的函数，其功能是进行两个整型数字的加法，并返回结果。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(x <span class=\"type\">int</span>,y <span class=\"type\">int</span>)</span></span> (sum <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tsum = x + y</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数参数简写</strong><br>在参数列表中，如果相邻的变量为同类型，则不必重复写出类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(x,y <span class=\"type\">int</span>)</span></span> (sum <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tsum = x + y</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数返回值简写</strong><br>如果函数的返回值都是同一类型，在返回值列表中可将返回参数省略。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">returnValue</span><span class=\"params\">()</span></span> (<span class=\"type\">int</span>, <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可能会降低代码的可读性，无法区分每个返回值的实际意义。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>带有变量名的函数返回值</strong><br>使用带有变量名的返回值时，返回默认值为类型的默认值，函数结束处直接调用return即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">defaultValue</span><span class=\"params\">()</span></span> (a <span class=\"type\">int</span>,b <span class=\"type\">string</span>,c <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用后会返回：0、空字符串和false。</span></span><br></pre></td></tr></table></figure>\n<p>如果return后跟返回值列表也是允许的：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">defaultValue</span><span class=\"params\">()</span></span> (a <span class=\"type\">int</span>,b <span class=\"type\">string</span>,c <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"函数-2\"><p>定义函数后，可通过对函数的调用使用函数，函数体内的代码逻辑执行完毕后，程序将继续执行被调用函数后的代码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addSub</span><span class=\"params\">(x,y <span class=\"type\">int</span>)</span></span> (add <span class=\"type\">int</span>,sub <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tadd = x + y</span><br><span class=\"line\">\tsub = x - y</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti:=<span class=\"number\">10</span></span><br><span class=\"line\">\tq:=<span class=\"number\">7</span></span><br><span class=\"line\">\tadd,sub := addSub(i,q)</span><br><span class=\"line\">\tfmt.Println(i,<span class=\"string\">&quot;+&quot;</span>,q,<span class=\"string\">&quot;=&quot;</span>,add)</span><br><span class=\"line\">\tfmt.Println(i,<span class=\"string\">&quot;-&quot;</span>,q,<span class=\"string\">&quot;=&quot;</span>,sub)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 10 + 7 = 17</span></span><br><span class=\"line\"><span class=\"comment\">// 10 - 7 = 3</span></span><br></pre></td></tr></table></figure>\n<p>以上程序中，我们一般将传入函数的变量i和q称为实参，将函数中的x和y称为形参。变量i和q通过值传递的方式将值赋给形参x和y。<br><strong>注意：</strong></p>\n<ul>\n<li> addSub函数中的形参x和y作用域仅限于函数体内。</li>\n<li> main函数中定义的变量add和sub与addSub函数中定义的局部变量sum和sub完全无关，函数体内定义的变量作用域仅限于函数体内。</li>\n<li>若不想接收函数的某个返回值，可用匿名变量“_”，但是不能所有返回值都用匿名变量代替。</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"函数-3\"><p>函数也是一种类型，我们可以将其保存在变量中。<br>函数变量的声明格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名称 <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<p>函数变量的声明和初始化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addSub</span><span class=\"params\">(x,y <span class=\"type\">int</span>)</span></span> (add <span class=\"type\">int</span>,sub <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tadd = x + y</span><br><span class=\"line\">\tsub = x - y</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti:=<span class=\"number\">10</span></span><br><span class=\"line\">\tq:=<span class=\"number\">7</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f1 <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x <span class=\"type\">int</span>,y <span class=\"type\">int</span>)</span></span> (add <span class=\"type\">int</span>,sub <span class=\"type\">int</span>)</span><br><span class=\"line\">\tf1 = addSub</span><br><span class=\"line\">\tadd,sub := f1(i,q)</span><br><span class=\"line\">\tfmt.Println(i,<span class=\"string\">&quot;+&quot;</span>,q,<span class=\"string\">&quot;=&quot;</span>,add)</span><br><span class=\"line\">\tfmt.Println(i,<span class=\"string\">&quot;-&quot;</span>,q,<span class=\"string\">&quot;=&quot;</span>,sub)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 10 + 7 = 17</span></span><br><span class=\"line\"><span class=\"comment\">// 10 - 7 = 3</span></span><br></pre></td></tr></table></figure>\n<p>函数变量f1声明后其值初始化为nil，在将addSub函数赋值给f1后，所有对f1的调用即为对addSub函数的调用。</p>\n<p>函数变量也可用短变量格式进行声明和初始化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addSub</span><span class=\"params\">(x,y <span class=\"type\">int</span>)</span></span> (add <span class=\"type\">int</span>,sub <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tadd = x + y</span><br><span class=\"line\">\tsub = x - y</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti:=<span class=\"number\">10</span></span><br><span class=\"line\">\tq:=<span class=\"number\">7</span></span><br><span class=\"line\">\tf1 := addSub</span><br><span class=\"line\">\tadd,sub := f1(i,q)</span><br><span class=\"line\">\tfmt.Println(i,<span class=\"string\">&quot;+&quot;</span>,q,<span class=\"string\">&quot;=&quot;</span>,add)</span><br><span class=\"line\">\tfmt.Println(i,<span class=\"string\">&quot;-&quot;</span>,q,<span class=\"string\">&quot;=&quot;</span>,sub)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 10 + 7 = 17</span></span><br><span class=\"line\"><span class=\"comment\">// 10 - 7 = 3</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"函数-4\"><p>Go语言支持可变参数的特性，即函数声明时可以没有固定数量的参数。<br>可变参数的函数格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> 函数名 <span class=\"params\">(固定参数列表,v ...T )</span></span> (返回参数列表) &#123;</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可变参数一般放在函数参数列表的末尾，也可不存在固定参数列表。</li>\n<li>“v …T”代表的其实就是变量v为T类型的切片，v和T之间为三个“.”。</li>\n</ul>\n<div class=\"tabs\" id=\"可变参数\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#可变参数-1\">可变参数函数的使用</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#可变参数-2\">可变参数与内置函数</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#可变参数-3\">可变参数的传递</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"可变参数-1\"><p>add函数只能对两个int类型的数进行加法计算，现在我们可以使用可变参数实现任意个int类型数的加法运算，最后返回加法结果。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(slice ... <span class=\"type\">int</span>)</span></span> (<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,value:= <span class=\"keyword\">range</span> slice &#123;</span><br><span class=\"line\">\t\tsum = sum + value</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;1+2+3...+9+10=&quot;</span>,add(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1+2+3...+9+10= 55</span></span><br></pre></td></tr></table></figure>\n<p>使用可变参数的函数体中，常常会使用for循环来对切片中的项进行操作。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"可变参数-2\"><p>Go语言中许多内置函数的参数都用了可变参数，比如最常用的fmt包中的Println函数和Printf<br>函数。<br>fmt包中的Println函数源码如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Println</span><span class=\"params\">(a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> (n <span class=\"type\">int</span>, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Fprintln(os.Stdout, a...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Printf函数源码如下，第一个参数指定了需要打印的格式:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Printf</span><span class=\"params\">(format <span class=\"type\">string</span>, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> (n <span class=\"type\">int</span>, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Fprintf(os.Stdout, format, a...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"可变参数-3\"><p>可变参数本质上是一个切片，如果要在多个函数中传递可变参数，可在传递时添加“…”。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addall</span><span class=\"params\">(slice ... <span class=\"type\">int</span>)</span></span> (<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,value:= <span class=\"keyword\">range</span> slice &#123;</span><br><span class=\"line\">\t\tsum = sum + value</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(num ... <span class=\"type\">int</span>)</span></span>(<span class=\"type\">int</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> addall(num...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;1+2+3...+9+10=&quot;</span>,add(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1+2+3...+9+10= 55</span></span><br></pre></td></tr></table></figure>\n\n<p>如果想传递可变参数本身，可将addall函数的可变参数改为切片：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addall</span><span class=\"params\">(slice []<span class=\"type\">int</span>)</span></span> (<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,value:= <span class=\"keyword\">range</span> slice &#123;</span><br><span class=\"line\">\t\tsum = sum + value</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(num ... <span class=\"type\">int</span>)</span></span>(<span class=\"type\">int</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> addall(num)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;1+2+3...+9+10=&quot;</span>,add(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1+2+3...+9+10= 55</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"函数-5\"><p>匿名函数即在需要函数时定义函数，匿名函数能以变量方式传递，它常常被用于实现闭包。<br>匿名函数的格式如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(参数列表)</span></span> (返回参数列表) &#123;</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>匿名函数的调用有两种方式：</p>\n<ul>\n<li>定义并同时调用匿名函数。</li>\n<li>将匿名函数赋值给变量。</li>\n</ul>\n<div class=\"tabs\" id=\"匿名函数和闭包\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#匿名函数和闭包-1\">定义并同时调用匿名函数</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#匿名函数和闭包-2\">将匿名函数赋值给变量</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#匿名函数和闭包-3\">闭包</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"匿名函数和闭包-1\"><p>可以在匿名函数后添加“()”直接传入实参:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(data <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Hello &quot;</span>+data)</span><br><span class=\"line\">\t&#125;(<span class=\"string\">&quot;World!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello World!</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"匿名函数和闭包-2\"><p>将匿名函数赋值给一个变量，之后再进行调用:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf1 := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(data <span class=\"type\">string</span>)</span></span>&#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Hello &quot;</span>+data)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf1(<span class=\"string\">&quot;World!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello World!</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"匿名函数和闭包-3\"><p>闭包就是包含了自由变量的匿名函数，其中的自由变量即使已经脱离了原有的自由变量环境也不会被删除，在闭包的作用域内可继续使用这个自由变量，同一个匿名函数和不同的引用环境组成了不同的闭包。<br>闭包就如同有“记忆力”一般，可对作用域内的变量的引用进行修改。</p>\n<p><strong>闭包的“记忆力”</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 例<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnum:=<span class=\"number\">1</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%p\\n&quot;</span>,&amp;num)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tnum++</span><br><span class=\"line\">\t\tfmt.Println(num)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%p\\n&quot;</span>,&amp;num)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tnum++</span><br><span class=\"line\">\t\tfmt.Println(num)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%p\\n&quot;</span>,&amp;num)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//0xc00000a0b0</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//0xc00000a0b0</span></span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//0xc00000a0b0</span></span><br></pre></td></tr></table></figure>\n<p>匿名函数由于在函数体内部引用了外部的自由变量num而形成了闭包。闭包每次对num变量的加1操作都是对变量num引用的修改。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 例<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addOne</span><span class=\"params\">(i <span class=\"type\">int</span>)</span></span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\ti++</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta1 := addOne(<span class=\"number\">0</span>)</span><br><span class=\"line\">\tfmt.Println(a1())  <span class=\"comment\">//0+1=1</span></span><br><span class=\"line\">\tfmt.Println(a1())  <span class=\"comment\">//1+1=2</span></span><br><span class=\"line\">\ta2 := addOne(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(a2())</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;a1闭包的地址为：&quot;</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%p\\n&quot;</span>,&amp;a1)</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;a2闭包的地址为：&quot;</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%p\\n&quot;</span>,&amp;a2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//11</span></span><br><span class=\"line\"><span class=\"comment\">//a1闭包的地址为：0xc000006028</span></span><br><span class=\"line\"><span class=\"comment\">//a2闭包的地址为：0xc000006038</span></span><br></pre></td></tr></table></figure>\n<p>addOne函数返回了一个闭包函数，通过定义a1和a2变量，创建了两个闭包的实例（引用环境不同导致）。</p>\n<p>每次调用闭包实例，i的值都会在原有的基础上加1。从打印的结果可以看到，两个闭包实例的地址完全不同，两个闭包的调用结果互不影响。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"函数-6\"><p>Go语言中存在一种延迟执行的语句，由defer关键字标识，格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">defer</span> 任意语句</span><br></pre></td></tr></table></figure>\n<p>defer后的语句不会被马上执行，在defer所属的函数<strong>即将返回时</strong>，函数体中的所有defer语句将会按出现的顺序被逆序执行，即函数体中的最后一个defer语句最先被执行。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;start now&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">&quot;这是第一句defer语句&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">&quot;这是第二句defer语句&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">&quot;这是第三句defer语句&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//start now</span></span><br><span class=\"line\"><span class=\"comment\">//end</span></span><br><span class=\"line\"><span class=\"comment\">//这是第三句defer语句</span></span><br><span class=\"line\"><span class=\"comment\">//这是第二句defer语句</span></span><br><span class=\"line\"><span class=\"comment\">//这是第一句defer语句</span></span><br></pre></td></tr></table></figure>\n<p>由于defer语句是在当前函数即将返回时被调用，所以defer常常被用来释放资源。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tcpSend</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconn,err := net.Dial(<span class=\"string\">&quot;tcp&quot;</span>,<span class=\"string\">&quot;127.0.0.1:80&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;remote address:&quot;</span>,conn.RemoteAddr())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;error:&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttcpSend()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//remote address: 127.0.0.1:80</span></span><br><span class=\"line\"><span class=\"comment\">//error: &lt;nil&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由于127.0.0.1对应的远端IP的80端口处于开启状态，在本机与该地址建立连接后和函数退出前，需要对打开的文件描述符conn进行关闭。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<p><strong>小结</strong></p>\n<ul>\n<li>Go语言中，函数的声明以关键字func为标识。</li>\n<li>Go语言支持可变参数的特性，即函数声明时可以没有固定数量的参数。</li>\n<li>匿名函数即在需要函数时定义函数，匿名函数能以变量方式传递，它常常被用于实现闭包。</li>\n<li>闭包就是包含了自由变量的匿名函数，其中的自由变量即使已经脱离了原有的自由变量环境也不会被删除，在闭包的作用域内可继续使用这个自由变量。</li>\n<li>defer语句是在当前函数即将返回时被调用，所以defer常常被用来释放资源。</li>\n</ul>\n<div class=\"tabs\" id=\"知识拓展\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#知识拓展-1\">函数参数传递的本质</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"知识拓展-1\"><p><strong>两个基本概念:</strong> <code>值传递</code>和<code>引用传递</code></p>\n<ul>\n<li><strong>值传递：</strong>将变量的一个副本传递给函数，函数中不管如何操作该变量副本，都不会改变原变量的值。</li>\n<li><strong>引用传递：</strong>将变量的内存地址传递给函数，函数中操作变量时会找到保存在该地址的变量，对其进行操作，会改变原变量的值。</li>\n</ul>\n<p>Go语言函数传入参数时使用的始终是值传递，对于值传递，Go语言主要分为以下两种情况：</p>\n<ol>\n<li>对于int、string和bool等值类型变量，传递的是原变量的副本，对副本的操作不会影响原变量。</li>\n<li>对于指针、切片、map和channel（通道）引用类型变量，传递的是原变量指针的一份副本，该副本指向了原变量地址，因此对该副本的操作会影响原变量，从而达到了其他编程语言中类似于引用传递的效果。</li>\n</ol><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n","categories":["DEV"],"tags":["Golang"]},{"title":"Golang-Gin+GORM-Demo","url":"/forward/a5d41a5c.html","content":"<p><strong>参考文档：</strong></p>\n<ul>\n<li><a href=\"https://docs.cakepanit.com/docs/dev/golang/6.go-gin/\">go-gin</a></li>\n<li><a href=\"https://docs.cakepanit.com/docs/dev/golang/7.go-gorm/\">go-GORM</a></li>\n</ul>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><h3 id=\"需要实现的功能\"><a href=\"#需要实现的功能\" class=\"headerlink\" title=\"需要实现的功能\"></a>需要实现的功能</h3><p><strong>实现一个图书管理系统</strong></p>\n<ol>\n<li>用户服务：（登录，注册）、token验证</li>\n<li>书籍操作：（对书籍的增删改查操作）</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── controller <span class=\"comment\">// CLD：服务入口，负责处理路由，参数校验，请求转发</span></span><br><span class=\"line\">│   ├── book.<span class=\"keyword\">go</span></span><br><span class=\"line\">│   └── user.<span class=\"keyword\">go</span></span><br><span class=\"line\">├── dao <span class=\"comment\">// CLD：负责数据与存储相关功能（MySQL，Redis，ES等），以及业务的增删改查</span></span><br><span class=\"line\">│   ├── book.<span class=\"keyword\">go</span></span><br><span class=\"line\">│   ├── mysql_init.<span class=\"keyword\">go</span></span><br><span class=\"line\">│   └── user.<span class=\"keyword\">go</span></span><br><span class=\"line\">├── <span class=\"keyword\">go</span>.mod</span><br><span class=\"line\">├── <span class=\"keyword\">go</span>.sum</span><br><span class=\"line\">├── main.<span class=\"keyword\">go</span></span><br><span class=\"line\">├── middleware <span class=\"comment\">//中间件定义</span></span><br><span class=\"line\">│   └── auth.<span class=\"keyword\">go</span></span><br><span class=\"line\">├── model <span class=\"comment\">// 模型定义</span></span><br><span class=\"line\">│   ├── book.<span class=\"keyword\">go</span></span><br><span class=\"line\">│   └── user.<span class=\"keyword\">go</span></span><br><span class=\"line\">└── router <span class=\"comment\">// 路由中间件注册</span></span><br><span class=\"line\">    └── router.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database books charset utf8mb4;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><ul>\n<li>建立数据库连接<ul>\n<li><a href=\"https://github.com/bingdang/gin-gorm-demo/blob/main/dao/mysql_init.go\">dao层GORM建立数据库连接</a></li>\n</ul>\n</li>\n<li>封装用户和书籍模型<ul>\n<li><a href=\"https://github.com/bingdang/gin-gorm-demo/tree/main/model\">model层封装用户和书籍模型</a></li>\n</ul>\n</li>\n<li>封装注册登陆、token验证、书籍的增删改查方法<ul>\n<li><a href=\"https://github.com/bingdang/gin-gorm-demo/blob/main/dao/user.go\">dao层封装用户操作interface及方法</a></li>\n<li><a href=\"https://github.com/bingdang/gin-gorm-demo/blob/main/dao/book.go\">dao层封装书籍操作interface及方法</a></li>\n</ul>\n</li>\n<li>实现用户登陆注册、书籍增删改查业务逻辑<ul>\n<li><a href=\"https://github.com/bingdang/gin-gorm-demo/blob/main/controller/user.go\">controller层调用dao层实现用户注册登陆</a></li>\n<li><a href=\"https://github.com/bingdang/gin-gorm-demo/blob/main/controller/book.go\">controller层调用dao层实现书籍增删改查</a></li>\n</ul>\n</li>\n<li>实现验签中间件<ul>\n<li><a href=\"https://github.com/bingdang/gin-gorm-demo/blob/main/middleware/auth.go\">middleware层</a></li>\n</ul>\n</li>\n<li>注册路由<ul>\n<li><a href=\"https://github.com/bingdang/gin-gorm-demo/blob/main/router/router.go\">router层注册controller层方法以及注册middleware层中间件</a></li>\n</ul>\n</li>\n<li>启动<ul>\n<li><a href=\"https://github.com/bingdang/gin-gorm-demo/blob/main/main.go\">main</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//注册</span><br><span class=\"line\">fei@feideMacBook-Pro ~ % curl --location <span class=\"string\">&#x27;http://127.0.0.1:8000/register&#x27;</span> \\</span><br><span class=\"line\">--header <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">--data <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;username&quot;:&quot;maxbit&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;password&quot;:&quot;1234567&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;code&quot;</span>:<span class=\"string\">&quot;90200&quot;</span>,<span class=\"string\">&quot;data&quot;</span>:<span class=\"string\">&quot;maxbit 注册成功，请牢记您的密码&quot;</span>,<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;注册成功&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//登陆</span><br><span class=\"line\">fei@feideMacBook-Pro ~ % curl --location <span class=\"string\">&#x27;http://127.0.0.1:8000/login&#x27;</span> \\</span><br><span class=\"line\">--header <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">--data <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;username&quot;:&quot;maxbit&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;password&quot;:&quot;1234567&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;登陆成功&quot;</span>,<span class=\"string\">&quot;token&quot;</span>:<span class=\"string\">&quot;acc096ff-b82f-4836-a851-b6ca43ece8b8&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取书籍列表</span><br><span class=\"line\">fei@feideMacBook-Pro ~ % curl --location <span class=\"string\">&#x27;http://127.0.0.1:8000/book/list&#x27;</span> \\</span><br><span class=\"line\">--header <span class=\"string\">&#x27;token: acc096ff-b82f-4836-a851-b6ca43ece8b8&#x27;</span> </span><br><span class=\"line\">&#123;<span class=\"string\">&quot;code&quot;</span>:<span class=\"string\">&quot;90200&quot;</span>,<span class=\"string\">&quot;data&quot;</span>:[],<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;查询书籍列表成功&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//这里没有加token</span><br><span class=\"line\">fei@feideMacBook-Pro ~ % curl --location <span class=\"string\">&#x27;http://127.0.0.1:8000/book/add&#x27;</span> \\</span><br><span class=\"line\">--header <span class=\"string\">&#x27;token: xxxx&#x27;</span> \\</span><br><span class=\"line\">--header <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">--data <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;name&quot;:&quot;三国&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;desc&quot;:&quot;打仗啦&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;users&quot;:[</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;id&quot;:6</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;code&quot;</span>:90403,<span class=\"string\">&quot;data&quot;</span>:null,<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;The token is incorrect&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fei@feideMacBook-Pro ~ % curl --location <span class=\"string\">&#x27;http://127.0.0.1:8000/book/add&#x27;</span> \\</span><br><span class=\"line\">--header <span class=\"string\">&#x27;token: acc096ff-b82f-4836-a851-b6ca43ece8b8&#x27;</span> \\</span><br><span class=\"line\">--header <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">--data <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;name&quot;:&quot;三国&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;desc&quot;:&quot;打仗啦&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;users&quot;:[</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;id&quot;:6</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;code&quot;</span>:<span class=\"string\">&quot;90200&quot;</span>,<span class=\"string\">&quot;data&quot;</span>:<span class=\"string\">&quot;三国 书籍添加成功&quot;</span>,<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;添加书籍成功&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//再次获取书籍列表</span><br><span class=\"line\">fei@feideMacBook-Pro ~ % curl --location <span class=\"string\">&#x27;http://127.0.0.1:8000/book/list&#x27;</span> \\</span><br><span class=\"line\">--header <span class=\"string\">&#x27;token: acc096ff-b82f-4836-a851-b6ca43ece8b8&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;90200&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;data&quot;</span>: [&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;id&quot;</span>: 20,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;三国&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;desc&quot;</span>: <span class=\"string\">&quot;打仗啦&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Users&quot;</span>: [&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;id&quot;</span>: 6,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;maxbit&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;1234567&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;token&quot;</span>: <span class=\"string\">&quot;acc096ff-b82f-4836-a851-b6ca43ece8b8&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Books&quot;</span>: null</span><br><span class=\"line\">\t\t&#125;]</span><br><span class=\"line\">\t&#125;],</span><br><span class=\"line\">\t<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;查询书籍列表成功&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//这里有个bug，GORM关联查询吧账号密码也查出来了😂 记个TODO</span><br><span class=\"line\"></span><br><span class=\"line\">其他接口测试 略</span><br></pre></td></tr></table></figure>\n\n<p>更新：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//同时加载与用户相关联的 Users 数据。通过select选择输出的字段</span></span><br><span class=\"line\">tx := BookDAO.db.Preload(<span class=\"string\">&quot;Users&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> db.Select(<span class=\"string\">&quot;id, username&quot;</span>)</span><br><span class=\"line\">&#125;).Find(&amp;books)</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/go/src ❯ curl <span class=\"string\">&#x27;http://127.0.0.1:8000/book/list&#x27;</span> \\                               </span><br><span class=\"line\">--header <span class=\"string\">&#x27;token: 28b0ae49-e332-414d-8365-535d8a755830&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;code&quot;</span>:<span class=\"string\">&quot;90200&quot;</span>,<span class=\"string\">&quot;data&quot;</span>:[&#123;<span class=\"string\">&quot;id&quot;</span>:1,<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;三国&quot;</span>,<span class=\"string\">&quot;desc&quot;</span>:<span class=\"string\">&quot;打仗啦&quot;</span>,<span class=\"string\">&quot;Users&quot;</span>:[&#123;<span class=\"string\">&quot;id&quot;</span>:1,<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;maxbit&quot;</span>,<span class=\"string\">&quot;password&quot;</span>:<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;token&quot;</span>:<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;Books&quot;</span>:null&#125;]&#125;],<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;查询书籍列表成功&quot;</span>&#125;</span><br></pre></td></tr></table></figure>","categories":["DEV"],"tags":["Gin","GORM"]},{"title":"Golang-反射&应用","url":"/forward/f61b8e50.html","content":"<p><img src=\"/images/pasted-172.png\" alt=\"golang反射与应用\"></p>\n<p><strong>demo</strong>:<a href=\"https://github.com/bingdang/UnmarshalIni\">反射方式实现ini文件反序列化</a></p>\n","categories":["DEV"],"tags":["Golang","反射","reflect"]},{"title":"Golang-接口","url":"/forward/f9d199b7.html","content":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><p>接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。</p>\n<h2 id=\"接口类型\"><a href=\"#接口类型\" class=\"headerlink\" title=\"接口类型\"></a>接口类型</h2><p>在Go语言中接口（interface）是一种类型，一种抽象的类型。</p>\n<p><code>interface</code>是一组<code>method(方法)</code>的集合，是<code>duck-type programming</code>的一种体现。接口做的事情就像是定义一个协议（规则），只要一台机器有洗衣服和甩干的功能，我就称它为洗衣机。不关心属性（数据），只关心行为（方法）。</p>\n<p>为了保护你的Go语言职业生涯，请牢记接口（interface）是一种类型。</p>\n<p><strong>为什么要使用接口？</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Pig <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Cat)</span></span> Say() <span class=\"type\">string</span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;喵喵喵&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d Dog)</span></span> Say() <span class=\"type\">string</span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;汪汪汪&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Pig)</span></span> Say() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;哼哼哼&quot;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> animal <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//定义接口</span></span><br><span class=\"line\">\tSay() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为什么要用接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//面向对象</span></span><br><span class=\"line\">\tc:= Cat&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;猫:&quot;</span>,c.Say())</span><br><span class=\"line\">\td :=Dog&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;狗:&quot;</span>,d.Say())</span><br><span class=\"line\">\tp :=Pig&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;猪:&quot;</span>,p.Say())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//面向接口</span></span><br><span class=\"line\">\tanimalList := <span class=\"built_in\">make</span>([]animal,<span class=\"number\">0</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\"> <span class=\"comment\">//定义并初始化类型为动物的切片</span></span><br><span class=\"line\">\tanimalList = <span class=\"built_in\">append</span>(animalList,c,d,p)</span><br><span class=\"line\">  <span class=\"comment\">//将生成的动物存入该切片</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,a := <span class=\"keyword\">range</span> animalList &#123;</span><br><span class=\"line\"> <span class=\"comment\">//遍历同一特效的动物</span></span><br><span class=\"line\">\t\tcall := a.Say()</span><br><span class=\"line\"> <span class=\"comment\">//通过接口调用方法</span></span><br><span class=\"line\">\t\tfmt.Println(call)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中定义了猫和狗，然后它们都会叫，你会发现main函数中明显有重复的代码，如果我们后续再加上猪、青蛙等动物的话，我们的代码还会一直重复下去。那我们能不能把它们当成“能叫的动物”来处理呢？</p>\n<p><strong>像类似的例子在我们编程过程中会经常遇到：</strong></p>\n<ul>\n<li><p>比如一个网上商城可能使用支付宝、微信、银联等方式去在线支付，我们能不能把它们当成“支付方式”来处理呢？</p>\n</li>\n<li><p>比如三角形，四边形，圆形都能计算周长和面积，我们能不能把它们当成“图形”来处理呢？</p>\n</li>\n<li><p>比如销售、行政、程序员都能计算月薪，我们能不能把他们当成“员工”来处理呢？</p>\n</li>\n</ul>\n<p>Go语言中为了解决类似上面的问题，就设计了接口这个概念。接口区别于我们之前所有的具体类型，接口是一种抽象的类型。当你看到一个接口类型的值时，你不知道它是什么，唯一知道的是通过它的方法能做什么。</p>\n<h2 id=\"接口的定义\"><a href=\"#接口的定义\" class=\"headerlink\" title=\"接口的定义\"></a>接口的定义</h2><p>Go语言提倡面向接口编程。</p>\n<p>每个接口由数个方法组成，接口的定义格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> 接口类型名 <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    方法名<span class=\"number\">1</span>( 参数列表<span class=\"number\">1</span> ) 返回值列表<span class=\"number\">1</span></span><br><span class=\"line\">    方法名<span class=\"number\">2</span>( 参数列表<span class=\"number\">2</span> ) 返回值列表<span class=\"number\">2</span></span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参数列表中，可以只写参数数据类型</span></span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li><p>接口名：使用<code>type</code>将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加<code>er</code>，如有写操作的接口叫<code>Writer</code>，有字符串功能的接口叫<code>Stringer</code>等。接口名最好要能突出该接口的类型含义。</p>\n</li>\n<li><p>方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</p>\n</li>\n<li><p>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。</p>\n</li>\n</ul>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> writer <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Write([]<span class=\"type\">byte</span>) <span class=\"type\">error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当你看到这个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的Write方法来做一些事情。</p>\n<h2 id=\"实现接口的条件\"><a href=\"#实现接口的条件\" class=\"headerlink\" title=\"实现接口的条件\"></a>实现接口的条件</h2><p>一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个<strong>需要实现的方法列表</strong>。</p>\n<p>我们来定义一个<code>Sayer</code>接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sayer 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sayer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tsay()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>定义<code>dog</code>和<code>cat</code>两个结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> cat <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Sayer</code>接口里只有一个<code>say</code>方法，所以我们只需要给<code>dog</code>和<code>cat </code>分别实现<code>say</code>方法就可以实现<code>Sayer</code>接口了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dog实现了Sayer接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span></span> say() &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;汪汪汪&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cat实现了Sayer接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span></span> say() &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;喵喵喵&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口的实现就是这么简单，只要实现了接口中的所有方法，就实现了这个接口。</p>\n<h2 id=\"接口类型变量\"><a href=\"#接口类型变量\" class=\"headerlink\" title=\"接口类型变量\"></a>接口类型变量</h2><p>那实现了接口有什么用呢？</p>\n<p>接口类型变量能够存储所有实现了该接口的实例。 例如上面的示例中，<code>Sayer</code>类型的变量能够存储<code>dog</code>和<code>cat</code>类型的变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Sayer <span class=\"comment\">// 声明一个Sayer类型的变量x</span></span><br><span class=\"line\">\ta := cat&#123;&#125;  <span class=\"comment\">// 实例化一个cat</span></span><br><span class=\"line\">\tb := dog&#123;&#125;  <span class=\"comment\">// 实例化一个dog</span></span><br><span class=\"line\">\tx = a       <span class=\"comment\">// 可以把cat实例直接赋值给x</span></span><br><span class=\"line\">\tx.say()     <span class=\"comment\">// 喵喵喵</span></span><br><span class=\"line\">\tx = b       <span class=\"comment\">// 可以把dog实例直接赋值给x 32</span></span><br><span class=\"line\">\tx.say()     <span class=\"comment\">// 汪汪汪</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Tips：</strong> 观察下面的代码，体味此处<code>_</code>的妙用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 摘自gin框架routergroup.go</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IRouter <span class=\"keyword\">interface</span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RouterGroup <span class=\"keyword\">struct</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ IRouter = &amp;RouterGroup&#123;&#125;  <span class=\"comment\">// 确保RouterGroup实现了接口IRouter</span></span><br></pre></td></tr></table></figure>\n\n","categories":["DEV"],"tags":["Golang"]},{"title":"Golang-变量与基础数据类型、指针","url":"/forward/8f91bfec.html","content":"<h2 id=\"Golang中的变量\"><a href=\"#Golang中的变量\" class=\"headerlink\" title=\"Golang中的变量\"></a>Golang中的变量</h2><p><img src=\"/images/pasted-72.png\" alt=\"Summary\"></p>\n<h3 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h3><div class=\"tabs\" id=\"声明变量\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#声明变量-1\">标准格式</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#声明变量-2\">批量声明</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"声明变量-1\"><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 变量类型</span><br></pre></td></tr></table></figure>\n<p>例:声明变量num的类型为int</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num <span class=\"type\">int</span> </span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"声明变量-2\"><p>使用关键字var和小括号，可以同时声明多个变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>(</span><br><span class=\"line\"> a <span class=\"type\">int</span></span><br><span class=\"line\"> b <span class=\"type\">string</span></span><br><span class=\"line\"> c <span class=\"type\">bool</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n<h3 id=\"初始化变量\"><a href=\"#初始化变量\" class=\"headerlink\" title=\"初始化变量\"></a>初始化变量</h3><p>每种类型的变量初始化后都会有对应的默认值：</p>\n<ul>\n<li>整型和浮点型变量的默认值为0。</li>\n<li>字符串变量的默认值为空字符串。</li>\n<li>布尔型变量默认为false。</li>\n<li>切片、映射、函数和指针变量默认为nil。</li>\n</ul>\n<p>注意：nil相当于其他编程语言中的null、None和NULL等，指代零值，在Go语言中只能赋值给切片、映射、函数、接口、指针或通道类型。</p>\n<div class=\"tabs\" id=\"初始化变量\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#初始化变量-1\">标准格式</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#初始化变量-2\">类型推导</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#初始化变量-3\">短变量声明并初始化</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"初始化变量-1\"><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 变量类型 = 表达式</span><br></pre></td></tr></table></figure>\n<p>例:声明变量num类型为int并赋值为1</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num <span class=\"type\">int</span> = <span class=\"number\">1</span> </span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"初始化变量-2\"><p>在标准格式基础上，把变量类型省略后，编译器会根据等号右边的表达式推导变量的类型。<br>例:初始化变量age值为20</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"初始化变量-3\"><p>同样会根据等号右边的表达式推导变量的类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">age := <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>多重赋值</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">name, age := <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"number\">18</span></span><br></pre></td></tr></table></figure>\n<p>注意:在多重赋值时需要注意变量重复声明的情况</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name <span class=\"type\">string</span></span><br><span class=\"line\">name := <span class=\"string\">&quot;Tom&quot;</span> <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<p>多个短变量声明并初始化时，至少要有一个新声明的变量出现在左值中</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name <span class=\"type\">string</span></span><br><span class=\"line\">name, age := <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"number\">18</span> <span class=\"comment\">//正常运行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这样即使其他变量名存在重复声明的情况，编译器也不会报错。</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h3 id=\"变量值交换\"><a href=\"#变量值交换\" class=\"headerlink\" title=\"变量值交换\"></a>变量值交换</h3><p>交换变量a和变量b的值</p>\n<div class=\"tabs\" id=\"初始化变量\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#初始化变量-1\">利用临时变量</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#初始化变量-2\">利用多重赋值</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"初始化变量-1\"><p>通过中间变量c进行交换</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c <span class=\"type\">int</span></span><br><span class=\"line\">\ta:= <span class=\"number\">1</span></span><br><span class=\"line\">\tb:= <span class=\"number\">2</span></span><br><span class=\"line\">\tc=a <span class=\"comment\">//变量c临时存储变量a的值</span></span><br><span class=\"line\">\ta=b</span><br><span class=\"line\">\tb=c</span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">\tfmt.Println(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2 1</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"初始化变量-2\"><p>通过多重赋值的特性，完成变量值的交换工作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\ta := <span class=\"number\">1</span></span><br><span class=\"line\">\tb := <span class=\"number\">2</span></span><br><span class=\"line\">\ta ,b =b,a</span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">\tfmt.Println(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2 1</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h3 id=\"匿名变量\"><a href=\"#匿名变量\" class=\"headerlink\" title=\"匿名变量\"></a>匿名变量</h3><p>赋值给多个变量时，如果存在不需要接收值的变量，可以使用匿名变量来代替。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReturnData</span><span class=\"params\">()</span></span> (<span class=\"type\">int</span>, <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">10</span>, <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta, _ := ReturnData()</span><br><span class=\"line\">\t_, b := ReturnData()</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//10 20</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Golang中的基础数据类型\"><a href=\"#Golang中的基础数据类型\" class=\"headerlink\" title=\"Golang中的基础数据类型\"></a>Golang中的基础数据类型</h2><p><img src=\"/images/pasted-73.png\" alt=\"Summary\"><br>Go语言的数据类型十分丰富，常见的包括整型、浮点型、字符串和布尔型等。Go语言特有的数据类型包括接口和通道等。</p>\n<div class=\"tabs\" id=\"基础数据类型\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#基础数据类型-1\">整型</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#基础数据类型-2\">浮点型</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#基础数据类型-3\">字符串</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#基础数据类型-4\">字符和转义字符</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#基础数据类型-5\">布尔型</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"基础数据类型-1\"><p>整形主要分为有符有符号整型：int8、int16、int32、int64。号无符号两大类</p>\n<ul>\n<li>有符号整型：int8、int16、int32、int64。</li>\n<li>无符号整型：uint8、uint16、uint32、uint64。</li>\n</ul>\n<p>有符号整型其二进制最高位储存符号，因此两者的区别就是无符号整型可以存放的正数范围比有符号整型中的正数范围大一倍。<br>例如：int16的范围为-32768（即-2^15）到32767（即2^15-1），uint16的范围为0到65535（即2^16-1）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在Go语言中，对于两个整型变量的除法运算，小数部分将会直接被截取，只取整数部分，不会存在四舍五入的情况。</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">3</span></span><br><span class=\"line\">\tb := <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(a / b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"基础数据类型-2\"><p>Go语言支持两种浮点数:float32和float64。float32浮点数的最大范围约为3.4e38，float64浮点数最大范围约为1.8e308。</p>\n<p>用以下方式获取除法计算的精确值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//浮点数精确整除</span></span><br><span class=\"line\">\ta := <span class=\"number\">3.0</span></span><br><span class=\"line\">\tb := <span class=\"number\">2.0</span></span><br><span class=\"line\">\tfmt.Println(a/b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;变量a的类型为：&quot;</span>,reflect.TypeOf(a))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;变量b的类型为：&quot;</span>,reflect.TypeOf(b))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.5</span></span><br><span class=\"line\"><span class=\"comment\">//变量a的类型为：float64</span></span><br><span class=\"line\"><span class=\"comment\">//变量b的类型为：float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面调用了reflect.TypeOf()函数来打印变量a和b的类型。</span></span><br></pre></td></tr></table></figure>\n<p>代码所在计算机为64位系统， 我们通过赋值时带上小数点来告诉编译器该变量类型为float64，这样除法得到的结果也是float64类 型，即可以显示出精确结果。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"基础数据类型-3\"><p>Go语言中，字符串的值为双引号中的内容，而且可以直接输入中文。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;你好：Hello&quot;</span></span><br><span class=\"line\">\tfmt.Println(str)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//多行字符串</span></span><br><span class=\"line\">\tstr2 := <span class=\"string\">`Hello</span></span><br><span class=\"line\"><span class=\"string\">World</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">\tfmt.Println(str)</span><br><span class=\"line\">    fmt.Println(str2)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//你好：Hello</span></span><br><span class=\"line\"><span class=\"comment\">//Hello</span></span><br><span class=\"line\"><span class=\"comment\">//World</span></span><br></pre></td></tr></table></figure>\n<p>遇到输入多行字符串的情况，此时需要使用“`”字符，即反引号。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"基础数据类型-4\"><p><strong>字符</strong><br>字符串中的每个元素就是字符。 Go语言中，字符的值为单引号中的内容，而且可以直接输入中文。<br>字符有以下两种类型:</p>\n<ul>\n<li>uint8类型:代表了ASCII码的一个字符。</li>\n<li>rune类型:代表了UTF格式的一个字符(如中文、日文或其他复合字符)，本质是int32类型。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tenglish := <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">\tchinese := <span class=\"string\">&#x27;我&#x27;</span></span><br><span class=\"line\">\tfmt.Println(english)</span><br><span class=\"line\">\tfmt.Println(chinese)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//97</span></span><br><span class=\"line\"><span class=\"comment\">//25105</span></span><br><span class=\"line\"><span class=\"comment\">//第一行打印了字符“a”的ASCII码值97，第二行打印了中文“我”的int32类型值25105。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>转义字符</strong><br>使用反斜线“\\”来对字符进行转义，转义字符具有特定的含义，不同于字符原有的意义，所以称为转义字符。<br>常见转义字符：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">转义符</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\n</td>\n<td align=\"center\">匹配换行符</td>\n</tr>\n<tr>\n<td align=\"center\">\\r</td>\n<td align=\"center\">匹配回车符</td>\n</tr>\n<tr>\n<td align=\"center\">\\t</td>\n<td align=\"center\">匹配制表符</td>\n</tr>\n<tr>\n<td align=\"center\">\\‘</td>\n<td align=\"center\">匹配单引号</td>\n</tr>\n<tr>\n<td align=\"center\">\\“</td>\n<td align=\"center\">匹配双引号</td>\n</tr>\n<tr>\n<td align=\"center\">\\\\</td>\n<td align=\"center\">匹配反斜杠</td>\n</tr>\n</tbody></table><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"基础数据类型-5\"><p>布尔型是最简单的数据类型，只有两个值:false(假)和true(真)。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"type\">bool</span></span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">\ta = <span class=\"literal\">true</span></span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h3 id=\"数据类型操作\"><a href=\"#数据类型操作\" class=\"headerlink\" title=\"数据类型操作\"></a>数据类型操作</h3><div class=\"tabs\" id=\"数据类型操作\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#数据类型操作-1\">数据类型判断</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#数据类型操作-2\">数据类型转换</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"数据类型操作-1\"><p>如果需要判断变量的类型，可以使用Go语言标准库中的reflect包，通过将变量传入此包的 TypeOf()方法，得到变量的数据类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\ta := <span class=\"number\">1</span></span><br><span class=\"line\">\tb := <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">\tc := <span class=\"literal\">true</span></span><br><span class=\"line\">\tfmt.Println(reflect.TypeOf(a))</span><br><span class=\"line\">\tfmt.Println(reflect.TypeOf(b))</span><br><span class=\"line\">\tfmt.Println(reflect.TypeOf(c))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//int</span></span><br><span class=\"line\"><span class=\"comment\">//string</span></span><br><span class=\"line\"><span class=\"comment\">//bool</span></span><br><span class=\"line\"><span class=\"comment\">// TypeOf()方法直接返回传入变量的类型，通过Println()方法打印到控制台。</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"数据类型操作-2\"><p>Go语言常见的数据类型之间能够互相进行类型转换，通过使用类型前置加小括号的方式进行。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"type\">int16</span> = <span class=\"number\">97</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;变量a值为：&quot;</span>,a,<span class=\"string\">&quot;,变量类型为：&quot;</span>,reflect.TypeOf(a))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"type\">int32</span>(a)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;变量a值为：&quot;</span>,a,<span class=\"string\">&quot;,变量类型为：&quot;</span>,reflect.TypeOf(b))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;转换变量b类型为string：&quot;</span>,<span class=\"type\">string</span>(b))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//变量a值为： 97 ,变量类型为： int16</span></span><br><span class=\"line\"><span class=\"comment\">//变量a值为： 97 ,变量类型为： int32</span></span><br><span class=\"line\"><span class=\"comment\">//转换变量b类型为string： a</span></span><br></pre></td></tr></table></figure>\n\n<p>注意⚠️:在转换变量类型时，需要注意变量原本的值是否会发生改变。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"type\">int32</span> = <span class=\"number\">1234567891</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;变量a值为：&quot;</span>,a,<span class=\"string\">&quot;,变量类型为：&quot;</span>,reflect.TypeOf(a))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;转换变量a类型为int16,变量a类型为：&quot;</span>,<span class=\"type\">int16</span>(a),<span class=\"string\">&quot;变量a的类型为：&quot;</span>,reflect.TypeOf(<span class=\"type\">int16</span>(a)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//变量a值为： 1234567891 ,变量类型为： int32</span></span><br><span class=\"line\"><span class=\"comment\">//转换变量a类型为int16,变量a类型为： 723 变量a的类型为： int16</span></span><br></pre></td></tr></table></figure>\n<p>由于16位有符号整型的范围为-32768~32767，而变量a的值1234567891不在这个范围内，导致变量a原本的值发生改变。</p>\n<p>1234567891对应的十六进制为0x499602d3，转变为16位变量后，长度缩短一半，丢失了前(高)4位十六进制，即变为:0x02d3，其对应的十进制值为723。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n<h2 id=\"Golang中的指针\"><a href=\"#Golang中的指针\" class=\"headerlink\" title=\"Golang中的指针\"></a>Golang中的指针</h2><p><strong>概述：</strong>指针是一种地址值，这个地址值代表着计算机内存空间中的某个位置。指针变量就是存放地址值的变量</p>\n<div class=\"tabs\" id=\"指针\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#指针-1\">声明指针</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#指针-2\">取变量地址</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#指针-3\">获取指针所指向的内容</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#指针-4\">获取指针所指向的内容</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#指针-5\">new()函数初始化指针</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"指针-1\"><p>指针变量的声明格式如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 *<span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n<p>一般情况下，会将指针变量的类型声明为*int，变量名为“p”开头(指代“point”)的单 词，如“p”或“ptr”。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//var p *int</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(p)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&lt;nil&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//由于指针变量未指向任何地址，所以打印值为nil。</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"指针-2\"><p>Go语言中，使用操作符“&amp;”取变量地址，取得的地址值可以赋给指针变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnum := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p *<span class=\"type\">int</span> <span class=\"comment\">//声明指针变量</span></span><br><span class=\"line\">\tp = &amp;num <span class=\"comment\">//将num变量的指向地址赋值给指针变量</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;num变量地址为:&quot;</span>,p)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;指针变量p的地址为:&quot;</span>,&amp;p) <span class=\"comment\">//指针变量本身也是变量，所以他拥有自己的内存地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//num变量的地址为:0xc042066080</span></span><br><span class=\"line\"><span class=\"comment\">//指针变量p的地址为:0xc042086018</span></span><br></pre></td></tr></table></figure>\n<p>由于指针变量本身也是变量，因此指针变量在计算机内存中也有自己的地址。需注意的是，运行上面时得到的实际结果可能与以上结果不符，多次运行该程序得到的结果可能都不一致，这是由于变量在内存中的位置都是随机分配的。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"指针-3\"><p>指针变量存储的值为地址值，通过在指针变量前面加上“*”符号可以获取指针所指向地址值 的内容。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnum := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p *<span class=\"type\">int</span> <span class=\"comment\">//声明指针变量</span></span><br><span class=\"line\">\tp = &amp;num <span class=\"comment\">//将num变量的指向地址赋值给指针变量</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;指针变量p所指向的内容&quot;</span>,*p)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指针变量p所指向的内容 1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意⚠️:</strong> p指针声明后其值为nil，这时如果获取指针p指向的地址内容，则会出错。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p *<span class=\"type\">int</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;指针变量p指向的地址为：&quot;</span>,p)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;指针变量p所指向的内容：&quot;</span>,*p)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 指针变量p指向的地址为： &lt;nil&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// panic: runtime error: invalid memory address or nil pointer dereference</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"指针-4\"><p>在指针变量有实际指向的地址值后，可以通过如下格式直接修改指针所指向内存地址的内容:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">*变量名 =修改值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnum:=<span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p *<span class=\"type\">int</span></span><br><span class=\"line\">\tp = &amp;num <span class=\"comment\">//取内存地址</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;指针p所指向的内容：&quot;</span>,*p,<span class=\"string\">&quot;变量num此时值为：&quot;</span>,num)</span><br><span class=\"line\">\t*p = <span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;指针p的所指向的内容为：&quot;</span>,*p,<span class=\"string\">&quot;变量num此时值为：&quot;</span>,num,<span class=\"string\">&quot;p的数据类型：&quot;</span>,reflect.TypeOf(p))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指针p所指向的内容： 1 变量num此时值为： 1</span></span><br><span class=\"line\"><span class=\"comment\">// 指针p的所指向的内容为： 10 变量num此时值为： 10 p的数据类型： *int</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"指针-5\"><p>在使用指针修改值时也需注意，可使用new()函数来给指针分配地址并初始化地址对应的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p *<span class=\"type\">int</span></span><br><span class=\"line\">\tp = <span class=\"built_in\">new</span>(<span class=\"type\">int</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;指针变量p所指向的内容：&quot;</span>,*p,<span class=\"string\">&quot;指针变量p所指向的地址是&quot;</span>,p)</span><br><span class=\"line\">\t*p=<span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;指针变量p所指向的内容：&quot;</span>,*p,<span class=\"string\">&quot;指针变量p所指向的地址是&quot;</span>,p)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指针变量p所指向的内容： 0 指针变量p所指向的地址是 0xc0000180a0</span></span><br><span class=\"line\"><span class=\"comment\">//指针变量p所指向的内容： 10 指针变量p所指向的地址是 0xc0000180a0</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h2 id=\"Golang中的字符串操作\"><a href=\"#Golang中的字符串操作\" class=\"headerlink\" title=\"Golang中的字符串操作\"></a>Golang中的字符串操作</h2><div class=\"tabs\" id=\"字符串操作\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#字符串操作-1\">字符串拼接</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#字符串操作-2\">字符串截取</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#字符串操作-3\">字符串修改</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#字符串操作-4\">字符串格式化输出</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"字符串操作-1\"><p><strong>方法1:</strong><br>Go语言的字符串拼接操作可以通过“+”操作符来完成</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"string\">&quot;9623&quot;</span></span><br><span class=\"line\">\tb := <span class=\"string\">&quot;503&quot;</span></span><br><span class=\"line\">\tc := a+b</span><br><span class=\"line\">\tfmt.Println(c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 9623503</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方法2:</strong><br>需要拼接的字符串较长时，使用“+”操作符进行字符串的拼接并不高效，使用字节缓冲的方式来进行。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta:= <span class=\"string\">&quot;012345&quot;</span></span><br><span class=\"line\">\tb := <span class=\"string\">&quot;6789&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c bytes.Buffer</span><br><span class=\"line\">\tc.WriteString(a)</span><br><span class=\"line\">\tc.WriteString(b)</span><br><span class=\"line\">\tfmt.Println(c.String())</span><br><span class=\"line\">\tfmt.Println(reflect.TypeOf(c))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0123456789</span></span><br><span class=\"line\"><span class=\"comment\">// bytes.Buffer</span></span><br></pre></td></tr></table></figure>\n\n<p>其中bytes包中的Buffer数据结构如下，其本质是字节数组，字符串本质上也是一种字节数组，可以通过WriteString()方法来写入。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Buffer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbuf      []<span class=\"type\">byte</span> <span class=\"comment\">// contents are the bytes buf[off : len(buf)]</span></span><br><span class=\"line\">\toff      <span class=\"type\">int</span>    <span class=\"comment\">// read at &amp;buf[off], write at &amp;buf[len(buf)]</span></span><br><span class=\"line\">\tlastRead readOp <span class=\"comment\">// last read operation, so that Unread* can work correctly.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"字符串操作-2\"><p>Go语言中的strings包的Index()方法会从头对字符串进行搜索，获得搜索内容所属下标，完成对字符串的截取。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;go语言&quot;</span></span><br><span class=\"line\">\tindex := strings.Index(str,<span class=\"string\">&quot;语&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(index)</span><br><span class=\"line\">\tfmt.Println(str[index:])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 语言</span></span><br></pre></td></tr></table></figure>\n\n<p>strings包中还提供了LastIndex()方法来反向搜索字符串。例如，我们只想截取字符串“Go语言,Python语言”中最后的“语言”，就可以使用LastIndex()方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;go语言,Python语言&quot;</span></span><br><span class=\"line\">\tindex := strings.LastIndex(str,<span class=\"string\">&quot;语&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(index)</span><br><span class=\"line\">\tfmt.Println(str[index:])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"comment\">// 语言</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"字符串操作-3\"><p>Go语言无法对字符串直接进行修改，只能将字符串转换为字节数组后再进行操作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;go语言&quot;</span></span><br><span class=\"line\">\tbytes := []<span class=\"type\">byte</span>(str)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>;i++&#123;</span><br><span class=\"line\">\t\tbytes[i] = <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"type\">string</span>(bytes))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  语言</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"字符串操作-4\"><p>对字符串的格式化使用fmt包的Sprintf()方法，Sprintf()方法的调用格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sprintf(format,arg1,arg2...)</span><br></pre></td></tr></table></figure>\n<p>第一个参数为需要格式化的字符串，其中包含格式化动词，格式化动词以“%”开头。调用样例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> day = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hour = <span class=\"number\">24</span></span><br><span class=\"line\">\tstr := fmt.Sprintf(<span class=\"string\">&quot;%d天包含%d个小时&quot;</span>,day,hour)</span><br><span class=\"line\">\tfmt.Println(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1天包含24个小时</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">格式化动词</th>\n<th align=\"center\">动词功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">%v</td>\n<td align=\"center\">按值的本来值输出</td>\n</tr>\n<tr>\n<td align=\"center\">%+v</td>\n<td align=\"center\">在 %v 基础上，对结构体字段名和值进行展开</td>\n</tr>\n<tr>\n<td align=\"center\">%#v</td>\n<td align=\"center\">输出 Go 语言语法格式的值</td>\n</tr>\n<tr>\n<td align=\"center\">%T</td>\n<td align=\"center\">输出 Go 语言语法格式的类型和值</td>\n</tr>\n<tr>\n<td align=\"center\">%%</td>\n<td align=\"center\">输出 % 本体</td>\n</tr>\n<tr>\n<td align=\"center\">%b</td>\n<td align=\"center\">整型以二进制方式显示</td>\n</tr>\n<tr>\n<td align=\"center\">%o</td>\n<td align=\"center\">整型以八进制方式显示</td>\n</tr>\n<tr>\n<td align=\"center\">%d</td>\n<td align=\"center\">整型以十进制方式显示</td>\n</tr>\n<tr>\n<td align=\"center\">%x</td>\n<td align=\"center\">整型以十六进制方式显示</td>\n</tr>\n<tr>\n<td align=\"center\">%X</td>\n<td align=\"center\">整型以十六进制、字母大写方式显示</td>\n</tr>\n<tr>\n<td align=\"center\">%U</td>\n<td align=\"center\">Unicode 字符</td>\n</tr>\n<tr>\n<td align=\"center\">%f</td>\n<td align=\"center\">浮点数</td>\n</tr>\n<tr>\n<td align=\"center\">%p</td>\n<td align=\"center\">指针，以十六进制方式显示</td>\n</tr>\n</tbody></table><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n","categories":["DEV"],"tags":["Golang"]},{"title":"Golang-常量与运算符","url":"/forward/d5b63f7f.html","content":"<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p><strong>概述:</strong> 常量与运算符是基本概念，对于Go语言，可以使用它们进行赋值、计算和比较。Go语言支持的运算包括算术运算、比较运算和逻辑运算等。</p>\n<p>所谓常量，就是值不能变的量，比如常用的数学常数“π”就是一个常量。大多数的编程语言会使用全大写的变量名表示常量，所以约定俗成，如果常量的名字是全大写的变量，一般不做修改。</p>\n<h3 id=\"常量的定义\"><a href=\"#常量的定义\" class=\"headerlink\" title=\"常量的定义\"></a>常量的定义</h3><div class=\"tabs\" id=\"常量的定义\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#常量的定义-1\">显式定义</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#常量的定义-2\">隐式定义</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#常量的定义-3\">常量组定义</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#常量的定义-4\">常量枚举iota</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"常量的定义-1\"><p>常量的声明以关键字const开头，后接变量类型并进行赋值，行尾没有其他标点符号。<br>常量的显式声明格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 常量名 常量类型 = value</span><br></pre></td></tr></table></figure>\n<p><strong>注意⚠️：</strong>一个常量被声明后可以不使用，但是变量一旦声明则必须使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> a <span class=\"type\">float64</span> = <span class=\"number\">3.1415</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> b <span class=\"type\">string</span> = <span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.1415</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"常量的定义-2\"><p>由于Go是编译型语言，定义常量时可以省略常量类型，因为编译器可以根据变量的值来推断其类型。<br>常量的隐式声明格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 常量名 = value</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">3.1415</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">&quot;Hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.1415</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"常量的定义-3\"><p>如果程序需要用到大量值相同的常量，我们可以直接定义常量组。在定义常量组时，若不提供初始值，则表示将使用上行的表达式。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\ta = <span class=\"number\">3.1415</span></span><br><span class=\"line\">\tb</span><br><span class=\"line\">\tc</span><br><span class=\"line\">\td = <span class=\"string\">&quot;Hello world&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a:&quot;</span>,a)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;b:&quot;</span>,b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;c:&quot;</span>,c)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;d:&quot;</span>,d)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a: 3.1415</span></span><br><span class=\"line\"><span class=\"comment\">// b: 3.1415</span></span><br><span class=\"line\"><span class=\"comment\">// c: 3.1415</span></span><br><span class=\"line\"><span class=\"comment\">// d: Hello world</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"常量的定义-4\"><p>枚举通常针对一个有穷序列集而言，一个集的枚举就是列出有穷序列集的所有成员。<br>Go语言现阶段还没有枚举，但是我们可以使用一种特殊常量“iota”来模拟枚举。<br>iota在const关键字出现时被重置为0，const中每新增一行常量声明，将使iota进行一次计数，可以简单地将iota理解为const语句块中的行索引。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\ta = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">\tb        <span class=\"comment\">//沿用上一行iota，并计数 1</span></span><br><span class=\"line\">\tc = <span class=\"string\">&quot;Hello world&quot;</span> <span class=\"comment\">//iota += 1, iota = 2</span></span><br><span class=\"line\">\td        <span class=\"comment\">//沿用上一行&quot;Hello world&quot;,iota += 1, iota = 3</span></span><br><span class=\"line\">\te = <span class=\"literal\">iota</span> <span class=\"literal\">iota</span> += <span class=\"number\">1</span>, <span class=\"literal\">iota</span> = <span class=\"number\">4</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a:&quot;</span>,a)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;b:&quot;</span>,b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;c:&quot;</span>,c)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;d:&quot;</span>,d)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;e:&quot;</span>,e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a: 0</span></span><br><span class=\"line\"><span class=\"comment\">// b: 1</span></span><br><span class=\"line\"><span class=\"comment\">// c: Hello world</span></span><br><span class=\"line\"><span class=\"comment\">// d: Hello world</span></span><br><span class=\"line\"><span class=\"comment\">// e: 4</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p>Go数据是通过使用操作运算符来进行操作的，与数学运算符类似。操作运算符接受一个或多个参数，并生成一个新的值。</p>\n<div class=\"tabs\" id=\"运算符\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#运算符-1\">算术运算符</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#运算符-2\">比较运算符</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#运算符-3\">赋值运算符</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#运算符-4\">位运算符</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#运算符-5\">逻辑运算符</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#运算符-6\">其他运算符</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"运算符-1\"><p>算术运算符用于Go语言的数学表达式中，它们的作用和在数学中的作用一样。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+</td>\n<td align=\"left\">加法：相加运算符两侧的值</td>\n<td align=\"left\">a + b</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"left\">减法：左操作数减去右操作数</td>\n<td align=\"left\">a - b</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"left\">乘法：操作符两侧的值相乘</td>\n<td align=\"left\">a * b</td>\n</tr>\n<tr>\n<td align=\"center\">/</td>\n<td align=\"left\">除法：左操作数除以右操作数</td>\n<td align=\"left\">a / b</td>\n</tr>\n<tr>\n<td align=\"center\">％</td>\n<td align=\"left\">取模：左操作数除以右操作数的余数</td>\n<td align=\"left\">a % b</td>\n</tr>\n<tr>\n<td align=\"center\">++</td>\n<td align=\"left\">自增：操作数加 1</td>\n<td align=\"left\">a++</td>\n</tr>\n<tr>\n<td align=\"center\">–</td>\n<td align=\"left\">自减：操作数减 1</td>\n<td align=\"left\">a–</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">1</span></span><br><span class=\"line\">\tb := <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a+b=&quot;</span>,a+b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a-b=&quot;</span>,a-b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a*b=&quot;</span>,a*b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a/b=&quot;</span>,a/b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a%b=&quot;</span>,a%b)</span><br><span class=\"line\"></span><br><span class=\"line\">\ta++</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a++后a值为:&quot;</span>,a)</span><br><span class=\"line\">\tb--</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;b--后b值为:&quot;</span>,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a+b= 3</span></span><br><span class=\"line\"><span class=\"comment\">// a-b= -1</span></span><br><span class=\"line\"><span class=\"comment\">// a*b= 2</span></span><br><span class=\"line\"><span class=\"comment\">// a/b= 0</span></span><br><span class=\"line\"><span class=\"comment\">// a%b= 1</span></span><br><span class=\"line\"><span class=\"comment\">// a++后a值为: 2</span></span><br><span class=\"line\"><span class=\"comment\">// b--后b值为: 1</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"运算符-2\"><p>比较运算符，对符号两边的变量进行比较，包括大小、相等等。如果比较结果是正确，返回真（true），否则返回假（false）。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">==</td>\n<td align=\"left\">等于：比较对象是否相等</td>\n<td align=\"left\">a == b</td>\n</tr>\n<tr>\n<td align=\"center\">!=</td>\n<td align=\"left\">不等于：比较两个对象是否不相等</td>\n<td align=\"left\">a != b</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"left\">大于：返回 a 是否大于 b</td>\n<td align=\"left\">a &gt; b</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"left\">小于：返回 a 是否小于 b</td>\n<td align=\"left\">a &lt; b</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;=</td>\n<td align=\"left\">大于等于：返回 x 是否大于等于 y</td>\n<td align=\"left\">x &gt;= y</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;=</td>\n<td align=\"left\">小于等于：返回 x 是否小于等于 y</td>\n<td align=\"left\">x &lt;= y</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">1</span></span><br><span class=\"line\">\tb := <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a==b&quot;</span>,a==b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a!=b&quot;</span>,a!=b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a&gt;b&quot;</span>,a&gt;b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a&lt;b&quot;</span>,a&lt;b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a&gt;=b&quot;</span>,a&gt;=b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a&lt;=b&quot;</span>,a&lt;=b)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a==b false</span></span><br><span class=\"line\"><span class=\"comment\">// a!=b true</span></span><br><span class=\"line\"><span class=\"comment\">// a&gt;b false</span></span><br><span class=\"line\"><span class=\"comment\">// a&lt;b true</span></span><br><span class=\"line\"><span class=\"comment\">// a&gt;=b false</span></span><br><span class=\"line\"><span class=\"comment\">// a&lt;=b true</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"运算符-3\"><p>最常用的赋值运算符是等号“=”，表示把右边的结果值赋值给左边的变量。其他的赋值运算符大多都是算术运算符和赋值运算符的简写。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">示例</th>\n<th align=\"center\">展开形式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">=</td>\n<td align=\"center\">将右边值赋值给左边</td>\n<td align=\"center\">a=100</td>\n<td align=\"center\">a=100</td>\n</tr>\n<tr>\n<td align=\"center\">+=</td>\n<td align=\"center\">将左边值加右边值</td>\n<td align=\"center\">a+=10</td>\n<td align=\"center\">a=a+10</td>\n</tr>\n<tr>\n<td align=\"center\">-=</td>\n<td align=\"center\">将左边值减右边值</td>\n<td align=\"center\">a-=10</td>\n<td align=\"center\">a=a-10</td>\n</tr>\n<tr>\n<td align=\"center\">*=</td>\n<td align=\"center\">将左边值乘以右边值</td>\n<td align=\"center\">a*=10</td>\n<td align=\"center\">a=a*10</td>\n</tr>\n<tr>\n<td align=\"center\">/=</td>\n<td align=\"center\">将左边值除以右边值</td>\n<td align=\"center\">a/=10</td>\n<td align=\"center\">a=a/10</td>\n</tr>\n<tr>\n<td align=\"center\">%=</td>\n<td align=\"center\">将左边值对右边值做取模</td>\n<td align=\"center\">a%=10</td>\n<td align=\"center\">a=a%10</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a=&quot;</span>,a)</span><br><span class=\"line\">\ta += <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a += 2 ,a=&quot;</span>,a)</span><br><span class=\"line\">\ta -= <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a -= 2 ,a=&quot;</span>,a)</span><br><span class=\"line\">\ta *= <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a *= 2 ,a=&quot;</span>,a)</span><br><span class=\"line\">\ta /= <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a /= 2 ,a=&quot;</span>,a)</span><br><span class=\"line\">\ta %= <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a %= 2 ,a=&quot;</span>,a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a= 10</span></span><br><span class=\"line\"><span class=\"comment\">// a += 2 ,a= 12</span></span><br><span class=\"line\"><span class=\"comment\">// a -= 2 ,a= 10</span></span><br><span class=\"line\"><span class=\"comment\">// a *= 2 ,a= 20</span></span><br><span class=\"line\"><span class=\"comment\">// a /= 2 ,a= 10</span></span><br><span class=\"line\"><span class=\"comment\">// a %= 2 ,a= 0</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"运算符-4\"><p>Go定义了位运算符，应用在两个数的运算上，会对数字的二进制所有位数从低到高进行运算。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">＆</td>\n<td align=\"center\">按位与，如果相对应位都是 1，则结果为 1，否则为 0</td>\n<td align=\"center\">a &amp; b</td>\n</tr>\n<tr>\n<td align=\"center\">&#124;</td>\n<td align=\"center\">按位或，如果相对应位都是 0，则结果为 0，否则为 1</td>\n<td align=\"center\">a &#124; b</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">按位异或，如果相对应位值相同，则结果为 0，否则为 1</td>\n<td align=\"center\">a ^ b</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&lt;</td>\n<td align=\"center\">按位左移运算符，左操作数按位左移右操作数指定的位数</td>\n<td align=\"center\">a &lt;&lt; b</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;&gt;</td>\n<td align=\"center\">按位右移运算符，左操作数按位右移右操作数指定的位数</td>\n<td align=\"center\">a &gt;&gt; b</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">9</span></span><br><span class=\"line\">\tb := <span class=\"number\">13</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a&amp;b = &quot;</span>,a&amp;b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a|b = &quot;</span>,a|b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a^b = &quot;</span>,a^b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a&lt;&lt;2 = &quot;</span>,a&lt;&lt;<span class=\"number\">2</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;b&gt;&gt;2 = &quot;</span>,b&gt;&gt;<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a&amp;b =  9</span></span><br><span class=\"line\"><span class=\"comment\">// a|b =  13</span></span><br><span class=\"line\"><span class=\"comment\">// a^b =  4</span></span><br><span class=\"line\"><span class=\"comment\">// a&lt;&lt;b =  36</span></span><br><span class=\"line\"><span class=\"comment\">// a&gt;&gt;b =  3</span></span><br></pre></td></tr></table></figure>\n<p><strong>与运算:</strong> 两个都为1 才为1<br><strong>或运算:</strong> 有一个为1 就为1<br><strong>异或运算:</strong> 两个值不同 才为1</p>\n<ul>\n<li>按位与：将参与运算的两个数按二进制位展开后进行与运算，9按二进制位展开为1001，13按二进制位展开为1101，1001和1101的与运算结果为1001，即十进制9。</li>\n<li>按位或：将参与运算的两个数按二进制位展开后进行或运算，9按二进制位展开为1001，13按二进制位展开为1101，1001和1101的或运算结果为1101，即十进制13。</li>\n<li>按位异或：将参与运算的两个数按二进制位展开后进行异或运算，9按二进制位展开为1001，13按二进制位展开为1101，1001和1101的异或运算结果为0100，即十进制4。</li>\n<li>按位左移：将参与运算的数按二进制位展开后全部左移指定位数，9按二进制位展开为1001，全部左移2位后变为100100，即十进制36。从右往左推补零</li>\n<li>按位右移：将参与运算的数按二进制位展开后全部右移指定位数，13按二进制位展开为1101，全部右移2位后变为11，即十进制3。从左往右推补零</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"运算符-5\"><p>逻辑运算符在Go语言中非常重要，广泛应用在逻辑判断的地方。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑与，当且仅当两个操作数都为真，条件才为真</td>\n<td align=\"left\">a &amp;&amp; b</td>\n</tr>\n<tr>\n<td align=\"left\">&#124;&#124;</td>\n<td align=\"left\">逻辑或，两个操作数中任意一个为真，条件为真</td>\n<td align=\"left\">a &#124;&#124; b</td>\n</tr>\n<tr>\n<td align=\"left\">!</td>\n<td align=\"left\">逻辑非，用来反转操作数的逻辑状态。如果条件为 true，则逻辑非运算符将得到 false</td>\n<td align=\"left\">!a</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"literal\">true</span></span><br><span class=\"line\">\tb :=<span class=\"literal\">false</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a&amp;&amp;b = &quot;</span>,a&amp;&amp;b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a||b = &quot;</span>,a||b)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;!a = &quot;</span>,!a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a&amp;&amp;b =  false</span></span><br><span class=\"line\"><span class=\"comment\">// a||b =  true</span></span><br><span class=\"line\"><span class=\"comment\">// !a =  false</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"运算符-6\"><p>需要注意的是按位取反运算符“^”，它和按位异或运算符不同，涉及的操作数只有一个，因此也可归类为单目运算符。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"left\">说明</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&amp;</td>\n<td align=\"left\">返回变量存储地址</td>\n<td align=\"center\">&amp;a</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"left\">指针变量</td>\n<td align=\"center\">*a</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"left\">按位取反（注意与按位异或区分）</td>\n<td align=\"center\">^a</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta:=<span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p *<span class=\"type\">int</span></span><br><span class=\"line\">\tp = &amp;a</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;变量a地址为:&quot;</span>,p)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;变量a内容为:&quot;</span>,*p)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;^a = &quot;</span>,^a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变量a地址为: 0xc00000a0b0</span></span><br><span class=\"line\"><span class=\"comment\">// 变量a内容为: 1</span></span><br><span class=\"line\"><span class=\"comment\">// ^a =  -2</span></span><br></pre></td></tr></table></figure>\n<p>正数1按二进制位展开为001，其中最左位0表示正数，取反操作对所有二进制位取反，结果为110，其中最左位1表示负数，即十进制-2。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h3 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h3><p>表由上至下代表优先级由高到低。（表中第一行运算符“^”代表按位取反运算符，第八行运算符“^”代表按位异或运算符。）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">关联性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">! 、^ 、++、–</td>\n<td align=\"center\">从右到左</td>\n</tr>\n<tr>\n<td align=\"center\">*（乘）、 / 、%</td>\n<td align=\"center\">从左到右</td>\n</tr>\n<tr>\n<td align=\"center\">+（加） 、-（减）</td>\n<td align=\"center\">从左到右</td>\n</tr>\n<tr>\n<td align=\"center\">＜＜、 ＞＞</td>\n<td align=\"center\">从左到右</td>\n</tr>\n<tr>\n<td align=\"center\">＜ 、＜=、 ＞、 ＞=</td>\n<td align=\"center\">从左到右</td>\n</tr>\n<tr>\n<td align=\"center\">==、 !=</td>\n<td align=\"center\">从左到右</td>\n</tr>\n<tr>\n<td align=\"center\">&amp;（按位与）</td>\n<td align=\"center\">从左到右</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">从左到右</td>\n</tr>\n<tr>\n<td align=\"center\">&#124;</td>\n<td align=\"center\">从左到右</td>\n</tr>\n<tr>\n<td align=\"center\">&amp;&amp;</td>\n<td align=\"center\">从左到右</td>\n</tr>\n<tr>\n<td align=\"center\">&#124;&#124;</td>\n<td align=\"center\">从左到右</td>\n</tr>\n<tr>\n<td align=\"center\">=、+=、-=、*=、/=、%=、＞＞=、＜＜=、&amp;=、^=、&#124;=</td>\n<td align=\"center\">从右到左</td>\n</tr>\n</tbody></table>\n","categories":["DEV"],"tags":["Golang"]},{"title":"Golang-流程控制、斐波那契数列","url":"/forward/420acb0d.html","content":"<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><p>Go语言基本上继承了C/C++语言所有流程控制语句<br>流程控制语句主要包括：条件判断语句（if和switch）、循环控制语句（for、break和continue）和跳转语句（goto）。</p>\n<p><img src=\"/images/pasted-75.png\" alt=\"流程控制\"></p>\n<div class=\"tabs\" id=\"流程控制\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#流程控制-1\">if 判断</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#流程控制-2\">for 循环</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#流程控制-3\">switch 分支</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#流程控制-4\">goto 跳转</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"流程控制-1\"><p>Go语言中，通过if关键字构成的条件判断语句进行条件判断，格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 表达式<span class=\"number\">1</span> &#123;</span><br><span class=\"line\"> 分支<span class=\"number\">1</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> 表达式<span class=\"number\">2</span> &#123;</span><br><span class=\"line\"> 分支<span class=\"number\">2</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"> 分支<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>当表达式1的执行结果为true时，执行分支1，否则对表达式2的执行结果进行判断；</p>\n</li>\n<li><p>若表达式2的结果为true，执行分支2；</p>\n</li>\n<li><p>如果都不满足，则执行分支3。</p>\n</li>\n<li><p>当表达式1的执行结果为true时，执行分支1，否则对表达式2的执行结果进行判断；</p>\n</li>\n<li><p>若表达式2的结果为true，执行分支2；</p>\n</li>\n<li><p>如果都不满足，则执行分支3。</p>\n</li>\n</ul>\n<p><strong>注意⚠：</strong>表达式后跟的左括号必须与表达式放在同一行中，否则程序在编译时将会触发错误，导致程序编译无法通过。另外，if、else if和else分支中对应的右括号可以另外换行，也可以与对应的左括号处在同一行。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">101</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a &gt; <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(a,<span class=\"string\">&quot;&gt; 100&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> a == <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(a,<span class=\"string\">&quot;= 100&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(a,<span class=\"string\">&quot;&lt; 100&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 101 &gt; 100</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>if还有一种较为常见的写法，就是在if的表达式前添加一个语句，使用变量接收语句返回的值，通过对该变量的判断再选择执行的分支。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;runtime&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num := runtime.NumCPU();num &gt;=<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;程序使用的CPU核心数为:&quot;</span>,num)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用的CPU核心数为: 6</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意⚠:</strong> 是在if表达式前定义num变量，num变量的作用域仅限于该分支中，程序的执行结果与宿主机的配置有关。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"流程控制-2\"><p>Go语言中的循环逻辑通过for关键字实现。不同于其他编程语言，Go语言没有while关键字，不存在while循环。<br>for循环格式如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 初始语句;条件表达式;赋值表达式 &#123;</span><br><span class=\"line\">    循环体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循环体中代码会不断地被执行，直到条件表达式的结果为false，程序才会继续执行for循环之后的程序代码。其中，初始语句、条件表达式和赋值表达式都是可选的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++&#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++&#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<div class=\"tabs\" id=\"for-循环\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#for-循环-1\">break跳出循环</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#for-循环-2\">continue继续循环</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"for-循环-1\"><p>break语句可以用来结束for循环，而且可以在语句后面添加标签，表示退出标签对应的代码块逻辑。<br><strong>注意⚠:</strong> break语句如果不带标签，则默认跳出最内层的for循环。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i &gt; <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;跳出内层for循环&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfmt.Println(i)</span><br><span class=\"line\">\t\t\ti ++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;跳出外层for循环&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// 跳出内层for循环</span></span><br><span class=\"line\"><span class=\"comment\">// 跳出外层for循环</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>也可以使用带标签的break语句，直接跳出最外层的for循环:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti := <span class=\"number\">1</span></span><br><span class=\"line\">\tOuterLoop:</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> i &gt; <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span> OuterLoop <span class=\"comment\">//跳出OuterLoop标签对应的循环</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tfmt.Println(i)</span><br><span class=\"line\">\t\t\t\ti++</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"for-循环-2\"><p>continue语句可以立即结束当前循环体中的逻辑，开始下一次循环。和break语句类似，continue语句后也可跟标签，表示开始标签所对应的循环。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tOuterLoop:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>;i &lt; <span class=\"number\">2</span>;i++&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>;j &lt; <span class=\"number\">3</span>;j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> j == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(i,j)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span> OuterLoop</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//0 1</span></span><br><span class=\"line\"><span class=\"comment\">//1 1</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"流程控制-3\"><p>switch语句常用于基于大量不同条件来执行不同动作，每一个条件对应一个case分支。语句的执行过程从上至下，直到找到匹配项，匹配项后面也不需要再加break。<br>每一个switch语句只能包含一个可选的default分支，若没有找到匹配项，会默认执行default分支中的代码块。<br>Go语言中的switch语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> var1 &#123;</span><br><span class=\"line\"> <span class=\"keyword\">case</span> value1:</span><br><span class=\"line\">    代码块<span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"keyword\">case</span> value2:</span><br><span class=\"line\">    代码块<span class=\"number\">2</span></span><br><span class=\"line\"> <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    代码块<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变量var1可以是任何类型，但value1和value2必须是相同的类型或最终结果为相同类型的表达式。每个case分支后可跟多个可能符合条件的值，使用逗号分隔它们，例如：case value1,value2,value3。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> <span class=\"number\">1</span>+<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;1+1=1&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;1+1=2&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;1+1=3&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;1+1不等于1或2或3&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1+1=2</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"fallthrough关键字\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#fallthrough关键字-1\">fallthrough关键字</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"fallthrough关键字-1\"><p>默认情况下，switch匹配成功后就不会执行后续其他case，如果我们需要无条件强制执行后面的 case，可以使用fallthrough关键字。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"literal\">false</span>: <span class=\"comment\">//肯定不会被执行</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;我是第一个分支 条件为false&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">fallthrough</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"literal\">true</span>: <span class=\"comment\">//被执行</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;我是第二个分支 条件为true&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">fallthrough</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"literal\">false</span>: <span class=\"comment\">//因为上面有fallthrough关键字，即使是false也会被执行</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;我是第三个分支 条件为false&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">fallthrough</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>: <span class=\"comment\">//被执行</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;我是默认case&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述示例中，switch语句省略了条件表达式，表达式由下面的case给出。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"流程控制-4\"><p>goto语句用于代码间的无条件跳转，格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">goto</span> 标签</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> sign</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;别执行&quot;</span>)</span><br><span class=\"line\">\tsign:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br></pre></td></tr></table></figure>\n<p>一般情况下，在程序中不建议使用goto语句，过多的goto语句会破坏程序结构，使程序的可读性变差。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>Go语言的流程控制语句主要包括：条件判断语句（if和switch）、循环控制语句（for、break和continue）和跳转语句（goto）。</p>\n<ul>\n<li>Go语言中的循环逻辑通过for关键字实现，不存在while循环。</li>\n<li>switch语句常用于基于大量不同条件来执行不同动作，每一个条件对应一个case分支。</li>\n<li>一般情况下，在程序中不建议使用goto语句，过多的goto语句会破坏程序结构，使程序的可读性变差。</li>\n</ul>\n<h3 id=\"循环嵌套\"><a href=\"#循环嵌套\" class=\"headerlink\" title=\"循环嵌套\"></a>循环嵌套</h3><p>一个循环结构内可以含有另一个循环，这被称为循环嵌套，又称多重循环。常用的循环嵌套是二重循环，外层循环称为外循环，内层循环称为内循环。<br>双重循环的结构：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (初始语句;条件表达式;赋值表达式)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    循环体</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(初始语句;条件表达式;赋值表达式)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        循环体</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的结构共由两个for循环组成，它们之间的层次关系是一个嵌套住另一个，我们把这种关系叫作嵌套关系。这种层次关系是唯一且不可改变的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pyramid</span><span class=\"params\">(n <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">1</span>;i&lt;=n;i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j:=<span class=\"number\">1</span>;j&lt;=n-i;j++&#123;</span><br><span class=\"line\">\t\t\tfmt.Print(<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k:=<span class=\"number\">1</span>;k&lt;=<span class=\"number\">2</span> * i<span class=\"number\">-1</span>;k++&#123;</span><br><span class=\"line\">\t\t\tfmt.Print(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := <span class=\"number\">9</span></span><br><span class=\"line\">\tpyramid(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        *</span><br><span class=\"line\">       ***</span><br><span class=\"line\">      *****</span><br><span class=\"line\">     *******</span><br><span class=\"line\">    *********</span><br><span class=\"line\">   ***********</span><br><span class=\"line\">  *************</span><br><span class=\"line\"> ***************</span><br><span class=\"line\">*****************</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><p>斐波那契数列，又称黄金分割数列，因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为兔子数列，指的是这样一个数列：1、1、2、3、5、8、13、21、34……这个数列从第三项开始，每一项都等于前两项之和。斐波那契数列在现代物理、准晶体结构、化学等领域都有直接的应用。<br>那么，我们是否可以编写一个斐波那契数列的程序，输入第n项，程序输出对应第n项的值？答案是肯定的，最常见的实现方式就是循环和递归。<br>在Go语言中，实现斐波那契数列的程序如下：</p>\n<div class=\"tabs\" id=\"斐波那契数列\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#斐波那契数列-1\">for循环实现</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#斐波那契数列-2\">递归实现</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"斐波那契数列-1\"><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"type\">int</span>)</span></span> (res <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\ta:=<span class=\"number\">1</span></span><br><span class=\"line\">\tb:=<span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">2</span>;i&lt;n;i++&#123;</span><br><span class=\"line\">\t\tc:=b</span><br><span class=\"line\">\t\tb = a+b</span><br><span class=\"line\">\t\ta=c</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tn:=<span class=\"number\">9</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;斐波那契数列第%d项值为%d&quot;</span>,n,fibonacci(n))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 斐波那契数列第9项值为34</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a b 分别为1，求出了 1 1 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//c 临时存 b = 1</span></span><br><span class=\"line\"><span class=\"comment\">//b = a+b = 2，求出了 1 1 2</span></span><br><span class=\"line\"><span class=\"comment\">//a = c 此时a = 1,一次循环结束</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//c 临时存 b = 2</span></span><br><span class=\"line\"><span class=\"comment\">//b = a+b = 3，求出了 1 1 2 3</span></span><br><span class=\"line\"><span class=\"comment\">//a = c 此时a = 2,一次循环结束</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//c 临时存 b = 3</span></span><br><span class=\"line\"><span class=\"comment\">//b = a+b = 5，求出了 1 1 2 3 5</span></span><br><span class=\"line\"><span class=\"comment\">//a = c 此时a = 3,一次循环结束</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"斐波那契数列-2\"><p>对于斐波那契数列，我们也可以使用递归来实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"type\">int</span>)</span></span> (res <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">1</span> || n==<span class=\"number\">2</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-2</span>)+fibonacci(n<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n:=<span class=\"number\">6</span> <span class=\"comment\">//求斐波那契数列第5项的值</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;斐波那契数列第%d项值为%d&quot;</span>,n,fibonacci(n))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 斐波那契数列第6项值为8% </span></span><br></pre></td></tr></table></figure>\n<p>运算过程：<br><img src=\"/images/pasted-74.png\" alt=\"upload successful\"></p>\n<p>在使用递归方法来实现斐波那契数列时，我们也可以用switch分支来进行代替：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(n <span class=\"type\">int</span>)</span></span> (rec <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> n &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> f(n<span class=\"number\">-2</span>) + f(n<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tn := <span class=\"number\">6</span></span><br><span class=\"line\">\tfmt.Println(f(n))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n","categories":["DEV"],"tags":["Golang"]},{"title":"Kong使用OAuth2.0 Plugin","url":"/forward/1e56645c.html","content":"<blockquote>\n<p>在之前的文章中已经介绍了Kong这个<a href=\"/forward/b36ee5af.html\">api网关的安装</a>和<a href=\"/forward/55d102bd.html\">基本打开方式</a>。这篇文章介绍一下kong在某个<code>Route</code>或<code>Service</code>中使用<code>OAuth2.0</code>的认证插件进行<code>OAuth2</code>的认证。</p>\n</blockquote>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"创建Service\"><a href=\"#创建Service\" class=\"headerlink\" title=\"创建Service\"></a>创建Service</h2><p>创建一个Kong的Service Object指向上游的服务。我会使用httpbin作为上游服务作为演示。</p>\n<p><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;http://localhost:8001/services&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;name=oauth2-test&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;url=http://cakepanit.org/anything&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>预期RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;host&quot;</span>: <span class=\"string\">&quot;httpbin.org&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;33459a79-e284-4bb8-aa6f-65dafd456c6f&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;protocol&quot;</span>: <span class=\"string\">&quot;http&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;read_timeout&quot;</span>: 60000,</span><br><span class=\"line\">  <span class=\"string\">&quot;tls_verify_depth&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;port&quot;</span>: 80,</span><br><span class=\"line\">  <span class=\"string\">&quot;updated_at&quot;</span>: 1615001132,</span><br><span class=\"line\">  <span class=\"string\">&quot;ca_certificates&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;created_at&quot;</span>: 1615001132,</span><br><span class=\"line\">  <span class=\"string\">&quot;connect_timeout&quot;</span>: 60000,</span><br><span class=\"line\">  <span class=\"string\">&quot;write_timeout&quot;</span>: 60000,</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;oauth2-test&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;retries&quot;</span>: 5,</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;/anything&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tls_verify&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;tags&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;client_certificate&quot;</span>: null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建Route\"><a href=\"#创建Route\" class=\"headerlink\" title=\"创建Route\"></a>创建Route</h2><p>接下来我会创建路径<code>/demo</code>来访问服务。<br><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;http://localhost:8001/services/oauth2-test/routes&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&#x27;paths[]=/demo&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>预期RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;strip_path&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tags&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;updated_at&quot;</span>: 1615004204,</span><br><span class=\"line\">  <span class=\"string\">&quot;destinations&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;headers&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;protocols&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;http&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;https&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;methods&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;service&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;33459a79-e284-4bb8-aa6f-65dafd456c6f&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;snis&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;hosts&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;path_handling&quot;</span>: <span class=\"string\">&quot;v0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;paths&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;/demo&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;preserve_host&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;regex_priority&quot;</span>: 0,</span><br><span class=\"line\">  <span class=\"string\">&quot;response_buffering&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;sources&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;e804fef4-fa42-4f7e-be0c-bbe9b9999027&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;https_redirect_status_code&quot;</span>: 426,</span><br><span class=\"line\">  <span class=\"string\">&quot;request_buffering&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;created_at&quot;</span>: 1615004204</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这之后我们可以通过 <code>curl localhost:8000/demo</code>来访问上游服务。</p>\n<h2 id=\"启用OAuth2插件\"><a href=\"#启用OAuth2插件\" class=\"headerlink\" title=\"启用OAuth2插件\"></a>启用OAuth2插件</h2><p>我会在我们的service object上启用这个插件并且自定义 <code>provision_key</code> . 如果你不自定义这个变量的话，kong会自动生成一个。同时我这里启用了全部四种认证方式以做演示，在现实中你只需要启用你需要的grant。</p>\n<p><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url http://localhost:8001/services/oauth2-<span class=\"built_in\">test</span>/plugins/ \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;name=oauth2&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;config.scopes[]=email&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;config.scopes[]=phone&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;config.scopes[]=address&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;config.mandatory_scope=true&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;config.provision_key=oauth2-demo-provision-key&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;config.enable_authorization_code=true&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;config.enable_client_credentials=true&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;config.enable_implicit_grant=true&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;config.enable_password_grant=true&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>预期RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;created_at&quot;</span>: 1615003048,</span><br><span class=\"line\">  <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;8bc8ed59-cdb4-4ac4-ab48-7719655cb9f3&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tags&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;enabled&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;protocols&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;grpc&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;grpcs&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;http&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;https&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;oauth2&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;consumer&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;service&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;33459a79-e284-4bb8-aa6f-65dafd456c6f&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;route&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;config&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;pkce&quot;</span>: <span class=\"string\">&quot;lax&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;accept_http_if_already_terminated&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;reuse_refresh_token&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;token_expiration&quot;</span>: 7200,</span><br><span class=\"line\">    <span class=\"string\">&quot;mandatory_scope&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;enable_client_credentials&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hide_credentials&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;enable_authorization_code&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;enable_implicit_grant&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;global_credentials&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;refresh_token_ttl&quot;</span>: 1209600,</span><br><span class=\"line\">    <span class=\"string\">&quot;enable_password_grant&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;scopes&quot;</span>: [</span><br><span class=\"line\">      <span class=\"string\">&quot;email&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;phone&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;address&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;anonymous&quot;</span>: null,</span><br><span class=\"line\">    <span class=\"string\">&quot;provision_key&quot;</span>: <span class=\"string\">&quot;oauth2-demo-provision-key&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;auth_header_name&quot;</span>: <span class=\"string\">&quot;authorization&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时我们再次链接 <code>curl localhost:8000/demo</code> 的时候，我们会得到 <code>HTTP/1.1 401 Unauthorized</code>已经以下错误信息。这就说明Oauth2插件已经成功开启。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;error&quot;</span>: <span class=\"string\">&quot;invalid_request&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;error_description&quot;</span>: <span class=\"string\">&quot;The access token is missing&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建Consumer\"><a href=\"#创建Consumer\" class=\"headerlink\" title=\"创建Consumer\"></a>创建Consumer</h3><p>接下来我们需要创建consumer objectd<br><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;http://localhost:8001/consumers/&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;username=oauth2-tester&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;custom_id&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;created_at&quot;</span>: 1615003502,</span><br><span class=\"line\">  <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;06d53376-8bfd-4bc7-aaaf-05c37316e7ef&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tags&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;oauth2-tester&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建OAuth2-Credential-App\"><a href=\"#创建OAuth2-Credential-App\" class=\"headerlink\" title=\"创建OAuth2 Credential (App)\"></a>创建OAuth2 Credential (App)</h3><p>然后我们会在这个consumer下创建Oauth2的身份凭证。在这里我也会使用自定义的<code>client_id</code>和<code>client_secret</code>。如果留空，Kong会自动生成这两个变量。</p>\n<blockquote>\n<p>如果使用Kong来生成身份凭证请切记不要添加 <code>hash_secret=true</code> 在您的curl命令里面。</p>\n</blockquote>\n<p><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;http://localhost:8001/consumers/oauth2-tester/oauth2/&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;name=Oauth2 Demo App&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_id=oauth2-demo-client-id&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_secret=oauth2-demo-client-secret&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;redirect_uris[]=http://localhost:8000/demo&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;hash_secret=true&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;created_at&quot;</span>: 1615004674,</span><br><span class=\"line\">  <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;f602f09b-7b7e-4326-b236-2fa8d45badff&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tags&quot;</span>: null,</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Oauth2 Demo App&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;client_secret&quot;</span>: <span class=\"string\">&quot;<span class=\"variable\">$pbkdf2</span>-sha512<span class=\"variable\">$i</span>=10000,l=32$e3SNVIWRFt8PuBxjoL1ncQ$/hF26HS30QHopDLMzlZqC+zv0nt3m4YFokuW9eTma6Q&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;client_id&quot;</span>: <span class=\"string\">&quot;oauth2-demo-client-id&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;redirect_uris&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;http://localhost:8000/demo&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;hash_secret&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;client_type&quot;</span>: <span class=\"string\">&quot;confidential&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;consumer&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;06d53376-8bfd-4bc7-aaaf-05c37316e7ef&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们就可以测试不同的grant了。</p>\n<h1 id=\"OAuth的四种授权类型\"><a href=\"#OAuth的四种授权类型\" class=\"headerlink\" title=\"OAuth的四种授权类型\"></a>OAuth的四种授权类型</h1><blockquote>\n<p>参见: <a href=\"https://oauth.net/2/grant-types/\">OAuth Grant Types</a>，根据业务场景选择一种合适的类型，这里不再赘述。</p>\n</blockquote>\n<h2 id=\"Authorization-Code\"><a href=\"#Authorization-Code\" class=\"headerlink\" title=\"Authorization Code\"></a>Authorization Code</h2><p>我们需要先发送认证的请求到<code>https://localhost:8443/demo/oauth2/authorize</code> 获取一个授权码。然后再使用授权码到<code>https://localhost:8443/demo/oauth2/token</code>请求一个访问令牌。</p>\n<h3 id=\"Request-Authorized-Code\"><a href=\"#Request-Authorized-Code\" class=\"headerlink\" title=\"Request Authorized Code\"></a>Request Authorized Code</h3><p><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;https://localhost:8443/demo/oauth2/authorize&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;response_type=code&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;scope=email address&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_id=oauth2-demo-client-id&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;provision_key=oauth2-demo-provision-key&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;authenticated_userid=authenticated_tester&quot;</span> \\</span><br><span class=\"line\">  --insecure</span><br></pre></td></tr></table></figure>\n\n<p><strong>RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;redirect_uri&quot;</span>: <span class=\"string\">&quot;http://localhost:8000/demo?code=jvnD1XBgFqZuqT2OlbcXpDiOlFkx75bU&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就获取到我们的授权码 <code>jvnD1XBgFqZuqT2OlbcXpDiOlFkx75bU</code>，我们可以通过它来请求访问令牌。</p>\n<h3 id=\"Request-Access-Token\"><a href=\"#Request-Access-Token\" class=\"headerlink\" title=\"Request Access Token\"></a>Request Access Token</h3><p><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;https://localhost:8443/demo/oauth2/token&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;grant_type=authorization_code&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_id=oauth2-demo-client-id&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_secret=oauth2-demo-client-secret&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;code=oyPC89DOjHNNc7BBV9YWuUxJQDd5M1TU&quot;</span> \\</span><br><span class=\"line\">  --insecure</span><br></pre></td></tr></table></figure>\n<p><strong>RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;refresh_token&quot;</span>: <span class=\"string\">&quot;LqJW6mVH4XsNZnoQ5fYbjngBsbUJPVPh&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;bearer&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;BZiZzJVEuP2mgNvZZBr0mgbRtKsdqgZf&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;expires_in&quot;</span>: 7200</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Implicit\"><a href=\"#Implicit\" class=\"headerlink\" title=\"Implicit\"></a>Implicit</h2><p>因为安全性的问题，这个可能是你不应该使用的一个grant。更多的原因可以参考Okta的这篇<a href=\"https://developer.okta.com/blog/2019/08/22/okta-authjs-pkce#why-you-should-never-use-the-implicit-flow-again\">文章</a>。按照我的理解Implicit grant应该只用来做身份的认证而不应该返回通行码用来使用API。使用这个grant的话只需要发送<code>client_id</code>到认证服务器<code>https://localhost:8443/demo/oauth2/authorize</code>就能获取到通行码。</p>\n<h3 id=\"Request-Access-Token-1\"><a href=\"#Request-Access-Token-1\" class=\"headerlink\" title=\"Request Access Token\"></a>Request Access Token</h3><p><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;https://localhost:8443/demo/oauth2/authorize&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;response_type=token&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;scope=email address&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_id=oauth2-demo-client-id&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;provision_key=oauth2-demo-provision-key&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;authenticated_userid=authenticated_tester&quot;</span> \\</span><br><span class=\"line\">  --insecure</span><br></pre></td></tr></table></figure>\n<p><strong>RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;redirect_uri&quot;</span>: <span class=\"string\">&quot;http://localhost:8000/demo#access_token=Ubs61rbN0JSO6JMV9N7WC4ZvCWEpWp5z&amp;expires_in=7200&amp;token_type=bearer&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可以在返回的uri的fragment里面找到<code>access_token</code>。</p>\n<h2 id=\"Client-Credentials\"><a href=\"#Client-Credentials\" class=\"headerlink\" title=\"Client Credentials\"></a>Client Credentials</h2><p>这个grant主要应用在机器对机器之间，因此认证服务器只会返回通行码而不会返回刷新码。每次通行码过期之后都需要重新请求新的。</p>\n<h3 id=\"Request-Access-Code\"><a href=\"#Request-Access-Code\" class=\"headerlink\" title=\"Request Access Code\"></a>Request Access Code</h3><p><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;https://localhost:8443/demo/oauth2/token&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;grant_type=client_credentials&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;scope=email address&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_id=oauth2-demo-client-id&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_secret=oauth2-demo-client-secret&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;provision_key=oauth2-demo-provision-key&quot;</span> \\</span><br><span class=\"line\">  --insecure</span><br></pre></td></tr></table></figure>\n<p><strong>RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;bearer&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;7mKwrytPCZEgTjbr40rV5L0dk2Zykota&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;expires_in&quot;</span>: 7200</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Password\"><a href=\"#Password\" class=\"headerlink\" title=\"Password\"></a>Password</h2><p>该flow需要用户提供认证的用户名，因此用户需要在Kong的前面添加用户身份认证并且提供<code>authenticated_userid</code>给Kong来颁发通行码和刷新码给用户。</p>\n<h3 id=\"Request-Access-Code-1\"><a href=\"#Request-Access-Code-1\" class=\"headerlink\" title=\"Request Access Code\"></a>Request Access Code</h3><p><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\"> --url <span class=\"string\">&quot;https://localhost:8443/demo/oauth2/token&quot;</span> \\</span><br><span class=\"line\"> --data <span class=\"string\">&quot;grant_type=password&quot;</span> \\</span><br><span class=\"line\"> --data <span class=\"string\">&quot;scope=email address&quot;</span> \\</span><br><span class=\"line\"> --data <span class=\"string\">&quot;client_id=oauth2-demo-client-id&quot;</span> \\</span><br><span class=\"line\"> --data <span class=\"string\">&quot;client_secret=oauth2-demo-client-secret&quot;</span> \\</span><br><span class=\"line\"> --data <span class=\"string\">&quot;provision_key=oauth2-demo-provision-key&quot;</span> \\</span><br><span class=\"line\"> --data <span class=\"string\">&quot;authenticated_userid=authenticated_tester&quot;</span> \\</span><br><span class=\"line\"> --insecure</span><br></pre></td></tr></table></figure>\n<p><strong>RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;refresh_token&quot;</span>: <span class=\"string\">&quot;rYokjg6H8Vi23xcdLKJhGBbt4OkbNTpy&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;bearer&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;2TVKDlWyoFODlNuIvQaLdCFU7Ids8Gyk&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;expires_in&quot;</span>: 7200</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用-access-token\"><a href=\"#使用-access-token\" class=\"headerlink\" title=\"使用 access_token\"></a>使用 <code>access_token</code></h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X GET \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;http://localhost:8000/demo&quot;</span> \\</span><br><span class=\"line\">  --header <span class=\"string\">&quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用PKCE\"><a href=\"#使用PKCE\" class=\"headerlink\" title=\"使用PKCE\"></a>使用PKCE</h1><p>在使用<code>authorization code grant</code>的时候，用户可以使用<a href=\"https://oauth.net/2/pkce/\">PKCE</a>加强安全性。</p>\n<h2 id=\"生成Verifier-and-Challenge\"><a href=\"#生成Verifier-and-Challenge\" class=\"headerlink\" title=\"生成Verifier and Challenge\"></a>生成Verifier and Challenge</h2><p>现实中用户需要自己想办法在自己的程序中按需自动生成这两个变量。在我们的演示中，我会使用<a href=\"https://tonyxu-io.github.io/pkce-generator/\">https://tonyxu-io.github.io/pkce-generator/</a>来生成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Code Verifier:</span><br><span class=\"line\">8FK~B.3ERQPsn4xoSo.7pkmxc6wEiFabpqooHnFJKyyT3ZI41jh9DML0TA7UTVTYrxhUtsNfcOp9RcVhyKR~2GdWCFlv00WKFJ1ha_acuzeuyFYDI1.j4nJ3epQUmc0w</span><br><span class=\"line\"></span><br><span class=\"line\">Code Challenge:</span><br><span class=\"line\">nVFqpBvGXtATi0hhNnNuWE5PZNRQTNGR95DJZNcXEaU</span><br></pre></td></tr></table></figure>\n<h2 id=\"Request-Authorized-Code-1\"><a href=\"#Request-Authorized-Code-1\" class=\"headerlink\" title=\"Request Authorized Code\"></a>Request Authorized Code</h2><p><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;https://localhost:8443/demo/oauth2/authorize&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;response_type=code&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;scope=email address&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_id=oauth2-demo-client-id&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;provision_key=oauth2-demo-provision-key&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;authenticated_userid=authenticated_tester&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;code_challenge=nVFqpBvGXtATi0hhNnNuWE5PZNRQTNGR95DJZNcXEaU&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;code_challenge_method=S256&quot;</span> \\</span><br><span class=\"line\">  --insecure</span><br></pre></td></tr></table></figure>\n<p><strong>RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;redirect_uri&quot;</span>: <span class=\"string\">&quot;http://localhost:8000/demo?code=5CzRTGquWIq7ePVjuX0Yyx5XZsCZUlML&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Request-Access-Token-2\"><a href=\"#Request-Access-Token-2\" class=\"headerlink\" title=\"Request Access Token\"></a>Request Access Token</h2><p><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;https://localhost:8443/demo/oauth2/token&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;grant_type=authorization_code&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_id=oauth2-demo-client-id&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_secret=oauth2-demo-client-secret&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;code_verifier=8FK~B.3ERQPsn4xoSo.7pkmxc6wEiFabpqooHnFJKyyT3ZI41jh9DML0TA7UTVTYrxhUtsNfcOp9RcVhyKR~2GdWCFlv00WKFJ1ha_acuzeuyFYDI1.j4nJ3epQUmc0w&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;code=51yMXT93QTQUn0zqbvBsUsWNNRRT3sce&quot;</span> \\</span><br><span class=\"line\">  --insecure</span><br></pre></td></tr></table></figure>\n<p><strong>RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;refresh_token&quot;</span>: <span class=\"string\">&quot;c3blcIo9QwexfYAGne98u91vKBd3W9pW&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;bearer&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;pCMgPx97ApLJFM9zIv6TmdXEWmH5xlLq&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;expires_in&quot;</span>: 7200</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Refresh-Token\"><a href=\"#Refresh-Token\" class=\"headerlink\" title=\"Refresh Token\"></a>Refresh Token</h1><p>在上述的例子中，各位可以看到<code>authorization_code</code>和<code>password</code>grant会返回一个<code>refresh_token</code>给用户。用户可以使用这个刷新码来请求信的通行码。Kong默认每个刷新码只能使用一次。<br><strong>REQUEST:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">  --url <span class=\"string\">&quot;https://localhost:8443/demo/oauth2/token&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;grant_type=refresh_token&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_id=oauth2-demo-client-id&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;client_secret=oauth2-demo-client-secret&quot;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&quot;refresh_token=&lt;REFRESH_TOKEN&gt;&quot;</span> \\</span><br><span class=\"line\">  --insecure</span><br></pre></td></tr></table></figure>\n\n<p><strong>RESPONSE:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;refresh_token&quot;</span>: <span class=\"string\">&quot;AbvtChlNibVCyQxmf0Ue0lQ9fzXLCNQv&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;bearer&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;d3n0lHkrvYi6CDolsDWdMs0lZ8PblFyQ&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;expires_in&quot;</span>: 7200</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["OPS","Kong","OAuth2.0"]},{"title":"JumpServer-1.5.4堡垒机部署","url":"/forward/bac240f7.html","content":"<h2 id=\"环境准备：\"><a href=\"#环境准备：\" class=\"headerlink\" title=\"环境准备：\"></a>环境准备：</h2><p>JumpServer环境要求<br>硬件配置: 2个CPU核心, 4G 内存, 50G 硬盘（最低）<br>操作系统: CentOS7</p>\n<p>Python = 3.6.x<br>Mysql Server ≥ 5.7<br>Redis</p>\n<h2 id=\"关闭防火墙和Selinux\"><a href=\"#关闭防火墙和Selinux\" class=\"headerlink\" title=\"关闭防火墙和Selinux\"></a>关闭防火墙和Selinux</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~]<span class=\"comment\"># setenforce 0  # 可以设置配置文件永久关闭</span></span><br><span class=\"line\">~]<span class=\"comment\"># systemctl stop firewalld.service ; systemctl disable firewalld.service</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改字符集，否则可能报-input-output-error的问题，因为日志里打印了中文\"><a href=\"#修改字符集，否则可能报-input-output-error的问题，因为日志里打印了中文\" class=\"headerlink\" title=\"修改字符集，否则可能报 input/output error的问题，因为日志里打印了中文\"></a>修改字符集，否则可能报 input/output error的问题，因为日志里打印了中文</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~]<span class=\"comment\"># localedef -c -f UTF-8 -i zh_CN zh_CN.UTF-8</span></span><br><span class=\"line\">~]<span class=\"comment\"># export LC_ALL=zh_CN.UTF-8</span></span><br><span class=\"line\">~]<span class=\"comment\"># echo &#x27;LANG=zh_CN.UTF-8&#x27; &gt; /etc/locale.conf</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y wget gcc epel-release python36-devel openssl openssl-devel automake zlib-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译安装Python-3-6-8\"><a href=\"#编译安装Python-3-6-8\" class=\"headerlink\" title=\"编译安装Python-3.6.8\"></a>编译安装Python-3.6.8</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~]<span class=\"comment\"># mkdir -p /server/&#123;tools,scripts&#125;</span></span><br><span class=\"line\">~]<span class=\"comment\"># wget http://npm.taobao.org/mirrors/python/3.6.8/Python-3.6.8.tar.xz -P /server/tools/</span></span><br><span class=\"line\"></span><br><span class=\"line\">~]<span class=\"comment\"># cd /server/tools/ </span></span><br><span class=\"line\">~]<span class=\"comment\"># tar -xf Python-3.6.8.tar.xz;cd Python-3.6.8/</span></span><br><span class=\"line\">~]<span class=\"comment\"># ./configure --prefix=/application/Python-3.6.8 --with-openssl &amp;&amp; make -j 4 &amp;&amp; make install</span></span><br><span class=\"line\"></span><br><span class=\"line\">添加环境变量：</span><br><span class=\"line\">~]<span class=\"comment\">#  echo &#x27;export PATH=/application/Python-3.6.8/bin:$PATH&#x27; &gt;&gt; /etc/bashrc</span></span><br><span class=\"line\">~]<span class=\"comment\"># . /etc/bashrc</span></span><br><span class=\"line\">~]<span class=\"comment\"># python3 -V</span></span><br><span class=\"line\">Python 3.6.8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加pythen3-6的虚拟环境\"><a href=\"#添加pythen3-6的虚拟环境\" class=\"headerlink\" title=\"添加pythen3.6的虚拟环境\"></a>添加pythen3.6的虚拟环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~]<span class=\"comment\"># cd /application/ &amp;&amp; python3 -m venv py3</span></span><br><span class=\"line\">//进入python3.6的虚拟环境</span><br><span class=\"line\">~]<span class=\"comment\"># source /application/py3/bin/activate</span></span><br><span class=\"line\">(py3) [root@db01 /application]<span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\">//退出虚拟环境</span><br><span class=\"line\">(py3) [root@db01 /application]<span class=\"comment\"># deactivate</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装jumpserver\"><a href=\"#安装jumpserver\" class=\"headerlink\" title=\"安装jumpserver\"></a>安装jumpserver</h2><h3 id=\"上传jumpserver源码包\"><a href=\"#上传jumpserver源码包\" class=\"headerlink\" title=\"上传jumpserver源码包\"></a>上传jumpserver源码包</h3><p><img src=\"/images/img-120.png\" alt=\"up\"></p>\n<h3 id=\"解压到-application\"><a href=\"#解压到-application\" class=\"headerlink\" title=\"解压到/application\"></a>解压到/application</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(py3) [root@db01 /application]<span class=\"comment\"># tar -xf /server/tools/jumpserver-1.5.4.tar.gz -C /application/</span></span><br><span class=\"line\">(py3) [root@db01 /application]<span class=\"comment\"># ln -s jumpserver-1.5.4 jumpserver</span></span><br><span class=\"line\">(py3) [root@db01 /application]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx  1 root   root    16 5月  18 20:55 jumpserver -&gt; jumpserver-1.5.4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(py3) [root@db01 /application]<span class=\"comment\"># cd jumpserver/requirements/</span></span><br><span class=\"line\">(py3) [root@db01 /application/jumpserver/requirements]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 24</span><br><span class=\"line\">-rw-rw-r-- 1 root root  251 12月  4 11:14 alpine_requirements.txt</span><br><span class=\"line\">-rw-rw-r-- 1 root root  212 12月  4 11:14 deb_requirements.txt //debain系统所需依赖</span><br><span class=\"line\">-rw-rw-r-- 1 root root  359 12月  4 11:14 issues.txt</span><br><span class=\"line\">-rw-rw-r-- 1 root root   54 12月  4 11:14 mac_requirements.txt //mac系统所需依赖</span><br><span class=\"line\">-rw-rw-r-- 1 root root 1691 12月  4 11:14 requirements.txt //pip库依赖</span><br><span class=\"line\">-rw-rw-r-- 1 root root  219 12月  4 11:14 rpm_requirements.txt //redhat系列所需依赖</span><br><span class=\"line\"></span><br><span class=\"line\">安装：</span><br><span class=\"line\">(py3) [root@db01 /application/jumpserver/requirements]<span class=\"comment\"># yum install -y $(cat rpm_requirements.txt)</span></span><br><span class=\"line\"></span><br><span class=\"line\">pip更新</span><br><span class=\"line\">(py3) [root@db01 /application/jumpserver/requirements]<span class=\"comment\"># pip -V</span></span><br><span class=\"line\">pip 18.1 from /application/py3/lib/python3.6/site-packages/pip (python 3.6)</span><br><span class=\"line\"></span><br><span class=\"line\">更新pip：</span><br><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\"></span><br><span class=\"line\">(py3) [root@db01 /application/jumpserver/requirements]<span class=\"comment\"># pip -V</span></span><br><span class=\"line\">pip 20.1 from /application/py3/lib/python3.6/site-packages/pip (python 3.6)</span><br><span class=\"line\"></span><br><span class=\"line\">安装Python模块：</span><br><span class=\"line\">(py3) [root@db01 /application/jumpserver/requirements]<span class=\"comment\"># pip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动加载Python虚拟环境\"><a href=\"#自动加载Python虚拟环境\" class=\"headerlink\" title=\"自动加载Python虚拟环境\"></a>自动加载Python虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/kennethreitz/autoenv.git <span class=\"comment\">#拉取懒人神器autoenv项目</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;source /application/autoenv/activate.sh&#x27;</span> &gt;&gt; ~/.bashrc <span class=\"comment\">#添加到当前登录用户的家目录变量中</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc   <span class=\"comment\">#刷新变量</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># echo &quot;source /application/py3/bin/activate&quot; &gt; /application/jumpserver/.env  ## 添加jumpserver文件的全局变量</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cd /application/jumpserver ## 首次进入jumpserver文件夹会有提示，按 y 即可</span></span><br><span class=\"line\">autoenv:</span><br><span class=\"line\">autoenv: WARNING:</span><br><span class=\"line\">autoenv: This is the first time you are about to <span class=\"built_in\">source</span> /application/jumpserver-1.5.4/.env:</span><br><span class=\"line\">autoenv:</span><br><span class=\"line\">autoenv:   --- (begin contents) ---------------------------------------</span><br><span class=\"line\">autoenv:     <span class=\"built_in\">source</span> /application/py3/bin/activate$</span><br><span class=\"line\">autoenv:</span><br><span class=\"line\">autoenv:   --- (end contents) -----------------------------------------</span><br><span class=\"line\">autoenv:</span><br><span class=\"line\">autoenv: Are you sure you want to allow this? (y/N) y</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h3><p>参见：<a href=\"https://cakepanit.com/forward/321e3c2f.html\">https://cakepanit.com/forward/321e3c2f.html</a><br>启动redis</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ss -anput | grep &quot;:6379&quot;</span></span><br><span class=\"line\">tcp    LISTEN     0      511    127.0.0.1:6379                  *:*                   <span class=\"built_in\">users</span>:((&quot;redis-server&quot;,pid=<span class=\"number\">14776</span>,fd=<span class=\"number\">7</span>))</span><br><span class=\"line\">tcp    LISTEN     0      511    10.0.0.51:6379                  *:*                   <span class=\"built_in\">users</span>:((&quot;redis-server&quot;,pid=<span class=\"number\">14776</span>,fd=<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装MySQL5-7\"><a href=\"#安装MySQL5-7\" class=\"headerlink\" title=\"安装MySQL5.7\"></a>安装MySQL5.7</h3><p>参见：<a href=\"https://cakepanit.com/forward/a7fae6f0.html\">https://cakepanit.com/forward/a7fae6f0.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql配置文件：</span><br><span class=\"line\">vim //data/mysql_3306/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/application/mysql</span><br><span class=\"line\">datadir=/data/mysql_3306/data</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br><span class=\"line\">log-error=/data/mysql_3306/mysql.log</span><br><span class=\"line\">log_bin=/data/binlog/mysql-bin</span><br><span class=\"line\">binlog_format=row</span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\">server-id=52</span><br><span class=\"line\">gtid-mode=on</span><br><span class=\"line\">enforce-gtid-consistency=<span class=\"literal\">true</span></span><br><span class=\"line\">log-slave-updates=1</span><br><span class=\"line\">relay_log_purge=0</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections=1024</span><br><span class=\"line\">back_log=128</span><br><span class=\"line\">wait_timeout=60</span><br><span class=\"line\">interactive_timeout=7200</span><br><span class=\"line\">key_buffer_size=16M</span><br><span class=\"line\">query_cache_size=64M</span><br><span class=\"line\">query_cache_type=1</span><br><span class=\"line\">query_cache_limit=50M</span><br><span class=\"line\">max_connect_errors=20</span><br><span class=\"line\">sort_buffer_size=2M</span><br><span class=\"line\">max_allowed_packet=32M</span><br><span class=\"line\">join_buffer_size=2M</span><br><span class=\"line\">thread_cache_size=200</span><br><span class=\"line\">innodb_buffer_pool_size=1024M</span><br><span class=\"line\">innodb_flush_log_at_trx_commit=1</span><br><span class=\"line\">innodb_log_buffer_size=32M</span><br><span class=\"line\">innodb_log_file_size=128M</span><br><span class=\"line\">innodb_log_files_in_group=3</span><br><span class=\"line\">binlog_cache_size=2M</span><br><span class=\"line\">max_binlog_cache_size=8M</span><br><span class=\"line\">max_binlog_size=512M</span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\">read_buffer_size=2M</span><br><span class=\"line\">read_rnd_buffer_size=2M</span><br><span class=\"line\">bulk_insert_buffer_size=8M</span><br><span class=\"line\">[client]</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"systemd启动mysql\"><a href=\"#systemd启动mysql\" class=\"headerlink\" title=\"systemd启动mysql\"></a>systemd启动mysql</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/systemd/system/mysqld.service &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=MySQL Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=man:mysqld(8)</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">User=mysql</span></span><br><span class=\"line\"><span class=\"string\">Group=mysql</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/mysql_3306/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE = 5000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建库\"><a href=\"#创建库\" class=\"headerlink\" title=\"创建库\"></a>创建库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database jumpserver default charset utf8mb4;</span><br><span class=\"line\">grant all on jumpserver.* to <span class=\"string\">&#x27;jumpserver&#x27;</span>@<span class=\"string\">&#x27;127.0.0.1&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span>;<span class=\"comment\">#授权一个用户</span></span><br><span class=\"line\">FLUSH PRIVILEGES; <span class=\"comment\">#刷新权限</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(py3) [root@db01 /application/jumpserver]<span class=\"comment\"># cp config_example.yml config.yml</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /application/jumpserver/config.yml &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 加密秘钥 生产环境中请修改为随机字符串，请勿外泄, 可使用命令生成                                                                                               </span></span><br><span class=\"line\"><span class=\"comment\"># cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 49;echo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加密秘钥 生产环境中请修改为随机字符串，请勿外泄, 可使用命令生成 </span></span><br><span class=\"line\">SECRET_KEY: J4DQDEpdAbl0m1lPryf3qnr9CE7bdFQ6qoXlEwnlQ9P2Tx65G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预共享Token coco和guacamole用来注册服务账号，不在使用原来的注册接受机制</span></span><br><span class=\"line\">BOOTSTRAP_TOKEN: gBlsegc0bh3Hon1t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># DEBUG 模式 开启DEBUG后遇到错误时可以看到更多日志</span></span><br><span class=\"line\">DEBUG: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志级别</span></span><br><span class=\"line\">LOG_LEVEL: ERROR</span><br><span class=\"line\"><span class=\"comment\"># LOG_DIR: </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浏览器Session过期时间，默认24小时, 也可以设置浏览器关闭则过期</span></span><br><span class=\"line\"><span class=\"comment\"># SESSION_COOKIE_AGE: 86400</span></span><br><span class=\"line\">SESSION_EXPIRE_AT_BROWSER_CLOSE: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库设置</span></span><br><span class=\"line\"><span class=\"comment\"># See https://docs.djangoproject.com/en/1.10/ref/settings/#databases</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SQLite setting:</span></span><br><span class=\"line\"><span class=\"comment\"># 使用单文件sqlite数据库</span></span><br><span class=\"line\"><span class=\"comment\"># DB_ENGINE: sqlite3</span></span><br><span class=\"line\"><span class=\"comment\"># DB_NAME: </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用Mysql作为数据库</span></span><br><span class=\"line\">DB_ENGINE: mysql</span><br><span class=\"line\">DB_HOST: 127.0.0.1</span><br><span class=\"line\">DB_PORT: 3306</span><br><span class=\"line\">DB_USER: jumpserver</span><br><span class=\"line\">DB_PASSWORD: <span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\">DB_NAME: jumpserver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /manage.py runserver 127.0.0.1:8080</span></span><br><span class=\"line\"><span class=\"comment\"># 运行时绑定端口</span></span><br><span class=\"line\">HTTP_BIND_HOST: 0.0.0.0</span><br><span class=\"line\">HTTP_LISTEN_PORT: 8080</span><br><span class=\"line\">WS_LISTEN_PORT: 8070</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Redis配置</span></span><br><span class=\"line\">REDIS_HOST: 127.0.0.1</span><br><span class=\"line\">REDIS_PORT: 6379</span><br><span class=\"line\"><span class=\"comment\"># REDIS_PASSWORD: </span></span><br><span class=\"line\"><span class=\"comment\"># REDIS_DB_CELERY: 3</span></span><br><span class=\"line\"><span class=\"comment\"># REDIS_DB_CACHE: 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用OpenID 来进行认证设置</span></span><br><span class=\"line\"><span class=\"comment\"># BASE_SITE_URL: http://localhost:8080</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_OPENID: false  # True or False</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_OPENID_SERVER_URL: https://openid-auth-server.com/</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_OPENID_REALM_NAME: realm-name</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_OPENID_CLIENT_ID: client-id</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_OPENID_CLIENT_SECRET: client-secret</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_OPENID_IGNORE_SSL_VERIFICATION: True</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_OPENID_SHARE_SESSION: True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用Radius来认证</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_RADIUS: false</span></span><br><span class=\"line\"><span class=\"comment\"># RADIUS_SERVER: localhost</span></span><br><span class=\"line\"><span class=\"comment\"># RADIUS_PORT: 1812</span></span><br><span class=\"line\"><span class=\"comment\"># RADIUS_SECRET: </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># LDAP 搜索分页数量</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_LDAP_SEARCH_PAGED_SIZE: 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定时同步用户</span></span><br><span class=\"line\"><span class=\"comment\"># 启用 / 禁用</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_LDAP_SYNC_IS_PERIODIC: True</span></span><br><span class=\"line\"><span class=\"comment\"># 同步间隔 (单位: 时) (优先）</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_LDAP_SYNC_INTERVAL: 12</span></span><br><span class=\"line\"><span class=\"comment\"># Crontab 表达式</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_LDAP_SYNC_CRONTAB: * 6 * * *</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># LDAP 用户登录时仅允许在用户列表中的用户执行 LDAP Server 认证</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_LDAP_USER_LOGIN_ONLY_IN_USERS: False</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># LDAP 认证时如果日志中出现以下信息将参数设置为 0 (详情参见：https://www.python-ldap.org/en/latest/faq.html)</span></span><br><span class=\"line\"><span class=\"comment\"># In order to perform this operation a successful bind must be completed on the connection</span></span><br><span class=\"line\"><span class=\"comment\"># AUTH_LDAP_OPTIONS_OPT_REFERRALS: -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># OTP settings</span></span><br><span class=\"line\"><span class=\"comment\"># OTP/MFA 配置</span></span><br><span class=\"line\"><span class=\"comment\"># OTP_VALID_WINDOW: 0</span></span><br><span class=\"line\"><span class=\"comment\"># OTP_ISSUER_NAME: Jumpserver</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Perm show single asset to ungrouped node</span></span><br><span class=\"line\"><span class=\"comment\"># 是否把未授权节点资产放入到 未分组 节点中</span></span><br><span class=\"line\"><span class=\"comment\"># PERM_SINGLE_ASSET_TO_UNGROUP_NODE: false</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化jumpserver\"><a href=\"#初始化jumpserver\" class=\"headerlink\" title=\"初始化jumpserver\"></a>初始化jumpserver</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">新版本更新了运行脚本，使用方式./jms start|stop|status|restart all 后台运行请添加 -d 参数</span><br><span class=\"line\">(py3) [root@db01 /application/jumpserver]<span class=\"comment\"># ./jms start -d</span></span><br><span class=\"line\">gunicorn is running: 17953</span><br><span class=\"line\">celery_ansible is running: 17969</span><br><span class=\"line\">celery_default is running: 17986</span><br><span class=\"line\">beat is running: 17994</span><br><span class=\"line\">flower is running: 18009</span><br><span class=\"line\">daphne is running: 18019</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装SSH-Server和WebSocket-Server\"><a href=\"#安装SSH-Server和WebSocket-Server\" class=\"headerlink\" title=\"安装SSH Server和WebSocket Server\"></a>安装SSH Server和WebSocket Server</h2><h3 id=\"下载koko，旧版本为coco\"><a href=\"#下载koko，旧版本为coco\" class=\"headerlink\" title=\"下载koko，旧版本为coco\"></a>下载koko，旧版本为coco</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(py3) [root@db01 /application]<span class=\"comment\"># cd /server/tools/</span></span><br><span class=\"line\">(py3) [root@db01 /server/tools]<span class=\"comment\"># wget https://demo.jumpserver.org/download/koko/1.5.4/koko-master-linux-amd64.tar.gz</span></span><br><span class=\"line\">(py3) [root@db01 /server/tools]<span class=\"comment\"># tar -xf koko-master-linux-amd64.tar.gz -C /application/</span></span><br><span class=\"line\">(py3) [root@db01 /server/tools]<span class=\"comment\"># cd /application/;ll</span></span><br><span class=\"line\">drwxr-xr-x  5    501 games    89 5月  13 12:53 kokodir</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置koko的预共享密钥\"><a href=\"#配置koko的预共享密钥\" class=\"headerlink\" title=\"配置koko的预共享密钥\"></a>配置koko的预共享密钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(py3) [root@db01 /application/kokodir]<span class=\"comment\"># cp config_example.yml config.yml </span></span><br><span class=\"line\">(py3) [root@db01 /application/kokodir]<span class=\"comment\"># vim config.yml</span></span><br><span class=\"line\">9 BOOTSTRAP_TOKEN: gBlsegc0bh3Hon1t //和jumpserver中保持一致</span><br><span class=\"line\">28 LOG_LEVEL: ERROR //日志级别</span><br><span class=\"line\"></span><br><span class=\"line\">(py3) [root@db01 /application]<span class=\"comment\"># chown root.root -R kokodir</span></span><br><span class=\"line\"></span><br><span class=\"line\">启动koko</span><br><span class=\"line\">(py3) [root@db01 /application/kokodir]<span class=\"comment\"># ./koko -d</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Guacamole\"><a href=\"#Guacamole\" class=\"headerlink\" title=\"Guacamole\"></a>Guacamole</h2><p>介绍：用于支持windows主机的堡垒机服务，我这里直接跳过。<br>可参考：<a href=\"https://jumpserver.readthedocs.io/zh/master/install/step_by_step/#9-guacamole\">https://jumpserver.readthedocs.io/zh/master/install/step_by_step/#9-guacamole</a></p>\n<h2 id=\"luna前端组件\"><a href=\"#luna前端组件\" class=\"headerlink\" title=\"luna前端组件\"></a>luna前端组件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /server/tools/</span><br><span class=\"line\">wget https://github.com/jumpserver/luna/releases/download/1.5.4/luna.tar.gz</span><br><span class=\"line\">(py3) [root@db01 /server/tools]<span class=\"comment\"># tar -xf luna.tar.gz -C /application/</span></span><br><span class=\"line\">(py3) [root@db01 /application]<span class=\"comment\"># chown root.root -R luna</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译安装nginx\"><a href=\"#编译安装nginx\" class=\"headerlink\" title=\"编译安装nginx\"></a>编译安装nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /server/tools/</span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class=\"line\">tar -xf http://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class=\"line\">(py3) [root@db01 /server/tools]<span class=\"comment\"># cd nginx-1.16.1/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p><code>pcre</code>：URL重写软件，即实现伪静态需要这个软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装依赖</span></span><br><span class=\"line\">yum install pcre pcre-devel -y</span><br><span class=\"line\">yum install openssl openssl-devel -y  <span class=\"comment\">#https加密用他。</span></span><br><span class=\"line\"><span class=\"comment\">#创建用户</span></span><br><span class=\"line\">useradd -s /sbin/nologin -M www </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-1编译Nginx\"><a href=\"#10-1编译Nginx\" class=\"headerlink\" title=\"10.1编译Nginx\"></a>10.1编译Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure  --user=www --group=www --prefix=/application/nginx-1.16.1 --with-http_stub_status_module  --with-http_ssl_module --with-pcre&amp;&amp;make&amp;&amp; make install</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /application/nginx-1.16.1/ /application/nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-2添加环境变量\"><a href=\"#10-2添加环境变量\" class=\"headerlink\" title=\"10.2添加环境变量\"></a>10.2添加环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export PATH=&quot;/application/nginx/sbin/:$PATH&quot;&#x27;</span>&gt;&gt;/etc/bashrc</span><br><span class=\"line\">. /etc/bashrc</span><br><span class=\"line\">(py3) [root@db01 /application/jumpserver]<span class=\"comment\"># nginx -v</span></span><br><span class=\"line\">nginx version: nginx/1.16.1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-3配置nginx\"><a href=\"#10-3配置nginx\" class=\"headerlink\" title=\"10.3配置nginx\"></a>10.3配置nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(py3) [root@db01 /application/nginx/conf]<span class=\"comment\"># egrep -v &quot;^$|#&quot; nginx.conf.default &gt;nginx.conf</span></span><br><span class=\"line\">(py3) [root@db01 /application/nginx/conf]<span class=\"comment\"># cat nginx.conf</span></span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    include /application/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-4修改配置：\"><a href=\"#10-4修改配置：\" class=\"headerlink\" title=\"10.4修改配置：\"></a>10.4修改配置：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /application/nginx/conf.d/</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /application/nginx/conf/nginx.conf&lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    client_max_body_size 100m;  <span class=\"comment\"># 录像及文件上传大小限制</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location /luna/ &#123;</span><br><span class=\"line\">        try_files <span class=\"variable\">$uri</span> / /index.html;</span><br><span class=\"line\">        <span class=\"built_in\">alias</span> /application/luna/;  <span class=\"comment\"># luna 路径, 如果修改安装目录, 此处需要修改</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /media/ &#123;</span><br><span class=\"line\">        add_header Content-Encoding gzip;</span><br><span class=\"line\">        root /application/jumpserver/data/;  <span class=\"comment\"># 录像位置, 如果修改安装目录, 此处需要修改</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /static/ &#123;</span><br><span class=\"line\">        root /application/jumpserver/data/;  <span class=\"comment\"># 静态资源, 如果修改安装目录, 此处需要修改</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /koko/ &#123;</span><br><span class=\"line\">        proxy_pass       http://localhost:5000;</span><br><span class=\"line\">        proxy_buffering off;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade <span class=\"variable\">$http_upgrade</span>;</span><br><span class=\"line\">        proxy_set_header Connection <span class=\"string\">&quot;upgrade&quot;</span>;</span><br><span class=\"line\">        proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        proxy_set_header Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /guacamole/ &#123;</span><br><span class=\"line\">        proxy_pass       http://localhost:8081/;</span><br><span class=\"line\">        proxy_buffering off;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade <span class=\"variable\">$http_upgrade</span>;</span><br><span class=\"line\">        proxy_set_header Connection <span class=\"variable\">$http_connection</span>;</span><br><span class=\"line\">        proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        proxy_set_header Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /ws/ &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        proxy_set_header Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        proxy_pass http://localhost:8070;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_buffering off;</span><br><span class=\"line\">        proxy_set_header Upgrade <span class=\"variable\">$http_upgrade</span>;</span><br><span class=\"line\">        proxy_set_header Connection <span class=\"string\">&quot;upgrade&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:8080;</span><br><span class=\"line\">        proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        proxy_set_header Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-测试：\"><a href=\"#12-测试：\" class=\"headerlink\" title=\"12.测试：\"></a>12.测试：</h3><p>账号：admin 密码：admin</p>\n<p><img src=\"/images/img-121.png\" alt=\"test1\"><br><img src=\"/images/img-122.png\" alt=\"test2\"></p>\n<h3 id=\"13-踩坑：\"><a href=\"#13-踩坑：\" class=\"headerlink\" title=\"13.踩坑：\"></a>13.踩坑：</h3><p>1.<code>ImportError: libmysqlclient.so.18: cannot open shared object file: No such file or directory</code><br>在处理mariadb时，删除了mariadb-libs。导致删除了MySQL的动态链接库。<br>解决方法：<br><code>yum install -y mariadb-libs</code></p>\n<p>2.<code>TypeError: connect() argument 3 must be str, not int</code><br><code>config.yml</code>配置文件中第33行数据库密码必须是字符串！</p>\n<p>3.koko重复注册失败，进入jumpserver-&gt;会话管理-&gt;终端管理删除服务器即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(py3) [root@db01 /application/kokodir]<span class=\"comment\"># ./koko</span></span><br><span class=\"line\">2020-05-19 02:31:14 [ERRO] POST http://127.0.0.1:8080/api/v2/terminal/terminal-registrations/ failed, get code: 400, &#123;<span class=\"string\">&quot;name&quot;</span>:[<span class=\"string\">&quot;名称重复&quot;</span>]&#125;</span><br><span class=\"line\">2020-05-19 02:31:14 [ERRO] register access key failed</span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["OPS","JumpServer","堡垒机"]},{"title":"Linux基础-iptables防火墙相关配置","url":"/forward/d7240237.html","content":"<p><strong>容器：</strong>瓶瓶罐罐 存放东西</p>\n<p><strong>表(table)：</strong>存放链的容器</p>\n<p><strong>链(chain)：</strong>存放规则的容器</p>\n<p><strong>规则(policy)：</strong></p>\n<ul>\n<li>准许或拒绝规则<ul>\n<li>准许或拒绝规则ACCPT DROP police：警察</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/pasted-28.png\" alt=\"iptables\"></p>\n<h2 id=\"iptables执行过程\"><a href=\"#iptables执行过程\" class=\"headerlink\" title=\"iptables执行过程\"></a>iptables执行过程</h2><h3 id=\"工作流程：\"><a href=\"#工作流程：\" class=\"headerlink\" title=\"工作流程：\"></a>工作流程：</h3><ol>\n<li>防火墙是层层过滤的，实际是按照配置规则的顺序从上到下，从前到后进行过滤的。</li>\n<li>如果匹配上规则，即明确表示是阻止还是通过，数据包就不再向下匹配新的规则。</li>\n<li>如果规则中没有明确表明是阻止还是通过的，也就是没有匹配规则，向下进行匹配，直到匹配默认规则得到明确的阻止还是通过。</li>\n<li>防火墙的默认规则是所有规则执行完才执行的。</li>\n</ol>\n<h3 id=\"四表与五链\"><a href=\"#四表与五链\" class=\"headerlink\" title=\"四表与五链\"></a>四表与五链</h3><p><code>filter</code>(默认，防火墙功能 准许 拒绝)<br><code>nat</code>表 nat功能</p>\n<ul>\n<li>内网服务器上外网</li>\n<li>端口映射</li>\n</ul>\n<p><code>mangle</code><br><code>raw</code></p>\n<h4 id=\"filter表\"><a href=\"#filter表\" class=\"headerlink\" title=\"filter表\"></a>filter表</h4><p><strong>强调：</strong>主要和主机自身相关，真正负责主机防火墙功能的（过滤流入流出主机的数据包）<code>filter</code>表示iptables默认使用的表，这个表定义了三个链（<code>chains</code>）<br><strong>企业工作场景：</strong>主机防火墙<br><strong>相关链：</strong></p>\n<ul>\n<li><code>INPUT</code>：负责过滤所有目标地址是本机地址的数据包，人话：就是过滤进入主机的数据包(检票员)</li>\n<li><code>FORWARD</code>：负责转发流经主机的数据包。起转发的作用，和NAT关系很大，后面会详细介绍LVSNAT模式，<code>net.ipv4.ip_forward=0</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@Felix ~]<span class=\"comment\"># #net.core.rmem_max = 16777216 #发送套接字缓冲区大小的默认值</span></span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># cat /proc/sys/net/core/rmem_max </span></span><br><span class=\"line\">16777216</span><br></pre></td></tr></table></figure></li>\n<li><code>OUTPUT</code>：处理所有源地址是本机地址的数据包，人话：就是处理从主机发出去的数据包(超市保安)</li>\n</ul>\n<h4 id=\"nat表：\"><a href=\"#nat表：\" class=\"headerlink\" title=\"nat表：\"></a>nat表：</h4><p><code>Network Address Translation</code>：网络地址转换<br>负责网络地址转换的，即来源与目的IP地址和port的转换。<br><strong>应用：</strong>和主机本身无关，一般用于局域网共享上网或者特殊的端口转换服务相关。<br><strong>工作场景：</strong></p>\n<ol>\n<li>用于企业路由（zebra）或网关（iptables），共享上网（POSTROUTING）</li>\n<li>做内部外部IP地址一对一映射（dmz），硬件防火墙映射IP到内部服务器，ftp服务（PREROUTING)</li>\n<li>WEB，单个端口的映射，直接映射80端口（PREROUTING）这个表定义了3个链，nat功能相当于网络的acl控制。和网络交换机acl类似。</li>\n</ol>\n<h3 id=\"相关链：\"><a href=\"#相关链：\" class=\"headerlink\" title=\"相关链：\"></a>相关链：</h3><ul>\n<li><p><code>OUTPUT</code>：和主机放出去的数据包有关，改变主机发出数据包的目的地址。</p>\n</li>\n<li><p><code>PREROUTING</code>：在数据包到达防火墙时，进行路由判断之前执行的规则，作用是改变数据包的目的地址、目的端口等(目的nat)就是收信时，根据规则重写收件人的地址。<br>例如：把公网IP:xxx.xxx.xxx.xxx映射到局域网的xx.xx.xx.xx服务器上。<br>如果是web服务，可以把80转换为局域网的服务器9000端口上<br><code>10.0.0.61 8080（目标端口）---nat---a 10.0.0.7 22</code></p>\n</li>\n<li><p><code>POSTROUTING</code>：在数据包离开防火墙时进行路由判断之后执行的规则，作用改变数据包的源地址，源端口等。(源nat)<br>写好发件人的地址，要让家人回信时能够有地址可回。<br>例如。默认笔记本和虚拟机都是局域网地址，在出网的时候被路由器将源地址改为了公网地址。</p>\n</li>\n</ul>\n<p><strong>生产应用：</strong>局域网共享上网。</p>\n<p><img src=\"/images/pasted-29.png\" alt=\"iptables\"></p>\n<h2 id=\"C7补充安装\"><a href=\"#C7补充安装\" class=\"headerlink\" title=\"C7补充安装\"></a>C7补充安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install iptables-services</span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># rpm -ql iptables</span></span><br><span class=\"line\">/usr/sbin/iptables  <span class=\"comment\">#iptables管理命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># rpm -ql iptables-services</span></span><br><span class=\"line\">/etc/sysconfig/ip6tables</span><br><span class=\"line\">/etc/sysconfig/iptables  <span class=\"comment\">#防火墙配置文件</span></span><br><span class=\"line\">/usr/lib/systemd/system/ip6tables.service</span><br><span class=\"line\">/usr/lib/systemd/system/iptables.service  <span class=\"comment\">#防火墙服务配置文件（命令）</span></span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># systemctl cat iptables.service </span></span><br><span class=\"line\"><span class=\"comment\"># /usr/lib/systemd/system/iptables.service</span></span><br><span class=\"line\"></span><br><span class=\"line\">加载内核模块实现防火墙功能：</span><br><span class=\"line\">临时生效</span><br><span class=\"line\">modprobe ip_tables</span><br><span class=\"line\">modprobe iptable_filter</span><br><span class=\"line\">modprobe iptable_nat</span><br><span class=\"line\">modprobe ip_conntrack</span><br><span class=\"line\">modprobe ip_conntrack_ftp</span><br><span class=\"line\">modprobe ip_nat_ftp</span><br><span class=\"line\">modprobe ipt_state</span><br><span class=\"line\"></span><br><span class=\"line\">lsmod | egrep <span class=\"string\">&#x27;ipt|nat|filter&#x27;</span> &lt;==检查</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-30.png\" alt=\"iptables\"></p>\n<h3 id=\"关闭其他防火墙并\"><a href=\"#关闭其他防火墙并\" class=\"headerlink\" title=\"关闭其他防火墙并\"></a>关闭其他防火墙并</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@Felix ~]# systemctl start iptables  &lt;==启动</span><br><span class=\"line\">[root@Felix ~]# systemctl enable iptables  &lt;==开机自启</span><br><span class=\"line\">Created symlink from /etc/systemd/system/basic.target.wants/iptables.service to /usr/lib/systemd/system/iptables.service.</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-31.png\" alt=\"iptables\"></p>\n<h2 id=\"iptables-默认使用filter表\"><a href=\"#iptables-默认使用filter表\" class=\"headerlink\" title=\"iptables 默认使用filter表\"></a>iptables 默认使用filter表</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">参数：</span><br><span class=\"line\">-----------------------------</span><br><span class=\"line\">-F  <span class=\"comment\">#清除规则</span></span><br><span class=\"line\">-X  <span class=\"comment\">#删除用户自定义的链</span></span><br><span class=\"line\">-Z  <span class=\"comment\">#链的命中数和字节数</span></span><br><span class=\"line\"></span><br><span class=\"line\">-t   <span class=\"comment\">#指定表</span></span><br><span class=\"line\">-D  <span class=\"comment\">#删除规则</span></span><br><span class=\"line\">-A  <span class=\"comment\">#末尾追加规则 准许</span></span><br><span class=\"line\">-I   <span class=\"comment\">#开头插入规则 拒绝</span></span><br><span class=\"line\"></span><br><span class=\"line\">-m <span class=\"comment\">#指定防火墙模块</span></span><br><span class=\"line\">-p  <span class=\"comment\">#protocal 协议类型 tcp/udp/icmp/all</span></span><br><span class=\"line\">--dport  <span class=\"comment\">#dest目的端口</span></span><br><span class=\"line\">--sport  <span class=\"comment\">#源端口</span></span><br><span class=\"line\">-d  <span class=\"comment\">#目的ip</span></span><br><span class=\"line\">-s  <span class=\"comment\">#源ip</span></span><br><span class=\"line\">-m <span class=\"comment\">#指定模块</span></span><br><span class=\"line\">-i  <span class=\"comment\">#--input 数据进入的时候 通过哪个网卡</span></span><br><span class=\"line\">-o  <span class=\"comment\">#--output 数据流出的 通过网卡</span></span><br><span class=\"line\"></span><br><span class=\"line\">-j  <span class=\"comment\">#--jump 满足条件后的动作：DROP/ACCEPT/REJECT</span></span><br><span class=\"line\">-----------------------------</span><br><span class=\"line\">示例：</span><br><span class=\"line\">nc -l port 生成本地端口</span><br><span class=\"line\">   也可传输文件，两端聊天</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-32.png\" alt=\"iptables\"></p>\n<h2 id=\"配置案例\"><a href=\"#配置案例\" class=\"headerlink\" title=\"配置案例\"></a>配置案例</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#禁止22端口</span></span><br><span class=\"line\">iptables -t filter -A INPUT -p tcp --dport 23 -j DROP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁止8.8.8.8，远程本机22端口</span></span><br><span class=\"line\">iptables -t filter -I INPUT -s 8.8.8.8 -p tcp --dport 22 -j DROP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁止网段</span></span><br><span class=\"line\">iptables -t filter -I INPUT -s 10.0.0.0/24 -p tcp --dport 8080 -j DROP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#只允许指定网段连入（10.0.0.0网段）</span></span><br><span class=\"line\">allow 10.0.0.0/24;</span><br><span class=\"line\">deny all;</span><br><span class=\"line\">iptables -I INPUT ! -s 10.0.0.0/24 -j DROP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁止用户访问指定范围的端口</span></span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 1024:65535 -j DROP <span class=\"comment\">#1024-65535</span></span><br><span class=\"line\">iptables -I INPUT -p tcp -m multiport --dport 81,443 -j DROP <span class=\"comment\">#81和443</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#防火墙禁ping</span></span><br><span class=\"line\">iptables -t filter -I INPUT -p icmp --icmp-type any -j DROP</span><br><span class=\"line\">或者</span><br><span class=\"line\">iptables -t filter -I INPUT -p icmp --icmp-type 8 -j DROP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#匹配网络状态（tcp/ip）：</span></span><br><span class=\"line\">·-m state --state</span><br><span class=\"line\">·NEW：已经或将启动新的连接</span><br><span class=\"line\">·ESTABLISHED：已建立的连接</span><br><span class=\"line\">·RELATED：正在启动的新连接</span><br><span class=\"line\">·INVALID：非法或无法识别的</span><br><span class=\"line\">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT  <span class=\"comment\">#放行“回应报文” “和关系连接”，不要单独放行80，443等端口</span></span><br><span class=\"line\">参考文档：http://www.zsythink.net/archives/1597/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#限制并发及速率 #无效</span></span><br><span class=\"line\">iptables -I INPUT -p icmp --icmp-type 8 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p icmp --icmp-type 8 -m <span class=\"built_in\">limit</span> --<span class=\"built_in\">limit</span> 6/min --limit-burst 5 -j ACCEPT </span><br><span class=\"line\">-m limit--limit n/&#123;second/minute/hour&#125;：解释：指定时间内的请求速率”n”为速率，后面为时间分别为：秒 分 时</span><br><span class=\"line\">-limit-burst[n]</span><br><span class=\"line\">解释：在同一时间内允许通过的请求”n<span class=\"string\">&quot;为数字，不指定默认为5</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#保存防火墙规则：</span></span><br><span class=\"line\"><span class=\"string\">[root@Felix ~]# service iptables save </span></span><br><span class=\"line\"><span class=\"string\">iptables: Saving firewall rules to /etc/sysconfig/iptables:[  确定  ]</span></span><br><span class=\"line\"><span class=\"string\">或者</span></span><br><span class=\"line\"><span class=\"string\">iptables-save &gt; /etc/sysconfig/iptables</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#误删防火墙规则恢复</span></span><br><span class=\"line\"><span class=\"string\">方法1：重启iptables服务</span></span><br><span class=\"line\"><span class=\"string\">方法2：iptables-restore &lt; /etc/sysconfig/iptables </span></span><br><span class=\"line\"><span class=\"string\">\t从文件中读取防火墙规则，并生效。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nat\"><a href=\"#nat\" class=\"headerlink\" title=\"nat\"></a>nat</h3><p>1.共享上网<br>2.端口映射<br>3.ip映射</p>\n<h3 id=\"一、共享上网\"><a href=\"#一、共享上网\" class=\"headerlink\" title=\"一、共享上网\"></a>一、共享上网</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@Felix ~]<span class=\"comment\"># iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -j SNAT --to-source 10.0.0.61</span></span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># iptables -t nat -nL</span></span><br><span class=\"line\">开启内核转发功能</span><br><span class=\"line\">1.临时开启，（写入内存，在内存中开启）</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\">2.永久开启，（写入内核）</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf </span><br><span class=\"line\">sysctl -p               ----加载,使得配置文件立即生效</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -j MASQUERADE <span class=\"comment\">#&lt;==公网ip不固定的情况下使用</span></span><br><span class=\"line\">云服务器：NAT网关</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、端口映射\"><a href=\"#二、端口映射\" class=\"headerlink\" title=\"二、端口映射\"></a>二、端口映射</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d 10.0.0.61 -p tcp --dport 9000 -j DNAT --to-destination 172.16.1.7:22</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 映射内网111.170:8000 到 244.69:20001</span></span><br><span class=\"line\"><span class=\"comment\">#出</span></span><br><span class=\"line\">-A POSTROUTING -d 172.19.111.170/32 -p tcp -m tcp --dport 8000 -j SNAT --to-source 172.19.244.69</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进</span></span><br><span class=\"line\">-A PREROUTING -d 172.19.244.69/32 -p tcp -m tcp --dport 20001 -j DNAT --to-destination 172.19.111.170:8000</span><br></pre></td></tr></table></figure>\n<p>内网07主机的22端口 映射到外网9000端口，要开启内核转发。</p>\n<h3 id=\"三、IP映射\"><a href=\"#三、IP映射\" class=\"headerlink\" title=\"三、IP映射\"></a>三、IP映射</h3><p>后端的主机需要指向防火墙所在服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d 10.0.0.62 -j DNAT --to-destination 172.16.1.8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生产环境初始配置\"><a href=\"#生产环境初始配置\" class=\"headerlink\" title=\"生产环境初始配置\"></a>生产环境初始配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#准许连接sshd端口</span></span><br><span class=\"line\">iptables -t filter -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#允许本机回环lo接口流量流出与流入</span></span><br><span class=\"line\">iptables -A INPUT -i lo -j ACCEPT </span><br><span class=\"line\">iptables -A OUTPUT -o lo -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#放行其他端口</span></span><br><span class=\"line\">-A INPUT -p tcp -m tcp --dport 1723 -j ACCEPT   <span class=\"comment\">#访行pptp服务</span></span><br><span class=\"line\">-A INPUT -s 10.93.131.0/24 -p tcp -m tcp --dport 22 -j ACCEPT  <span class=\"comment\">#允许指定网段ssh</span></span><br><span class=\"line\">-A INPUT -p gre -j ACCEPT  <span class=\"comment\">#允许gre协议，pptp需要</span></span><br><span class=\"line\">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT  <span class=\"comment\">#只放行关系连接和回应报文，防止攻击</span></span><br><span class=\"line\"></span><br><span class=\"line\">参考文档：https://blog.csdn.net/weixin_34102807/article/details/91616105</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改默认规则</span></span><br><span class=\"line\"><span class=\"comment\">#原则：限制进不限制出，外网严格限制，内网可完全放开。</span></span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br><span class=\"line\">iptables -P OUTPUT ACCEPT</span><br><span class=\"line\">iptables -A INPUT -s 172.16.1.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure>\n","categories":["OPS"],"tags":["OPS","iptables"]},{"title":"MongoDB-4.0.18介绍与C7下的二进制安装","url":"/forward/c4bb5371.html","content":"<h2 id=\"背景介绍：\"><a href=\"#背景介绍：\" class=\"headerlink\" title=\"背景介绍：\"></a>背景介绍：</h2><h3 id=\"关系型于非关系型\"><a href=\"#关系型于非关系型\" class=\"headerlink\" title=\"关系型于非关系型\"></a>关系型于非关系型</h3><ul>\n<li><code>NoSQL</code>（not only sql）指的是 非关系型的数据库</li>\n<li><code>NoSQL</code>有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。</li>\n<li>对<code>NoSQL</code>是普遍的解释是”非关联型的”，强调 <code>Key-Value Stores</code> 和 文档数据库的优点，而不是单纯的<code>RDBMS</code>。</li>\n<li><code>NoSQL</code>用于超大规模数据的存储。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</li>\n</ul>\n<h3 id=\"Mongo和MySQL数据对比\"><a href=\"#Mongo和MySQL数据对比\" class=\"headerlink\" title=\"Mongo和MySQL数据对比\"></a>Mongo和MySQL数据对比</h3><h4 id=\"结构对比：\"><a href=\"#结构对比：\" class=\"headerlink\" title=\"结构对比：\"></a>结构对比：</h4><table>\n<thead>\n<tr>\n<th align=\"left\">MySQL</th>\n<th align=\"left\">MongoDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">库</td>\n<td align=\"left\">库</td>\n</tr>\n<tr>\n<td align=\"left\">表</td>\n<td align=\"left\">集合</td>\n</tr>\n<tr>\n<td align=\"left\">字段</td>\n<td align=\"left\">Key:Value</td>\n</tr>\n<tr>\n<td align=\"left\">记录行</td>\n<td align=\"left\">文档</td>\n</tr>\n</tbody></table>\n<h4 id=\"内容对比：\"><a href=\"#内容对比：\" class=\"headerlink\" title=\"内容对比：\"></a>内容对比：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## mysql数据结构：</span></span><br><span class=\"line\">name          age  job     host</span><br><span class=\"line\">oldzhang      28   it </span><br><span class=\"line\">xiaozhang     28   it</span><br><span class=\"line\">xiaofei       18   student  SZ</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## mongo数据结构：</span></span><br><span class=\"line\">&#123;name:<span class=\"string\">&#x27;oldzhang&#x27;</span>,age:<span class=\"string\">&#x27;28&#x27;</span>,job:<span class=\"string\">&#x27;it&#x27;</span>&#125;,</span><br><span class=\"line\">&#123;name:<span class=\"string\">&#x27;xiaozhang&#x27;</span>,age:<span class=\"string\">&#x27;28&#x27;</span>,job:<span class=\"string\">&#x27;it&#x27;</span>&#125;,</span><br><span class=\"line\">&#123;name:<span class=\"string\">&#x27;xiaozhang&#x27;</span>,age:<span class=\"string\">&#x27;28&#x27;</span>,job:<span class=\"string\">&#x27;it&#x27;</span>,host:<span class=\"string\">&#x27;SZ&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MongoDB介绍\"><a href=\"#MongoDB介绍\" class=\"headerlink\" title=\"MongoDB介绍\"></a>MongoDB介绍</h3><p><strong>高性能：</strong></p>\n<ul>\n<li><code>Mongodb</code>提供高性能的数据库持久化</li>\n<li>尤其是支持嵌入式数据模型减少数据库系统上的<code>I/O</code>操作</li>\n<li>索引支持更快的查询，并且可以包括嵌入式文档和数组中的键</li>\n</ul>\n<p><strong>丰富的语言查询：</strong></p>\n<ul>\n<li><code>Mongodb</code>支持丰富的查询语言来支持读写操作（CRUD）以及数据汇总，文本搜索和地理空间查询</li>\n</ul>\n<p><strong>高可用性：</strong></p>\n<ul>\n<li><code>Mongodb</code>的复制工具，成为副本集，提供自动故障转移和数据冗余。</li>\n</ul>\n<p><strong>水平可扩展性：</strong></p>\n<ul>\n<li><code>Mongodb</code>提供了可扩展性，作为其核心功能的一部分，分片是将数据分在一组计算机上。</li>\n</ul>\n<p><strong>支持多种存储引擎：</strong></p>\n<ul>\n<li><code>WiredTiger</code> 存储引擎和 <code>MMAPv1</code> 存储和 <code>InMemory</code> 存储引擎</li>\n</ul>\n<h3 id=\"MongoDB应用场景\"><a href=\"#MongoDB应用场景\" class=\"headerlink\" title=\"MongoDB应用场景\"></a>MongoDB应用场景</h3><p><strong>应用场景：</strong><a href=\"https://www.zhihu.com/question/32071167\">https://www.zhihu.com/question/32071167</a></p>\n<ul>\n<li><strong>游戏场景</strong>，使用 MongoDB 存储游戏用户信息，用户的装备、积分等直接以内嵌文档的形式存储，方便查询、更新</li>\n<li><strong>物流场景</strong>，使用 MongoDB 存储订单信息，订单状态在运送过程中会不断更新，以 MongoDB 内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来</li>\n<li><strong>社交场景</strong>，使用 MongoDB 存储用户信息，以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能</li>\n<li><strong>物联网场景</strong>，使用 MongoDB 存储所有接入的智能设备信息，以及设备汇报的日志信息，并对这些信息进行多维度的分析</li>\n<li><strong>视频直播</strong>，使用 MongoDB 存储用户信息、礼物信息等，用户评价</li>\n<li><strong>电商场景</strong>，使用 MongoDB 电商上衣和裤子两种商品，除了有共同属性，如产地、价格、材质、颜色等外，还有各自不同的属性集，如上衣的独有属性是肩宽、胸围、袖长等，裤子的独有属性是臀围、脚口和裤长等</li>\n</ul>\n<h2 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h2><p>官方文档：<a href=\"https://docs.mongodb.com/manual/\">https://docs.mongodb.com/manual/</a><br>部署参考：<a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat-tarball/\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat-tarball/</a><br>下载地址：<a href=\"https://www.mongodb.com/download-center/community\">https://www.mongodb.com/download-center/community</a></p>\n<p><img src=\"/images/img-118.png\" alt=\"MongoDB\"></p>\n<h3 id=\"目录规划\"><a href=\"#目录规划\" class=\"headerlink\" title=\"目录规划\"></a>目录规划</h3><table>\n<thead>\n<tr>\n<th align=\"left\">目录</th>\n<th align=\"left\">位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">软件所在位置</td>\n<td align=\"left\">/application/mongo_cluster/</td>\n</tr>\n<tr>\n<td align=\"left\">单节点目录</td>\n<td align=\"left\">/application/mongo_cluster/mongo_27017/{conf,log,pid}</td>\n</tr>\n<tr>\n<td align=\"left\">单节点数据目录</td>\n<td align=\"left\">/data/mongo_cluster/mongo_27017</td>\n</tr>\n</tbody></table>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /server/&#123;tools,scripts&#125; &amp;&amp; <span class=\"built_in\">cd</span> /server/tools</span><br><span class=\"line\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.0.18.tgz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">安装依赖：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># yum install libcurl openssl -y</span></span><br><span class=\"line\">安装目录：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mkdir /application/mongo_cluster/ -p</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 /server/tools]<span class=\"comment\"># tar xf mongodb-linux-x86_64-rhel70-4.0.18.tgz -C /application/mongo_cluster/</span></span><br><span class=\"line\">[root@db01 /server/tools]<span class=\"comment\"># cd /application/mongo_cluster/</span></span><br><span class=\"line\">[root@db01 /application/mongo_cluster]<span class=\"comment\"># ln -s mongodb-linux-x86_64-rhel70-4.0.18 mongodb</span></span><br><span class=\"line\">[root@db01 /application/mongo_cluster]<span class=\"comment\"># mkdir /application/mongo_cluster/mongo_27017/&#123;conf,logs,pid&#125; -p</span></span><br><span class=\"line\">[root@db01 /application/mongo_cluster]<span class=\"comment\"># mkdir /data/mongo_cluster/mongo_27017 -p</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 /application/mongo_cluster]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">drwxr-xr-x 5 root root  41 5月  14 15:06 mongo_27017</span><br><span class=\"line\">lrwxrwxrwx 1 root root  34 5月  14 15:05 mongodb -&gt; mongodb-linux-x86_64-rhel70-4.0.18</span><br><span class=\"line\">drwxr-xr-x 3 root root 135 5月  14 15:04 mongodb-linux-x86_64-rhel70-4.0.18</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户：-官方建议用普通用户管理MongoDB\"><a href=\"#创建用户：-官方建议用普通用户管理MongoDB\" class=\"headerlink\" title=\"创建用户：(官方建议用普通用户管理MongoDB)\"></a>创建用户：(官方建议用普通用户管理MongoDB)</h3><p><code>groupadd -g 800 mongod &amp;&amp; useradd -u 800 -M -s /sbin/nologin -g mongod mongod</code></p>\n<h3 id=\"授权目录\"><a href=\"#授权目录\" class=\"headerlink\" title=\"授权目录\"></a>授权目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># chown  mongod.mongod -R /application/mongo_cluster/</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># chown  mongod.mongod -R /data/mongo_cluster/</span></span><br><span class=\"line\">已集成至systemd启动脚本中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加环境变量\"><a href=\"#添加环境变量\" class=\"headerlink\" title=\"添加环境变量\"></a>添加环境变量</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;export PATH=/application/mongo_cluster/mongodb/bin:\\$PATH&quot; &gt;&gt; /etc/bashrc</span><br><span class=\"line\">. /etc/bashrc</span><br><span class=\"line\">[root@db01 ~]# mongo --version</span><br><span class=\"line\">MongoDB shell version v4.0.18</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"配置文件导入\"><a href=\"#配置文件导入\" class=\"headerlink\" title=\"配置文件导入\"></a>配置文件导入</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /application/mongo_cluster/mongo_27017/conf/mongodb.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">systemLog:</span></span><br><span class=\"line\"><span class=\"string\">  destination: file</span></span><br><span class=\"line\"><span class=\"string\">  logAppend: true</span></span><br><span class=\"line\"><span class=\"string\">  path: /application/mongo_cluster/mongo_27017/logs/mongodb.log</span></span><br><span class=\"line\"><span class=\"string\">storage:</span></span><br><span class=\"line\"><span class=\"string\">  journal:</span></span><br><span class=\"line\"><span class=\"string\">    enabled: true</span></span><br><span class=\"line\"><span class=\"string\">  dbPath: /data/mongo_cluster/mongo_27017</span></span><br><span class=\"line\"><span class=\"string\">  directoryPerDB: true</span></span><br><span class=\"line\"><span class=\"string\">  wiredTiger:</span></span><br><span class=\"line\"><span class=\"string\">    engineConfig:</span></span><br><span class=\"line\"><span class=\"string\">      cacheSizeGB: 1</span></span><br><span class=\"line\"><span class=\"string\">      directoryForIndexes: true</span></span><br><span class=\"line\"><span class=\"string\">    collectionConfig:</span></span><br><span class=\"line\"><span class=\"string\">      blockCompressor: zlib</span></span><br><span class=\"line\"><span class=\"string\">    indexConfig:</span></span><br><span class=\"line\"><span class=\"string\">      prefixCompression: true</span></span><br><span class=\"line\"><span class=\"string\">processManagement:</span></span><br><span class=\"line\"><span class=\"string\">  fork: true</span></span><br><span class=\"line\"><span class=\"string\">  pidFilePath: /application/mongo_cluster/mongo_27017/pid/mongod.pid</span></span><br><span class=\"line\"><span class=\"string\">net:</span></span><br><span class=\"line\"><span class=\"string\">  port: 27017</span></span><br><span class=\"line\"><span class=\"string\">  bindIp: 127.0.0.1,10.0.0.51</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置文件介绍\"><a href=\"#配置文件介绍\" class=\"headerlink\" title=\"配置文件介绍\"></a>配置文件介绍</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#日志相关</span></span><br><span class=\"line\">systemLog:</span><br><span class=\"line\"> destination: file      <span class=\"comment\">#Mongodb 日志输出的目的地，指定一个 file 或者 syslog，如果指定 file，必须指定</span></span><br><span class=\"line\"> logAppend: <span class=\"literal\">true</span>        <span class=\"comment\">#当实例重启时，不创建新的日志文件，在老的日志文件末尾继续添加</span></span><br><span class=\"line\"> path: /application/mongo_cluster/mongo_27017/logs/mongodb.log <span class=\"comment\">#日志路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#存储相关</span></span><br><span class=\"line\">storage:</span><br><span class=\"line\"> journal:               <span class=\"comment\">#回滚日志</span></span><br><span class=\"line\"> enabled: <span class=\"literal\">true</span></span><br><span class=\"line\"> dbPath: /data/mongo_cluster/mongo_27017 <span class=\"comment\">#数据存储目录</span></span><br><span class=\"line\"> directoryPerDB: <span class=\"literal\">true</span> <span class=\"comment\">#默认 false，不适用 inmemory engine。每个数据库将被保存在一个单独的目录</span></span><br><span class=\"line\"> wiredTiger:</span><br><span class=\"line\"> engineConfig:</span><br><span class=\"line\"> cacheSizeGB: 1            <span class=\"comment\">#将用于所有数据缓存的最大小</span></span><br><span class=\"line\"> directoryForIndexes: <span class=\"literal\">true</span> <span class=\"comment\">#默认 false 索引集合 storage.dbPath 存储在数据单独子目录</span></span><br><span class=\"line\"> collectionConfig:         <span class=\"comment\">#表压缩配置</span></span><br><span class=\"line\"> blockCompressor: zlib</span><br><span class=\"line\"> indexConfig:              <span class=\"comment\">#索引配置</span></span><br><span class=\"line\"> prefixCompression: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程相关</span></span><br><span class=\"line\">processManagement: <span class=\"comment\">#使用处理系统守护进程的控制处理</span></span><br><span class=\"line\"> fork: <span class=\"literal\">true</span> <span class=\"comment\">#后台运行</span></span><br><span class=\"line\"> pidFilePath: /application/mongo_cluster/mongo_27017/pid/mongod.pid <span class=\"comment\">#创建 pid 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#网络相关</span></span><br><span class=\"line\">net:</span><br><span class=\"line\"> port: 27017 <span class=\"comment\">#监听端口</span></span><br><span class=\"line\"> bindIp: 127.0.0.1,10.0.0.51 <span class=\"comment\">#绑定 ip</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-关闭MongoDB\"><a href=\"#启动-关闭MongoDB\" class=\"headerlink\" title=\"启动/关闭MongoDB\"></a>启动/关闭MongoDB</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># /application/mongo_cluster/mongodb/bin/mongod -f /application/mongo_cluster/mongo_27017/conf/mongodb.conf</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># /application/mongo_cluster/mongodb/bin/mongod -f /application/mongo_cluster/mongo_27017/conf/mongodb.conf --shutdown</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置systemd管理：\"><a href=\"#配置systemd管理：\" class=\"headerlink\" title=\"配置systemd管理：\"></a>配置systemd管理：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /lib/systemd/system/mongodb27017.service &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=mongodb</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=mongod</span><br><span class=\"line\">Group=mongod</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PermissionsStartOnly=<span class=\"literal\">true</span></span><br><span class=\"line\">ExecStartPre=/usr/bin/chown mongod.mongod -R /application/mongo_cluster/</span><br><span class=\"line\">ExecStartPre=/usr/bin/chown mongod.mongod -R /data/mongo_cluster/</span><br><span class=\"line\">Environment=<span class=\"string\">&quot;OPTIONS=-f /application/mongo_cluster/mongo_27017/conf/mongodb.conf&quot;</span></span><br><span class=\"line\">ExecStart=/application/mongo_cluster/mongodb/bin/mongod <span class=\"variable\">$OPTIONS</span></span><br><span class=\"line\"><span class=\"comment\">#ExecReload=/bin/kill -s HUP $MAINPID</span></span><br><span class=\"line\">ExecStop=/application/mongo_cluster/mongodb/bin/mongod <span class=\"variable\">$OPTIONS</span> --shutdown</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动测试：\"><a href=\"#启动测试：\" class=\"headerlink\" title=\"启动测试：\"></a>启动测试：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start mongodb27017.service</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mongodb27017.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"告警优化\"><a href=\"#告警优化\" class=\"headerlink\" title=\"告警优化\"></a>告警优化</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1:配置的WiredTiger缓存大小超过可用内存的80%。</span><br><span class=\"line\">** WARNING: The configured WiredTiger cache size is more than 80% of available RAM.</span><br><span class=\"line\">**          See http://dochub.mongodb.org/core/faq-memory-diagnostics-wt</span><br><span class=\"line\"></span><br><span class=\"line\">2:未开启登陆认证</span><br><span class=\"line\">** WARNING: Access control is not enabled <span class=\"keyword\">for</span> the database.</span><br><span class=\"line\">**          Read and write access to data and configuration is unrestricted.</span><br><span class=\"line\"></span><br><span class=\"line\">3.大内存页未关闭</span><br><span class=\"line\">** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is <span class=\"string\">&#x27;always&#x27;</span>.</span><br><span class=\"line\">**        We suggest setting it to <span class=\"string\">&#x27;never&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is <span class=\"string\">&#x27;always&#x27;</span>.</span><br><span class=\"line\">**        We suggest setting it to <span class=\"string\">&#x27;never&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭大内存页\"><a href=\"#关闭大内存页\" class=\"headerlink\" title=\"关闭大内存页\"></a>关闭大内存页</h3><p><strong>参考文档：</strong><a href=\"https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/\">https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/systemd/system/disable-transparent-huge-pages.service &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Disable Transparent Huge Pages (THP)</span><br><span class=\"line\">DefaultDependencies=no</span><br><span class=\"line\">After=sysinit.target local-fs.target</span><br><span class=\"line\">Before=mongod.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=oneshot</span><br><span class=\"line\">ExecStart=/bin/sh -c <span class=\"string\">&#x27;echo never | tee /sys/kernel/mm/transparent_hugepage/enabled &gt; /dev/null&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=basic.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class=\"line\">[always] madvise never</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl start disable-transparent-huge-pages</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /sys/kernel/mm/transparent_hugepage/enabled </span></span><br><span class=\"line\">always madvise [never]</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> disable-transparent-huge-pages</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rlimits警告\"><a href=\"#rlimits警告\" class=\"headerlink\" title=\"rlimits警告\"></a>rlimits警告</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ulimit -u 64000&quot;</span>  &gt;&gt; /etc/bashrc</span><br><span class=\"line\">. /etc/profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"内存占用超过-80\"><a href=\"#内存占用超过-80\" class=\"headerlink\" title=\"内存占用超过 80%\"></a>内存占用超过 80%</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># grep &quot;cacheSizeGB&quot; /application/mongo_cluster/mongo_27017/conf/mongodb.conf </span></span><br><span class=\"line\">      cacheSizeGB: 1</span><br></pre></td></tr></table></figure>\n<p><strong>解决方法：</strong>增加内存或者在配置文件里把 <code>cash</code> 调小</p>\n<h3 id=\"用户访问控制\"><a href=\"#用户访问控制\" class=\"headerlink\" title=\"用户访问控制\"></a>用户访问控制</h3><p>配置文件增加用户认证的配置参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">security:</span><br><span class=\"line\"> authorization: enabled</span><br></pre></td></tr></table></figure>\n\n<p>重启mongo服务</p>\n<h2 id=\"登陆测试\"><a href=\"#登陆测试\" class=\"headerlink\" title=\"登陆测试\"></a>登陆测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo </span></span><br><span class=\"line\">MongoDB shell version v4.0.18</span><br><span class=\"line\">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br><span class=\"line\">Implicit session: session &#123; <span class=\"string\">&quot;id&quot;</span> : UUID(<span class=\"string\">&quot;35df303c-3320-498d-ae0c-d2dd601810f4&quot;</span>) &#125;</span><br><span class=\"line\">MongoDB server version: 4.0.18</span><br><span class=\"line\">Server has startup warnings: </span><br><span class=\"line\">2020-05-14T17:33:13.213+0800 I STORAGE  [initandlisten] </span><br><span class=\"line\">2020-05-14T17:33:13.213+0800 I STORAGE  [initandlisten] ** WARNING: The configured WiredTiger cache size is more than 80% of available RAM.</span><br><span class=\"line\">2020-05-14T17:33:13.213+0800 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/faq-memory-diagnostics-wt</span><br><span class=\"line\">2020-05-14T17:33:13.984+0800 I CONTROL  [initandlisten] </span><br><span class=\"line\">2020-05-14T17:33:13.984+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled <span class=\"keyword\">for</span> the database.</span><br><span class=\"line\">2020-05-14T17:33:13.984+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class=\"line\">2020-05-14T17:33:13.984+0800 I CONTROL  [initandlisten] </span><br><span class=\"line\">---</span><br><span class=\"line\">Enable MongoDB<span class=\"string\">&#x27;s free cloud-based monitoring service, which will then receive and display</span></span><br><span class=\"line\"><span class=\"string\">metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span></span><br><span class=\"line\"><span class=\"string\">and anyone you share the URL with. MongoDB may use this information to make product</span></span><br><span class=\"line\"><span class=\"string\">improvements and to suggest MongoDB products and deployment options to you.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">To enable free monitoring, run the following command: db.enableFreeMonitoring()</span></span><br><span class=\"line\"><span class=\"string\">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&gt; </span></span><br></pre></td></tr></table></figure>","categories":["DBA"],"tags":["MongoDB","NoSQL"]},{"title":"MongoDB-构建副本集&扩容缩容&仲裁节点","url":"/forward/6c0d75ae.html","content":"<h2 id=\"副本集架构介绍\"><a href=\"#副本集架构介绍\" class=\"headerlink\" title=\"副本集架构介绍\"></a>副本集架构介绍</h2><p><strong>一个包含3个mongo的复制集架构如下所示：</strong><br><img src=\"/images/img-124.png\" alt=\"Mongo\"><br><strong>如果主节点失效，会变成：</strong><br><img src=\"/images/img-125.png\" alt=\"故障转移\"><br><strong>如果加上可选的仲裁节点：</strong><br><img src=\"/images/img-126.png\" alt=\"仲裁节点\"><br><strong>拥有仲裁节点情况下主服务器失效：</strong><br><img src=\"/images/img-127.png\" alt=\"仲裁节点故障转移\"></p>\n<h2 id=\"环境准备：\"><a href=\"#环境准备：\" class=\"headerlink\" title=\"环境准备：\"></a>环境准备：</h2><h3 id=\"单机多实例目录规划\"><a href=\"#单机多实例目录规划\" class=\"headerlink\" title=\"单机多实例目录规划\"></a>单机多实例目录规划</h3><p>以<code>/application/mongo_端口号/</code>为单机多实例存放目录</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Server</th>\n<th align=\"left\">Role</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10.0.0.51:28017</td>\n<td align=\"left\">PRIMARY</td>\n</tr>\n<tr>\n<td align=\"left\">10.0.0.51:28018</td>\n<td align=\"left\">SECONDARY</td>\n</tr>\n<tr>\n<td align=\"left\">10.0.0.51:28019</td>\n<td align=\"left\">SECONDARY</td>\n</tr>\n<tr>\n<td align=\"left\">10.0.0.51:28010</td>\n<td align=\"left\">ARBITER(可选)</td>\n</tr>\n</tbody></table>\n<h3 id=\"创建多实例目录\"><a href=\"#创建多实例目录\" class=\"headerlink\" title=\"创建多实例目录\"></a>创建多实例目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mkdir -p /application/mongo_cluster/mongo_2801&#123;7,8,9&#125;/&#123;conf,logs,pid&#125;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># tree /application/mongo_cluster/mongo_2801*</span></span><br><span class=\"line\">/application/mongo_cluster/mongo_28017</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">└── pid</span><br><span class=\"line\">/application/mongo_cluster/mongo_28018</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">└── pid</span><br><span class=\"line\">/application/mongo_cluster/mongo_28019</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">└── pid</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /application/mongo_cluster/mongo_28017/conf/mongo_28017.conf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">systemLog:</span></span><br><span class=\"line\"><span class=\"string\">  destination: file</span></span><br><span class=\"line\"><span class=\"string\">  logAppend: true</span></span><br><span class=\"line\"><span class=\"string\">  path: /application/mongo_cluster/mongo_28017/logs/mongodb.log</span></span><br><span class=\"line\"><span class=\"string\">storage:</span></span><br><span class=\"line\"><span class=\"string\">  journal:</span></span><br><span class=\"line\"><span class=\"string\">    enabled: true</span></span><br><span class=\"line\"><span class=\"string\">  dbPath: /data/mongo_cluster/mongo_28017</span></span><br><span class=\"line\"><span class=\"string\">  directoryPerDB: true</span></span><br><span class=\"line\"><span class=\"string\">  wiredTiger:</span></span><br><span class=\"line\"><span class=\"string\">    engineConfig:</span></span><br><span class=\"line\"><span class=\"string\">      cacheSizeGB: 0.5</span></span><br><span class=\"line\"><span class=\"string\">      directoryForIndexes: true</span></span><br><span class=\"line\"><span class=\"string\">    collectionConfig:</span></span><br><span class=\"line\"><span class=\"string\">      blockCompressor: zlib</span></span><br><span class=\"line\"><span class=\"string\">    indexConfig:</span></span><br><span class=\"line\"><span class=\"string\">      prefixCompression: true</span></span><br><span class=\"line\"><span class=\"string\">processManagement:</span></span><br><span class=\"line\"><span class=\"string\">  fork: true</span></span><br><span class=\"line\"><span class=\"string\">  pidFilePath: /application/mongo_cluster/mongo_28017/pid/mongod.pid</span></span><br><span class=\"line\"><span class=\"string\">net:</span></span><br><span class=\"line\"><span class=\"string\">  port: 28017</span></span><br><span class=\"line\"><span class=\"string\">  bindIp: 127.0.0.1,10.0.0.51</span></span><br><span class=\"line\"><span class=\"string\">replication:</span></span><br><span class=\"line\"><span class=\"string\">  oplogSizeMB: 1024</span></span><br><span class=\"line\"><span class=\"string\">  replSetName: dba58</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">------------------</span><br><span class=\"line\">参数介绍：</span><br><span class=\"line\">oplogSizeMB：</span><br><span class=\"line\"><span class=\"comment\">#复制操作日志的最大大小（M），该mongod过程基于最大可用空间量创建一个oplog，对于64位系统，oplog通常是可用磁盘的5%，一旦mongod第一次创建了oplog，更改replication.oplogSizeMB将不会影响oplog的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">replSetName:</span><br><span class=\"line\"><span class=\"comment\">#复制集的名称</span></span><br><span class=\"line\">------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建另外两个节点的配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /application/mongo_cluster/mongo_28017/conf/mongo_28017.conf /application/mongo_cluster/mongo_28018/conf/mongo_28018.conf</span><br><span class=\"line\"><span class=\"built_in\">cp</span> /application/mongo_cluster/mongo_28017/conf/mongo_28017.conf /application/mongo_cluster/mongo_28019/conf/mongo_28019.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改端口号</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s#28017#28018#g&#x27;</span> /application/mongo_cluster/mongo_28018/conf/mongo_28018.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s#28017#28019#g&#x27;</span> /application/mongo_cluster/mongo_28019/conf/mongo_28019.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mkdir -p /data/mongo_cluster/mongo_2801&#123;7,8,9&#125;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># tree /data/mongo_cluster/ -L 1</span></span><br><span class=\"line\">/data/mongo_cluster/</span><br><span class=\"line\">├── mongo_27017</span><br><span class=\"line\">├── mongo_28017</span><br><span class=\"line\">├── mongo_28018</span><br><span class=\"line\">└── mongo_28019</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改目录权限\"><a href=\"#更改目录权限\" class=\"headerlink\" title=\"更改目录权限\"></a>更改目录权限</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># id mongod</span></span><br><span class=\"line\">uid=800(mongod) gid=800(mongod) 组=800(mongod)</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R mongod:mongod /data/mongo_cluster</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R mongod:mongod /application/mongo_cluster</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多实例启动测试\"><a href=\"#多实例启动测试\" class=\"headerlink\" title=\"多实例启动测试\"></a>多实例启动测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod -f /application/mongo_cluster/mongo_28017/conf/mongo_28017.conf</span><br><span class=\"line\">mongod -f /application/mongo_cluster/mongo_28018/conf/mongo_28018.conf</span><br><span class=\"line\">mongod -f /application/mongo_cluster/mongo_28019/conf/mongo_28019.conf </span><br><span class=\"line\">---</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -ef | grep mongod</span></span><br><span class=\"line\">root      5291     1  1 12:03 ?        00:00:00 mongod -f /application/mongo_cluster/mongo_28017/conf/mongo_28017.conf</span><br><span class=\"line\">root      5329     1  1 12:03 ?        00:00:00 mongod -f /application/mongo_cluster/mongo_28018/conf/mongo_28018.conf</span><br><span class=\"line\">root      5367     1  1 12:03 ?        00:00:00 mongod -f /application/mongo_cluster/mongo_28019/conf/mongo_28019.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># netstat -lntup | grep mongod | wc -l</span></span><br><span class=\"line\">6</span><br><span class=\"line\">---</span><br><span class=\"line\">mongo db01:28017</span><br><span class=\"line\">mongo db01:28018</span><br><span class=\"line\">mongo db01:28019</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置副本集\"><a href=\"#配置副本集\" class=\"headerlink\" title=\"配置副本集\"></a>配置副本集</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">初始化副本集</span><br><span class=\"line\">mongo db01:28017</span><br><span class=\"line\">&gt; config = &#123;</span><br><span class=\"line\">... _id : <span class=\"string\">&quot;dba58&quot;</span>,</span><br><span class=\"line\">... members : [</span><br><span class=\"line\">... &#123;_id : 0, host : <span class=\"string\">&quot; db01:28017&quot;</span>&#125;,</span><br><span class=\"line\">... &#123;_id : 1, host : <span class=\"string\">&quot; db01:28018&quot;</span>&#125;,</span><br><span class=\"line\">... &#123;_id : 2, host : <span class=\"string\">&quot; db01:28019&quot;</span>&#125;,</span><br><span class=\"line\">... ] &#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;_id&quot;</span> : <span class=\"string\">&quot;dba58&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;members&quot;</span> : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;_id&quot;</span> : 0,</span><br><span class=\"line\">                        <span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot; db01:28017&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;_id&quot;</span> : 1,</span><br><span class=\"line\">                        <span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot; db01:28018&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;_id&quot;</span> : 2,</span><br><span class=\"line\">                        <span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot; db01:28019&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; rs.initiate(config) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;ok&quot;</span> : 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;operationTime&quot;</span> : Timestamp(1590035513, 1),</span><br><span class=\"line\">        <span class=\"string\">&quot;<span class=\"variable\">$clusterTime</span>&quot;</span> : &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;clusterTime&quot;</span> : Timestamp(1590035513, 1),</span><br><span class=\"line\">                <span class=\"string\">&quot;signature&quot;</span> : &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;hash&quot;</span> : BinData(0,<span class=\"string\">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class=\"line\">                        <span class=\"string\">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dba58:SECONDARY&gt; </span><br><span class=\"line\">dba58:SECONDARY&gt; </span><br><span class=\"line\">dba58:PRIMARY&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">mongo db01:28018</span><br><span class=\"line\">dba58:SECONDARY&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">mongo db01:28019</span><br><span class=\"line\">dba58:SECONDARY&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查副本集状态状态\"><a href=\"#检查副本集状态状态\" class=\"headerlink\" title=\"检查副本集状态状态\"></a>检查副本集状态状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rs.status();   //查看整体复制集状态 </span><br><span class=\"line\">rs.isMaster(); // 查看当前是否是主节点 </span><br><span class=\"line\">rs.conf();     //查看复制集配置信息 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写入测试数据\"><a href=\"#写入测试数据\" class=\"headerlink\" title=\"写入测试数据\"></a>写入测试数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dba58:PRIMARY&gt; db.inventory.insertMany( [</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span>: <span class=\"string\">&quot;journal&quot;</span>, <span class=\"string\">&quot;qty&quot;</span>: 25, <span class=\"string\">&quot;size&quot;</span>: &#123; <span class=\"string\">&quot;h&quot;</span>: 14, <span class=\"string\">&quot;w&quot;</span>: 21, <span class=\"string\">&quot;uom&quot;</span>: <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;A&quot;</span> &#125;,</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span>: <span class=\"string\">&quot;notebook&quot;</span>, <span class=\"string\">&quot;qty&quot;</span>: 50, <span class=\"string\">&quot;size&quot;</span>: &#123; <span class=\"string\">&quot;h&quot;</span>: 8.5, <span class=\"string\">&quot;w&quot;</span>: 11, <span class=\"string\">&quot;uom&quot;</span>: <span class=\"string\">&quot;in&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;A&quot;</span> &#125;,</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span>: <span class=\"string\">&quot;paper&quot;</span>, <span class=\"string\">&quot;qty&quot;</span>: 100, <span class=\"string\">&quot;size&quot;</span>: &#123; <span class=\"string\">&quot;h&quot;</span>: 8.5, <span class=\"string\">&quot;w&quot;</span>: 11, <span class=\"string\">&quot;uom&quot;</span>: <span class=\"string\">&quot;in&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;D&quot;</span> &#125;,</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span>: <span class=\"string\">&quot;planner&quot;</span>, <span class=\"string\">&quot;qty&quot;</span>: 75, <span class=\"string\">&quot;size&quot;</span>: &#123; <span class=\"string\">&quot;h&quot;</span>: 22.85, <span class=\"string\">&quot;w&quot;</span>: 30, <span class=\"string\">&quot;uom&quot;</span>: <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;D&quot;</span> &#125;,</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span>: <span class=\"string\">&quot;postcard&quot;</span>, <span class=\"string\">&quot;qty&quot;</span>: 45, <span class=\"string\">&quot;size&quot;</span>: &#123; <span class=\"string\">&quot;h&quot;</span>: 10, <span class=\"string\">&quot;w&quot;</span>: 15.25, <span class=\"string\">&quot;uom&quot;</span>: <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;A&quot;</span> &#125;</span><br><span class=\"line\">]);</span><br><span class=\"line\">dba58:PRIMARY&gt; db.inventory.find()</span><br><span class=\"line\"></span><br><span class=\"line\">//从节点查看</span><br><span class=\"line\">dba58:SECONDARY&gt; db.inventory.find()</span><br><span class=\"line\">...</span><br><span class=\"line\">        <span class=\"string\">&quot;errmsg&quot;</span> : <span class=\"string\">&quot;not master and slaveOk=false&quot;</span>,</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">默认从节点不可直接查询：</span><br><span class=\"line\">临时解决</span><br><span class=\"line\">dba58:SECONDARY&gt; rs.slaveOk();</span><br><span class=\"line\">dba58:SECONDARY&gt; db.inventory.<span class=\"function\"><span class=\"title\">find</span></span>()</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ec60b6a9df565bf8d6b6bcc&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;postcard&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 45, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 10, <span class=\"string\">&quot;w&quot;</span> : 15.25, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">永久解决</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># echo &quot;rs.slaveOk();&quot; &gt;&gt; .mongorc.js</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"故障转移\"><a href=\"#故障转移\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\">#  mongod -f /application/mongo_cluster/mongo_28017/conf/mongo_28017.conf --shutdown</span></span><br><span class=\"line\">killing process with pid: 5291</span><br><span class=\"line\"></span><br><span class=\"line\">1.登陆原副节点查看：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\">#  mongo db01:28018</span></span><br><span class=\"line\">dba58:PRIMARY&gt; rs.isMaster();</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;hosts&quot;</span> : [</span><br><span class=\"line\">                <span class=\"string\">&quot;db01:28017&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;db01:28018&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;db01:28019&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;setName&quot;</span> : <span class=\"string\">&quot;dba58&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;setVersion&quot;</span> : 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;ismaster&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;secondary&quot;</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;primary&quot;</span> : <span class=\"string\">&quot;db01:28018&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;me&quot;</span> : <span class=\"string\">&quot;db01:28018&quot;</span>, //从节点转移致主节点</span><br><span class=\"line\"></span><br><span class=\"line\">2.尝试修改数据：</span><br><span class=\"line\">dba58:PRIMARY&gt;  db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;zhangya&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:27,<span class=\"string\">&quot;ad&quot;</span>:<span class=\"string\">&quot;北京市朝阳区&quot;</span>&#125;)</span><br><span class=\"line\">WriteResult(&#123; <span class=\"string\">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class=\"line\">dba58:PRIMARY&gt; db.test.<span class=\"function\"><span class=\"title\">find</span></span>()</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ec6120d946241e339cfb2d0&quot;</span>), <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;zhangya&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : 27, <span class=\"string\">&quot;ad&quot;</span> : <span class=\"string\">&quot;北京市朝阳区&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">3.在从库上查看：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\">#  mongo db01:28019</span></span><br><span class=\"line\">dba58:SECONDARY&gt; db.test.<span class=\"function\"><span class=\"title\">find</span></span>()</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ec6120d946241e339cfb2d0&quot;</span>), <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;zhangya&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : 27, <span class=\"string\">&quot;ad&quot;</span> : <span class=\"string\">&quot;北京市朝阳区&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">4.重新启动损坏节点：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongod -f /application/mongo_cluster/mongo_28017/conf/mongo_28017.conf</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo db01:28017</span></span><br><span class=\"line\">dba58:SECONDARY&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"副本集的权重调整和主库降级\"><a href=\"#副本集的权重调整和主库降级\" class=\"headerlink\" title=\"副本集的权重调整和主库降级\"></a>副本集的权重调整和主库降级</h2><h3 id=\"检查当前配置\"><a href=\"#检查当前配置\" class=\"headerlink\" title=\"检查当前配置\"></a>检查当前配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dba58:SECONDARY&gt; rs.conf();</span><br><span class=\"line\"><span class=\"string\">&quot;_id&quot;</span> : 0,</span><br><span class=\"line\"><span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot;db01:28017&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;priority&quot;</span> : 1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;_id&quot;</span> : 1,</span><br><span class=\"line\"><span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot;db01:28018&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;priority&quot;</span> : 1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;_id&quot;</span> : 2,</span><br><span class=\"line\"><span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot;db01:28019&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;priority&quot;</span> : 1,</span><br><span class=\"line\">//现在三个成员权限都为1</span><br></pre></td></tr></table></figure>\n<h3 id=\"在主库中执行如下\"><a href=\"#在主库中执行如下\" class=\"headerlink\" title=\"在主库中执行如下\"></a>在主库中执行如下</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">config = rs.conf() <span class=\"comment\">#读取当前配置</span></span><br><span class=\"line\">config.members[2].priority=100 <span class=\"comment\">#修改指定节点权重为100，此处我修改了 节点2即10.0.0.51:28019</span></span><br><span class=\"line\">rs.reconfig(config) <span class=\"comment\">#使生效</span></span><br><span class=\"line\">rs.stepDown() <span class=\"comment\">#主节点主动降价，重新选举</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检查集群状态\"><a href=\"#检查集群状态\" class=\"headerlink\" title=\"检查集群状态\"></a>检查集群状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dba58:SECONDARY&gt; rs.isMaster();</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;hosts&quot;</span> : [</span><br><span class=\"line\">                <span class=\"string\">&quot;db01:28017&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;db01:28018&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;db01:28019&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;setName&quot;</span> : <span class=\"string\">&quot;dba58&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;setVersion&quot;</span> : 2,</span><br><span class=\"line\">        <span class=\"string\">&quot;ismaster&quot;</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;secondary&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;primary&quot;</span> : <span class=\"string\">&quot;db01:28019&quot;</span>, //28019成功晋升</span><br><span class=\"line\">        <span class=\"string\">&quot;me&quot;</span> : <span class=\"string\">&quot;db01:28018&quot;</span>,</span><br></pre></td></tr></table></figure>\n<h3 id=\"恢复权重\"><a href=\"#恢复权重\" class=\"headerlink\" title=\"恢复权重\"></a>恢复权重</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo db01:28019 //进入主节点</span></span><br><span class=\"line\">dba58:PRIMARY&gt; </span><br><span class=\"line\">config = rs.conf()</span><br><span class=\"line\">config.members[2].priority=1</span><br><span class=\"line\">rs.reconfig(config)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查节点2权重\"><a href=\"#检查节点2权重\" class=\"headerlink\" title=\"检查节点2权重\"></a>检查节点2权重</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dba58:PRIMARY&gt; rs.conf()</span><br><span class=\"line\">                        <span class=\"string\">&quot;_id&quot;</span> : 2,</span><br><span class=\"line\">                        <span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot;db01:28019&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;priority&quot;</span> : 1,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扩容收缩和仲裁节点\"><a href=\"#扩容收缩和仲裁节点\" class=\"headerlink\" title=\"扩容收缩和仲裁节点\"></a>扩容收缩和仲裁节点</h2><h3 id=\"扩容，添加节点\"><a href=\"#扩容，添加节点\" class=\"headerlink\" title=\"扩容，添加节点\"></a>扩容，添加节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建新节点目录及启动</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /application/mongo_cluster/mongo_28010/&#123;conf,logs,pid&#125; -p</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /data/mongo_cluster/mongo_28010</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置新节点</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /application/mongo_cluster/mongo_28017/conf/mongo_28017.conf /application/mongo_cluster/mongo_28010/conf/mongo_28010.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s#28017#28010#g&#x27;</span> /application/mongo_cluster/mongo_28010/conf/mongo_28010.conf</span><br><span class=\"line\">mongod -f /application/mongo_cluster/mongo_28010/conf/mongo_28010.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动</span></span><br><span class=\"line\">mongo db01:28010</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#增加节点，进入主节点</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\">#  mongo db01:28019</span></span><br><span class=\"line\">dba58:PRIMARY&gt; use admin</span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\">dba58:PRIMARY&gt; rs.add(<span class=\"string\">&quot;db01:28010&quot;</span>) //添加新节点到集群</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检查集群配置信息</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\">#  mongo db01:28010</span></span><br><span class=\"line\">dba58:SECONDARY&gt; </span><br><span class=\"line\">dba58:SECONDARY&gt; rs.conf()</span><br><span class=\"line\">                        <span class=\"string\">&quot;_id&quot;</span> : 0,</span><br><span class=\"line\">                        <span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot;db01:28017&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;priority&quot;</span> : 1,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"string\">&quot;_id&quot;</span> : 1,</span><br><span class=\"line\">                        <span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot;db01:28018&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;priority&quot;</span> : 1,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"string\">&quot;_id&quot;</span> : 2,</span><br><span class=\"line\">                        <span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot;db01:28019&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;priority&quot;</span> : 1,</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"string\">&quot;_id&quot;</span> : 3, &lt;==</span><br><span class=\"line\">                        <span class=\"string\">&quot;host&quot;</span> : <span class=\"string\">&quot;db01:28010&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;priority&quot;</span> : 1,</span><br><span class=\"line\">dba58:SECONDARY&gt; rs.isMaster();</span><br><span class=\"line\">        <span class=\"string\">&quot;hosts&quot;</span> : [</span><br><span class=\"line\">                <span class=\"string\">&quot;db01:28017&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;db01:28018&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;db01:28019&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;db01:28010&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;setName&quot;</span> : <span class=\"string\">&quot;dba58&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;primary&quot;</span> : <span class=\"string\">&quot;db01:28019&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;me&quot;</span> : <span class=\"string\">&quot;db01:28010&quot;</span>,</span><br></pre></td></tr></table></figure>\n<h3 id=\"缩容，删除节点\"><a href=\"#缩容，删除节点\" class=\"headerlink\" title=\"缩容，删除节点\"></a>缩容，删除节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#主节点操作</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo db01:28019</span></span><br><span class=\"line\">dba58:PRIMARY&gt; rs.remove(<span class=\"string\">&quot;db01:28010&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此时从节点变成了OTHER状态</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo db01:28010</span></span><br><span class=\"line\">dba58:OTHER&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#现在可以关闭节点了</span></span><br><span class=\"line\">[mongo@db01 ~]$ mongod -f /application/mongo_cluster/mongo_28010/conf/mongo_28010.conf --shutdown</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增加仲裁节点\"><a href=\"#增加仲裁节点\" class=\"headerlink\" title=\"增加仲裁节点\"></a>增加仲裁节点</h3><p>官方地址：<a href=\"https://docs.mongodb.com/manual/tutorial/add-replica-set-arbiter/\">https://docs.mongodb.com/manual/tutorial/add-replica-set-arbiter/</a><br>Arbiter 节点只参与投票，不能被选为 Primary，并且不跟 Primary 同步数据。</p>\n<h3 id=\"环境恢复\"><a href=\"#环境恢复\" class=\"headerlink\" title=\"环境恢复\"></a>环境恢复</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#清空 28010 节点的数据</span></span><br><span class=\"line\">\\<span class=\"built_in\">rm</span> -rf /data/mongo_cluster/mongo_28010/*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动节点</span></span><br><span class=\"line\">mongod -f /application/mongo_cluster/mongo_28010/conf/mongo_28010.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检查</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo db01:28010</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加仲裁节点\"><a href=\"#添加仲裁节点\" class=\"headerlink\" title=\"添加仲裁节点\"></a>添加仲裁节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo db01:28019</span></span><br><span class=\"line\">dba58:PRIMARY&gt; rs.addArb(<span class=\"string\">&quot;db01:28010&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检查集群状态：</span></span><br><span class=\"line\">dba58:PRIMARY&gt; rs.status()</span><br><span class=\"line\">        <span class=\"string\">&quot;_id&quot;</span> : 3,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;db01:28010&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;health&quot;</span> : 1,</span><br><span class=\"line\">        <span class=\"string\">&quot;state&quot;</span> : 7,</span><br><span class=\"line\">        <span class=\"string\">&quot;stateStr&quot;</span> : <span class=\"string\">&quot;ARBITER&quot;</span>, &lt;==</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检查仲裁节点</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo db01:28010</span></span><br><span class=\"line\">dba58:ARBITER&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除仲裁节点</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo db01:28019</span></span><br><span class=\"line\">dba58:PRIMARY&gt; rs.remove(<span class=\"string\">&quot;db01:28010&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo db01:28010</span></span><br><span class=\"line\">dba58:OTHER&gt; </span><br></pre></td></tr></table></figure>","categories":["DBA"],"tags":["MongoDB","主从复制"]},{"title":"MySQL-MHA+Atlas+VIP+Binlog server实现MySQL的高可用和读写分离","url":"/forward/74c8159a.html","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p><strong>MHA&amp;VIP&amp;邮件告警构建参见</strong>：<a href=\"https://cakepanit.com/forward/c919a25c.html\">https://cakepanit.com/forward/c919a25c.html</a><br><strong>binlogserver</strong>：实时抓取主库的binlog日志，防止极限情况下的主库宕机，而从库接管时出现数据不全的情况<br><strong>Atlas</strong>：配合MHA的vip高可用，实现主从复制的读写分离相关操作</p>\n<h2 id=\"binlogserver配置：\"><a href=\"#binlogserver配置：\" class=\"headerlink\" title=\"binlogserver配置：\"></a>binlogserver配置：</h2><h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>找一台额外的机器，必须要有5.6以上的版本，支持gtid并开启，我们直接用的第二个slave（db03）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/mha/app1.cnf </span><br><span class=\"line\">[binlog1]</span><br><span class=\"line\">no_master=1 //表示此节点不参与主从选举</span><br><span class=\"line\">hostname=192.168.56.4</span><br><span class=\"line\">master_binlog_dir=/data/mysql/binlog //用于保存主库Pull过来的二进制的本地路径</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建必要目录\"><a href=\"#创建必要目录\" class=\"headerlink\" title=\"创建必要目录\"></a>创建必要目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/mysql/binlog</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R mysql.mysql /data/*</span><br></pre></td></tr></table></figure>\n<p>修改完成后，将主库binlog拉过来（从000001开始拉，之后的binlog会自动按顺序过来）<br>拉取主库binlog日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /data/mysql/binlog     -----&gt;必须进入到自己创建好的目录</span><br><span class=\"line\">mysqlbinlog  -R --host=192.168.56.3 --user=mha --password=mha --raw  --stop-never mysql-bin.000003 &amp;</span><br><span class=\"line\">                       主库真实ip    用于拉去的用户                                   从库最后一个binlog</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：拉取日志的起点,需要按照目前从库的已经获取到的二进制日志点为起点(show slave status \\G)</p>\n<p><img src=\"/images/img-89.png\" alt=\"binlogserver\"></p>\n<h3 id=\"重启MHA\"><a href=\"#重启MHA\" class=\"headerlink\" title=\"重启MHA\"></a>重启MHA</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">masterha_stop --conf=/etc/mha/app1.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"故障处理\"><a href=\"#故障处理\" class=\"headerlink\" title=\"故障处理\"></a>故障处理</h3><p>如果主库宕机，<code>binlogserver</code> 自动停掉，<code>manager</code> 也会自动停止。<br>处理思路：<br>1、重新获取新主库的binlog到binlogserver中<br>2、重新配置文件binlog server信息<br>3、最后再启动MHA</p>\n<h3 id=\"管理员在高可用架构维护的职责\"><a href=\"#管理员在高可用架构维护的职责\" class=\"headerlink\" title=\"管理员在高可用架构维护的职责\"></a>管理员在高可用架构维护的职责</h3><ol>\n<li>搭建：MHA+VIP+SendReport+BinlogServer</li>\n<li>监控及故障处理</li>\n<li> 高可用架构的优化</li>\n</ol>\n<p><strong>核心是</strong>：尽可能降低主从的延时，让MHA花在数据补偿上的时间尽量减少。<br>5.7 版本，开启GTID模式，开启从库SQL并发复制。</p>\n<h2 id=\"Atlas介绍\"><a href=\"#Atlas介绍\" class=\"headerlink\" title=\"Atlas介绍\"></a>Atlas介绍</h2><blockquote>\n<p>Atlas是由 Qihoo 360, Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目。<br>它是在mysql-proxy 0.8.2版本的基础上，对其进行了优化，增加了一些新的功能特性。<br>360内部使用Atlas运行的mysql业务，每天承载的读写请求数达几十亿条。</p>\n</blockquote>\n<p>架构图：</p>\n<p><img src=\"/images/img-90.png\" alt=\"top\"></p>\n<p><strong>下载地址</strong>:<a href=\"https://github.com/Qihoo360/Atlas/releases\">https://github.com/Qihoo360/Atlas/releases</a></p>\n<p><strong>注意</strong>：</p>\n<ol>\n<li>Atlas只能安装运行在64位的系统上</li>\n<li>Centos 5.X安装 Atlas-XX.el5.x86_64.rpm，Centos 6.X安装Atlas-XX.el6.x86_64.rpm。</li>\n<li>后端mysql版本应大于5.1，建议使用Mysql 5.6以上</li>\n</ol>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y Atlas*  或者 yum install -y Atlas-2.2.1.el6.x86_64.rpm</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/mysql-proxy/conf</span><br><span class=\"line\"><span class=\"built_in\">mv</span> test.cnf test.cnf.bak</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成配置文件：\"><a href=\"#生成配置文件：\" class=\"headerlink\" title=\"生成配置文件：\"></a>生成配置文件：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">加密密码：</span><br><span class=\"line\">[root@db03 /usr/local/mysql-proxy]<span class=\"comment\"># bin/encrypt 123</span></span><br><span class=\"line\">3yb5jEku5h4=</span><br><span class=\"line\">[root@db03 /usr/local/mysql-proxy]<span class=\"comment\"># bin/encrypt mha</span></span><br><span class=\"line\">O2jBXONX098=</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; test.cnf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysql-proxy]</span></span><br><span class=\"line\"><span class=\"string\">admin-username = user  //管理atlas自身的用户名密码</span></span><br><span class=\"line\"><span class=\"string\">admin-password = pwd</span></span><br><span class=\"line\"><span class=\"string\">proxy-backend-addresses = 192.168.56.50:3306  //主库当前绑定的vip，提供写操作</span></span><br><span class=\"line\"><span class=\"string\">proxy-read-only-backend-addresses = 192.168.56.2:3306,192.168.56.4:3306 //其他从库。提供读操作</span></span><br><span class=\"line\"><span class=\"string\">pwds = repl:3yb5jEku5h4=,mha:O2jBXONX098=  //数据库连接管理的用户,和加密过的密码</span></span><br><span class=\"line\"><span class=\"string\">daemon = true //守护运行</span></span><br><span class=\"line\"><span class=\"string\">keepalive = true //心跳检测</span></span><br><span class=\"line\"><span class=\"string\">event-threads = 8 //线程个数，默认并发数</span></span><br><span class=\"line\"><span class=\"string\">log-level = message //日志记录等级</span></span><br><span class=\"line\"><span class=\"string\">log-path = /usr/local/mysql-proxy/log //日志路径</span></span><br><span class=\"line\"><span class=\"string\">sql-log=ON //经过atlas路由的sql语句</span></span><br><span class=\"line\"><span class=\"string\">proxy-address = 0.0.0.0:33060 //代理的地址以及端口号，对外提供服务的端口</span></span><br><span class=\"line\"><span class=\"string\">admin-address = 0.0.0.0:2345 //管理atlas的端口</span></span><br><span class=\"line\"><span class=\"string\">charset=utf8</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动atlas\"><a href=\"#启动atlas\" class=\"headerlink\" title=\"启动atlas\"></a>启动atlas</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/mysql-proxy/bin/mysql-proxyd <span class=\"built_in\">test</span> start</span><br><span class=\"line\">OK: MySQL-Proxy of <span class=\"built_in\">test</span> is started</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ps -ef |grep proxy</span><br><span class=\"line\">root      9656     1  0 15:18 ?        00:00:00 /usr/local/mysql-proxy/bin/mysql-proxy --defaults-file=/usr/local/mysql-proxy/conf/test.cnf</span><br><span class=\"line\">root      9657  9656  0 15:18 ?        00:00:00 /usr/local/mysql-proxy/bin/mysql-proxy --defaults-file=/usr/local/mysql-proxy/conf/test.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -lntup | grep proxy</span><br><span class=\"line\">tcp        0      0 0.0.0.0:33060           0.0.0.0:*               LISTEN      9657/mysql-proxy    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:2345            0.0.0.0:*               LISTEN      9657/mysql-proxy </span><br><span class=\"line\">//一个进程为对外提供服务的进程，另一个为自身的管理进程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试读写分离\"><a href=\"#测试读写分离\" class=\"headerlink\" title=\"测试读写分离\"></a>测试读写分离</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">读：</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># /usr/local/mysql-proxy/bin/mysql-proxyd test start</span></span><br><span class=\"line\">OK: MySQL-Proxy of <span class=\"built_in\">test</span> is started</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># mysql -umha -pmha -h 127.0.0.1 -P33060</span></span><br><span class=\"line\">db03 [(none)]&gt;select @@server_id;</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          53 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [(none)]&gt;select @@server_id;</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          51 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [(none)]&gt;select @@server_id;</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          53 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [(none)]&gt;select @@server_id;</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          51 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">写：</span><br><span class=\"line\">db03 [(none)]&gt;begin;select @@server_id;commit;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          52 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [(none)]&gt;begin;select @@server_id;commit;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          52 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [(none)]&gt;begin;select @@server_id;commit;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          52 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产用户要求-Atlas-MHA-VIP-SENDREPORT-BINLOG\"><a href=\"#生产用户要求-Atlas-MHA-VIP-SENDREPORT-BINLOG\" class=\"headerlink\" title=\"生产用户要求 (Atlas+MHA+VIP+SENDREPORT+BINLOG)\"></a>生产用户要求 (Atlas+MHA+VIP+SENDREPORT+BINLOG)</h3><p>开发人员申请一个应用用户 app(  select  update  insert)  密码123456,要通过10网段登录</p>\n<ul>\n<li>1.在主库中,创建用户<br><code>grant select ,update,insert on *.* to app@&#39;192.168.56.%&#39; identified by &#39;123456&#39;;</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">从库检查：</span><br><span class=\"line\">db01 [(none)]&gt;select host,user,authentication_string from mysql.user;</span><br><span class=\"line\">| 192.168.56.% | app           | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>2.在atlas中添加生产用户<br>/usr/local/mysql-proxy/bin/encrypt  123456      —-&gt;制作加密密码</p>\n</li>\n<li><p>3.改配置文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim test.cnf</span><br><span class=\"line\">pwds = repl:3yb5jEku5h4=,mha:O2jBXONX098=,app:/iZxz+0GRoA=</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/mysql-proxy/bin/mysql-proxyd <span class=\"built_in\">test</span> restart</span><br><span class=\"line\">[root@db03 conf]<span class=\"comment\"># mysql -uapp -p123456  -h 192.168.56.4 -P 33060</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Atlas基本管理\"><a href=\"#Atlas基本管理\" class=\"headerlink\" title=\"Atlas基本管理\"></a>Atlas基本管理</h3><h4 id=\"连接管理接口\"><a href=\"#连接管理接口\" class=\"headerlink\" title=\"连接管理接口\"></a>连接管理接口</h4><p><code>mysql -uuser -ppwd -h127.0.0.1 -P2345</code></p>\n<h4 id=\"打印帮助：\"><a href=\"#打印帮助：\" class=\"headerlink\" title=\"打印帮助：\"></a>打印帮助：</h4><p><code>mysql&gt; select * from help;</code></p>\n<h4 id=\"查询后端所有节点信息\"><a href=\"#查询后端所有节点信息\" class=\"headerlink\" title=\"查询后端所有节点信息\"></a>查询后端所有节点信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db03 [(none)]&gt;SELECT * FROM backends;</span><br><span class=\"line\">+-------------+--------------------+-------+------+</span><br><span class=\"line\">| backend_ndx | address            | state | <span class=\"built_in\">type</span> |</span><br><span class=\"line\">+-------------+--------------------+-------+------+</span><br><span class=\"line\">|           1 | 192.168.56.50:3306 | up    | rw   |</span><br><span class=\"line\">|           2 | 192.168.56.2:3306  | up    | ro   |</span><br><span class=\"line\">|           3 | 192.168.56.4:3306  | up    | ro   |</span><br><span class=\"line\">+-------------+--------------------+-------+------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常见管理操作\"><a href=\"#常见管理操作\" class=\"headerlink\" title=\"常见管理操作\"></a>常见管理操作</h4><ul>\n<li><p><code>SET OFFLINE $backend_id</code> 临时下线节点</p>\n</li>\n<li><p><code>SET ONLINE $backend_id</code> 上线节点</p>\n</li>\n<li><p><code>REMOVE BACKEND 3;</code> 动态添加删除节点</p>\n</li>\n<li><p><code>ADD SLAVE 10.0.0.53:3306;</code>动态添加节点</p>\n</li>\n<li><p><code>SELECT * FROM pwds;</code>查看用户</p>\n</li>\n<li><p><code>REMOVE PWD $pwd;</code>删除用户</p>\n</li>\n<li><p><code>ADD PWD root:123;</code>添加 用户:明文</p>\n</li>\n<li><p><code>ADD ENPWD $pwd;</code>添加 用户:密文</p>\n</li>\n<li><p><code>SAVE CONFIG;</code>持久化配置</p>\n</li>\n</ul>\n","categories":["DBA"],"tags":["主从复制","MySQL","读写分离","高可用"]},{"title":"MySQL-InnoDB存储引擎&优化","url":"/forward/3053135c.html","content":"<h3 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h3><pre><code>目标：熟悉InnoDB核心原理：ACID MVCC,事务,锁等\n</code></pre>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><pre><code>类似于Linux系统中文件系统\n</code></pre>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><ul>\n<li>数据读写</li>\n<li>数据安全和一致性</li>\n<li>提高性能</li>\n<li>热备份</li>\n<li>自动故障恢复</li>\n<li>高可用方面支持 等.</li>\n</ul>\n<hr>\n<h3 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h3><h4 id=\"Oracle的MySQL的引擎\"><a href=\"#Oracle的MySQL的引擎\" class=\"headerlink\" title=\"Oracle的MySQL的引擎\"></a>Oracle的MySQL的引擎</h4><ul>\n<li>InnoDB</li>\n<li>MyISAM</li>\n<li>CSV</li>\n<li>MEMORY</li>\n<li>ARCHIVE</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show engines;   //查看支持的存储引擎 </span><br><span class=\"line\">mysql&gt; select table_schema,table_name ,engine   //查看所有InnoDB的表</span><br><span class=\"line\">from information_schema.tables </span><br><span class=\"line\"><span class=\"built_in\">where</span> engine=<span class=\"string\">&#x27;innodb&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><pre><code>存储引擎是作用在表上的，也就意味着，不同的表可以有不同的存储引擎类型。\n</code></pre>\n<h4 id=\"其他MySQL的引擎\"><a href=\"#其他MySQL的引擎\" class=\"headerlink\" title=\"其他MySQL的引擎\"></a>其他MySQL的引擎</h4><ul>\n<li>PerconaDB:默认是XtraDB</li>\n<li>MariaDB:默认是InnoDB</li>\n</ul>\n<h5 id=\"其他的存储引擎支持\"><a href=\"#其他的存储引擎支持\" class=\"headerlink\" title=\"其他的存储引擎支持:\"></a>其他的存储引擎支持:</h5><ul>\n<li>TokuDB    </li>\n<li>RocksDB</li>\n<li>MyRocks</li>\n</ul>\n<h5 id=\"以上三种存储引擎的共同点-压缩比较高-数据插入性能极高\"><a href=\"#以上三种存储引擎的共同点-压缩比较高-数据插入性能极高\" class=\"headerlink\" title=\"以上三种存储引擎的共同点:压缩比较高,数据插入性能极高\"></a>以上三种存储引擎的共同点:压缩比较高,数据插入性能极高</h5><p><strong>现在很多的NewSQL,使用比较多的功能特性.</strong></p>\n<hr>\n<h4 id=\"项目案例——监控系统架构整改\"><a href=\"#项目案例——监控系统架构整改\" class=\"headerlink\" title=\"项目案例——监控系统架构整改\"></a>项目案例——监控系统架构整改</h4><ul>\n<li>环境: zabbix 3.2    mariaDB 5.5  centos 7.3</li>\n</ul>\n<p><strong>现象:</strong> zabbix卡的要死 ,  每隔3-4个月,都要重新搭建一遍zabbix,存储空间经常爆满.</p>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题 :\"></a>问题 :</h5><ol>\n<li>zabbix 版本 </li>\n<li>数据库版本</li>\n<li>zabbix数据库500G,存在一个文件</li>\n</ol>\n<h5 id=\"优化建议\"><a href=\"#优化建议\" class=\"headerlink\" title=\"优化建议:\"></a>优化建议:</h5><ol>\n<li>数据库版本升级到10.0版本,zabbix升级更高版本</li>\n<li>存储引擎改为tokudb</li>\n<li>监控数据按月份进行切割(二次开发:zabbix 数据保留机制功能重写,数据库分表)</li>\n<li>关闭binlog和双1</li>\n<li>参数调整….<br>优化结果：监控状态良好</li>\n</ol>\n<h5 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么?\"></a>为什么?</h5><ol>\n<li>原生态支持TokuDB,另外经过测试环境,10.0要比5.5 版本性能 高  2-3倍</li>\n<li>TokuDB:insert数据比Innodb快的多，数据压缩比要Innodb高</li>\n<li>监控数据按月份进行切割,为了能够truncate每个分区表,立即释放空间</li>\n<li>关闭binlog —–&gt;减少无关日志的记录.zabbix不需要注重安全，注重性能</li>\n<li>参数调整…—–&gt;安全性参数关闭,提高性能.</li>\n</ol>\n<hr>\n<h4 id=\"项目案例——单机web环境下的mysql优化\"><a href=\"#项目案例——单机web环境下的mysql优化\" class=\"headerlink\" title=\"项目案例——单机web环境下的mysql优化\"></a>项目案例——单机web环境下的mysql优化</h4><ul>\n<li>环境: centos 5.8 ,MySQL 5.0版本,MyISAM存储引擎,网站业务(LNMP),数据量50G左右</li>\n</ul>\n<p>**现象问题:**业务压力大的时候,非常卡;经历过宕机,会有部分数据丢失.</p>\n<h5 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析:\"></a>问题分析:</h5><ol>\n<li>MyISAM存储引擎表级锁,在高并发时,会有很高锁等待</li>\n<li>MyISAM存储引擎不支持事务,在断电时,会有可能丢失数据</li>\n</ol>\n<h5 id=\"职责：\"><a href=\"#职责：\" class=\"headerlink\" title=\"职责：\"></a>职责：</h5><p>1.监控锁的情况:有很多的表锁等待<br>2.存储引擎查看:所有表默认是MyISAM</p>\n<h5 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案:\"></a>解决方案:</h5><ol>\n<li>升级MySQL 5.6.10版本</li>\n<li>迁移所有表到新环境</li>\n<li>开启双1安全参数</li>\n<li>重新主从</li>\n</ol>\n<hr>\n<h3 id=\"InnoDB-核心特性：\"><a href=\"#InnoDB-核心特性：\" class=\"headerlink\" title=\"InnoDB 核心特性：\"></a>InnoDB 核心特性：</h3><p><img src=\"/images/img-51.png\" alt=\"InnoDB\"></p>\n<h4 id=\"InnoDB和MyISAM-区别：\"><a href=\"#InnoDB和MyISAM-区别：\" class=\"headerlink\" title=\"InnoDB和MyISAM 区别：\"></a>InnoDB和MyISAM 区别：</h4><p><strong>InnoDB：支持事物，行锁，MVCC多版本并发控制，支持外键，支持热备，支持自动故障恢复（CSR）</strong></p>\n<ul>\n<li>1、事务（Transaction）</li>\n<li>2、MVCC（Multi-Version Concurrency Control多版本并发控制）</li>\n<li>3、行级锁(Row-level Lock)</li>\n<li>4、ACSR（Auto Crash Safey Recovery）自动的故障安全恢复</li>\n<li>5、支持热备份(Hot Backup)</li>\n<li>6、复制Replication: Group Commit , GTID (Global Transaction ID) ,多线程(MTS,Multi-Threads-SQL ) </li>\n</ul>\n<p><strong>MyISAM：不支持</strong></p>\n<h3 id=\"存储引擎操作类命令\"><a href=\"#存储引擎操作类命令\" class=\"headerlink\" title=\"存储引擎操作类命令\"></a>存储引擎操作类命令</h3><p><img src=\"/images/img-54.png\" alt=\"1\"></p>\n<h4 id=\"使用-SELECT-确认会话存储引擎\"><a href=\"#使用-SELECT-确认会话存储引擎\" class=\"headerlink\" title=\"使用 SELECT 确认会话存储引擎\"></a>使用 SELECT 确认会话存储引擎</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT @@default_storage_engine;</span><br><span class=\"line\">mysql&gt; show variables like <span class=\"string\">&#x27;%engine%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"默认存储引擎设置-不代表生产操作\"><a href=\"#默认存储引擎设置-不代表生产操作\" class=\"headerlink\" title=\"默认存储引擎设置(不代表生产操作)\"></a>默认存储引擎设置(不代表生产操作)</h4><p>会话级别:<br><code>set default_storage_engine=myisam;</code><br>全局级别(仅影响新会话):<br><code>set global default_storage_engine=myisam;</code><br><strong>重启之后,所有参数均失效.</strong><br>如果要永久生效:<br>写入配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">default_storage_engine=myisam</span><br><span class=\"line\">存储引擎是表级别的,每个表创建时可以指定不同的存储引擎,但是我们建议统一为innodb.</span><br></pre></td></tr></table></figure>\n<h5 id=\"扩展：\"><a href=\"#扩展：\" class=\"headerlink\" title=\"扩展：\"></a>扩展：</h5><p><strong>在线修改MySQL参数：<br>会话级别，例如：</strong><br><code>set default_storage_engine=myisam;</code><br><strong>功能：只会影响到当前会话<br>全局级别，例如：</strong><br><code>set global default_storage_engine=myisam;</code><br><strong>功能: 不影响当前和历史会话，只影响到新开的会话<br>以上两种方法，在重启之后会失效，除非参数添加至</strong><code>my.cnf</code></p>\n<h4 id=\"SHOW-确认每个表的存储引擎：\"><a href=\"#SHOW-确认每个表的存储引擎：\" class=\"headerlink\" title=\"SHOW 确认每个表的存储引擎：\"></a>SHOW 确认每个表的存储引擎：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW CREATE TABLE City\\G;</span><br><span class=\"line\">SHOW TABLE STATUS LIKE <span class=\"string\">&#x27;CountryLanguage&#x27;</span>\\G</span><br></pre></td></tr></table></figure>\n<h4 id=\"INFORMATION-SCHEMA-确认每个表的存储引擎\"><a href=\"#INFORMATION-SCHEMA-确认每个表的存储引擎\" class=\"headerlink\" title=\"INFORMATION_SCHEMA 确认每个表的存储引擎\"></a>INFORMATION_SCHEMA 确认每个表的存储引擎</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[world]&gt;select table_schema,table_name ,engine </span><br><span class=\"line\">from information_schema.tables </span><br><span class=\"line\"><span class=\"built_in\">where</span> table_schema not <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;sys&#x27;</span>,<span class=\"string\">&#x27;mysql&#x27;</span>,<span class=\"string\">&#x27;information_schema&#x27;</span>,<span class=\"string\">&#x27;performance_schema&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改一个表的存储引擎\"><a href=\"#修改一个表的存储引擎\" class=\"headerlink\" title=\"修改一个表的存储引擎\"></a>修改一个表的存储引擎</h4><p><code>db01 [oldboy]&gt;alter table t1 engine innodb;</code><br><strong>注意：</strong>此命令我们经常使用他，进行innodb表的碎片整理<br><strong>生产需求：</strong><br>将oldboy数据库下的所有1000表，存储引擎从MyISAM替换为innodb </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select concat(<span class=\"string\">&quot;alter table &quot;</span>,table_name,<span class=\"string\">&quot; engine Innodb&quot;</span>) </span><br><span class=\"line\">from information_schema.tables </span><br><span class=\"line\"><span class=\"built_in\">where</span> table_schema=<span class=\"string\">&#x27;oldboy&#x27;</span></span><br><span class=\"line\">into outfile <span class=\"string\">&#x27;/tmp/alter.sql&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"平常处理过的MySQL问题–碎片处理\"><a href=\"#平常处理过的MySQL问题–碎片处理\" class=\"headerlink\" title=\"平常处理过的MySQL问题–碎片处理\"></a>平常处理过的MySQL问题–碎片处理</h4><p><strong>环境:</strong><code>centos7.4</code>,<code>MySQL 5.7.20</code>,<code>InnoDB</code>存储引擎<br>**业务特点:**数据量级较大,经常需要按月删除历史数据.<br>**问题:**磁盘空间占用很大,不释放<br><strong>处理方法:</strong><br>**以前:**将数据逻辑导出,手工drop表,然后导入进去<br><strong>现在:</strong><br>对表进行按月进行分表(partition,中间件)<br>业务替换为truncate方式</p>\n<p><strong>定期执行：</strong><br><code>alter table t1 engine=&#39;innodb&#39;;</code></p>\n<h4 id=\"扩展-如何批量修改\"><a href=\"#扩展-如何批量修改\" class=\"headerlink\" title=\"扩展:如何批量修改\"></a>扩展:如何批量修改</h4><p><strong>需求:</strong> 将zabbix库中的所有表,innodb替换为tokudb</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select concat(<span class=\"string\">&quot;alter table zabbix.&quot;</span>,table_name,<span class=\"string\">&quot; engine tokudb;&quot;</span>) </span><br><span class=\"line\">from information_schema.tables </span><br><span class=\"line\"><span class=\"built_in\">where</span> table_schema=<span class=\"string\">&#x27;zabbix&#x27;</span> into outfile <span class=\"string\">&#x27;/tmp/tokudb.sql&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最直观的存储方式-data-mysql-data\"><a href=\"#最直观的存储方式-data-mysql-data\" class=\"headerlink\" title=\"最直观的存储方式(/data/mysql/data)\"></a>最直观的存储方式(/data/mysql/data)</h3><ul>\n<li><code>ib_buffer_pool</code>：热数据缓存数据，下次启动优先加载。</li>\n<li><code>ibdata1</code>：系统数据字典信息(整个数据库统计信息，表的元数据)，UNDO（回滚）表空间等数据。又被称为共享表空间</li>\n<li><code>ib_logfile0 ~ ib_logfile1</code>: REDO（重做日志）日志文件，事务日志文件。</li>\n<li><code>ibtmp1</code>： 临时表空间磁盘位置，存储临时表</li>\n<li><code>frm</code>：存储表的列信息</li>\n<li><code>ibd</code>：表的数据行和索引</li>\n</ul>\n<p><img src=\"/images/img-55.png\" alt=\"宏观结构\"></p>\n<h4 id=\"表空间-Tablespace\"><a href=\"#表空间-Tablespace\" class=\"headerlink\" title=\"表空间(Tablespace)\"></a>表空间(Tablespace)</h4><h5 id=\"共享表空间-ibdata1\"><a href=\"#共享表空间-ibdata1\" class=\"headerlink\" title=\"共享表空间(ibdata1)\"></a>共享表空间(ibdata1)</h5><ul>\n<li>需要将所有数据存储到同一个表空间中 ，管理比较混乱</li>\n<li>5.5版本出现的管理模式，也是默认的管理模式。（数据字典，undo，临时表，索引，表数据）</li>\n<li>5.6版本以，共享表空间保留，只用来存储:数据字典信息,undo,临时表。</li>\n<li>5.7 版本,临时表被独立出来了</li>\n<li>8.0版本,undo也被独立出去了</li>\n</ul>\n<p><img src=\"/images/img-56.png\" alt=\"微观结构\"><br><strong>具体变化参考官方文档:</strong><br><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-architecture.html\">https://dev.mysql.com/doc/refman/5.6/en/innodb-architecture.html</a><br><a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html\">https://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html</a><br><a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html\">https://dev.mysql.com/doc/refman/5.8/en/innodb-architecture.html</a></p>\n<h5 id=\"共享表空间设置\"><a href=\"#共享表空间设置\" class=\"headerlink\" title=\"共享表空间设置\"></a>共享表空间设置</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">共享表空间设置(在搭建MySQL时，初始化数据之前设置到参数文件中)</span><br><span class=\"line\">mysql&gt; select @@innodb_file_per_table;  //查看表空间模式 1为独立，0为共享。</span><br><span class=\"line\">\t共享表空间将表的数据行及索引放到了ibdata1中（没有ibd文件）。耦合性过大</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global innodb_file_per_table=0; //设置表空间模式为共享表空间模式</span><br><span class=\"line\"></span><br><span class=\"line\">[(none)]&gt;select @@innodb_data_file_path;//查看共享表空间</span><br><span class=\"line\">[(none)]&gt;show variables like <span class=\"string\">&#x27;%extend%&#x27;</span>; //查看每次自增大小</span><br><span class=\"line\">innodb_data_file_path=ibdata1:512M:ibdata2:512M:autoextend  //在初始化之前设置共享表空间大小，加入配置文件</span><br><span class=\"line\">innodb_autoextend_increment=64 //自增大小</span><br><span class=\"line\">innodb_file_per_table=1  是否使用共享以及独占表空间（1 为使用独占表空间，0 为使用共享表空间）</span><br></pre></td></tr></table></figure>\n<h5 id=\"独立表空间\"><a href=\"#独立表空间\" class=\"headerlink\" title=\"独立表空间\"></a>独立表空间</h5><ul>\n<li>从5.6，默认表空间不再使用共享表空间，替换为独立表空间。</li>\n<li>主要存储的是用户数据</li>\n<li>存储特点为：一个表一个ibd文件，存储数据行和索引信息</li>\n</ul>\n<p><strong>基本表结构元数据存储：</strong>xxx.frm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">最终结论：</span><br><span class=\"line\">      元数据            数据行+索引</span><br><span class=\"line\">mysql表数据    =（ibdataX+frm）+ibd(段、区、页)</span><br><span class=\"line\">       DDL             DML+DQL</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"思考：\"><a href=\"#思考：\" class=\"headerlink\" title=\"思考：\"></a>思考：</h5><p>问：为啥不能把ibd和frm文件直接拷到新的数据库直接打开呢？<br>答：因为innodb的数据表是由ibdataX（数据字典）+frm（表结构文件）+ibd（数据行+索引）构成的。（myisam可以直接拷贝打开）</p>\n<h3 id=\"表空间迁移\"><a href=\"#表空间迁移\" class=\"headerlink\" title=\"表空间迁移\"></a>表空间迁移</h3><p><code>alter table  confulence.t1 discard tablespace;</code>  //仅删除ibd文件<br><code>alter table confulence.t1 import tablespace;</code> //倒入ibd文件，注意权限</p>\n<h4 id=\"硬件及软件环境\"><a href=\"#硬件及软件环境\" class=\"headerlink\" title=\"硬件及软件环境:\"></a>硬件及软件环境:</h4><ul>\n<li>联想服务器（IBM） </li>\n<li>磁盘500G 没有raid</li>\n<li>centos 6.8</li>\n<li>mysql 5.6.33  innodb引擎  独立表空间</li>\n<li>备份没有，日志也没开</li>\n<li>开发用户专用库:</li>\n<li>jira(bug追踪) 、 confluence(内部知识库)    ——&gt;LNMT</li>\n</ul>\n<h4 id=\"故障描述\"><a href=\"#故障描述\" class=\"headerlink\" title=\"故障描述:\"></a>故障描述:</h4><ul>\n<li>断电了，启动完成后“/” 只读</li>\n<li>fsck  重启,系统成功启动,mysql启动不了。//修复系统，但可能会破坏数据</li>\n<li>结果：confulence库在  ， jira库不见了</li>\n</ul>\n<h4 id=\"解决confulence过程\"><a href=\"#解决confulence过程\" class=\"headerlink\" title=\"解决confulence过程\"></a>解决confulence过程</h4><h5 id=\"需求：能不能暂时把confulence库先打开用着\"><a href=\"#需求：能不能暂时把confulence库先打开用着\" class=\"headerlink\" title=\"需求：能不能暂时把confulence库先打开用着\"></a>需求：能不能暂时把confulence库先打开用着</h5><p><strong>将生产库<code>confulence</code>，拷贝到1:1虚拟机上<code>/var/lib/mysql</code>,直接访问时访问不了的</strong></p>\n<p><strong>问：有没有工具能直接读取ibd<br>我说：我查查，最后发现没有</strong></p>\n<p>我想出一个办法来：<br>表空间迁移:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">create table xxx</span><br><span class=\"line\">alter table  confulence.t1 discard tablespace;</span><br><span class=\"line\">alter table confulence.t1 import tablespace;</span><br></pre></td></tr></table></figure>\n<p>虚拟机测试可行。</p>\n<p>处理问题思路:<br><code>confulence</code>库中一共有107张表。</p>\n<h4 id=\"创建107和和原来一模一样的表。\"><a href=\"#创建107和和原来一模一样的表。\" class=\"headerlink\" title=\"创建107和和原来一模一样的表。\"></a>创建107和和原来一模一样的表。</h4><p>他有2016年的历史库，我让他去他同时电脑上 mysqldump备份confulence库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -ppassw0rd -B  confulence --no-data &gt;test.sql   //只导出建表语句</span><br></pre></td></tr></table></figure>\n<p><strong>拿到你的测试库，进行恢复，到这步为止，表结构有了。</strong></p>\n<h4 id=\"表空间删除。\"><a href=\"#表空间删除。\" class=\"headerlink\" title=\"表空间删除。\"></a>表空间删除。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select concat(<span class=\"string\">&#x27;alter table &#x27;</span>,table_schema,<span class=\"string\">&#x27;.&#x27;</span>table_name,<span class=\"string\">&#x27; discard tablespace;&#x27;</span>) </span><br><span class=\"line\">from information_schema.tables </span><br><span class=\"line\"><span class=\"built_in\">where</span> table_schema=<span class=\"string\">&#x27;confluence&#x27;</span> </span><br><span class=\"line\">into outfile <span class=\"string\">&#x27;/tmp/discad.sql&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>进入测试库执行语句<br><code>source /tmp/discard.sql</code><br>执行过程中发现，有20-30个表无法成功。主外键关系，很绝望，一个表一个表分析表结构，很痛苦。<br><code>set foreign_key_checks=0</code> 跳过外键检查，再执行。<br>把有问题的表表空间也删掉了。</p>\n<h4 id=\"拷贝生产中confulence库下的所有表的ibd文件拷贝到准备好的环境中\"><a href=\"#拷贝生产中confulence库下的所有表的ibd文件拷贝到准备好的环境中\" class=\"headerlink\" title=\"拷贝生产中confulence库下的所有表的ibd文件拷贝到准备好的环境中\"></a>拷贝生产中confulence库下的所有表的ibd文件拷贝到准备好的环境中</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select concat(<span class=\"string\">&#x27;alter table &#x27;</span>,table_schema,<span class=\"string\">&#x27;.&#x27;</span>table_name,<span class=\"string\">&#x27; import tablespace;&#x27;</span>) </span><br><span class=\"line\">from information_schema.tables </span><br><span class=\"line\"><span class=\"built_in\">where</span> table_schema=<span class=\"string\">&#x27;confluence&#x27;</span> </span><br><span class=\"line\">into outfile <span class=\"string\">&#x27;/tmp/import.sql&#x27;</span>;   //对拷出的ibd文件进行批量导入</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证数据\"><a href=\"#验证数据\" class=\"headerlink\" title=\"验证数据\"></a>验证数据</h4><p><strong>表都可以访问了，数据挽回到了出现问题时刻的状态</strong></p>\n<h3 id=\"InnoDB核心参数\"><a href=\"#InnoDB核心参数\" class=\"headerlink\" title=\"InnoDB核心参数\"></a>InnoDB核心参数</h3><h4 id=\"双1标准其1：\"><a href=\"#双1标准其1：\" class=\"headerlink\" title=\"双1标准其1：\"></a>双1标准其1：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innodb_flush_log_at_trx_commit=1</span><br><span class=\"line\"><span class=\"comment\">#介绍：控制了redo buffer 刷写策略，是一个安全参数，在5.6版本以上的默认参数。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看:\"></a>查看:</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@innodb_flush_log_at_trx_commit;</span><br><span class=\"line\">+----------------------------------+</span><br><span class=\"line\">| @@innodb_flush_log_at_trx_commit |</span><br><span class=\"line\">+----------------------------------+</span><br><span class=\"line\">|                                1 |</span><br><span class=\"line\">+----------------------------------+  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><ul>\n<li>主要控制了innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个，是一个安全参数，是在5.6以上的默认的参数</li>\n<li>1:每次事务提交，都会立即刷写redo到磁盘（完美安全）<br>（redo buffer —每事务—-os buffer—每事务—磁盘）</li>\n<li>0:表示当事务提交时，不立即做日志写入操作（注重性能，可能会丢失1秒的事务）<br>（redo buffer —每秒—-os buffer—每秒—磁盘）</li>\n<li>2:每次事务提交引起写入文件系统缓存<br>（redo buffer —每事务—-os buffer—每秒—磁盘）<br>适用情况:对于业务安全要求性高则1 </li>\n</ul>\n<h4 id=\"刷写策略\"><a href=\"#刷写策略\" class=\"headerlink\" title=\"刷写策略\"></a>刷写策略</h4><p><img src=\"/images/img-65.png\" alt=\"双1标准\"><br><code>InnoDB_flush_method=(O__DIRECT)</code><br>查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@innodb_flush_method;  //默认都走文件系统缓存</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">| @@innodb_flush_method |</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">| NULL                  |</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">show variables like <span class=\"string\">&#x27;%innodb_flush%&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"作用：-1\"><a href=\"#作用：-1\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><p>控制了<code>redo buffer</code>和<code>data buffer</code>刷写磁盘的方式<br><code>O_DIRECT</code>    :数据缓冲区写磁盘,不走OS buffer 日志走OS buffer 以后的工作标准<br><code>fsync</code>        :日志和数据缓冲区写磁盘,都走OS buffer<br><code>O_DSYNC</code>    :日志缓冲区写磁盘,不走 OS buffer 数据缓冲区走OS buffer</p>\n<h4 id=\"使用建议：\"><a href=\"#使用建议：\" class=\"headerlink\" title=\"使用建议：\"></a>使用建议：</h4><h5 id=\"最高安全模式\"><a href=\"#最高安全模式\" class=\"headerlink\" title=\"最高安全模式\"></a>最高安全模式</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innodb_flush_log_at_trx_commit=1  //每次事务提交，都会立即刷写redo到磁盘</span><br><span class=\"line\">innodb_flush_method=O_DIRECT //（必须大写），控制mysql数据脏页直接刷写到磁盘。redo依然会走操作系统缓存</span><br></pre></td></tr></table></figure>\n<h5 id=\"最大性能模式（适用于查询类到库，监控库）\"><a href=\"#最大性能模式（适用于查询类到库，监控库）\" class=\"headerlink\" title=\"最大性能模式（适用于查询类到库，监控库）\"></a>最大性能模式（适用于查询类到库，监控库）</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innodb_flush_log_at_trx_commit=0 //表示当事务提交时，不立即做日志写入操作（注重性能，可能会丢失1秒的事务）</span><br><span class=\"line\">innodb_flush_method=fsync  //从mysql的脏页，写到操作系统缓存。一个内存结构到另一个内存结构所以性能高</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/img-81.png\" alt=\"刷写策略\"></p>\n<h4 id=\"关于redo设置\"><a href=\"#关于redo设置\" class=\"headerlink\" title=\"关于redo设置\"></a>关于redo设置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innodb_log_buffer_size=128M（4G内存）<span class=\"comment\">#起，和业务系统CPU压力有关（redo_buffer越大，可并发的事务量就越多，500M内）</span></span><br><span class=\"line\">innodb_log_file_size=256M\t\t一般是log_buffer的1-2倍</span><br><span class=\"line\">innodb_log_files_in_group=3\t\tredo.log个数3-4组</span><br></pre></td></tr></table></figure>\n<h4 id=\"innodb-buffer-pool\"><a href=\"#innodb-buffer-pool\" class=\"headerlink\" title=\"innodb_buffer_pool\"></a>innodb_buffer_pool</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select @@innodb_buffer_pool_size; //查看</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| @@innodb_buffer_pool_size |</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">|                 134217728 |</span><br><span class=\"line\">+---------------------------+</span><br></pre></td></tr></table></figure>\n<p><strong>前提只有一个mysql实例 一般调整为物理内存的50%~80%，70以内就行</strong></p>\n","categories":["DBA"],"tags":["MySQL"]},{"title":"MySQL-MHA环境准备_搭建_故障恢复","url":"/forward/bbb9c58b.html","content":"<h2 id=\"需要用到的软件包；\"><a href=\"#需要用到的软件包；\" class=\"headerlink\" title=\"需要用到的软件包；\"></a>需要用到的软件包；</h2><ul>\n<li>Atlas-2.2.1.el6.x86_64.rpm</li>\n<li>mha4mysql-manager-0.56-0.el6.noarch.rpm</li>\n<li>mha4mysql-node-0.56-0.el6.noarch.rpm</li>\n</ul>\n<h2 id=\"分别上传到三个主从节点上\"><a href=\"#分别上传到三个主从节点上\" class=\"headerlink\" title=\"分别上传到三个主从节点上\"></a>分别上传到三个主从节点上</h2><p>基于GTID的1主2从构建过程参见：<a href=\"https://cakepanit.com/forward/c3e1b71a.html#4-GTID%E5%A4%8D%E5%88%B6\">https://cakepanit.com/forward/c3e1b71a.html</a></p>\n<h3 id=\"配置关键程序软连接\"><a href=\"#配置关键程序软连接\" class=\"headerlink\" title=\"配置关键程序软连接\"></a>配置关键程序软连接</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s /application/mysql/bin/mysqlbinlog    /usr/bin/mysqlbinlog</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /application/mysql/bin/mysql          /usr/bin/mysql</span><br><span class=\"line\"><span class=\"comment\">#MHA 无法调用环境变量</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"各个节点配置互信\"><a href=\"#各个节点配置互信\" class=\"headerlink\" title=\"各个节点配置互信\"></a>各个节点配置互信</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#db01</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /root/.ssh </span><br><span class=\"line\">ssh-keygen  //生成密钥对</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/.ssh/</span><br><span class=\"line\"><span class=\"built_in\">mv</span> id_rsa.pub authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\">scp  -r  /root/.ssh  192.168.56.3:/root</span><br><span class=\"line\">scp  -r  /root/.ssh  192.168.56.4:/root </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"各节点验证\"><a href=\"#各节点验证\" class=\"headerlink\" title=\"各节点验证\"></a>各节点验证</h3><p>db01:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh 192.168.56.2 <span class=\"built_in\">date</span></span><br><span class=\"line\">ssh 192.168.56.3 <span class=\"built_in\">date</span></span><br><span class=\"line\">ssh 192.168.56.4 <span class=\"built_in\">date</span></span><br></pre></td></tr></table></figure>\n<p>db02:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh 192.168.56.2 <span class=\"built_in\">date</span></span><br><span class=\"line\">ssh 192.168.56.3 <span class=\"built_in\">date</span></span><br><span class=\"line\">ssh 192.168.56.4 <span class=\"built_in\">date</span></span><br></pre></td></tr></table></figure>\n\n<p>db03:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh 192.168.56.2 <span class=\"built_in\">date</span></span><br><span class=\"line\">ssh 192.168.56.3 <span class=\"built_in\">date</span></span><br><span class=\"line\">ssh 192.168.56.4 <span class=\"built_in\">date</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h3><p>下载mha软件<br>mha：<a href=\"https://code.google.com/archive/p/mysql-master-ha/\">官网</a><br>github：<a href=\"https://github.com/yoshinorim/mha4mysql-manager/wiki/Downloads\">下载地址</a></p>\n<p>所有节点安装Node软件依赖包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install perl-DBD-MySQL -y</span><br><span class=\"line\">rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>在db01主库中创建mha需要的用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -e <span class=\"string\">&quot;grant all privileges on *.* to mha@&#x27;192.168.56.%&#x27; identified by &#x27;mha&#x27;;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql -e <span class=\"string\">&quot;select host,user,authentication_string from mysql.user;&quot;</span></span><br><span class=\"line\">| 192.168.56.% | mha           | *F4C9AC49A736981AE2739FC2F4A1FD92B4F07929 |</span><br></pre></td></tr></table></figure>\n<p>检查其他从库节点是否同步</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db02 db03:</span><br><span class=\"line\">| 192.168.56.% | mha           | *F4C9AC49A736981AE2739FC2F4A1FD92B4F07929 |</span><br></pre></td></tr></table></figure>\n<p>Manager软件安装（db03）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y perl-Config-Tiny epel-release perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes</span><br><span class=\"line\">rpm -ivh mha4mysql-manager-0.56-0.el6.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置文件准备-db03\"><a href=\"#配置文件准备-db03\" class=\"headerlink\" title=\"配置文件准备(db03)\"></a>配置文件准备(db03)</h3><p>创建配置文件目录<br> <code>mkdir -p /etc/mha</code><br>创建日志目录<br><code>mkdir -p /var/log/mha/app1</code><br>编辑mha配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/mha/app1.cnf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[server default]</span></span><br><span class=\"line\"><span class=\"string\">manager_log=/var/log/mha/app1/manager        </span></span><br><span class=\"line\"><span class=\"string\">manager_workdir=/var/log/mha/app1            </span></span><br><span class=\"line\"><span class=\"string\">master_binlog_dir=/data/binlog     </span></span><br><span class=\"line\"><span class=\"string\">user=mha                                   </span></span><br><span class=\"line\"><span class=\"string\">password=mha                             </span></span><br><span class=\"line\"><span class=\"string\">ping_interval=2</span></span><br><span class=\"line\"><span class=\"string\">repl_password=123</span></span><br><span class=\"line\"><span class=\"string\">repl_user=repl</span></span><br><span class=\"line\"><span class=\"string\">ssh_user=root                            </span></span><br><span class=\"line\"><span class=\"string\">[server1]                                   </span></span><br><span class=\"line\"><span class=\"string\">hostname=192.168.56.2</span></span><br><span class=\"line\"><span class=\"string\">port=3306                                 </span></span><br><span class=\"line\"><span class=\"string\">[server2]            </span></span><br><span class=\"line\"><span class=\"string\">hostname=192.168.56.3</span></span><br><span class=\"line\"><span class=\"string\">candidate_master=1 </span></span><br><span class=\"line\"><span class=\"string\">port=3306</span></span><br><span class=\"line\"><span class=\"string\">[server3]</span></span><br><span class=\"line\"><span class=\"string\">hostname=192.168.56.4</span></span><br><span class=\"line\"><span class=\"string\">port=3306</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"状态检查-db03\"><a href=\"#状态检查-db03\" class=\"headerlink\" title=\"状态检查(db03)\"></a>状态检查(db03)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">masterha_check_ssh  --conf=/etc/mha/app1.cnf //检查ssh互信</span><br><span class=\"line\">masterha_check_repl  --conf=/etc/mha/app1.cnf //检查主从状态</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开启MHA-db03-：\"><a href=\"#开启MHA-db03-：\" class=\"headerlink\" title=\"开启MHA(db03)：\"></a>开启MHA(db03)：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; /dev/null&gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">                       指定配置文件               主节点宕机自动删除            跳过最后一次故障转移</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查MHA状态-db03\"><a href=\"#检查MHA状态-db03\" class=\"headerlink\" title=\"检查MHA状态(db03)\"></a>检查MHA状态(db03)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db03 ~]<span class=\"comment\"># masterha_check_status --conf=/etc/mha/app1.cnf  </span></span><br><span class=\"line\">app1 (pid:16488) is running(0:PING_OK), master:192.168.56.2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MHA介绍\"><a href=\"#MHA介绍\" class=\"headerlink\" title=\"MHA介绍\"></a>MHA介绍</h2><blockquote>\n<p>MHA目前在MySQL高可用方面是一个相对成熟的解决方案，它由日本DeNA公司youshimaton(现就职于Facebook公司)开发，是一套优秀的作为；MySQL高可用性环境下故障切换和主从提升的高可用软件。在MySQL故障切换过程中，MHA能做到在0~30秒之内自动完成数据库的故障切换操作，并且在进行故障切换的过程中，MHA能在最大程度上保证数据的一致性，以达到真正意义上的高可用。</p>\n</blockquote>\n<h3 id=\"逻辑架构图\"><a href=\"#逻辑架构图\" class=\"headerlink\" title=\"逻辑架构图\"></a>逻辑架构图</h3><p><img src=\"/images/img-85.png\" alt=\"MHA\"></p>\n<p><strong>说明</strong>：物理上为3个node，一主两从结构。其中db03 同时充当Manager。</p>\n<h3 id=\"软件结构\"><a href=\"#软件结构\" class=\"headerlink\" title=\"软件结构\"></a>软件结构</h3><p>Manager ：</p>\n<ul>\n<li><code>masterha_manger</code>_启动MHA </li>\n<li><code>masterha_check_ssh</code>_检查MHA的SSH配置状况 </li>\n<li><code>masterha_check_repl</code>_检查MySQL复制状况 </li>\n<li><code>masterha_master_monitor</code>_检测master是否宕机 </li>\n<li><code>masterha_check_status</code>_检测当前MHA运行状态 </li>\n<li><code>masterha_master_switch</code>_控制故障转移（自动或者手动）</li>\n<li><code>masterha_conf_host</code>_添加或删除配置的server信息</li>\n</ul>\n<p>Node ：<br>这些工具通常由MHA Manager的脚本触发，无需人为操作</p>\n<ul>\n<li><code>save_binary_logs</code>_保存和复制master的二进制日志 </li>\n<li><code>apply_diff_relay_logs</code>_识别差异的中继日志事件并将其差异的事件应用于其他的</li>\n<li><code>purge_relay_logs</code>_清除中继日志（不会阻塞SQL线程）</li>\n</ul>\n<h2 id=\"MHA工作过程\"><a href=\"#MHA工作过程\" class=\"headerlink\" title=\"MHA工作过程\"></a>MHA工作过程</h2><h3 id=\"安装过程说明\"><a href=\"#安装过程说明\" class=\"headerlink\" title=\"安装过程说明\"></a>安装过程说明</h3><ul>\n<li>1.1 配置关键程序软连接，#MHA 无法调用环境变量。</li>\n<li>1.2 各个节点配置互信，#为了故障转移时对新的master进行数据补偿</li>\n<li>1.4 安装软件，在主库中创建mha用户，#控制端安装在所有节点上，mha用户用于监控所有节点状态<ul>\n<li>manager安装在s3(db03)而不是m1或s2上，因为故障转移一般优先转至第一个从库即s2</li>\n</ul>\n</li>\n<li>1.5  配置文件准备(db03)<ul>\n<li><code>/etc/mha</code> 配置文件路径</li>\n<li><code>/var/log/mha/app1</code>相关日志路径</li>\n</ul>\n</li>\n<li> 1.6 状态检查(db03)#检查ssh互信和主从状态</li>\n</ul>\n<p>mha配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/mha/app1.cnf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[server default] //全局默认配置，所有节点生效</span></span><br><span class=\"line\"><span class=\"string\">manager_log=/var/log/mha/app1/manager //工作日志存放位置</span></span><br><span class=\"line\"><span class=\"string\">manager_workdir=/var/log/mha/app1  //工作目录位置</span></span><br><span class=\"line\"><span class=\"string\">master_binlog_dir=/data/binlog  //主库二进制日志存放位置</span></span><br><span class=\"line\"><span class=\"string\">user=mha  //1.4步所创建的用户</span></span><br><span class=\"line\"><span class=\"string\">password=mha                             </span></span><br><span class=\"line\"><span class=\"string\">ping_interval=2  //心跳检查间隔</span></span><br><span class=\"line\"><span class=\"string\">repl_password=123 </span></span><br><span class=\"line\"><span class=\"string\">repl_user=repl //复制相关用户</span></span><br><span class=\"line\"><span class=\"string\">ssh_user=root  //配置互信的用户</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[server1]   //节点1名称</span></span><br><span class=\"line\"><span class=\"string\">hostname=192.168.56.2</span></span><br><span class=\"line\"><span class=\"string\">port=3306                                 </span></span><br><span class=\"line\"><span class=\"string\">[server2]            </span></span><br><span class=\"line\"><span class=\"string\">hostname=192.168.56.3</span></span><br><span class=\"line\"><span class=\"string\">port=3306</span></span><br><span class=\"line\"><span class=\"string\">[server3]</span></span><br><span class=\"line\"><span class=\"string\">hostname=192.168.56.4</span></span><br><span class=\"line\"><span class=\"string\">port=3306</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//默认故障转移按照如上节点的顺序进行切换</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MHA工作过程（宕机）\"><a href=\"#MHA工作过程（宕机）\" class=\"headerlink\" title=\"MHA工作过程（宕机）\"></a>MHA工作过程（宕机）</h3><h4 id=\"manager-启动\"><a href=\"#manager-启动\" class=\"headerlink\" title=\"manager 启动\"></a>manager 启动</h4><ul>\n<li>（1）读取<code>--conf=/etc/mha/app1.cnf</code>配置文件</li>\n<li>（2）获取到node相关的信息（1主2从）</li>\n<li>（3）调用<code>masterha_check_ssh</code>脚本 ，使用 <code>ssh_user=root</code> 进行互信检查</li>\n<li>（4）调用<code>masterha_check_repl </code>检查主从复制情况</li>\n<li>（5）3 4 通过后，manager启动成功。</li>\n<li>（6）立即通过<code>masterha_master_monitor</code> 以 <code>ping_interval=2</code>为间隔持续监控主库的状态<ul>\n<li>网络，主机，数据库状态（利用mha用户）</li>\n</ul>\n</li>\n<li>（7）当Manager监控到master宕机</li>\n<li>（8）开始选主过程<ul>\n<li>算法一：判断是否有《强制主》参数</li>\n<li>算法二: 判断两个从库谁更新</li>\n<li>算法三：按照配置文件书写顺序来选主</li>\n</ul>\n</li>\n<li>（9）判断主库SSH的连通性<ul>\n<li>能：S1 和 S2 立即保存（save_binary_logs）缺失部分的binlog到本地</li>\n<li>不能：<ul>\n<li>传统模式下：调用apply_diff_relay_logs计算S1和S2的 relay-log的差异（需要通过内容进行复杂的对比）</li>\n<li>在GTID模式下:调用apply_diff_relay_logs计算S1和S2的 relay-log的差异（只需要对比GTID号码即可，效率较高）</li>\n</ul>\n</li>\n<li> 最后进行数据补偿</li>\n</ul>\n</li>\n<li>（10）解除S1从库身份</li>\n<li>（11）S2和S1构建新的主从关系</li>\n<li>（12）移除配置文件中故障节点</li>\n<li>（13）manager工作完成，自杀。（一次性的高可用）</li>\n</ul>\n<p>额外的功能：</p>\n<ul>\n<li>（1） 提供了Binlog Server //异地实时保存主库binlog</li>\n<li>（2） 应用透明（VIP） </li>\n<li>（3） 实时通知管员（send_report）</li>\n<li>（4） 自愈系统（待开发。。。。）</li>\n</ul>\n<h2 id=\"MHA故障模拟-amp-修复过程\"><a href=\"#MHA故障模拟-amp-修复过程\" class=\"headerlink\" title=\"MHA故障模拟&amp;修复过程\"></a>MHA故障模拟&amp;修复过程</h2><h3 id=\"故障模拟\"><a href=\"#故障模拟\" class=\"headerlink\" title=\"故障模拟\"></a>故障模拟</h3><h4 id=\"停止主库\"><a href=\"#停止主库\" class=\"headerlink\" title=\"停止主库\"></a>停止主库</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl stop mysqld</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看db02，db03\"><a href=\"#查看db02，db03\" class=\"headerlink\" title=\"查看db02，db03\"></a>查看db02，db03</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db02 [(none)]&gt;show slave status \\G;</span><br><span class=\"line\">Empty <span class=\"built_in\">set</span> (0.00 sec) //此时db02被选择并切换为了主库</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR: </span><br><span class=\"line\">No query specified</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [(none)]&gt;show slave status \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting <span class=\"keyword\">for</span> master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.56.3 //这里主库ip指向了db02</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [(none)]&gt;^DBye</span><br><span class=\"line\">[1]+  完成                  <span class=\"built_in\">nohup</span> masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /var/log/mha/app1/manager.log 2&gt;&amp;1  //退出db03数据库时，manager自杀了</span><br></pre></td></tr></table></figure>\n<h4 id=\"MHA配置文件，及日志变化\"><a href=\"#MHA配置文件，及日志变化\" class=\"headerlink\" title=\"MHA配置文件，及日志变化\"></a>MHA配置文件，及日志变化</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">日志：</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># tail -15 /var/log/mha/app1/manager //查看故障转移报告</span></span><br><span class=\"line\">----- Failover Report -----</span><br><span class=\"line\"></span><br><span class=\"line\">app1: MySQL Master failover 192.168.56.2(192.168.56.2:3306) to 192.168.56.3(192.168.56.3:3306) succeeded</span><br><span class=\"line\">//MySQL主故障转移192.168.56.2（192.168.56.2:3306）到192.168.56.3（192.168.56.3:3306）成功</span><br><span class=\"line\"></span><br><span class=\"line\">Master 192.168.56.2(192.168.56.2:3306) is down!</span><br><span class=\"line\">//原本的主库db01 down了</span><br><span class=\"line\"></span><br><span class=\"line\">Check MHA Manager logs at db03:/var/log/mha/app1/manager <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">//查看位于db03的MHA Manager日志：var/log/MHA/app1/Manager以了解详细信息。</span><br><span class=\"line\"></span><br><span class=\"line\">Started automated(non-interactive) failover. //已启动自动（非交互式）故障转移。</span><br><span class=\"line\">Selected 192.168.56.3(192.168.56.3:3306) as a new master. //56.3作为新主控形状。</span><br><span class=\"line\">192.168.56.3(192.168.56.3:3306): OK: Applying all logs succeeded. //确定：应用所有日志成功。</span><br><span class=\"line\">192.168.56.4(192.168.56.4:3306): OK: Slave started, replicating from 192.168.56.3(192.168.56.3:3306) //确定：从机启动，从56.3复制</span><br><span class=\"line\">192.168.56.3(192.168.56.3:3306): Resetting slave info succeeded. //重设从机信息成功。</span><br><span class=\"line\">Master failover to 192.168.56.3(192.168.56.3:3306) completed successfully.  //已成功完成到192.168.56.3（192.168.56.3:3306）的主故障转移。</span><br><span class=\"line\"></span><br><span class=\"line\">配置文件：</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># cat /etc/mha/app1.cnf</span></span><br><span class=\"line\">[server default]</span><br><span class=\"line\">manager_log=/var/log/mha/app1/manager</span><br><span class=\"line\">manager_workdir=/var/log/mha/app1</span><br><span class=\"line\">master_binlog_dir=/data/binlog</span><br><span class=\"line\">password=mha</span><br><span class=\"line\">ping_interval=2</span><br><span class=\"line\">repl_password=123</span><br><span class=\"line\">repl_user=repl</span><br><span class=\"line\">ssh_user=root</span><br><span class=\"line\">user=mha</span><br><span class=\"line\">         //原主库server1被剔除</span><br><span class=\"line\">[server2]</span><br><span class=\"line\">hostname=192.168.56.3</span><br><span class=\"line\">port=3306</span><br><span class=\"line\"></span><br><span class=\"line\">[server3]</span><br><span class=\"line\">hostname=192.168.56.4</span><br><span class=\"line\">port=3306</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MHA故障修复\"><a href=\"#MHA故障修复\" class=\"headerlink\" title=\"MHA故障修复\"></a>MHA故障修复</h3><h4 id=\"重新启动故障节点\"><a href=\"#重新启动故障节点\" class=\"headerlink\" title=\"重新启动故障节点\"></a>重新启动故障节点</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl start mysqld</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"恢复主从结构\"><a href=\"#恢复主从结构\" class=\"headerlink\" title=\"恢复主从结构\"></a>恢复主从结构</h4><p><strong>思路</strong>：</p>\n<ul>\n<li>1.继续沿用之前故障转移之后的主库，将恢复后的故障库作为从库，挂到db02上。</li>\n<li>2.如果db01损坏了，需要重新构建全新的mysql。记得将现在的主库db02进行全备，恢复到新的db01上，再重新构建主从</li>\n</ul>\n<p>1.在原manager上查找构建从库语句</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db03 ~]<span class=\"comment\"># grep -i &#x27;change master to &#x27; /var/log/mha/app1/manager</span></span><br><span class=\"line\">Wed Apr 29 13:28:08 2020 - [info]  All other slaves should start replication from here. Statement should be: CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;192.168.56.3&#x27;</span>, MASTER_PORT=3306, MASTER_AUTO_POSITION=1, MASTER_USER=<span class=\"string\">&#x27;repl&#x27;</span>, MASTER_PASSWORD=<span class=\"string\">&#x27;xxx&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">修改：</span><br><span class=\"line\">CHANGE MASTER TO </span><br><span class=\"line\">MASTER_HOST=<span class=\"string\">&#x27;192.168.56.3&#x27;</span>, </span><br><span class=\"line\">MASTER_PORT=3306, </span><br><span class=\"line\">MASTER_AUTO_POSITION=1, </span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;repl&#x27;</span>, </span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">在db01上重新执行：</span><br><span class=\"line\">db01 [(none)]&gt;CHANGE MASTER TO </span><br><span class=\"line\">    -&gt; MASTER_HOST=<span class=\"string\">&#x27;192.168.56.3&#x27;</span>, </span><br><span class=\"line\">    -&gt; MASTER_PORT=3306, </span><br><span class=\"line\">    -&gt; MASTER_AUTO_POSITION=1, </span><br><span class=\"line\">    -&gt; MASTER_USER=<span class=\"string\">&#x27;repl&#x27;</span>, </span><br><span class=\"line\">    -&gt; MASTER_PASSWORD=<span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\">Query OK, 0 rows affected, 2 warnings (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db01 [(none)]&gt;start slave;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db01 [(none)]&gt;show slave status \\G</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修复MHA-Manager\"><a href=\"#修复MHA-Manager\" class=\"headerlink\" title=\"修复MHA Manager\"></a>修复MHA Manager</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.修改配置文件 (db03)</span><br><span class=\"line\">vim /etc/mha/app1.cnf</span><br><span class=\"line\">[server1]</span><br><span class=\"line\">hostname=192.168.56.2</span><br><span class=\"line\">port=3306</span><br><span class=\"line\"></span><br><span class=\"line\">2.启动MHA</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; /dev/null&gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">3.检查状态</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># masterha_check_status --conf=/etc/mha/app1.cnf</span></span><br><span class=\"line\">app1 (pid:26225) is running(0:PING_OK), master:192.168.56.3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Manager额外参数介绍\"><a href=\"#Manager额外参数介绍\" class=\"headerlink\" title=\"Manager额外参数介绍\"></a>Manager额外参数介绍</h2><h3 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h3><p>主库宕机谁来接管？</p>\n<ol>\n<li>所有从节点日志都是一致的，默认会以配置文件的顺序去选择一个新主。</li>\n<li>从节点日志不一致，自动选择最接近于主库的从库</li>\n<li>如果对于某节点设定了权重（candidate_master=1），权重节点会优先选择。</li>\n</ol>\n<p><strong>注意</strong>：但是此节点日志量落后主库100M日志的话，也不会被选择。可以配合<code>check_repl_delay=0</code>，关闭日志量的检查，强制选择候选节点。</p>\n<h3 id=\"参数：\"><a href=\"#参数：\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><p>(1)<code>ping_interval=1</code><br>#设置监控主库，发送ping包的时间间隔，尝试三次没有回应的时候自动进行failover</p>\n<p>(2)<code>candidate_master=1</code><br>#设置为候选master，如果设置该参数以后，发生主从切换以后将会将此从库提升为主库，即使这个主库不是集群中事件最新的slave<br>#一般用于“两地三中心”的架构</p>\n<p>(3)<code>check_repl_delay=0</code><br>#默认情况下如果一个slave落后master 100M的relay logs的话，<br>MHA将不会选择该slave作为一个新的master，因为对于这个slave的恢复需要花费很长时间，通过设置check_repl_delay=0,MHA触发切换在选择一个新的master的时候将会忽略复制延时，这个参数对于设置了candidate_master=1的主机非常有用，因为这个候选主在切换的过程中一定是新的master，配合参数（2）</p>\n","categories":["DBA"],"tags":["主从复制","MySQL","高可用","MHA"]},{"title":"MySQL-MHA的VIP高可用_邮件告警","url":"/forward/c919a25c.html","content":"<h2 id=\"MHA-的vip功能\"><a href=\"#MHA-的vip功能\" class=\"headerlink\" title=\"MHA 的vip功能\"></a>MHA 的vip功能</h2><h3 id=\"MHA开启vip的作用\"><a href=\"#MHA开启vip的作用\" class=\"headerlink\" title=\"MHA开启vip的作用\"></a>MHA开启vip的作用</h3><ul>\n<li>用于支持应用透明，是构建主从高可用必须开启的功能</li>\n<li>构建主从高可用参见：<a href=\"https://cakepanit.com/forward/c70898d5.html\">https://cakepanit.com/forward/c70898d5.html</a></li>\n</ul>\n<h3 id=\"MHA的vip功能\"><a href=\"#MHA的vip功能\" class=\"headerlink\" title=\"MHA的vip功能\"></a>MHA的vip功能</h3><h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数:\"></a>参数:</h4><p><code>master_ip_failover_script=/usr/local/bin/master_ip_failover</code><br>注意：<code>/usr/local/bin/master_ip_failover</code>，必须事先准备好</p>\n<h4 id=\"编写perl脚本\"><a href=\"#编写perl脚本\" class=\"headerlink\" title=\"编写perl脚本\"></a>编写perl脚本</h4><figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /usr/<span class=\"keyword\">local</span>/bin/master_ip_failover</span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env perl</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> strict;</span><br><span class=\"line\"><span class=\"keyword\">use</span> warnings <span class=\"string\">FATAL =&gt;</span> <span class=\"string\">&#x27;all&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> Getopt::Long;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">my</span> (</span><br><span class=\"line\">    $command,          $ssh_user,        $orig_master_host, $orig_master_ip,</span><br><span class=\"line\">    $orig_master_port, $new_master_host, $new_master_ip,    $new_master_port</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">my</span> $vip = <span class=\"string\">&#x27;192.168.56.50/24&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">my</span> $key = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">my</span> $ssh_start_vip = <span class=\"string\">&quot;/sbin/ifconfig eth1:$key $vip&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">my</span> $ssh_stop_vip = <span class=\"string\">&quot;/sbin/ifconfig eth1:$key down&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">GetOptions(</span><br><span class=\"line\">    <span class=\"string\">&#x27;command=s&#x27;</span>          =&gt; \\$command,</span><br><span class=\"line\">    <span class=\"string\">&#x27;ssh_user=s&#x27;</span>         =&gt; \\$ssh_user,</span><br><span class=\"line\">    <span class=\"string\">&#x27;orig_master_host=s&#x27;</span> =&gt; \\$orig_master_host,</span><br><span class=\"line\">    <span class=\"string\">&#x27;orig_master_ip=s&#x27;</span>   =&gt; \\$orig_master_ip,</span><br><span class=\"line\">    <span class=\"string\">&#x27;orig_master_port=i&#x27;</span> =&gt; \\$orig_master_port,</span><br><span class=\"line\">    <span class=\"string\">&#x27;new_master_host=s&#x27;</span>  =&gt; \\$new_master_host,</span><br><span class=\"line\">    <span class=\"string\">&#x27;new_master_ip=s&#x27;</span>    =&gt; \\$new_master_ip,</span><br><span class=\"line\">    <span class=\"string\">&#x27;new_master_port=i&#x27;</span>  =&gt; \\$new_master_port,</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exit</span> &amp;main();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">sub</span> <span class=\"title\">main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;\\n\\nIN SCRIPT TEST====$ssh_stop_vip==$ssh_start_vip===\\n\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( $command eq <span class=\"string\">&quot;stop&quot;</span> || $command eq <span class=\"string\">&quot;stopssh&quot;</span> ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">my</span> $exit_code = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">eval</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">&quot;Disabling the VIP on old master: $orig_master_host \\n&quot;</span>;</span><br><span class=\"line\">            &amp;stop_vip();</span><br><span class=\"line\">            $exit_code = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($@) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">warn</span> <span class=\"string\">&quot;Got Error: $@\\n&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">exit</span> $exit_code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span> $exit_code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">elsif</span> ( $command eq <span class=\"string\">&quot;start&quot;</span> ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">my</span> $exit_code = <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">eval</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">&quot;Enabling the VIP - $vip on the new master - $new_master_host \\n&quot;</span>;</span><br><span class=\"line\">            &amp;start_vip();</span><br><span class=\"line\">            $exit_code = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($@) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">warn</span> $@;</span><br><span class=\"line\">            <span class=\"keyword\">exit</span> $exit_code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span> $exit_code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">elsif</span> ( $command eq <span class=\"string\">&quot;status&quot;</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">&quot;Checking the Status of the script.. OK \\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        &amp;usage();</span><br><span class=\"line\">        <span class=\"keyword\">exit</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">sub</span> <span class=\"title\">start_vip</span>() </span>&#123;</span><br><span class=\"line\">    <span class=\"string\">`ssh $ssh_user\\@$new_master_host \\&quot; $ssh_start_vip \\&quot;`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">sub</span> <span class=\"title\">stop_vip</span>() </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>  <span class=\"keyword\">unless</span>  ($ssh_user);</span><br><span class=\"line\">    <span class=\"string\">`ssh $ssh_user\\@$orig_master_host \\&quot; $ssh_stop_vip \\&quot;`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">sub</span> <span class=\"title\">usage</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改配置文件：\"><a href=\"#修改配置文件：\" class=\"headerlink\" title=\"修改配置文件：\"></a>修改配置文件：</h4><p><code>vim /etc/mha/app1.cnf</code><br>添加：<br><code>master_ip_failover_script=/usr/local/bin/master_ip_failover</code></p>\n<p><strong>注意</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db03 ~]<span class=\"comment\"># dos2unix /usr/local/bin/master_ip_failover </span></span><br><span class=\"line\">dos2unix: converting file /usr/local/bin/master_ip_failover to Unix format ...</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># chmod +x /usr/local/bin/master_ip_failover </span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"vip初始化\"><a href=\"#vip初始化\" class=\"headerlink\" title=\"vip初始化\"></a>vip初始化</h4><p>主库上，手工生成第一个vip地址<br>手工在主库上绑定vip，注意一定要和配置文件中的ethN一致，我的是eth0:1(1是key指定的值)<br>ifconfig enp0s8:1 192.168.56.50/24</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># ifconfig enp0s8:1 192.168.56.50/24</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># ifconfig enp0s8:1</span></span><br><span class=\"line\">enp0s8:1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 192.168.56.50  netmask 255.255.255.0  broadcast 192.168.56.255</span><br><span class=\"line\">        ether 08:00:27:ae:c4:db  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># ping 192.168.56.50</span></span><br><span class=\"line\">PING 192.168.56.50 (192.168.56.50) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 192.168.56.50: icmp_seq=1 ttl=64 time=0.479 ms</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启mha\"><a href=\"#重启mha\" class=\"headerlink\" title=\"重启mha\"></a>重启mha</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">masterha_stop --conf=/etc/mha/app1.cnf</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证：\"><a href=\"#验证：\" class=\"headerlink\" title=\"验证：\"></a>验证：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">停止主库：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># systemctl stop mysqld</span></span><br><span class=\"line\"></span><br><span class=\"line\">漂移成功：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ifconfig enp0s8:1</span></span><br><span class=\"line\">enp0s8:1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 192.168.56.50  netmask 255.255.255.0  broadcast 192.168.56.255</span><br><span class=\"line\">        ether 08:00:27:e1:cc:67  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\"></span><br><span class=\"line\">恢复：</span><br><span class=\"line\">1.重启源主库现从库db02</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># systemctl start mysqld</span></span><br><span class=\"line\"></span><br><span class=\"line\">2.mha编辑配置文件（db03）</span><br><span class=\"line\">vim /etc/mha/app1.cnf</span><br><span class=\"line\">[server2]</span><br><span class=\"line\">hostname=192.168.56.3</span><br><span class=\"line\">port=3306</span><br><span class=\"line\"></span><br><span class=\"line\">3.查看从库初始化语句（db03）</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># grep -i &#x27;change master to &#x27; /var/log/mha/app1/manager</span></span><br><span class=\"line\"></span><br><span class=\"line\">4.执行从库初始化（db02）</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mysql</span></span><br><span class=\"line\">CHANGE MASTER TO </span><br><span class=\"line\">MASTER_HOST=<span class=\"string\">&#x27;192.168.56.2&#x27;</span>, </span><br><span class=\"line\">MASTER_PORT=3306, </span><br><span class=\"line\">MASTER_AUTO_POSITION=1, </span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;repl&#x27;</span>, </span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">db02 [(none)]&gt;start slave;</span><br><span class=\"line\">db02 [(none)]&gt;show slave status \\G</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\"></span><br><span class=\"line\">5.重启mha（db03）</span><br><span class=\"line\">masterha_check_ssh  --conf=/etc/mha/app1.cnf //检查ssh互信</span><br><span class=\"line\">masterha_check_repl  --conf=/etc/mha/app1.cnf //检查主从状态</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># nohup masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; /dev/null&gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span></span><br><span class=\"line\">[1] 30918</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># masterha_check_status --conf=/etc/mha/app1.cnf</span></span><br><span class=\"line\">app1 (pid:30918) is running(0:PING_OK), master:192.168.56.2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MHA-vip漂移后的邮件告警\"><a href=\"#MHA-vip漂移后的邮件告警\" class=\"headerlink\" title=\"MHA vip漂移后的邮件告警\"></a>MHA vip漂移后的邮件告警</h2><h3 id=\"参数：\"><a href=\"#参数：\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><p><code>report_script=/usr/local/bin/send</code></p>\n<h3 id=\"准备邮件脚本\"><a href=\"#准备邮件脚本\" class=\"headerlink\" title=\"准备邮件脚本\"></a>准备邮件脚本</h3><p><code>send_report</code><br>(1)准备发邮件的脚本(上传 email_2019-最新.zip中的脚本，到/usr/local/bin/中)<br>(2)将准备好的脚本添加到mha配置文件中,让其调用</p>\n<p><img src=\"/images/img-86.png\" alt=\"mail\"></p>\n<p>(3)给脚本授权&amp;手动发信测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db03 ~]<span class=\"comment\"># chmod +x /usr/local/bin/*</span></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># ll /usr/local/bin/</span></span><br><span class=\"line\">总用量 92</span><br><span class=\"line\">-rwxr-xr-x 1 root root  2228 4月  29 16:06 master_ip_failover</span><br><span class=\"line\">-rwxr-xr-x 1 root root    35 4月  29 16:51 send</span><br><span class=\"line\">-rwxr-xr-x 1 root root 80213 4月  29 16:51 sendEmail</span><br><span class=\"line\">-rwxr-xr-x 1 root root   206 4月  29 17:18 testpl</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># . /usr/local/bin/testpl</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/img-87.png\" alt=\"mail\"></p>\n<h3 id=\"修改manager配置文件，调用邮件脚本\"><a href=\"#修改manager配置文件，调用邮件脚本\" class=\"headerlink\" title=\"修改manager配置文件，调用邮件脚本\"></a>修改manager配置文件，调用邮件脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/mha/app1.cnf</span><br><span class=\"line\">report_script=/usr/local/bin/send</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启MHA服务\"><a href=\"#重启MHA服务\" class=\"headerlink\" title=\"重启MHA服务\"></a>重启MHA服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#停止MHA</span></span><br><span class=\"line\">masterha_stop --conf=/etc/mha/app1.cnf</span><br><span class=\"line\"><span class=\"comment\">#开启MHA    </span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db03 ~]<span class=\"comment\"># masterha_check_status --conf=/etc/mha/app1.cnf</span></span><br><span class=\"line\">app1 (pid:1296) is running(0:PING_OK), master:192.168.56.2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#db01关闭数据库</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl stop mysqld</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#db02检查vip漂移结果</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># ifconfig enp0s8:1</span></span><br><span class=\"line\">enp0s8:1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 192.168.56.50  netmask 255.255.255.0  broadcast 192.168.56.255</span><br><span class=\"line\">        ether 08:00:27:ae:c4:db  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\"></span><br><span class=\"line\">db02 [(none)]&gt;show master status \\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">             File: mysql-bin.000003</span><br><span class=\"line\">         Position: 194</span><br><span class=\"line\">     Binlog_Do_DB: </span><br><span class=\"line\"> Binlog_Ignore_DB: </span><br><span class=\"line\">Executed_Gtid_Set: 9c0f7800-886a-11ea-b98c-0800273e0795:1-6</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#db03检查</span></span><br><span class=\"line\">db03 [(none)]&gt;show slave status \\G</span><br><span class=\"line\">                  Master_Host: 192.168.56.3</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">db03 [(none)]&gt;^DBye</span><br><span class=\"line\">[1]+  完成                  <span class=\"built_in\">nohup</span> masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /var/log/mha/app1/manager.log 2&gt;&amp;1  //master自杀</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># cat /etc/mha/app1.cnf </span></span><br><span class=\"line\">[server default]</span><br><span class=\"line\">manager_log=/var/log/mha/app1/manager</span><br><span class=\"line\">manager_workdir=/var/log/mha/app1</span><br><span class=\"line\">master_binlog_dir=/data/binlog</span><br><span class=\"line\">master_ip_failover_script=/usr/local/bin/master_ip_failover</span><br><span class=\"line\">password=mha</span><br><span class=\"line\">ping_interval=2</span><br><span class=\"line\">repl_password=123</span><br><span class=\"line\">repl_user=repl</span><br><span class=\"line\">report_script=/usr/local/bin/send</span><br><span class=\"line\">ssh_user=root</span><br><span class=\"line\">user=mha</span><br><span class=\"line\">          //db01 被剔除</span><br><span class=\"line\">[server2]</span><br><span class=\"line\">hostname=192.168.56.3</span><br><span class=\"line\">port=3306</span><br><span class=\"line\"></span><br><span class=\"line\">[server3]</span><br><span class=\"line\">hostname=192.168.56.4</span><br><span class=\"line\">port=3306</span><br></pre></td></tr></table></figure>\n<p>检查发信：<br><img src=\"/images/img-88.png\" alt=\"mail\"></p>\n<p>修复过程可参见1.2.6</p>\n","categories":["DBA"],"tags":["主从复制","MySQL","高可用","MHA"]},{"title":"MySQL-锁","url":"/forward/49de8711.html","content":"<h3 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h3><h4 id=\"什么是“锁”？\"><a href=\"#什么是“锁”？\" class=\"headerlink\" title=\"什么是“锁”？\"></a>什么是“锁”？</h4><ul>\n<li>“锁”顾名思义就是锁定的意思。</li>\n<li>“锁”的作用是什么？</li>\n<li>在事务ACID过程中，“锁”和“隔离级别”一起来实现“I”隔离性的作用。</li>\n<li>避免争抢资源</li>\n</ul>\n<p><strong>锁的粒度：</strong></p>\n<ul>\n<li>1、MyIasm：低并发锁——表级锁</li>\n<li>2、Innodb：高并发锁——行级锁</li>\n</ul>\n<h4 id=\"InnoDB锁级别\"><a href=\"#InnoDB锁级别\" class=\"headerlink\" title=\"InnoDB锁级别\"></a>InnoDB锁级别</h4><ul>\n<li>行级锁</li>\n<li>Next lock下键锁</li>\n<li>GAP lock 间隙锁</li>\n<li>悲观锁:排他性，不能不能同时修改同一行数据</li>\n<li>乐观锁</li>\n<li>行级锁，谁先操作某个数据行，就会持有&lt;这行&gt;的<x>锁</li>\n</ul>\n<h4 id=\"扩展内容\"><a href=\"#扩展内容\" class=\"headerlink\" title=\"扩展内容\"></a>扩展内容</h4><ul>\n<li>Next lock下键锁</li>\n<li>GAP Lock间隙锁</li>\n</ul>\n<h4 id=\"为何出现锁等待-死锁等情况：交叉的事务出现，导致的\"><a href=\"#为何出现锁等待-死锁等情况：交叉的事务出现，导致的\" class=\"headerlink\" title=\"为何出现锁等待/死锁等情况：交叉的事务出现，导致的\"></a>为何出现锁等待/死锁等情况：交叉的事务出现，导致的</h4><h5 id=\"锁等待\"><a href=\"#锁等待\" class=\"headerlink\" title=\"锁等待\"></a>锁等待</h5><p>事务1：状态未提交<br><img src=\"/images/img-61.png\" alt=\"事务1\"><br>事务2：一同更新同一行数据，会出现锁等待<br><img src=\"/images/img-62.png\" alt=\"事务2\"></p>\n<h5 id=\"死锁：事务交叉，互相依赖造成死锁\"><a href=\"#死锁：事务交叉，互相依赖造成死锁\" class=\"headerlink\" title=\"死锁：事务交叉，互相依赖造成死锁\"></a>死锁：事务交叉，互相依赖造成死锁</h5><p><img src=\"/images/img-63.png\" alt=\"事务交叉\"></p>\n<h4 id=\"四种隔离级别\"><a href=\"#四种隔离级别\" class=\"headerlink\" title=\"四种隔离级别\"></a>四种隔离级别</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">READ UNCOMMITTED        </span><br><span class=\"line\">　　允许事务查看其他事务所进行的未提交更改</span><br><span class=\"line\">READ COMMITTED</span><br><span class=\"line\">   允许事务查看其他事务所进行的已提交更改//屏蔽脏读，会出现不可重复读。和幻读现象</span><br><span class=\"line\">REPEATABLE READ******</span><br><span class=\"line\">   确保每个事务的 SELECT 输出一致 </span><br><span class=\"line\">　　InnoDB 的默认级别</span><br><span class=\"line\">SERIALIZABLE</span><br><span class=\"line\">   将一个事务的结果与其他事务完全隔离</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show variables like <span class=\"string\">&#x27;%iso%&#x27;</span>;</span><br><span class=\"line\">+---------------+-----------------+</span><br><span class=\"line\">| Variable_name | Value           |</span><br><span class=\"line\">+---------------+-----------------+</span><br><span class=\"line\">| tx_isolation  | REPEATABLE-READ |</span><br><span class=\"line\">+---------------+-----------------+</span><br></pre></td></tr></table></figure>\n\n<p><strong>脏读：</strong> 所谓的脏读，其实就是读到了别的事务回滚前的脏数据。比如事务B执行过程中修改了数据X，在未提交前，事务A读取了X，而事务B却回滚了，这样事务A就形成了脏读。<br>即，当前事务读到的数据是别的事务想要修改成为的但是没有修改成功的数据。</p>\n<hr>\n<p><strong>不可重复读：</strong>事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了。</p>\n<p>即，当前事务先进行了一次数据读取，然后再次读取到的数据是别的事务修改成功的数据，导致两次读取到的数据不匹配，也就照应了不可重复读的语义。</p>\n<hr>\n<p><strong>幻读：</strong>事务A首先根据条件索引得到N条数据，然后事务B改变了这N条数据之外的M条或者增添了M条符合事务A搜索条件的数据，导致事务A再次搜索发现有N+M条数据了，就产生了幻读。</p>\n<p>即，当前事务读第一次取到的数据比后来读取到数据条目少。</p>\n<hr>\n<p>不可重复读和幻读比较：<br>两者有些相似，但是前者针对的是update或delete，后者针对的insert。</p>\n","categories":["DBA"],"tags":["MySQL","锁"]},{"title":"MySQL-MyCAT多主多从环境下实现表的垂直拆分","url":"/forward/557ea64b.html","content":"<h2 id=\"双主环境搭建\"><a href=\"#双主环境搭建\" class=\"headerlink\" title=\"双主环境搭建\"></a>双主环境搭建</h2><p>参见：<a href=\"https://cakepanit.com/forward/d3c702fe.html\">https://cakepanit.com/forward/d3c702fe.html</a></p>\n<h2 id=\"垂直拆分：\"><a href=\"#垂直拆分：\" class=\"headerlink\" title=\"垂直拆分：\"></a>垂直拆分：</h2><p><img src=\"/images/img-92.png\" alt=\"垂直拆分\"></p>\n<h2 id=\"mycat垂直分表\"><a href=\"#mycat垂直分表\" class=\"headerlink\" title=\"mycat垂直分表\"></a>mycat垂直分表</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># cd /application/mycat/conf/</span></span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># mv schema.xml schema.xml.ha</span></span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># cat &gt;schema.xml &lt;&lt;&#x27;EOF&#x27;</span></span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mycat:schema SYSTEM <span class=\"string\">&quot;schema.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;mycat:schema xmlns:mycat=<span class=\"string\">&quot;http://io.mycat/&quot;</span>&gt;</span><br><span class=\"line\">&lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt;</span><br><span class=\"line\">        &lt;table name=<span class=\"string\">&quot;user&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;table name=<span class=\"string\">&quot;order_t&quot;</span> dataNode=<span class=\"string\">&quot;sh2&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/schema&gt;</span><br><span class=\"line\">    &lt;dataNode name=<span class=\"string\">&quot;sh1&quot;</span> dataHost=<span class=\"string\">&quot;oldguo1&quot;</span> database= <span class=\"string\">&quot;taobao&quot;</span> /&gt; <span class=\"comment\">#节点中真实存在的库</span></span><br><span class=\"line\">    &lt;dataNode name=<span class=\"string\">&quot;sh2&quot;</span> dataHost=<span class=\"string\">&quot;oldguo2&quot;</span> database= <span class=\"string\">&quot;taobao&quot;</span> /&gt; <span class=\"comment\">#节点中真实存在的库</span></span><br><span class=\"line\">    &lt;dataHost name=<span class=\"string\">&quot;oldguo1&quot;</span> maxCon=<span class=\"string\">&quot;1000&quot;</span> minCon=<span class=\"string\">&quot;10&quot;</span> balance=<span class=\"string\">&quot;1&quot;</span>  writeType=<span class=\"string\">&quot;0&quot;</span> dbType=<span class=\"string\">&quot;mysql&quot;</span>  dbDriver=<span class=\"string\">&quot;native&quot;</span> switchType=<span class=\"string\">&quot;1&quot;</span>&gt;</span><br><span class=\"line\">        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class=\"line\">    &lt;writeHost host=<span class=\"string\">&quot;db1&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3307&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt;</span><br><span class=\"line\">            &lt;readHost host=<span class=\"string\">&quot;db2&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3309&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/writeHost&gt;</span><br><span class=\"line\">    &lt;writeHost host=<span class=\"string\">&quot;db3&quot;</span> url=<span class=\"string\">&quot;10.0.0.52:3307&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt;</span><br><span class=\"line\">            &lt;readHost host=<span class=\"string\">&quot;db4&quot;</span> url=<span class=\"string\">&quot;10.0.0.52:3309&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/writeHost&gt;</span><br><span class=\"line\">    &lt;/dataHost&gt;</span><br><span class=\"line\">    &lt;dataHost name=<span class=\"string\">&quot;oldguo2&quot;</span> maxCon=<span class=\"string\">&quot;1000&quot;</span> minCon=<span class=\"string\">&quot;10&quot;</span> balance=<span class=\"string\">&quot;1&quot;</span>  writeType=<span class=\"string\">&quot;0&quot;</span> dbType=<span class=\"string\">&quot;mysql&quot;</span>  dbDriver=<span class=\"string\">&quot;native&quot;</span> switchType=<span class=\"string\">&quot;1&quot;</span>&gt;</span><br><span class=\"line\">        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class=\"line\">    &lt;writeHost host=<span class=\"string\">&quot;db1&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3308&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt;</span><br><span class=\"line\">            &lt;readHost host=<span class=\"string\">&quot;db2&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3310&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/writeHost&gt;</span><br><span class=\"line\">    &lt;writeHost host=<span class=\"string\">&quot;db3&quot;</span> url=<span class=\"string\">&quot;10.0.0.52:3308&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt;</span><br><span class=\"line\">            &lt;readHost host=<span class=\"string\">&quot;db4&quot;</span> url=<span class=\"string\">&quot;10.0.0.52:3310&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/writeHost&gt;</span><br><span class=\"line\">    &lt;/dataHost&gt;</span><br><span class=\"line\">&lt;/mycat:schema&gt;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置文件解释：\"><a href=\"#配置文件解释：\" class=\"headerlink\" title=\"配置文件解释：\"></a>配置文件解释：</h3><ul>\n<li>两组datanode<ul>\n<li>sh1下面四组节点【承载taobao库user表】</li>\n<li>10.0.0.51:3307[db1]主库 //写操作</li>\n<li>10.0.0.51:3309[db2]从库 //读操作</li>\n<li>10.0.0.52:3307[db3]主库 //读操作，同时是sh1中db1的替补。实现高可用</li>\n<li>10.0.0.52:3309[db4]从库 //读操作</li>\n<li>sh2下面四组节点【承载taobao库order_t表】</li>\n<li>10.0.0.51:3308[db1]主库 //写操作</li>\n<li>10.0.0.51:3310[db2]从库 //读操作</li>\n<li>10.0.0.52:3318[db3]主库 //读操作，同时是sh2中db1的替补。实现高可用</li>\n<li>10.0.0.52:3320[db4]从库 //读操作</li>\n</ul>\n</li>\n</ul>\n<p><strong>物理架构图：</strong><br><img src=\"/images/img-91.png\" alt=\"基础架构\"><br><strong>垂直拆分逻辑架构图：</strong><br><img src=\"/images/img-93.png\" alt=\"垂直拆分逻辑架构图\"></p>\n<h2 id=\"创建测试库和表-（db01或db02）\"><a href=\"#创建测试库和表-（db01或db02）\" class=\"headerlink\" title=\"创建测试库和表:（db01或db02）\"></a>创建测试库和表:（db01或db02）</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -S /data/3307/mysql.sock -e <span class=\"string\">&quot;create database taobao charset utf8;&quot;</span></span><br><span class=\"line\">mysql -S /data/3308/mysql.sock -e <span class=\"string\">&quot;create database taobao charset utf8;&quot;</span></span><br><span class=\"line\">mysql -S /data/3307/mysql.sock -e <span class=\"string\">&quot;use taobao;create table user(id int,name varchar(20))&quot;</span></span><br><span class=\"line\">mysql -S /data/3308/mysql.sock -e <span class=\"string\">&quot;use taobao;create table order_t(id int,name varchar(20))&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mycat restart</span></span><br><span class=\"line\">Stopping Mycat-server...</span><br><span class=\"line\">Stopped Mycat-server.</span><br><span class=\"line\">Starting Mycat-server...</span><br><span class=\"line\">//此时，sh1四个节点中只存在user表，sh2四个节点中只存在order_t表【以表为粒度实现了垂直拆分】。并且两个数据节点都实现了读写分离和高可用</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mysql -uroot -p123456 -h10.0.0.52 -P8066</span></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| DATABASE |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| TESTDB   |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\">mysql&gt; use TESTDB  //进入mycat逻辑库</span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_taobao |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| order_t          |</span><br><span class=\"line\">| user             |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">//分别插入数据</span><br><span class=\"line\">mysql&gt; insert into user(<span class=\"built_in\">id</span>,name) values(1,<span class=\"string\">&#x27;zs&#x27;</span>);</span><br><span class=\"line\">Query OK, 1 row affected (0.04 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into user(<span class=\"built_in\">id</span>,name) values(2,<span class=\"string\">&#x27;ls&#x27;</span>);</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into user(<span class=\"built_in\">id</span>,name) values(3,<span class=\"string\">&#x27;w5&#x27;</span>);</span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into order_t(<span class=\"built_in\">id</span>,name) values(1,<span class=\"string\">&#x27;zs2&#x27;</span>);</span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into order_t(<span class=\"built_in\">id</span>,name) values(2,<span class=\"string\">&#x27;ls2&#x27;</span>);</span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into order_t(<span class=\"built_in\">id</span>,name) values(3,<span class=\"string\">&#x27;w52&#x27;</span>);</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock -e &quot;use taobao;show tables;select * from order_t;&quot;  //sh2主节点中只存在order_t表</span></span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_taobao |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| order_t          |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">+------+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>   | name |</span><br><span class=\"line\">+------+------+</span><br><span class=\"line\">|    1 | zs2  |</span><br><span class=\"line\">|    2 | ls2  |</span><br><span class=\"line\">|    3 | w52  |</span><br><span class=\"line\">+------+------+</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3307/mysql.sock -e &quot;use taobao;show tables;select * from user;&quot; //sh1主节点中只存在user表</span></span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_taobao |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| user             |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">+------+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>   | name |</span><br><span class=\"line\">+------+------+</span><br><span class=\"line\">|    1 | zs   |</span><br><span class=\"line\">|    2 | <span class=\"built_in\">ls</span>   |</span><br><span class=\"line\">|    3 | w5   |</span><br><span class=\"line\">+------+------+</span><br></pre></td></tr></table></figure>\n","categories":["DBA"],"tags":["主从复制","MySQL","读写分离","高可用","分布式","MyCAT","垂直拆分"]},{"title":"MySQL-主从复制_延时从库","url":"/forward/f34e607d.html","content":"<h3 id=\"延时从库\"><a href=\"#延时从库\" class=\"headerlink\" title=\"延时从库\"></a>延时从库</h3><h4 id=\"解决数据损坏\"><a href=\"#解决数据损坏\" class=\"headerlink\" title=\"解决数据损坏\"></a>解决数据损坏</h4><ul>\n<li>物理损坏<ul>\n<li>误操作rm</li>\n<li>磁盘阵列损坏</li>\n<li>机房爆炸</li>\n</ul>\n</li>\n<li>逻辑损坏<ul>\n<li>删库跑路</li>\n</ul>\n</li>\n</ul>\n<p>对于传统的主从复制，比较擅长处理物理损坏。</p>\n<h4 id=\"设计理念\"><a href=\"#设计理念\" class=\"headerlink\" title=\"设计理念\"></a>设计理念</h4><p>对SQL线程进行设置延迟。</p>\n<h4 id=\"延迟多久合适\"><a href=\"#延迟多久合适\" class=\"headerlink\" title=\"延迟多久合适\"></a>延迟多久合适</h4><p>企业生产中一般设置延迟3-6个小时</p>\n<h3 id=\"如何设置\"><a href=\"#如何设置\" class=\"headerlink\" title=\"如何设置\"></a>如何设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">从库：</span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\">SQL_Delay: 0</span><br><span class=\"line\">SQL_Remaining_Delay: NULL</span><br><span class=\"line\">Slave_SQL_Running_State: Slave has <span class=\"built_in\">read</span> all relay <span class=\"built_in\">log</span>; waiting <span class=\"keyword\">for</span> more updates</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; stop slave;</span><br><span class=\"line\">mysql&gt; CHANGE MASTER TO MASTER_DELAY = 300;</span><br><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\">SQL_Delay: 300</span><br><span class=\"line\">SQL_Remaining_Delay: NULL  //最近一个事务的SQL剩余延迟</span><br><span class=\"line\">Slave_SQL_Running_State: Slave has <span class=\"built_in\">read</span> all relay <span class=\"built_in\">log</span>; waiting <span class=\"keyword\">for</span> more updates</span><br><span class=\"line\"></span><br><span class=\"line\">主库：</span><br><span class=\"line\">mysql&gt; create database pincheng charset utf8mb4;</span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">从库：</span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\">SQL_Delay: 300</span><br><span class=\"line\">SQL_Remaining_Delay: 227 //倒计时</span><br><span class=\"line\">Slave_SQL_Running_State: Waiting until MASTER_DELAY seconds after master executed event</span><br><span class=\"line\"></span><br><span class=\"line\">倒计时结束后</span><br><span class=\"line\">show databases;</span><br><span class=\"line\">| pincheng           |</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><h4 id=\"模拟故障：\"><a href=\"#模拟故障：\" class=\"headerlink\" title=\"模拟故障：\"></a>模拟故障：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -S /data/3307/mysql.sock -p</span><br><span class=\"line\">create database  delay charset utf8mb4;</span><br><span class=\"line\">use delay;</span><br><span class=\"line\">create table t1(<span class=\"built_in\">id</span> int);</span><br><span class=\"line\">insert into t1 values(1),(2),(3);</span><br><span class=\"line\">commit; </span><br><span class=\"line\">drop database delay;</span><br></pre></td></tr></table></figure>\n<h4 id=\"发现问题-处理思路：\"><a href=\"#发现问题-处理思路：\" class=\"headerlink\" title=\"发现问题,处理思路：\"></a>发现问题,处理思路：</h4><ol>\n<li>停止从库SQL线程，停止主库业务。</li>\n<li>模拟SQL手工恢复relaylog到drop之前的位置点</li>\n<li>截取relaylog日志，找到起点（relay-log.info）和终点(drop 操作之前)</li>\n<li>恢复截取的日志，验证数据可用性。</li>\n</ol>\n<h4 id=\"开始处理：\"><a href=\"#开始处理：\" class=\"headerlink\" title=\"开始处理：\"></a>开始处理：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.停止从库SQL线程，停止主库业务。</span><br><span class=\"line\">mysql -S /data/3308/mysql.sock -p</span><br><span class=\"line\">mysql&gt; stop slave sql_thread;</span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\"> Slave_SQL_Running: No //SQL线程停止</span><br><span class=\"line\">            </span><br><span class=\"line\"> SQL_Delay: 300 //倒计时结束</span><br><span class=\"line\"> SQL_Remaining_Delay: NULL</span><br><span class=\"line\"></span><br><span class=\"line\">2.截取relaylog日志，找到起点（relay-log.info）和终点(drop 操作之前)</span><br><span class=\"line\">起点：</span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\"> Relay_Log_File: db01-relay-bin.000002</span><br><span class=\"line\"> Relay_Log_Pos: 507 //已经执行的最后一个事件的Position号</span><br><span class=\"line\">或者查看relay-log.info文件</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /data/3308/data/relay-log.info </span></span><br><span class=\"line\">7</span><br><span class=\"line\">./db01-relay-bin.000002</span><br><span class=\"line\">507 //起点</span><br><span class=\"line\"></span><br><span class=\"line\">终点：</span><br><span class=\"line\">mysql&gt; show relaylog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;db01-relay-bin.000002&#x27;</span>;</span><br><span class=\"line\">+-----------------------+------+----------------+-----------+-------------+------------------------------------------+</span><br><span class=\"line\">| Log_name              | Pos  | Event_type     | Server_id | End_log_pos | Info                                     |</span><br><span class=\"line\">+-----------------------+------+----------------+-----------+-------------+------------------------------------------+</span><br><span class=\"line\">| db01-relay-bin.000002 |    4 | Format_desc    |         8 |         123 | Server ver: 5.7.26-<span class=\"built_in\">log</span>, Binlog ver: 4    |</span><br><span class=\"line\">| db01-relay-bin.000002 |  123 | Previous_gtids |         8 |         154 |                                          |</span><br><span class=\"line\">| db01-relay-bin.000002 |  154 | Rotate         |         7 |           0 | mysql-bin.000001;pos=775                 |</span><br><span class=\"line\">| db01-relay-bin.000002 |  201 | Format_desc    |         7 |           0 | Server ver: 5.7.26-<span class=\"built_in\">log</span>, Binlog ver: 4    |</span><br><span class=\"line\">| db01-relay-bin.000002 |  320 | Anonymous_Gtid |         7 |         840 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>     |</span><br><span class=\"line\">| db01-relay-bin.000002 |  385 | Query          |         7 |         962 | create database pincheng charset utf8mb4 |</span><br><span class=\"line\">| db01-relay-bin.000002 |  507 | Anonymous_Gtid |         7 |        1027 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>     |</span><br><span class=\"line\">| db01-relay-bin.000002 |  572 | Query          |         7 |        1141 | create database  delay charset utf8mb4   |</span><br><span class=\"line\">| db01-relay-bin.000002 |  686 | Anonymous_Gtid |         7 |        1206 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>     |</span><br><span class=\"line\">| db01-relay-bin.000002 |  751 | Query          |         7 |        1305 | use `delay`; create table t1(<span class=\"built_in\">id</span> int)     |</span><br><span class=\"line\">| db01-relay-bin.000002 |  850 | Anonymous_Gtid |         7 |        1370 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>     |</span><br><span class=\"line\">| db01-relay-bin.000002 |  915 | Query          |         7 |        1443 | BEGIN                                    |</span><br><span class=\"line\">| db01-relay-bin.000002 |  988 | Table_map      |         7 |        1489 | table_id: 109 (delay.t1)                 |</span><br><span class=\"line\">| db01-relay-bin.000002 | 1034 | Write_rows     |         7 |        1539 | table_id: 109 flags: STMT_END_F          |</span><br><span class=\"line\">| db01-relay-bin.000002 | 1084 | Xid            |         7 |        1570 | COMMIT /* xid=74 */                      |</span><br><span class=\"line\">| db01-relay-bin.000002 | 1115 | Anonymous_Gtid |         7 |        1635 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>     |</span><br><span class=\"line\">| db01-relay-bin.000002 | 1180 | Query          |         7 |        1730 | drop database delay                      |</span><br><span class=\"line\">+-----------------------+------+----------------+-----------+-------------+------------------------------------------+</span><br><span class=\"line\">注意：relaylog查看只看 Pos列，End_log_pos是从库对应主库的binlog的位置点，可忽略</span><br><span class=\"line\">找到drop的操作，对应的Pos列| db01-relay-bin.000002 | 1180 | drop database delay |</span><br><span class=\"line\"></span><br><span class=\"line\">3.截取：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqlbinlog --start-position=507 --stop-position=1180 /data/3308/data/db01-relay-bin.000002 &gt;/tmp/relay.sql</span></span><br><span class=\"line\">//通过截取relay-log日志，截取到drop操作之前</span><br><span class=\"line\"></span><br><span class=\"line\">4.检查日志结尾是否包含drop操作：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># tail /tmp/relay.sql</span></span><br><span class=\"line\"><span class=\"comment\"># at 1115</span></span><br><span class=\"line\"><span class=\"comment\">#200427 13:26:50 server id 7  end_log_pos 1635 CRC32 0x6a2be066         Anonymous_GTID  last_committed=8        sequence_number=9   rbr_only=no</span></span><br><span class=\"line\">SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>/*!*/;</span><br><span class=\"line\">BEGIN /*added by mysqlbinlog */ /*!*/;</span><br><span class=\"line\">ROLLBACK /* added by mysqlbinlog */ /*!*/;</span><br><span class=\"line\">SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;AUTOMATIC&#x27;</span> /* added by mysqlbinlog */ /*!*/;</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"><span class=\"comment\"># End of log file</span></span><br><span class=\"line\">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;</span><br><span class=\"line\">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;</span><br><span class=\"line\"></span><br><span class=\"line\">5.在从库中恢复</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock -p</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> sql_log_bin=0; //临时关闭binlog日志记录</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /tmp/relay.sql //恢复数据</span><br><span class=\"line\"></span><br><span class=\"line\">6.检查数据</span><br><span class=\"line\">mysql&gt; use delay;</span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; select * from t1;</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>   |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">|    1 |</span><br><span class=\"line\">|    2 |</span><br><span class=\"line\">|    3 |</span><br><span class=\"line\">+------+</span><br></pre></td></tr></table></figure>","categories":["DBA"],"tags":["主从复制","MySQL"]},{"title":"MySQL-主从复制_过滤复制_半同步复制_GTID复制","url":"/forward/c3e1b71a.html","content":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p><a href=\"https://cakepanit.com/forward/f34e607d.html\">延迟从库</a>后进行环境恢复</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.主从之间差一个数据库。</span><br><span class=\"line\"></span><br><span class=\"line\">2.删掉3308中的delay数据库。</span><br><span class=\"line\">从库：</span><br><span class=\"line\">mysql&gt; drop database delay;</span><br><span class=\"line\">3.检查3308数据库是否同步</span><br><span class=\"line\">主库：</span><br><span class=\"line\">mysql&gt; show master status \\G  //查看主库起点</span><br><span class=\"line\">File: mysql-bin.000001</span><br><span class=\"line\">Position: 1730</span><br><span class=\"line\"></span><br><span class=\"line\">从库：</span><br><span class=\"line\">mysql&gt; show slave status \\G </span><br><span class=\"line\">Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">Read_Master_Log_Pos: 1730  //由于主库3307中最后一个操作是删除delay库。从库中在第二步也将恢复的数据删除了。所以刚好同步</span><br><span class=\"line\">Slave_SQL_Running: No</span><br><span class=\"line\"></span><br><span class=\"line\">4.重启主从复制：</span><br><span class=\"line\">mysql&gt; stop slave;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; change master to master_delay=0; //关闭延迟从库</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\"> Master_Log_File: mysql-bin.000001</span><br><span class=\"line\"> Read_Master_Log_Pos: 1730</span><br><span class=\"line\"> Slave_IO_Running: Yes</span><br><span class=\"line\"> Slave_SQL_Running: Yes</span><br><span class=\"line\"></span><br><span class=\"line\"> SQL_Delay: 0</span><br><span class=\"line\"> SQL_Remaining_Delay: NULL</span><br><span class=\"line\"> Slave_SQL_Running_State: Slave has <span class=\"built_in\">read</span> all relay <span class=\"built_in\">log</span>; waiting <span class=\"keyword\">for</span> more updates</span><br><span class=\"line\"></span><br><span class=\"line\">5.如果不同步那么需要删除不一致的数据，然后参照主库`show master status \\G`信息重新对从库进行CHANGE MASTER TO操作</span><br><span class=\"line\">主库：</span><br><span class=\"line\">mysql&gt; show master status \\G  //查看主库起点位置</span><br><span class=\"line\">File: mysql-bin.000001</span><br><span class=\"line\">Position: 1730</span><br><span class=\"line\"></span><br><span class=\"line\">从库：</span><br><span class=\"line\">mysql&gt; drop database delay;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; stop slave;  //停止主从</span><br><span class=\"line\">mysql&gt; reset slave all;   //清空CHANGE MASTER TO 信息</span><br><span class=\"line\">CHANGE MASTER TO</span><br><span class=\"line\">  MASTER_HOST=<span class=\"string\">&#x27;10.0.2.4&#x27;</span>,</span><br><span class=\"line\">  MASTER_USER=<span class=\"string\">&#x27;repl&#x27;</span>,</span><br><span class=\"line\">  MASTER_PASSWORD=<span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">  MASTER_PORT=3307,</span><br><span class=\"line\">  MASTER_LOG_FILE=<span class=\"string\">&#x27;mysql-bin.00001&#x27;</span>,</span><br><span class=\"line\">  MASTER_LOG_POS=1730,</span><br><span class=\"line\">  MASTER_CONNECT_RETRY=10; </span><br><span class=\"line\">mysql&gt; start slave;  //重启线程</span><br><span class=\"line\"></span><br><span class=\"line\">6.生产环境下，以3308的数据为准。将3308的全备恢复到3307.并重构主从</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"过滤复制\"><a href=\"#过滤复制\" class=\"headerlink\" title=\"过滤复制\"></a>过滤复制</h2><h3 id=\"主库：（了解）\"><a href=\"#主库：（了解）\" class=\"headerlink\" title=\"主库：（了解）\"></a>主库：（了解）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master status \\G</span><br><span class=\"line\">binlog_do_db <span class=\"comment\">#白名单</span></span><br><span class=\"line\">binlog_ignore_db <span class=\"comment\">#黑明单</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"从库：\"><a href=\"#从库：\" class=\"headerlink\" title=\"从库：\"></a>从库：</h3><p><strong>工作原理：</strong>在SQL线程回放日志时，进行过滤控制。只对白名单中的数据库日志进行回放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\">Replicate_Do_DB:   <span class=\"comment\">#白名单</span></span><br><span class=\"line\">Replicate_Ignore_DB:    <span class=\"comment\">#黑明单</span></span><br><span class=\"line\">//过滤库级别</span><br><span class=\"line\"></span><br><span class=\"line\">Replicate_Do_Table:  <span class=\"comment\">#白名单</span></span><br><span class=\"line\">Replicate_Ignore_Table:   <span class=\"comment\">#黑明单</span></span><br><span class=\"line\">//过滤表级别</span><br><span class=\"line\"></span><br><span class=\"line\">Replicate_Wild_Do_Table:  <span class=\"comment\">#白名单</span></span><br><span class=\"line\">Replicate_Wild_Ignore_Table:  <span class=\"comment\">#黑明单</span></span><br><span class=\"line\">//模糊匹配</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h3><p><strong>1.只需要复制qq513247869库的数据到从库</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># vim /data/3308/my.cnf </span></span><br><span class=\"line\">replicate_do_db=qq513247869</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart mysqld3308</span></span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">              Replicate_Do_DB: qq513247869</span><br><span class=\"line\">              </span><br></pre></td></tr></table></figure>\n<p><strong>2.工作原理验证：</strong><br><strong>主库：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database qq513247869 charset utf8mb4; //在主库创建一个在白名单中的数据库</span><br></pre></td></tr></table></figure>\n<p><strong>从库：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| qq513247869        |  //从库中复制过来了</span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\"> Master_Log_File: mysql-bin.000001</span><br><span class=\"line\"> Read_Master_Log_Pos: 2102 //注意观察此数值是否发生变化</span><br></pre></td></tr></table></figure>\n<p><strong>主库：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database www1 charset utf8mb4; //在主库创建一个未在白名单中的数据库</span><br></pre></td></tr></table></figure>\n\n<p><strong>从库：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\"> Master_Log_File: mysql-bin.000001</span><br><span class=\"line\"> Read_Master_Log_Pos: 2277 //可见master.info中binlog的位置点在主库创建新库时发生了改变。</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| qq513247869        |  //但是www1并没有进行同步</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong>以上可知过滤复制是在SQL线程回放日志时，进行过滤控制，而不是在IO线程上进行的过滤。</p>\n<h2 id=\"半同步复制（了解）\"><a href=\"#半同步复制（了解）\" class=\"headerlink\" title=\"半同步复制（了解）\"></a>半同步复制（了解）</h2><p>作用：解决主从数据一致性问题，了解<br>加载插件<br>主:<code>INSTALL PLUGIN rpl_semi_sync_master SONAME &#39;semisync_master.so&#39;;</code><br>从:<code>INSTALL PLUGIN rpl_semi_sync_slave SONAME &#39;semisync_slave.so&#39;;</code></p>\n<p>查看是否加载成功:<code>show plugins;</code></p>\n<p>启动:<br>主:<code>SET GLOBAL rpl_semi_sync_master_enabled = 1;</code><br>从:<code>SET GLOBAL rpl_semi_sync_slave_enabled = 1;</code></p>\n<p>重启从库上的IO线程<br><code>STOP SLAVE IO_THREAD;</code><br><code>START SLAVE IO_THREAD;</code></p>\n<p>查看是否在运行<br>主:<code>show status like &#39;Rpl_semi_sync_master_status&#39;;</code><br>从:<code>show status like &#39;Rpl_semi_sync_slave_status&#39;;</code></p>\n<p>工作原理：</p>\n<ol>\n<li>主库执行新的事务,commit时,更新 show master  status\\G ,触发一个信号给</li>\n<li>binlog dump 接收到主库的 show master status\\G信息,通知从库日志更新了</li>\n<li>从库IO线程请求新的二进制日志事件</li>\n<li>主库会通过dump线程传送新的日志事件,给从库IO线程</li>\n<li>从库IO线程接收到binlog日志,当日志写入到磁盘上的relaylog文件时,给主库ACK_receiver线程</li>\n<li>ACK_receiver线程触发一个事件,告诉主库commit可以成功了</li>\n<li>如果ACK达到了我们预设值的超时时间,半同步复制会切换为原始的异步复制.</li>\n</ol>\n<h2 id=\"GTID复制\"><a href=\"#GTID复制\" class=\"headerlink\" title=\"GTID复制\"></a>GTID复制</h2><h3 id=\"什么是GTID\"><a href=\"#什么是GTID\" class=\"headerlink\" title=\"什么是GTID\"></a>什么是GTID</h3><p>GTID(Global Transaction ID)全局事务标识符：是一个唯一的标识符，它创建并与源服务器（主）上提交的每个事务相关联。<br>此标识符不仅对其发起的服务器是唯一的，而且在给定复制设置中的所有服务器上都是唯一的。 所有交易和所有GTID之间都有1对1的映射。<br>GTID实际上是由UUID+TID组成的。其中UUID是一个MySQL实例的唯一标识。TID代表了该实例上已经提交的事务数量，并且随着事务提交单调递增。<br>GTID同时具备<a href=\"https://cakepanit.com/forward/93ea067.html\">幂等性</a></p>\n<h3 id=\"GTID的具体形式：\"><a href=\"#GTID的具体形式：\" class=\"headerlink\" title=\"GTID的具体形式：\"></a>GTID的具体形式：</h3><p>它的官方定义如下：</p>\n<ul>\n<li>GTID = source_id ：transaction_id<ul>\n<li>3E11FA47-71CA-11E1-9E33-C80AA9429562:23</li>\n</ul>\n</li>\n<li>什么是sever_uuid，和Server-id 区别？<ul>\n<li>source_id 也叫uuid 默认在是第一次启动数据库时，自动生成的<code>/application/mysql/data/auto.cnf</code>手工删除掉此文件，重启数据库，可以生成新的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"GTID新特性\"><a href=\"#GTID新特性\" class=\"headerlink\" title=\"GTID新特性\"></a>GTID新特性</h3><p>(1).支持多线程复制:事实上是针对每个database开启相应的独立线程,即每个库有一个单独的(sql thread).</p>\n<p>(2).支持启用GTID,在配置主从复制,传统的方式里,你需要找到binlog和POS点,然后change master to指向.<br>在mysql5.6里,无须再知道binlog和POS点,只需要知道master的IP/端口/账号密码即可,因为同步复制是自动的,MySQL通过内部机制GTID自动找点同步.</p>\n<p>(3).基于Row复制只保存改变的列,大大节省Disk Space/Network resources和Memory usage.</p>\n<p>(4).支持把Master 和Slave的相关信息记录在Table中<br>原来是记录在文件里,记录在表里,增强可用性</p>\n<p>(5).支持延迟复制</p>\n<h3 id=\"基于GTID复制构建过程\"><a href=\"#基于GTID复制构建过程\" class=\"headerlink\" title=\"基于GTID复制构建过程\"></a>基于GTID复制构建过程</h3><h4 id=\"更新参数文件\"><a href=\"#更新参数文件\" class=\"headerlink\" title=\"更新参数文件\"></a>更新参数文件</h4><p><code>vim /data/3307/my.cnf</code><br>添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gtid-mode=on</span><br><span class=\"line\">enforce-gtid-consistency=<span class=\"literal\">true</span></span><br><span class=\"line\">log-slave-updates=1       ----强制刷新从库二进制日志：【5.6必加】【5.7：高可用(MHA)、级联的中间库】</span><br><span class=\"line\">//去掉复制过滤功能</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"地址规划\"><a href=\"#地址规划\" class=\"headerlink\" title=\"地址规划\"></a>地址规划</h4><table>\n<thead>\n<tr>\n<th>服务器</th>\n<th align=\"center\">ip:port</th>\n<th align=\"right\">角色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>db01</td>\n<td align=\"center\">192.168.56.2:3306</td>\n<td align=\"right\">主库</td>\n</tr>\n<tr>\n<td>db02</td>\n<td align=\"center\">192.168.56.3:3306</td>\n<td align=\"right\">从库</td>\n</tr>\n<tr>\n<td>db03</td>\n<td align=\"center\">192.168.56.4:3306</td>\n<td align=\"right\">从库</td>\n</tr>\n</tbody></table>\n<h4 id=\"环境初始化\"><a href=\"#环境初始化\" class=\"headerlink\" title=\"环境初始化\"></a>环境初始化</h4><p>清理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pkill mysqld</span><br><span class=\"line\">\\<span class=\"built_in\">rm</span> -rf /data/*</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/mysql/data</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/binlog</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R mysql.mysql /data</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置文件准备\"><a href=\"#配置文件准备\" class=\"headerlink\" title=\"配置文件准备\"></a>配置文件准备</h4><p><strong>主库 db01：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/my.cnf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/data/mysql/</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/mysql/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/tmp/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">server_id=51</span></span><br><span class=\"line\"><span class=\"string\">port=3306</span></span><br><span class=\"line\"><span class=\"string\">secure-file-priv=/tmp  //允许导出的路径</span></span><br><span class=\"line\"><span class=\"string\">autocommit=0  //关闭事务自动提交</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/binlog/mysql-bin  //二进制日志前缀</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row  //RBR 行记录模式，记录的是行的变化</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on  //开启gtid</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true  //同上</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1 //强制刷新从库二进制日志</span></span><br><span class=\"line\"><span class=\"string\">[mysql]</span></span><br><span class=\"line\"><span class=\"string\">prompt=db01 [\\\\d]&gt;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>slave1(db02)：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/my.cnf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/data/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/mysql/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/tmp/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">server_id=52</span></span><br><span class=\"line\"><span class=\"string\">port=3306</span></span><br><span class=\"line\"><span class=\"string\">secure-file-priv=/tmp</span></span><br><span class=\"line\"><span class=\"string\">autocommit=0</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/binlog/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1</span></span><br><span class=\"line\"><span class=\"string\">[mysql]</span></span><br><span class=\"line\"><span class=\"string\">prompt=db02 [\\\\d]&gt;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p><strong>slave2(db03)：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/my.cnf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/data/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/mysql/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/tmp/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">server_id=53</span></span><br><span class=\"line\"><span class=\"string\">port=3306</span></span><br><span class=\"line\"><span class=\"string\">secure-file-priv=/tmp</span></span><br><span class=\"line\"><span class=\"string\">autocommit=0</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/binlog/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1</span></span><br><span class=\"line\"><span class=\"string\">[mysql]</span></span><br><span class=\"line\"><span class=\"string\">prompt=db03 [\\\\d]&gt;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重新初始化数据\"><a href=\"#重新初始化数据\" class=\"headerlink\" title=\"重新初始化数据\"></a>重新初始化数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld --initialize-insecure --user=mysql --basedir=/data/mysql  --datadir=/data/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># vim /etc/systemd/system/mysqld.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=MySQL Server</span><br><span class=\"line\">Documentation=man:mysqld(8)</span><br><span class=\"line\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">After=syslog.target</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=mysql</span><br><span class=\"line\">Group=mysql</span><br><span class=\"line\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class=\"line\">LimitNOFILE = 5000 </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动数据库\"><a href=\"#启动数据库\" class=\"headerlink\" title=\"启动数据库\"></a>启动数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br><span class=\"line\">systemctl status mysqld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主库创建复制用户\"><a href=\"#主库创建复制用户\" class=\"headerlink\" title=\"主库创建复制用户\"></a>主库创建复制用户</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -e &quot;grant replication slave  on *.* to repl@&#x27;192.168.56.%&#x27; identified by &#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql -e <span class=\"string\">&quot;select host,user,authentication_string from mysql.user;&quot;</span></span><br><span class=\"line\">+--------------+---------------+-------------------------------------------+</span><br><span class=\"line\">| host         | user          | authentication_string                     |</span><br><span class=\"line\">+--------------+---------------+-------------------------------------------+</span><br><span class=\"line\">| localhost    | root          |                                           |</span><br><span class=\"line\">| localhost    | mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class=\"line\">| localhost    | mysql.sys     | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class=\"line\">| 192.168.56.% | repl          | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |</span><br><span class=\"line\">+--------------+---------------+-------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"另外两台从库开启主从\"><a href=\"#另外两台从库开启主从\" class=\"headerlink\" title=\"另外两台从库开启主从\"></a>另外两台从库开启主从</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#初始化master.info</span></span><br><span class=\"line\">mysql -e <span class=\"string\">&quot;change master to master_host=&#x27;192.168.56.2&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;123&#x27; ,MASTER_AUTO_POSITION=1;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#MASTER_AUTO_POSITION=1; //表示开启gtid复制模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql -e  <span class=\"string\">&quot;start slave;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mysql -e  &quot;show slave status \\G&quot;|grep &quot;Running:&quot;</span></span><br><span class=\"line\">Slave_IO_Running: Yes</span><br><span class=\"line\">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GTID复制和普通复制的区别\"><a href=\"#GTID复制和普通复制的区别\" class=\"headerlink\" title=\"GTID复制和普通复制的区别\"></a>GTID复制和普通复制的区别</h4><p>GTID 复制和普通复制的区别</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//普通复制</span><br><span class=\"line\">CHANGE MASTER TO</span><br><span class=\"line\">MASTER_HOST=<span class=\"string\">&#x27;10.0.0.51&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;repl&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">MASTER_PORT=3307,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;mysql-bin.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=444,</span><br><span class=\"line\">MASTER_CONNECT_RETRY=10;</span><br><span class=\"line\"></span><br><span class=\"line\">//GTID复制</span><br><span class=\"line\">change master to </span><br><span class=\"line\">master_host=<span class=\"string\">&#x27;10.0.0.51&#x27;</span>,</span><br><span class=\"line\">master_user=<span class=\"string\">&#x27;repl&#x27;</span>,</span><br><span class=\"line\">master_password=<span class=\"string\">&#x27;123&#x27;</span> ,</span><br><span class=\"line\">MASTER_AUTO_POSITION=1;</span><br><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在主从复制环境中，主库发生过的事务，在全局都是由唯一GTID记录的，更方便Failover</li>\n<li>额外功能参数（3个）</li>\n<li><code>change master to</code> 的时候不再需要<code>binlog</code> 文件名和<code>position号</code>,而是用<code>MASTER_AUTO_POSITION=1</code>替换;</li>\n<li>在复制过程中，从库不再依赖<code>master.info</code>文件，而是直接读取最后一个<code>relay_log</code>的 GTID号</li>\n<li>mysqldump备份时，默认会将备份中包含的事务操作，以以下方式即不能添加<code>--set-gtid-purged=OFF：</code></li>\n<li><code>SET @@GLOBAL.GTID_PURGED=&#39;8c49d7ec-7e78-11e8-9638-000c29ca725d:1&#39;;</code>//告诉从库，我的备份中已经有以上事务，你就不用运行了，直接从下一个GTID开始请求binlog就行。</li>\n<li>如果备份中没有这条信息，那么在复制时，从库会从第一个GTID开始向主库进行请求。那么会导致基于GTID的主从崩溃</li>\n</ul>\n<p><strong>例</strong>：参见<a href=\"https://cakepanit.com/forward/7cf8b47.html#4-4-5%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0\">https://cakepanit.com/forward/7cf8b47.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#GTID环境下备份举例</span></span><br><span class=\"line\">mysqldump -uroot -p123 -S /data/mysql.sock -A -R -E -F --triggers --master-data=2  --max-allowed-packet=128M --single-transaction |gzip &gt;/tmp/alL_$(<span class=\"built_in\">date</span> +%F)2.sql.gz</span><br></pre></td></tr></table></figure>","categories":["DBA"],"tags":["主从复制","MySQL"]},{"title":"MySQL-事务的ACID特性","url":"/forward/bc8a646.html","content":"<h3 id=\"事务的ACID特性\"><a href=\"#事务的ACID特性\" class=\"headerlink\" title=\"事务的ACID特性\"></a>事务的ACID特性</h3><h4 id=\"作用是什么？\"><a href=\"#作用是什么？\" class=\"headerlink\" title=\"作用是什么？\"></a>作用是什么？</h4><ul>\n<li>影响了DML语句（insert  update   delete  一部分select）</li>\n<li>Atomic（原子性）》我收你发要么全部成功，要么一起失败，原子性(所有语句作为一个单元全部成功执行或全部取消。不能出现中间状态。)</li>\n<li>Consistent（一致性）》我发多少你收多少，不出现错误。一致性(如果数据库在事务开始时处于一致状态，则在执行该事务期间将保留一致状态。)</li>\n<li>Isolated（隔离性）》不能并发修改同一数据(事务之间不相互影响。)</li>\n<li>Durable（持久性）》不管宕机与否，业务操作都落地到磁盘中<br>(事务成功完成后，所做的所有更改都会准确地记录在数据库中。所做的更改不会丢失。)</li>\n</ul>\n<p><img src=\"/images/img-57.png\" alt=\"ACID\"></p>\n<h5 id=\"定义：具备ACID特性的一组操作，被定义为事物\"><a href=\"#定义：具备ACID特性的一组操作，被定义为事物\" class=\"headerlink\" title=\"定义：具备ACID特性的一组操作，被定义为事物\"></a>定义：具备ACID特性的一组操作，被定义为事物</h5><h4 id=\"事务的生命周期（事务控制语句）\"><a href=\"#事务的生命周期（事务控制语句）\" class=\"headerlink\" title=\"事务的生命周期（事务控制语句）\"></a>事务的生命周期（事务控制语句）</h4><p><img src=\"/images/img-53.png\" alt=\"事务控制语句\"></p>\n<h5 id=\"事务的开始\"><a href=\"#事务的开始\" class=\"headerlink\" title=\"事务的开始\"></a>事务的开始</h5><p><code>begin; / start transaction;</code><br>**说明:**在5.5 以上的版本，不需要手工begin，只要你执行的是一个DML，会自动在前面加一个begin命令。</p>\n<h5 id=\"事务的结束\"><a href=\"#事务的结束\" class=\"headerlink\" title=\"事务的结束\"></a>事务的结束</h5><ul>\n<li><code>commit</code>：提交事务(完成一个事务，一旦事务提交成功 ，就说明具备ACID特性了。)</li>\n<li><code>rollback</code>：回滚事务(将内存中，已执行过的操作，回滚回去)</li>\n</ul>\n<h5 id=\"自动提交策略（autocommit）\"><a href=\"#自动提交策略（autocommit）\" class=\"headerlink\" title=\"自动提交策略（autocommit）\"></a>自动提交策略（autocommit）</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db01 [(none)]&gt;select @@autocommit;</span><br><span class=\"line\">db01 [(none)]&gt;<span class=\"built_in\">set</span> autocommit=0;</span><br><span class=\"line\">db01 [(none)]&gt;<span class=\"built_in\">set</span> global autocommit=0;</span><br><span class=\"line\"></span><br><span class=\"line\">注：</span><br><span class=\"line\">自动提交是否打开，一般在有事务需求的MySQL中，将其关闭</span><br><span class=\"line\">不管有没有事务需求，我们一般也都建议设置为0，可以很大程度上提高数据库性能</span><br><span class=\"line\">(1)在线修改</span><br><span class=\"line\"><span class=\"built_in\">set</span> autocommit=0;   </span><br><span class=\"line\"><span class=\"built_in\">set</span> global autocommit=0;</span><br><span class=\"line\">(2)写入配置文件</span><br><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">autocommit=0   //开启后执行DML必须要commit(对事务进行提交)或者rollback( 对事物进行回滚)</span><br></pre></td></tr></table></figure>\n<h5 id=\"事务的隐式控制\"><a href=\"#事务的隐式控制\" class=\"headerlink\" title=\"事务的隐式控制\"></a>事务的隐式控制</h5><p>用于隐式提交的SQL语句</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">begin &lt;事物开始</span><br><span class=\"line\">a  //dml语句</span><br><span class=\"line\">b //dml语句</span><br><span class=\"line\">bengin &lt;在同一会话中开启新事物，那么上面的事物会被提交</span><br></pre></td></tr></table></figure>\n<p>导致提交的非事务语句：<br>DDL语句： （ALTER、CREATE 和 DROP）<br>DCL语句： （GRANT、REVOKE 和 SET PASSWORD）<br>锁定语句： （LOCK TABLES 和 UNLOCK TABLES）</p>\n<p>导致隐式提交的语句示例：<br><code>TRUNCATE TABLE</code><br><code>LOAD DATA INFILE</code><br><code>SELECT FOR UPDATE</code><br>在同一会话中，出现以上语句都会出发提交上一个事物。</p>\n<h5 id=\"开始事务流程：\"><a href=\"#开始事务流程：\" class=\"headerlink\" title=\"开始事务流程：\"></a>开始事务流程：</h5><p>1、检查autocommit是否为关闭状态<br><code>select @@autocommit;</code><br>或者：<br><code>show variables like &#39;autocommit&#39;;</code><br>2、开启事务,并结束事务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">begin</span><br><span class=\"line\">delete from student <span class=\"built_in\">where</span> name=<span class=\"string\">&#x27;alexsb&#x27;</span>;</span><br><span class=\"line\">update student <span class=\"built_in\">set</span> name=<span class=\"string\">&#x27;alexsb&#x27;</span> <span class=\"built_in\">where</span> name=<span class=\"string\">&#x27;alex&#x27;</span>;</span><br><span class=\"line\">rollback;</span><br><span class=\"line\"></span><br><span class=\"line\">begin</span><br><span class=\"line\">delete from student <span class=\"built_in\">where</span> name=<span class=\"string\">&#x27;alexsb&#x27;</span>;</span><br><span class=\"line\">update student <span class=\"built_in\">set</span> name=<span class=\"string\">&#x27;alexsb&#x27;</span> <span class=\"built_in\">where</span> name=<span class=\"string\">&#x27;alex&#x27;</span>;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"InnoDB-事务的ACID如何保证\"><a href=\"#InnoDB-事务的ACID如何保证\" class=\"headerlink\" title=\"InnoDB 事务的ACID如何保证?\"></a>InnoDB 事务的ACID如何保证?</h3><h4 id=\"一些概念\"><a href=\"#一些概念\" class=\"headerlink\" title=\"一些概念\"></a>一些概念</h4><ul>\n<li><code>redo log</code> —&gt; 重做日志 ib_logfile0~1  50M ,轮询使用<ul>\n<li>redo log buffer —&gt; redo内存区</li>\n</ul>\n</li>\n<li><code>t1.ibd</code>     —-&gt; 存储 数据行和索引 <ul>\n<li>buffer pool —&gt;数据缓冲区池,数据和索引的缓冲(存放数据页的内存区域)</li>\n</ul>\n</li>\n<li><code>LSN</code> : 日志序列号 （数据页变更一次就加一个版本号）</li>\n<li>磁盘数据页,redo文件,buffer pool,redo buffer</li>\n</ul>\n<p><strong>注意：</strong>MySQL 每次数据库启动,都会比较磁盘数据页和redolog的LSN,必须要求两者LSN一致数据库才能正常启动</p>\n<ul>\n<li><code>WAL</code> : write ahead log 日志优先写的方式实现持久化，日志落地</li>\n<li>脏页: 内存脏页,内存中发生了修改,没写入到磁盘之前,我们把内存页称之为脏页.</li>\n<li><code>CKPT</code>:Checkpoint,检查点,就是将脏页刷写到磁盘的动作</li>\n<li><code>TXID</code>: 事务号,<code>InnoDB</code>会为每一个事务生成一个事务号,伴随着整个事务.<br><img src=\"/images/img-52.png\" alt=\"redo&amp;undo\"></li>\n</ul>\n<h4 id=\"redo-log\"><a href=\"#redo-log\" class=\"headerlink\" title=\"redo log\"></a>redo log</h4><h5 id=\"Redo是什么？\"><a href=\"#Redo是什么？\" class=\"headerlink\" title=\"Redo是什么？\"></a>Redo是什么？</h5><p><code>redo</code>,顾名思义“重做日志”，是事务日志的一种。用于存放内存脏页变化过程的日志叫做redo日志。<br><img src=\"/images/img-58.png\" alt=\"一些概念\"></p>\n<h5 id=\"作用是什么？-1\"><a href=\"#作用是什么？-1\" class=\"headerlink\" title=\"作用是什么？\"></a>作用是什么？</h5><p>在事务ACID过程中，实现的是“D”持久化的作用。对于AC也有相应的作用</p>\n<h5 id=\"redo日志位置\"><a href=\"#redo日志位置\" class=\"headerlink\" title=\"redo日志位置\"></a>redo日志位置</h5><p>redo的日志文件：iblogfile0 iblogfile1</p>\n<h5 id=\"redo-buffer\"><a href=\"#redo-buffer\" class=\"headerlink\" title=\"redo buffer\"></a>redo buffer</h5><p><code>redo</code>的<code>buffer</code>:数据页的变化信息+数据页当时的LSN号<br><code>LSN</code>：日志序列号  磁盘数据页、内存数据页、redo buffer、redolog</p>\n<h5 id=\"redo的刷新策略\"><a href=\"#redo的刷新策略\" class=\"headerlink\" title=\"redo的刷新策略\"></a>redo的刷新策略</h5><p><code>commit</code>;<br>刷新当前事务的redo buffer到磁盘<br>还会顺便将一部分redo buffer中没有提交的事务日志也刷新到磁盘</p>\n<h5 id=\"MySQL-CSR——前滚\"><a href=\"#MySQL-CSR——前滚\" class=\"headerlink\" title=\"MySQL CSR——前滚\"></a>MySQL CSR——前滚</h5><p>MySQL : 在启动时,必须保证<code>redo日志</code>文件和<code>数据文件``LSN</code>必须一致, 如果不一致就会触发CSR,最终保证一致</p>\n<h4 id=\"情况一\"><a href=\"#情况一\" class=\"headerlink\" title=\"情况一:\"></a>情况一:</h4><p><strong>我们做了一个事务,begin;update;commit.</strong></p>\n<ul>\n<li>1.在begin ,会立即分配一个TXID=tx_01.</li>\n<li>2.update时,会将需要修改的数据页(dp_01,LSN=101),加载到data buffer中</li>\n<li>3.DBWR线程,会进行dp_01数据页修改更新,并更新LSN=102</li>\n<li>4.LOGBWR日志写线程,会将dp_01数据页的变化+LSN+TXID存储到redobuffer</li>\n<li><ol start=\"5\">\n<li>执行commit时,LGWR日志写线程会将redobuffer信息写入redolog日志文件中,基于WAL原则,在日志完全写入磁盘后,commit命令才执行成功,(会将此日志打上commit标记)</li>\n</ol>\n</li>\n<li>6.假如此时宕机,内存脏页没有来得及写入磁盘,内存数据全部丢失</li>\n<li>7.MySQL再次重启时,必须要redolog和磁盘数据页的LSN是一致的.但是,此时dp_01,TXID=tx_01磁盘是LSN=101,dp_01,TXID=tx_01,redolog中LSN=102</li>\n<li>MySQL此时无法正常启动,MySQL触发CSR.在内存追平LSN号,触发ckpt,将内存数据页更新到磁盘,从而保证磁盘数据页和redolog LSN一值.这时MySQL正长启动<br>以上的工作过程,我们把它称之为基于REDO的”前滚操作”</li>\n</ul>\n<p><img src=\"/images/img-59.png\" alt=\"CSR前滚操作\"></p>\n<h4 id=\"undo-回滚日志\"><a href=\"#undo-回滚日志\" class=\"headerlink\" title=\"undo 回滚日志\"></a>undo 回滚日志</h4><h5 id=\"undo是什么？\"><a href=\"#undo是什么？\" class=\"headerlink\" title=\"undo是什么？\"></a>undo是什么？</h5><p>存放调度到内存数据页原始的状态的日志叫做undo日志（记录数据页变化之前的数据状态以及TXID（数据页的id））<br>undo,顾名思义“回滚日志”</p>\n<h5 id=\"作用是什么？-2\"><a href=\"#作用是什么？-2\" class=\"headerlink\" title=\"作用是什么？\"></a>作用是什么？</h5><ul>\n<li>在事务ACID过程中，实现的是“A” 原子性的作用</li>\n<li><ul>\n<li>另外CI也依赖于Undo</li>\n</ul>\n</li>\n<li>在手动rolback（回滚）时,将数据恢复到修改之前的状态</li>\n<li>在CSR（前滚）实现的是,将redo当中记录了未提交的事物时进行回滚.通过redo中为提交事务的txid找到undo中对应的txid进行关联</li>\n</ul>\n<p><strong>未提交事物回滚过程</strong>：1.先前滚再回滚 原因：如果undo buffer中的原始数据没来得及进行WAL持久化动作时，需要通过redo先恢复undo，再通过undo回滚回来。一个被回滚了的事务在恢复时的操作就是先redo再undo，因此不会破坏数据的一致性。</p>\n<p>undo提供快照技术,保存事务修改之前的数据状态.保证了MVCC,隔离性,mysqldump的热备<br><img src=\"/images/img-60.png\" alt=\"UNDO回滚操作\"></p>\n<h4 id=\"概念性的东西\"><a href=\"#概念性的东西\" class=\"headerlink\" title=\"概念性的东西:\"></a>概念性的东西:</h4><ul>\n<li>redo怎么应用的</li>\n<li>undo怎么应用的</li>\n<li>CSR(自动故障恢复)过程</li>\n<li>LSN :日志序列号</li>\n<li>TXID:事务ID</li>\n<li>CKPT(Checkpoint)</li>\n</ul>\n<p><img src=\"/images/img-64.png\" alt=\"test\"></p>\n","categories":["DBA"],"tags":["MySQL","ACID","事务"]},{"title":"MySQL-日志管理[GTID]","url":"/forward/93ea067.html","content":"<h3 id=\"GTID\"><a href=\"#GTID\" class=\"headerlink\" title=\"GTID\"></a>GTID</h3><h4 id=\"思考问题？下面怎么恢复？\"><a href=\"#思考问题？下面怎么恢复？\" class=\"headerlink\" title=\"思考问题？下面怎么恢复？\"></a>思考问题？下面怎么恢复？</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1. </span></span><br><span class=\"line\">create database binlog charset utf8mb4;</span><br><span class=\"line\"><span class=\"comment\">#2. </span></span><br><span class=\"line\">use binlog;</span><br><span class=\"line\">create table t1(<span class=\"built_in\">id</span> int);</span><br><span class=\"line\"><span class=\"comment\">#3. </span></span><br><span class=\"line\">insert into t1 values(1);</span><br><span class=\"line\">commit;</span><br><span class=\"line\">insert into t1 values(2);</span><br><span class=\"line\">commit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">truncate</span> table t1;</span><br><span class=\"line\"></span><br><span class=\"line\">insert into t1 values(3);</span><br><span class=\"line\">commit;</span><br><span class=\"line\"><span class=\"comment\">#4. </span></span><br><span class=\"line\">drop database binlog;</span><br></pre></td></tr></table></figure>\n<p>原因：基于position号恢复需要多次截取，找起点和终点过程很复杂。</p>\n<h4 id=\"什么是GTID（全局事务编号）\"><a href=\"#什么是GTID（全局事务编号）\" class=\"headerlink\" title=\"什么是GTID（全局事务编号）\"></a>什么是GTID（全局事务编号）</h4><p>5.6 版本新加的特性,5.7中做了加强<br>5.6 中不开启,没有这个功能.<br>5.7 中的GTID,即使不开也会有自动生成<br>SET @@SESSION.GTID_NEXT= ‘ANONYMOUS’ //匿名的GTID。用于系统自身维护</p>\n<p>是对于一个已提交事务的编号，并且是一个全局唯一连续的编号。<br>它的官方定义如下：<br>GTID = source_id ：transaction_id<br>7E11FA47-31CA-19E1-9E56-C43AA21293967:29</p>\n<ul>\n<li>UUID:事务编号<br>UUID存放路径：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /data/3307/data/auto.cnf //数据库初始化完成后，自动生成</span></span><br><span class=\"line\">[auto]</span><br><span class=\"line\">server-uuid=cca7bb3f-687e-11ea-b0d9-0800273e0795</span><br></pre></td></tr></table></figure>\n说明：<br>DDL DCL，一条语句（事件）就是一个事务，占一个GTID号<br>DML：一个完整的事务(begin–》commit)，是一个事务，占一个GTID号</li>\n</ul>\n<h4 id=\"开启GTID\"><a href=\"#开启GTID\" class=\"headerlink\" title=\"开启GTID\"></a>开启GTID</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">gtid-mode=on</span><br><span class=\"line\">enforce-gtid-consistency=<span class=\"literal\">true</span></span><br><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看GTID\"><a href=\"#查看GTID\" class=\"headerlink\" title=\"查看GTID\"></a>查看GTID</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| mysql-bin.000008 |      154 |              |                  |                   |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create database ff;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+------------------+----------+--------------+------------------+----------------------------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set //存放gtid            |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+----------------------------------------+</span><br><span class=\"line\">| mysql-bin.000008 |      307 |              |                  | cca7bb3f-687e-11ea-b0d9-0800273e0795:1 |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+----------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>模拟被删库，如何恢复数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; use ff;</span><br><span class=\"line\">mysql&gt; create table cakepanit.com (<span class=\"built_in\">id</span> int);</span><br><span class=\"line\">mysql&gt; insert into cakepanit.com values(1);</span><br><span class=\"line\">mysql&gt; commit;</span><br><span class=\"line\">mysql&gt; insert into cakepanit.com values(2);</span><br><span class=\"line\">mysql&gt; commit;</span><br><span class=\"line\">mysql&gt; insert into cakepanit.com values(3);</span><br><span class=\"line\">mysql&gt; commit;</span><br><span class=\"line\">mysql&gt; insert into cakepanit.com values(4);</span><br><span class=\"line\">mysql&gt; commit;</span><br><span class=\"line\">mysql&gt; insert into cakepanit.com values(5);</span><br><span class=\"line\">mysql&gt; commit;</span><br><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class=\"line\">| mysql-bin.000008 |     1771 |              |                  | cca7bb3f-687e-11ea-b0d9-0800273e0795:1-7 |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基于GTDI截取\"><a href=\"#基于GTDI截取\" class=\"headerlink\" title=\"基于GTDI截取\"></a>基于GTDI截取</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; drop database ff;</span><br><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class=\"line\">| mysql-bin.000008 |     1922 |              |                  | cca7bb3f-687e-11ea-b0d9-0800273e0795:1-8 |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.000008&#x27;</span>;</span><br><span class=\"line\">+------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------+</span><br><span class=\"line\">| Log_name         | Pos  | Event_type     | Server_id | End_log_pos | Info                                                              |</span><br><span class=\"line\">+------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------+</span><br><span class=\"line\">| mysql-bin.000008 |    4 | Format_desc    |         7 |         123 | Server ver: 5.7.26-<span class=\"built_in\">log</span>, Binlog ver: 4                             |</span><br><span class=\"line\">| mysql-bin.000008 |  123 | Previous_gtids |         7 |         154 |                                                                   |</span><br><span class=\"line\">| mysql-bin.000008 |  154 | Gtid           |         7 |         219 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:1&#x27;</span> | //建库</span><br><span class=\"line\">| mysql-bin.000008 |  219 | Query          |         7 |         307 | create database ff                                                |</span><br><span class=\"line\">| mysql-bin.000008 |  307 | Gtid           |         7 |         372 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:2&#x27;</span> | //建表</span><br><span class=\"line\">| mysql-bin.000008 |  372 | Query          |         7 |         476 | use `ff`; create table cakepanit.com (<span class=\"built_in\">id</span> int)                      |</span><br><span class=\"line\">| mysql-bin.000008 |  476 | Gtid           |         7 |         541 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:3&#x27;</span> | //插入数据</span><br><span class=\"line\">| mysql-bin.000008 |  541 | Query          |         7 |         611 | BEGIN                                                             |</span><br><span class=\"line\">| mysql-bin.000008 |  611 | Table_map      |         7 |         664 | table_id: 110 (ff.cakepanit.com)                                   |</span><br><span class=\"line\">| mysql-bin.000008 |  664 | Write_rows     |         7 |         704 | table_id: 110 flags: STMT_END_F                                   |</span><br><span class=\"line\">| mysql-bin.000008 |  704 | Xid            |         7 |         735 | COMMIT /* xid=16 */                                               |</span><br><span class=\"line\">| mysql-bin.000008 |  735 | Gtid           |         7 |         800 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:4&#x27;</span> |</span><br><span class=\"line\">| mysql-bin.000008 |  800 | Query          |         7 |         870 | BEGIN                                                             |</span><br><span class=\"line\">| mysql-bin.000008 |  870 | Table_map      |         7 |         923 | table_id: 110 (ff.cakepanit.com)                                   |</span><br><span class=\"line\">| mysql-bin.000008 |  923 | Write_rows     |         7 |         963 | table_id: 110 flags: STMT_END_F                                   |</span><br><span class=\"line\">| mysql-bin.000008 |  963 | Xid            |         7 |         994 | COMMIT /* xid=18 */                                               |</span><br><span class=\"line\">| mysql-bin.000008 |  994 | Gtid           |         7 |        1059 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:5&#x27;</span> |</span><br><span class=\"line\">| mysql-bin.000008 | 1059 | Query          |         7 |        1129 | BEGIN                                                             |</span><br><span class=\"line\">| mysql-bin.000008 | 1129 | Table_map      |         7 |        1182 | table_id: 110 (ff.cakepanit.com)                                   |</span><br><span class=\"line\">| mysql-bin.000008 | 1182 | Write_rows     |         7 |        1222 | table_id: 110 flags: STMT_END_F                                   |</span><br><span class=\"line\">| mysql-bin.000008 | 1222 | Xid            |         7 |        1253 | COMMIT /* xid=20 */                                               |</span><br><span class=\"line\">| mysql-bin.000008 | 1253 | Gtid           |         7 |        1318 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:6&#x27;</span> |</span><br><span class=\"line\">| mysql-bin.000008 | 1318 | Query          |         7 |        1388 | BEGIN                                                             |</span><br><span class=\"line\">| mysql-bin.000008 | 1388 | Table_map      |         7 |        1441 | table_id: 110 (ff.cakepanit.com)                                   |</span><br><span class=\"line\">| mysql-bin.000008 | 1441 | Write_rows     |         7 |        1481 | table_id: 110 flags: STMT_END_F                                   |</span><br><span class=\"line\">| mysql-bin.000008 | 1481 | Xid            |         7 |        1512 | COMMIT /* xid=22 */                                               |</span><br><span class=\"line\">| mysql-bin.000008 | 1512 | Gtid           |         7 |        1577 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:7&#x27;</span> | //插入数据</span><br><span class=\"line\">| mysql-bin.000008 | 1577 | Query          |         7 |        1647 | BEGIN                                                             |</span><br><span class=\"line\">| mysql-bin.000008 | 1647 | Table_map      |         7 |        1700 | table_id: 110 (ff.cakepanit.com)                                   |</span><br><span class=\"line\">| mysql-bin.000008 | 1700 | Write_rows     |         7 |        1740 | table_id: 110 flags: STMT_END_F                                   |</span><br><span class=\"line\">| mysql-bin.000008 | 1740 | Xid            |         7 |        1771 | COMMIT /* xid=24 */                                               |</span><br><span class=\"line\">| mysql-bin.000008 | 1771 | Gtid           |         7 |        1836 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:8&#x27;</span> | //删库</span><br><span class=\"line\">| mysql-bin.000008 | 1836 | Query          |         7 |        1922 | drop database ff                                                  |</span><br><span class=\"line\">+------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"错误截取方法：\"><a href=\"#错误截取方法：\" class=\"headerlink\" title=\"错误截取方法：\"></a>错误截取方法：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqlbinlog --include-gtids=&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:1-7&#x27; /data/3307/mysql-bin.000008 &gt;/tmp/gtid.sql</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：以上截取方法不可在本机直接恢复。「在其他机器上可直接恢复」</strong><br><strong>原因：GTID具备幂等性，即在恢复通过GTID截取导出的二进制文件时，GTID会对比本地二进制文件中是否存在相同操作，若存在则跳过重复执行「GTID误认为次操作为重复劳动故不执行」。</strong></p>\n<h5 id=\"正确截取方法：\"><a href=\"#正确截取方法：\" class=\"headerlink\" title=\"正确截取方法：\"></a>正确截取方法：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqlbinlog --skip-gtids --include-gtids=&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:1-7&#x27; /data/3307/mysql-bin.000008 &gt;/tmp/gtids.sql</span></span><br><span class=\"line\">--skip-gtids //再次恢复时跳过GTID幂等检查</span><br><span class=\"line\">恢复：</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> sql_log_bin=0; <span class=\"comment\">#关闭当前回话的binlog记录</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /tmp/gtids.sql</span><br></pre></td></tr></table></figure>\n<h5 id=\"：5-2对比5-1：\"><a href=\"#：5-2对比5-1：\" class=\"headerlink\" title=\"：5.2对比5.1：\"></a>：5.2对比5.1：</h5><p><img src=\"/images/img-80.png\" alt=\"5.2对比5.1\"></p>\n<h5 id=\"跳过某些GTID不截取\"><a href=\"#跳过某些GTID不截取\" class=\"headerlink\" title=\"跳过某些GTID不截取\"></a>跳过某些GTID不截取</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqlbinlog --skip-gtids --include-gtids=&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:1-7&#x27;--exclude-gtids=&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:3,cca7bb3f-687e-11ea-b0d9-0800273e0795:4-6&#x27; /data/3307/mysql-bin.000008 &gt;/tmp/gtids.sql</span></span><br><span class=\"line\">--exclude-gtids=<span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:3&#x27;</span> //跳过指定GTID截取binlog</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">从全备获取获取单库的备份</span><br><span class=\"line\"><span class=\"comment\"># sed -n &#x27;/^-- Current Database: `world`/,/^-- Current Database: `/p&#x27; all.sql &gt;world.sql</span></span><br><span class=\"line\">只截取db1库的二进制日志</span><br><span class=\"line\"><span class=\"comment\"># mysqlbinlog -d db1 --stop-position=974 /data/mysql/mysql-bin.000003 &gt;/tmp/part.sql</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二进制日志使用场景\"><a href=\"#二进制日志使用场景\" class=\"headerlink\" title=\"二进制日志使用场景\"></a>二进制日志使用场景</h3><ul>\n<li><strong>二进制日志一般是配合定期全备，恢复生产中的数据。</strong></li>\n<li>主从复制架构依赖于二进制日志</li>\n</ul>\n<h4 id=\"二进制日志其他操作\"><a href=\"#二进制日志其他操作\" class=\"headerlink\" title=\"二进制日志其他操作\"></a>二进制日志其他操作</h4><h5 id=\"临时关闭\"><a href=\"#临时关闭\" class=\"headerlink\" title=\"临时关闭\"></a>临时关闭</h5><p><code>set sql_log_bin=0;</code><br>说明：</p>\n<ul>\n<li>临时关闭二进制日志记录，退出mysql窗口可以恢复</li>\n<li>做数据恢复之前，使用以上参数  </li>\n</ul>\n<h5 id=\"自动清理\"><a href=\"#自动清理\" class=\"headerlink\" title=\"自动清理\"></a>自动清理</h5><p>参数：<br><code>mysql&gt; select @@expire_logs_days;</code></p>\n<p>自动清理设置依据：至少是一个全备周期+1，企业建议至少2个全备周期+1</p>\n<p>怎么设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global expire_logs_days=8; //临时设置，重启失效</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/my.cnf </span><br><span class=\"line\">expire_logs_days=8 //永久设置，重启生效</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"手工清理\"><a href=\"#手工清理\" class=\"headerlink\" title=\"手工清理\"></a>手工清理</h5><p><code>PURGE BINARY LOGS BEFORE now() - INTERVAL 3 day;</code>  //删除从现在开始三天之前的二进制日志<br><code>PURGE BINARY LOGS TO &#39;mysql-bin.000003&#39;;</code>  //删除到哪里为止<br>以上操作不会重置二进制日志号码。</p>\n<p>注意:不要手工 rm binlog文件，误杀binlog日志文件处理过程：</p>\n<ol>\n<li> my.cnf binlog关闭掉,启动数据库</li>\n<li> 把数据库关闭,开启binlog,启动数据库<br>删除所有binlog,并从000001开始重新记录日志</li>\n</ol>\n<p>删除所有binlog，从000001开始（危险！！！！）<br><code>mysql&gt; reset master;</code> //断开业务，静止数据。主从环境下执行，主从则需要重新构建。最好是全备之后再执行。</p>\n<h5 id=\"日志滚动\"><a href=\"#日志滚动\" class=\"headerlink\" title=\"日志滚动\"></a>日志滚动</h5><ul>\n<li>重启数据库</li>\n<li>flush logs </li>\n<li>mysqladmin -uroot -p flush-logs</li>\n<li>show variables like ‘%max_binlog_size%’; //日志默认大小，默认1G滚动</li>\n<li>备份加一些参数，会触发滚动日志</li>\n</ul>\n","categories":["DBA"],"tags":["MySQL","日志管理"]},{"title":"MySQL体系结构","url":"/forward/3c4a0863.html","content":"<h2 id=\"MySQL-C-S结构\"><a href=\"#MySQL-C-S结构\" class=\"headerlink\" title=\"MySQL C/S结构\"></a>MySQL C/S结构</h2><p><img src=\"/images/img-9.png\" alt=\"C/S\"></p>\n<h3 id=\"两类连接方法：\"><a href=\"#两类连接方法：\" class=\"headerlink\" title=\"两类连接方法：\"></a>两类连接方法：</h3><h4 id=\"针对本地用户，针对网络用户。\"><a href=\"#针对本地用户，针对网络用户。\" class=\"headerlink\" title=\"针对本地用户，针对网络用户。\"></a>针对本地用户，针对网络用户。</h4><ul>\n<li>TCP/IP方式（远程、本地）：<br><code>mysql -uroot -poldboy123 -h 10.0.0.51 -P3306</code></li>\n<li>Socket方式(仅本地)：<br><code>mysql -uroot -poldboy123 -S /tmp/mysql.sock</code></li>\n</ul>\n<h3 id=\"MySQL实例的构成\"><a href=\"#MySQL实例的构成\" class=\"headerlink\" title=\"MySQL实例的构成\"></a>MySQL实例的构成</h3><p><strong>公司：老板   +   经理   +   员工   +   办公区</strong><br><strong>实例：mysqld+master thread +干活的Thread+预分配的内存</strong></p>\n<h3 id=\"MySQL中mysqld服务器进程结构\"><a href=\"#MySQL中mysqld服务器进程结构\" class=\"headerlink\" title=\"MySQL中mysqld服务器进程结构\"></a>MySQL中mysqld服务器进程结构</h3><h4 id=\"SQL语句引入-结构化的查询语句\"><a href=\"#SQL语句引入-结构化的查询语句\" class=\"headerlink\" title=\"SQL语句引入(结构化的查询语句)\"></a>SQL语句引入(结构化的查询语句)</h4><h4 id=\"SQL语言共分为四大类\"><a href=\"#SQL语言共分为四大类\" class=\"headerlink\" title=\"SQL语言共分为四大类\"></a>SQL语言共分为四大类</h4><ul>\n<li>数据查询语言DQL</li>\n<li>数据操纵语言DML</li>\n<li>数据定义语言DDL</li>\n<li>数据控制语言DCL</li>\n</ul>\n<h4 id=\"数据查询语言DQL\"><a href=\"#数据查询语言DQL\" class=\"headerlink\" title=\"数据查询语言DQL\"></a>数据查询语言DQL</h4><p><strong>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE</strong><br>子句组成的查询块：</p>\n<ul>\n<li>SELECT &lt;字段名表&gt;</li>\n<li>FROM &lt;表或视图名&gt;</li>\n<li>WHERE &lt;查询条件&gt;</li>\n</ul>\n<h4 id=\"数据操纵语言DML\"><a href=\"#数据操纵语言DML\" class=\"headerlink\" title=\"数据操纵语言DML\"></a>数据操纵语言DML</h4><p>数据操纵语言DML主要有三种形式：</p>\n<ul>\n<li>插入：INSERT</li>\n<li>更新：UPDATE</li>\n<li>删除：DELETE</li>\n</ul>\n<h4 id=\"数据定义语言DDL\"><a href=\"#数据定义语言DDL\" class=\"headerlink\" title=\"数据定义语言DDL\"></a>数据定义语言DDL</h4><p><strong>数据定义语言DDL用来创建数据库中的各种对象—–表、视图、</strong><br><strong>索引、同义词、聚簇等如：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE/VIEW/INDEX/SYN/CLUSTER</span><br><span class=\"line\">        表   视图  索引  同义词 簇</span><br></pre></td></tr></table></figure>\n<p>DDL操作是隐性提交的！不能rollback </p>\n<h4 id=\"数据控制语言DCL\"><a href=\"#数据控制语言DCL\" class=\"headerlink\" title=\"数据控制语言DCL\"></a>数据控制语言DCL</h4><p>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等。如：</p>\n<ul>\n<li>GRANT：授权。</li>\n<li>ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。<br>回滚—ROLLBACK<br>回滚命令使数据库状态回到上次最后提交的状态。其格式为：<br><code>SQL&gt;ROLLBACK;</code></li>\n</ul>\n<h3 id=\"mysqld程序运行原理\"><a href=\"#mysqld程序运行原理\" class=\"headerlink\" title=\"mysqld程序运行原理\"></a>mysqld程序运行原理</h3><p><img src=\"/images/img-10.png\" alt=\"物理结构\"></p>\n<h4 id=\"连接层功能\"><a href=\"#连接层功能\" class=\"headerlink\" title=\"连接层功能\"></a>连接层功能</h4><p>（1）提供连接协议</p>\n<ul>\n<li>Socket</li>\n<li>TCP/IP</li>\n</ul>\n<p>（2）验证用户名(root@localhost)密码合法性，进行匹配专门的授权表。</p>\n<p>（3）派生一个专用连接线程（接收SQL，返回结果）</p>\n<ul>\n<li>mysql&gt; show processlist;查看连接线程。</li>\n</ul>\n<p>思考：mysql启动到维护模式时的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld_safe --skip-grant-tables --skip-networking &amp;</span><br><span class=\"line\"> --skip-grant-tables  <span class=\"comment\">#跳过第二步，不验证密码</span></span><br><span class=\"line\"> --skip-networking  <span class=\"comment\">#跳过TCP/IP连接，防止数据库在网络中裸奔。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SQL层-优化方面至关重要的\"><a href=\"#SQL层-优化方面至关重要的\" class=\"headerlink\" title=\"SQL层(优化方面至关重要的)\"></a>SQL层(优化方面至关重要的)</h4><ul>\n<li>验证SQL语法和SQL_MODE&lt;==它定义了你MySQL应该支持的sql语法，对数据的校验</li>\n<li>验证语义，验证所执行语句的类型：DQL,DDL,DML,DCL</li>\n<li>验证权限，用户是否有权限执行</li>\n<li>解析器进行语句解析，生成执行计划（解析树 即查找数据的方法）</li>\n<li>优化器（各种算法，基于执行代价），根据算法，找到代价最低的执行计划。</li>\n<li>代价：CPU IO MEM</li>\n<li>执行器按照优化器选择执行计划，执行SQL语句，得出获取数据的方法。</li>\n<li>提供query cache（默认不开），一般不开，会用redis</li>\n<li>记录操作日志（binlog，只记录修改），默认没开</li>\n</ul>\n<h4 id=\"存储引擎层\"><a href=\"#存储引擎层\" class=\"headerlink\" title=\"存储引擎层\"></a>存储引擎层</h4><p><strong>真正和磁盘打交道的层次</strong></p>\n<ul>\n<li>根据SQL层提供的取数据的方法拿到数据。</li>\n<li>返回给SQL，结构化成表</li>\n<li>再由连接层线程返回给用户</li>\n</ul>\n<p><img src=\"/images/img-11.png\" alt=\"mysql运行原理\"></p>\n<h3 id=\"逻辑结构\"><a href=\"#逻辑结构\" class=\"headerlink\" title=\"逻辑结构\"></a>逻辑结构</h3><p><img src=\"/images/img-12.png\" alt=\"逻辑结构\"></p>\n<h3 id=\"物理结构：\"><a href=\"#物理结构：\" class=\"headerlink\" title=\"物理结构：\"></a>物理结构：</h3><h4 id=\"宏观：\"><a href=\"#宏观：\" class=\"headerlink\" title=\"宏观：\"></a>宏观：</h4><ul>\n<li>库：存储在操作系统的目录中 /data/mysql/data</li>\n<li>表：MyISAM存储引擎，相当于操作系统的文件系统中的（ext2）<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 /data/mysql/data/mysql]<span class=\"comment\"># ll user.*</span></span><br><span class=\"line\">user.frm  <span class=\"comment\">#列的定义信息，列的属性</span></span><br><span class=\"line\">user.MYD  <span class=\"comment\">#数据行 记录</span></span><br><span class=\"line\">user.MYI   <span class=\"comment\">#索引信息，目录</span></span><br></pre></td></tr></table></figure></li>\n<li>InnoDB 带日志的存储引擎，相当于ext3 ext4 xfs<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time_zone.frm  <span class=\"comment\">#列的定义信息，列的属性</span></span><br><span class=\"line\">time_zone.ibd  <span class=\"comment\">#数据行和索引</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"微观\"><a href=\"#微观\" class=\"headerlink\" title=\"微观\"></a>微观</h4><img src=\"/images/img-13.png\" alt=\"物理&amp;逻辑结构\"></li>\n</ul>\n","categories":["DBA"],"tags":["MySQL"]},{"title":"MySQL基础管理","url":"/forward/ddc093b3.html","content":"<h3 id=\"用户-权限管理\"><a href=\"#用户-权限管理\" class=\"headerlink\" title=\"用户 权限管理\"></a>用户 权限管理</h3><h4 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h4><ul>\n<li>作用：登录，管理数据库对象。（逻辑结构）</li>\n</ul>\n<h5 id=\"用户的定义\"><a href=\"#用户的定义\" class=\"headerlink\" title=\"用户的定义\"></a>用户的定义</h5><p>mysql的用户格式：<code>root@&#39;localhost&#39;</code>，用户名@白名单。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">白名单例：</span><br><span class=\"line\"> oldguo@<span class=\"string\">&#x27;10.0.0.51&#x27;</span></span><br><span class=\"line\"> oldguo@<span class=\"string\">&#x27;10.0.0.%&#x27;</span></span><br><span class=\"line\"> oldguo@<span class=\"string\">&#x27;10.0.0.5%&#x27;</span></span><br><span class=\"line\"> oldguo@<span class=\"string\">&#x27;10.0.0.0/255.255.254.0&#x27;</span></span><br><span class=\"line\"> oldguo@<span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\"> oldguo@<span class=\"string\">&#x27;oldguo.com&#x27;</span></span><br><span class=\"line\"> oldguo@<span class=\"string\">&#x27;localhost&#x27;</span></span><br><span class=\"line\"> oldguo@<span class=\"string\">&#x27;db01&#x27;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"用户管理语句\"><a href=\"#用户管理语句\" class=\"headerlink\" title=\"用户管理语句\"></a>用户管理语句</h5><ul>\n<li><p>创建用户：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create user felix@<span class=\"string\">&#x27;172.16.1.%&#x27;</span> identified by <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li>\n<li><p>查看mysql库中user表中的列<br><code>mysql&gt; desc mysql.user;</code><br>其中 host     user  authentication_string<br>  字段为主机，用户，和密码<br>查询以上字段<br><code>mysql&gt; select host,user,authentication_string from mysql.user;</code><br><img src=\"/images/img-14.png\" alt=\"user table\"></p>\n</li>\n<li><p>删除用户<br><code>mysql&gt; drop user oldboy@&#39;172.16.1.%&#39;;</code></p>\n</li>\n<li><p>修改用户<br><code>mysql&gt; alter user root@&#39;localhost&#39; identified by &#39;123&#39;;</code></p>\n</li>\n</ul>\n<h4 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h4><p><strong>作业：控制用户登录之后能对MySQL对象做哪些命令。</strong><br><strong>定义：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALL:</span><br><span class=\"line\">SELECT,INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE</span><br></pre></td></tr></table></figure>\n<p><code>ALL</code> : 以上所有权限，一般是普通管理员拥有的<br><code>with grant option</code>：超级管理员才具备的，给别的用户授权的功能</p>\n<p>**8.0 版本新特性（了解）:**加入了role（角色）的概念。</p>\n<h4 id=\"授权管理\"><a href=\"#授权管理\" class=\"headerlink\" title=\"授权管理\"></a>授权管理</h4><h5 id=\"给用户授权\"><a href=\"#给用户授权\" class=\"headerlink\" title=\"给用户授权\"></a>给用户授权</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant ALL on woedpress.*  to wordpress@<span class=\"string\">&#x27;10.0.0.%&#x27;</span>  identified by <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\">grant 权限 on 范围            to  用户              identified by <span class=\"string\">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>范围：</strong></p>\n<ul>\n<li>*.*    #所有库所有表</li>\n<li>wordpress.*   #wordpress库下的所以表</li>\n<li>wordpress.t1  #wordpress库下t1表</li>\n</ul>\n<p><strong>例子：</strong><br><strong>1.授权远程用户root通过Navicat，远程管理数据库。</strong><br><code>grant all on *.* to root@&#39;172.16.1.%&#39; identified by &#39;123&#39;;</code></p>\n<p><strong>2.授权zhihu用户远程连接zhihu库 并给all权限</strong><br><code>grant select,update,delete,insert on zhihu.* to zhihu@&#39;10.0.0.%&#39; identified by &#39;123&#39;;</code></p>\n<p><strong>思考一个问题：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">执行顺序：</span><br><span class=\"line\">1. grant select,update on *.* to oldboy@<span class=\"string\">&#x27;10.0.0.%&#x27;</span>;</span><br><span class=\"line\">2. grant delete on wordpress.* to oldboy@<span class=\"string\">&#x27;10.0.0.%&#x27;</span>;</span><br><span class=\"line\">3. grant insert on wordpress.t1 to oldboy@<span class=\"string\">&#x27;10.0.0.%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>问:oldboy@’10.0.0.%’ 能对t1表具备什么权限？<br>答:MySQL中的权限是可以继承，多次授权是叠加的。<br>所以，想要取消某个权限，必须通过回收的方式实现，而不能多次重复授权。</p>\n<h5 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h5><p><code>mysql&gt; show grants for root@&#39;localhost&#39;;</code><br><strong>USAGE：空权限</strong><br><img src=\"/images/img-15.png\" alt=\"show grants\"><br><strong>上图表示：USAGE表示权限为空，只能连接到数据库不可对数据库进行操作</strong></p>\n<h5 id=\"超级管理员和普通管理员的区别：\"><a href=\"#超级管理员和普通管理员的区别：\" class=\"headerlink\" title=\"超级管理员和普通管理员的区别：\"></a>超级管理员和普通管理员的区别：</h5><p><code>sql结尾的with grant option</code></p>\n<p><img src=\"/images/img-16.png\" alt=\"普通用户&amp;超级管理员对比\"></p>\n<h5 id=\"权限回收\"><a href=\"#权限回收\" class=\"headerlink\" title=\"权限回收\"></a>权限回收</h5><p><code>mysql&gt; revoke delete on zhihu.* from &#39;zhihu&#39;@&#39;10.0.0.%&#39;;</code></p>\n<h4 id=\"MySQL-连接管理\"><a href=\"#MySQL-连接管理\" class=\"headerlink\" title=\"MySQL 连接管理\"></a>MySQL 连接管理</h4><h5 id=\"mysql命令：\"><a href=\"#mysql命令：\" class=\"headerlink\" title=\"mysql命令：\"></a>mysql命令：</h5><ul>\n<li>-u  用户名</li>\n<li>-p  密码</li>\n<li>-h  IP</li>\n<li>-P  端口</li>\n<li>-S  sock文件（配置文件中有路径）</li>\n<li>-e  非交互式运行sql语句</li>\n<li>&lt;  导入sql脚本</li>\n</ul>\n<p><strong>TCP/IP方式（远程、本地）：</strong><br><code>mysql -uroot -poldboy123 -h 10.0.0.51 -P3306</code><br><strong>Socket方式(仅本地)：</strong><br><code>mysql -uroot -poldboy123 -S /tmp/mysql.sock</code></p>\n<h5 id=\"远程的客户端工具\"><a href=\"#远程的客户端工具\" class=\"headerlink\" title=\"远程的客户端工具\"></a>远程的客户端工具</h5><p>Nvichat等</p>\n<h4 id=\"MySQL-启动管理\"><a href=\"#MySQL-启动管理\" class=\"headerlink\" title=\"MySQL 启动管理\"></a>MySQL 启动管理</h4><h5 id=\"辅助脚本方式（普通的启动关闭）：\"><a href=\"#辅助脚本方式（普通的启动关闭）：\" class=\"headerlink\" title=\"辅助脚本方式（普通的启动关闭）：\"></a>辅助脚本方式（普通的启动关闭）：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sys-v :/etc/init.d/mysqld</span><br><span class=\"line\"> start -&gt;/application/mysql/bin/mysqld_safe-&gt;/application/mysql/bin/mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">systemd :/etc/systemd/system/mysqld.service</span><br><span class=\"line\"> start -&gt;/application/mysql/bin/mysqld</span><br></pre></td></tr></table></figure>\n<h5 id=\"维护性的启动方式：\"><a href=\"#维护性的启动方式：\" class=\"headerlink\" title=\"维护性的启动方式：\"></a>维护性的启动方式：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/application/mysql/bin/mysqld_safe --skip-grant-tables --skip-networking &amp;</span><br><span class=\"line\">/application/mysql/bin/mysqld</span><br></pre></td></tr></table></figure>\n<h5 id=\"数据库启动验证\"><a href=\"#数据库启动验证\" class=\"headerlink\" title=\"数据库启动验证\"></a>数据库启动验证</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -lnp |grep 3306</span><br><span class=\"line\">ps -ef |grep mysqld</span><br></pre></td></tr></table></figure>\n<h3 id=\"MySQL-初始化配置\"><a href=\"#MySQL-初始化配置\" class=\"headerlink\" title=\"MySQL 初始化配置\"></a>MySQL 初始化配置</h3><h4 id=\"预编译时进行设置：只能在编译安装中实现，硬编码配置到程序中。\"><a href=\"#预编译时进行设置：只能在编译安装中实现，硬编码配置到程序中。\" class=\"headerlink\" title=\"预编译时进行设置：只能在编译安装中实现，硬编码配置到程序中。\"></a>预编译时进行设置：只能在编译安装中实现，硬编码配置到程序中。</h4><h4 id=\"初始化配置文件-my-cnf\"><a href=\"#初始化配置文件-my-cnf\" class=\"headerlink\" title=\"初始化配置文件(my.cnf)\"></a>初始化配置文件(my.cnf)</h4><h5 id=\"初始化配置文件默认读取位置\"><a href=\"#初始化配置文件默认读取位置\" class=\"headerlink\" title=\"初始化配置文件默认读取位置\"></a>初始化配置文件默认读取位置</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqld --help --verbose |grep &quot;my.cnf&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#配置文件读取顺序，后读取的会覆盖前面的配置。</span></span><br><span class=\"line\">/etc/my.cnf --&gt; /etc/mysql/my.cnf --&gt; /usr/local/mysql/etc/my.cnf --&gt; ~/.my.cnf</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"命令行模式\"><a href=\"#命令行模式\" class=\"headerlink\" title=\"命令行模式\"></a>命令行模式</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqld_safe --defaults-file=/opt/my.cnf --socket=/tmp/asdad &amp;</span></span><br><span class=\"line\">--defaults-file=/opt/my.cnf   <span class=\"comment\">#人为强制指定配置默认位置</span></span><br><span class=\"line\">例如：</span><br><span class=\"line\">mysqld_safe  --defaults-file=/opt/my.cnf </span><br><span class=\"line\">mysqld</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置生效优先级：命令行指定-gt-默认位置-gt-预编译\"><a href=\"#配置生效优先级：命令行指定-gt-默认位置-gt-预编译\" class=\"headerlink\" title=\"配置生效优先级：命令行指定&gt;默认位置&gt;预编译\"></a>配置生效优先级：命令行指定&gt;默认位置&gt;预编译</h5><h4 id=\"配置文件书写格式\"><a href=\"#配置文件书写格式\" class=\"headerlink\" title=\"配置文件书写格式\"></a>配置文件书写格式</h4><h5 id=\"初始化配置文件应用\"><a href=\"#初始化配置文件应用\" class=\"headerlink\" title=\"初始化配置文件应用\"></a>初始化配置文件应用</h5><h5 id=\"配置文件的作用\"><a href=\"#配置文件的作用\" class=\"headerlink\" title=\"配置文件的作用\"></a>配置文件的作用</h5><ul>\n<li>数据库的启动：mysqld  mysqld_safe    </li>\n<li>客户端的连接：mysql  mysqldump  mysqladmin <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[程序名]</span><br><span class=\"line\">配置项=xxx</span><br><span class=\"line\">配置项=xxx</span><br><span class=\"line\">配置项=xxx</span><br><span class=\"line\">配置项=xxx</span><br><span class=\"line\"></span><br><span class=\"line\">服务端</span><br><span class=\"line\">[server]  &lt;==</span><br><span class=\"line\">[mysqld]  &lt;==服务端参数可写在这个标签下</span><br><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\"></span><br><span class=\"line\">客户端 </span><br><span class=\"line\">[client]  &lt;==客户端软件中通用的参数写在该标签下</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">[mysqldump]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"mysql初始化配置常用参数-通用模板\"><a href=\"#mysql初始化配置常用参数-通用模板\" class=\"headerlink\" title=\"mysql初始化配置常用参数(通用模板)\"></a>mysql初始化配置常用参数(通用模板)</h5><p>参考：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/option-files.html\">https://dev.mysql.com/doc/refman/5.7/en/option-files.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]<span class=\"comment\">#服务器端</span></span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">basedir=/application/mysql</span><br><span class=\"line\">datadir=/data/mysql/data </span><br><span class=\"line\">socket=/tmp/mysql.sock </span><br><span class=\"line\">server_id=6  <span class=\"comment\">#大于1，主从复制的节点</span></span><br><span class=\"line\">port=3306</span><br><span class=\"line\">log_error=/data/mysql/data/mysql.log </span><br><span class=\"line\">log_bin=/data/mysql/data/mysql-bin <span class=\"comment\">#二进制日志，备份恢复主从复制的日志</span></span><br><span class=\"line\">[mysql]<span class=\"comment\">#客户端</span></span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure>\n","categories":["DBA"],"tags":["MySQL"]},{"title":"MySQL-日志管理[slowlog慢日志]","url":"/forward/62bf20bb.html","content":"<h3 id=\"优化相关日志-slowlog\"><a href=\"#优化相关日志-slowlog\" class=\"headerlink\" title=\"优化相关日志-slowlog\"></a>优化相关日志-slowlog</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li><strong>记录慢SQL语句的日志,定位低效SQL语句的工具日志</strong></li>\n</ul>\n<h4 id=\"开启慢日志\"><a href=\"#开启慢日志\" class=\"headerlink\" title=\"开启慢日志\"></a>开启慢日志</h4><ul>\n<li>开关:<ul>\n<li><code>slow_query_log=1 </code></li>\n</ul>\n</li>\n<li>文件位置及名字 <ul>\n<li><code>slow_query_log_file=/data/mysql/slow.log</code></li>\n</ul>\n</li>\n<li>设定慢查询时间:<ul>\n<li><code>long_query_time=0.1</code></li>\n</ul>\n</li>\n<li>没走索引的语句也记录:<ul>\n<li><code>log_queries_not_using_indexes</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"慢日志默认位置\"><a href=\"#慢日志默认位置\" class=\"headerlink\" title=\"慢日志默认位置:\"></a>慢日志默认位置:</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@slow_query_log_file;</span><br><span class=\"line\">+-------------------------------+</span><br><span class=\"line\">| @@slow_query_log_file         |</span><br><span class=\"line\">+-------------------------------+</span><br><span class=\"line\">| /data/3307/data/db01-slow.log |</span><br><span class=\"line\">+-------------------------------+</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"慢日志记录容忍度：\"><a href=\"#慢日志记录容忍度：\" class=\"headerlink\" title=\"慢日志记录容忍度：\"></a>慢日志记录容忍度：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@long_query_time;</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">| @@long_query_time |</span><br><span class=\"line\">+-------------------+</span><br><span class=\"line\">|         10.000000 |</span><br><span class=\"line\">+-------------------+</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"慢日志配置参数：\"><a href=\"#慢日志配置参数：\" class=\"headerlink\" title=\"慢日志配置参数：\"></a>慢日志配置参数：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /data/3307/my.cnf</span><br><span class=\"line\">slow_query_log=1 <span class=\"comment\">#开启慢日志开关</span></span><br><span class=\"line\">slow_query_log_file=/data/3307/slow.log  <span class=\"comment\">#定义日志位置和名字</span></span><br><span class=\"line\">long_query_time=0.1  <span class=\"comment\">#定义慢查询时间阈值，超过0.1s的语句记录慢日志</span></span><br><span class=\"line\">log_queries_not_using_indexes <span class=\"comment\">#没走索引的查询，记录慢日志</span></span><br><span class=\"line\"></span><br><span class=\"line\">重启mysql生效：</span><br><span class=\"line\"></span><br><span class=\"line\">进入数据库：查看参数是否生效</span><br><span class=\"line\">mysql&gt; show variables like <span class=\"string\">&#x27;long_query_time&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模拟慢日志\"><a href=\"#模拟慢日志\" class=\"headerlink\" title=\"模拟慢日志\"></a>模拟慢日志</h4><p>模拟慢查询语句<br><code>create table city1 select * from city; </code><br>把city表查询到的数据导入到新创建的city1里面，去查看slow.log 会发现里面有这条的记录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table city2 select * from city;</span><br><span class=\"line\">ERROR 1786 (HY000): Statement violates GTID consistency: CREATE TABLE ... SELECT.</span><br><span class=\"line\">原因：</span><br><span class=\"line\">enforce_gtid_consistency=<span class=\"literal\">true</span> 功能导致的，MySQL官方解释说当启用 enforce_gtid_consistency 功能的时候，MySQL只允许能够保障事务安全，并且能够被日志记录的SQL语句被执行，像create table … select 和 create temporarytable语句，以及同时更新事务表和非事务表的SQL语句或事务都不允许执行。</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法：</span><br><span class=\"line\">    1.方法一（推荐）：</span><br><span class=\"line\">        修改 ：SET @@GLOBAL.ENFORCE_GTID_CONSISTENCY = off;</span><br><span class=\"line\">        配置文件中 ：ENFORCE_GTID_CONSISTENCY = off;</span><br><span class=\"line\"></span><br><span class=\"line\">    2.方法二：</span><br><span class=\"line\">        create table xxx as select <span class=\"comment\">#的方式会拆分成两部分。</span></span><br><span class=\"line\">        create table city1 like city;</span><br><span class=\"line\">        insert into city1 select * from city;</span><br><span class=\"line\">结果：</span><br><span class=\"line\">mysql&gt; select COUNT(*) from city1;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| COUNT(*) |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">|     4079 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select COUNT(*) from city;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| COUNT(*) |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">|     4079 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">insert into city1(Name,CountryCode,District,Population) select name,countrycode,district,population from city;</span><br><span class=\"line\">insert into city1(Name,CountryCode,District,Population) select name,countrycode,district,population from city;</span><br><span class=\"line\">insert into city1(Name,CountryCode,District,Population) select name,countrycode,district,population from city;</span><br><span class=\"line\">insert into city1(Name,CountryCode,District,Population) select name,countrycode,district,population from city;</span><br><span class=\"line\">commit; </span><br><span class=\"line\">mysql&gt; select COUNT(*) from city1;       </span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| COUNT(*) |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">|    20395 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>（我在配置文件里面关闭了自动事务提交，所以这边需要执行手动commit）.去查看slow.log 会发现里面有这条的记录</p>\n<p>删除索引：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW CREATE TABLE city; //检查外键</span><br><span class=\"line\">CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; alter table city drop foreign key city_ibfk_1;  //删除外键</span><br><span class=\"line\">mysql&gt; SHOW CREATE TABLE city1;</span><br><span class=\"line\">+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Table | Create Table                                                                                                                                                                                                                                                                                                                |</span><br><span class=\"line\">+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| city1 | CREATE TABLE `city1` (</span><br><span class=\"line\">  `ID` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `Name` char(35) NOT NULL DEFAULT <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  `CountryCode` char(3) NOT NULL DEFAULT <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  `District` char(20) NOT NULL DEFAULT <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  `Population` int(11) NOT NULL DEFAULT <span class=\"string\">&#x27;0&#x27;</span>,</span><br><span class=\"line\">  PRIMARY KEY (`ID`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=20460 DEFAULT CHARSET=latin1 |</span><br><span class=\"line\">+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; alter table city drop index CountryCode; //删除辅助索引</span><br></pre></td></tr></table></figure>\n\n<p>一堆查询:where条件 慢足countrycode=’CHN’ 和 name=’shanghai’;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from city1 <span class=\"built_in\">where</span> countrycode=<span class=\"string\">&#x27;CHN&#x27;</span> and name=<span class=\"string\">&#x27;shanghai&#x27;</span>;</span><br><span class=\"line\">select * from city1 <span class=\"built_in\">where</span> countrycode=<span class=\"string\">&#x27;CHN&#x27;</span> and name=<span class=\"string\">&#x27;shanghai&#x27;</span>;</span><br><span class=\"line\">select * from city1 <span class=\"built_in\">where</span> countrycode=<span class=\"string\">&#x27;CHN&#x27;</span> and name=<span class=\"string\">&#x27;shanghai&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>因为没有索引，走的是全表扫描查询。所以耗时会长，表越大查询越慢</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc select * from city1 <span class=\"built_in\">where</span> countrycode=<span class=\"string\">&#x27;CHN&#x27;</span> and name=<span class=\"string\">&#x27;anqing&#x27;</span>;</span><br><span class=\"line\">+----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+-------------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | select_type | table | partitions | <span class=\"built_in\">type</span> | possible_keys | key  | key_len | ref  | rows  | filtered | Extra       |</span><br><span class=\"line\">+----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+-------------+</span><br><span class=\"line\">|  1 | SIMPLE      | city1 | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 20406 |     1.00 | Using <span class=\"built_in\">where</span> |</span><br><span class=\"line\">+----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+-------------+</span><br></pre></td></tr></table></figure>\n<p>我们添加一下索引：<br><code>alter table city1 add index idx(countrycode,name);</code><br>在查询会发现快很多很多。<br><code>select * from city1 where countrycode=&#39;CHN&#39; and name=&#39;shanghai&#39;;</code><br>查看详细的查询信息：是否走索引了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc select * from city1 <span class=\"built_in\">where</span> countrycode=<span class=\"string\">&#x27;CHN&#x27;</span> and name=<span class=\"string\">&#x27;anqing&#x27;</span>;</span><br><span class=\"line\">+----+-------------+-------+------------+------+---------------+------+---------+-------------+------+----------+-------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | select_type | table | partitions | <span class=\"built_in\">type</span> | possible_keys | key  | key_len | ref         | rows | filtered | Extra |</span><br><span class=\"line\">+----+-------------+-------+------------+------+---------------+------+---------+-------------+------+----------+-------+</span><br><span class=\"line\">|  1 | SIMPLE      | city1 | NULL       | ref  | idx           | idx  | 38      | const,const |    5 |   100.00 | NULL  |</span><br><span class=\"line\">+----+-------------+-------+------------+------+---------------+------+---------+-------------+------+----------+-------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mysqldumpslow-分析慢日志\"><a href=\"#mysqldumpslow-分析慢日志\" class=\"headerlink\" title=\"mysqldumpslow 分析慢日志\"></a>mysqldumpslow 分析慢日志</h4><p>慢日志分析命令：mysqldumpslow</p>\n<ul>\n<li>参数：<ul>\n<li> -s：按照那种方式排序</li>\n<li> -c：访问计数</li>\n<li> -t：降序，取前10</li>\n<li> -al：平均锁定时间</li>\n<li> -ar：平均访问记录数</li>\n<li> -at：平均查询时间</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqldumpslow -s c -t 3 /data/3307/slow.log </span></span><br><span class=\"line\"></span><br><span class=\"line\">Reading mysql slow query <span class=\"built_in\">log</span> from /data/3307/slow.log</span><br><span class=\"line\">执行次数 Count: 4  执行时间Time=0.03s (0s)  锁定时间Lock=0.00s (0s)  发送行数Rows=0.0 (0), 执行地址root[root]@db01</span><br><span class=\"line\">  内容：insert into city1(Name,CountryCode,District,Population) select name,countrycode,district,population from city</span><br><span class=\"line\"></span><br><span class=\"line\">Count: 3  Time=0.01s (0s)  Lock=0.00s (0s)  Rows=3.3 (10), root[root]@db01</span><br><span class=\"line\">  select * from city1 <span class=\"built_in\">where</span> countrycode=<span class=\"string\">&#x27;S&#x27;</span> and name=<span class=\"string\">&#x27;S&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Count: 1  Time=0.05s (0s)  Lock=0.00s (0s)  Rows=0.0 (0), root[root]@db01</span><br><span class=\"line\">  insert into city1 select *from city</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三方工具-自己扩展\"><a href=\"#第三方工具-自己扩展\" class=\"headerlink\" title=\"第三方工具(自己扩展)\"></a>第三方工具(自己扩展)</h4><ul>\n<li><p>pt-query-diagest<br><a href=\"https://www.percona.com/downloads/percona-toolkit/LATEST/\">https://www.percona.com/downloads/percona-toolkit/LATEST/</a><br>yum install perl-DBI perl-DBD-MySQL perl-Time-HiRes perl-IO-Socket-SSL perl-Digest-MD5<br>toolkit工具包中的命令:<br>./pt-query-diagest  /data/mysql/slow.log</p>\n</li>\n<li><p>Anemometer基于pt-query-digest将MySQL慢查询可视化</p>\n</li>\n</ul>\n<hr>\n<p>附上/data/3307/my.cnf 目前配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/application/mysql  <span class=\"comment\">#软件目录</span></span><br><span class=\"line\">datadir=/data/3307/data  <span class=\"comment\">#本实例数据目录</span></span><br><span class=\"line\">socket=/data/3307/mysql.sock <span class=\"comment\">#本实例socket文件</span></span><br><span class=\"line\">log_error=/data/3307/mysql.log <span class=\"comment\">#数据库日志</span></span><br><span class=\"line\">port=3307</span><br><span class=\"line\">server_id=7</span><br><span class=\"line\">log_bin=/data/3307/mysql-bin <span class=\"comment\">#二进制日志前缀</span></span><br><span class=\"line\">autocommit=0 <span class=\"comment\">#关闭事务自动提交</span></span><br><span class=\"line\">secure-file-priv=/tmp <span class=\"comment\">#导出文件安全路径</span></span><br><span class=\"line\">innodb_flush_log_at_trx_commit=1  <span class=\"comment\"># 每次事务提交，都会立即刷写redo到磁盘</span></span><br><span class=\"line\">innodb_flush_method=O_DIRECT <span class=\"comment\">#（必须大写），控制mysql数据脏页直接刷写到磁盘。redo依然会走操作系统缓存</span></span><br><span class=\"line\">gtid-mode=on <span class=\"comment\">#开启gtid</span></span><br><span class=\"line\">enforce-gtid-consistency=<span class=\"literal\">true</span></span><br><span class=\"line\">slow_query_log=1 <span class=\"comment\">#打开慢日志</span></span><br><span class=\"line\">slow_query_log_file=/data/3307/slow.log</span><br><span class=\"line\">long_query_time=0.1 <span class=\"comment\">#慢日志记录阀值</span></span><br><span class=\"line\">log_queries_not_using_indexes <span class=\"comment\">#记录不走索引语句</span></span><br></pre></td></tr></table></figure>\n","categories":["DBA"],"tags":["MySQL","日志管理"]},{"title":"MySQL安装及初始化配置","url":"/forward/a7fae6f0.html","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"解压软件\"><a href=\"#解压软件\" class=\"headerlink\" title=\"解压软件\"></a>解压软件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /server/tools]<span class=\"comment\"># yum  install  -y  ncurses-devel libaio-devel #安装依赖</span></span><br><span class=\"line\">[root@db02 /server/tools]<span class=\"comment\"># mkdir /application/  #规范安装目录</span></span><br><span class=\"line\">[root@db02 /server/tools]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 629756</span><br><span class=\"line\">-rw-r--r-- 1 root root 644869837 11月 28 11:51 mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz</span><br><span class=\"line\">[root@db02 /server/tools]<span class=\"comment\"># tar -xf mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz  -C /application/</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"处理mariadb\"><a href=\"#处理mariadb\" class=\"headerlink\" title=\"处理mariadb\"></a>处理mariadb</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># rpm -qa |grep mariadb</span></span><br><span class=\"line\">mariadb-libs-5.5.60-1.el7_5.x86_64  <span class=\"comment\">#mariadb的配置文件(/etc/my.cnf)会影响刚才安装的mysql的初始化操作</span></span><br><span class=\"line\">rpm -e --nodeps mariadb-libs <span class=\"comment\">#忽略依赖并卸载，或者yum卸载会一并移除postfix软件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /server/tools]<span class=\"comment\"># cd /application/</span></span><br><span class=\"line\">[root@db02 /application]<span class=\"comment\"># ln -s mysql-5.7.26-linux-glibc2.12-x86_64/ mysql</span></span><br><span class=\"line\">[root@db02 /application]<span class=\"comment\"># ll</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root  36 12月 16 22:45 mysql -&gt; mysql-5.7.26-linux-glibc2.12-x86_64/</span><br><span class=\"line\">drwxr-xr-x 9 root root 129 12月 16 22:42 mysql-5.7.26-linux-glibc2.12-x86_64</span><br><span class=\"line\">[root@db02 /application]<span class=\"comment\"># useradd mysql -s /sbin/nologin -M</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application]<span class=\"comment\"># echo &quot;export PATH=/application/mysql/bin:$PATH&quot; &gt;&gt;/etc/bashrc</span></span><br><span class=\"line\">[root@db02 /application]<span class=\"comment\"># . /etc/bashrc</span></span><br><span class=\"line\">[root@db02 /application]<span class=\"comment\"># mysql -V</span></span><br><span class=\"line\">mysql  Ver 14.14 Distrib 5.7.26, <span class=\"keyword\">for</span> linux-glibc2.12 (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建数据目录并授权（生产环境拿新磁盘，和系统盘独立开来）\"><a href=\"#创建数据目录并授权（生产环境拿新磁盘，和系统盘独立开来）\" class=\"headerlink\" title=\"创建数据目录并授权（生产环境拿新磁盘，和系统盘独立开来）\"></a>创建数据目录并授权（生产环境拿新磁盘，和系统盘独立开来）</h3><p><strong>姿势</strong>：<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /sys/class/scsi_host/ </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;- - -&quot;</span> &gt; host0/scan  <span class=\"comment\">#接口扫描</span></span><br><span class=\"line\">fdisk -l  <span class=\"comment\">#不重启发现新磁盘</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"添加一块数据盘\"><a href=\"#添加一块数据盘\" class=\"headerlink\" title=\"添加一块数据盘\"></a>添加一块数据盘</h4><p><img src=\"/images/img-2.png\" alt=\"fdisk\"></p>\n<h4 id=\"格式化数据盘\"><a href=\"#格式化数据盘\" class=\"headerlink\" title=\"格式化数据盘\"></a>格式化数据盘</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># fdisk /dev/sdb</span></span><br><span class=\"line\">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class=\"line\"></span><br><span class=\"line\">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class=\"line\">使用写入命令前请三思。</span><br><span class=\"line\"></span><br><span class=\"line\">Device does not contain a recognized partition table</span><br><span class=\"line\">使用磁盘标识符 0xd6bae412 创建新的 DOS 磁盘标签。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n   <span class=\"comment\">#新建分区</span></span><br><span class=\"line\">Partition <span class=\"built_in\">type</span>:</span><br><span class=\"line\">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default p): p  <span class=\"comment\">#选择主分区</span></span><br><span class=\"line\">分区号 (1-4，默认 1)：</span><br><span class=\"line\">起始 扇区 (2048-10485759，默认为 2048)：</span><br><span class=\"line\">将使用默认值 2048</span><br><span class=\"line\">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-10485759，默认为 10485759)：</span><br><span class=\"line\">将使用默认值 10485759</span><br><span class=\"line\">分区 1 已设置为 Linux 类型，大小设为 5 GiB</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：w  <span class=\"comment\">#写入分区表</span></span><br><span class=\"line\">The partition table has been altered!</span><br><span class=\"line\"></span><br><span class=\"line\">Calling ioctl() to re-read partition table.</span><br><span class=\"line\">正在同步磁盘。</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mkfs.xfs /dev/sdb1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mkdir /data</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># blkid</span></span><br><span class=\"line\">/dev/sdb1: UUID=<span class=\"string\">&quot;3d7298e5-a1fd-4104-9d9d-2fba28f277cc&quot;</span> TYPE=<span class=\"string\">&quot;xfs&quot;</span> </span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/img-4.png\" alt=\"mount\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mount -a</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># df -Th</span></span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sdb1      xfs       5.0G   33M  5.0G    1% /data</span><br><span class=\"line\">[root@db02 /application]<span class=\"comment\"># mkdir /data/mysql/data -p  &lt;==数据存放目录</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"授权目录\"><a href=\"#授权目录\" class=\"headerlink\" title=\"授权目录\"></a>授权目录</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application]<span class=\"comment\"># chown -R  mysql:mysql /application/mysql*</span></span><br><span class=\"line\">[root@db02 /application]<span class=\"comment\"># chown -R  mysql:mysql /data/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化数据（创建mysql系统数据）\"><a href=\"#初始化数据（创建mysql系统数据）\" class=\"headerlink\" title=\"初始化数据（创建mysql系统数据）\"></a>初始化数据（创建mysql系统数据）</h2><p><strong># 5.6 版本 初始化命令  /application/mysql/scripts/mysql_install_db</strong><br><strong># 5.7 版本</strong></p>\n<h3 id=\"方法1：\"><a href=\"#方法1：\" class=\"headerlink\" title=\"方法1：\"></a>方法1：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application]<span class=\"comment\"># mysqld --initialize --user=mysql --basedir=/application/mysql --datadir=/data/mysql/data</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p><strong>--initialize 参数：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 对于密码复杂度进行定制：12位，4种 </span><br><span class=\"line\">2. 密码过期时间：180</span><br><span class=\"line\">3. 给root@localhost用户设置临时密码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错:\"></a>报错:</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld: error <span class=\"keyword\">while</span> loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决：\"><a href=\"#解决：\" class=\"headerlink\" title=\"解决：\"></a>解决：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># yum install -y libaio-devel</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2019-12-16T15:37:25.272146Z 1 [Note] A temporary password is generated for root@localhost: AwaiCPhhi1&amp;Z  &lt;==自动设置密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法2（生产环境使用）：\"><a href=\"#方法2（生产环境使用）：\" class=\"headerlink\" title=\"方法2（生产环境使用）：\"></a>方法2（生产环境使用）：</h3><p><strong>--initialize-insecure 参数：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">无限制，无临时密码</span><br></pre></td></tr></table></figure>\n<h4 id=\"清除方法1生成的初始化文件：\"><a href=\"#清除方法1生成的初始化文件：\" class=\"headerlink\" title=\"清除方法1生成的初始化文件：\"></a>清除方法1生成的初始化文件：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"built_in\">rm</span> -rf /data/mysql/data/*</span><br><span class=\"line\">[root@db02 /application]<span class=\"comment\">#  mysqld --initialize-insecure --user=mysql --basedir=/application/mysql --datadir=/data/mysql/data  #重新执行初始化</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"结果：-1\"><a href=\"#结果：-1\" class=\"headerlink\" title=\"结果：\"></a>结果：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">2019-12-16T16:00:18.247724Z 1 [Warning] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动数据库\"><a href=\"#启动数据库\" class=\"headerlink\" title=\"启动数据库\"></a>启动数据库</h2><h3 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application]<span class=\"comment\"># cat &gt;/etc/my.cnf &lt;&lt;&#x27;EOF&#x27;</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">basedir=/application/mysql <span class=\"comment\">#mysql安装目录</span></span><br><span class=\"line\">datadir=/data/mysql/data <span class=\"comment\">#mysql系统目录</span></span><br><span class=\"line\">socket=/tmp/mysql.sock <span class=\"comment\">#sock文件目录</span></span><br><span class=\"line\">server_id=6</span><br><span class=\"line\">port=3306 <span class=\"comment\">#端口号</span></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动脚本\"><a href=\"#启动脚本\" class=\"headerlink\" title=\"启动脚本\"></a>启动脚本</h2><h3 id=\"mysql自带启动脚本-C6-：\"><a href=\"#mysql自带启动脚本-C6-：\" class=\"headerlink\" title=\"mysql自带启动脚本(C6)：\"></a>mysql自带启动脚本(C6)：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application]<span class=\"comment\"># cd /application/mysql/support-files/</span></span><br><span class=\"line\">[root@db02 /application/mysql/support-files]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 24</span><br><span class=\"line\">-rw-r--r-- 1 mysql mysql   773 4月  13 2019 magic</span><br><span class=\"line\">-rwxr-xr-x 1 mysql mysql  1061 4月  13 2019 mysqld_multi.server</span><br><span class=\"line\">-rwxr-xr-x 1 mysql mysql   894 4月  13 2019 mysql-log-rotate</span><br><span class=\"line\">-rwxr-xr-x 1 mysql mysql 10576 4月  13 2019 mysql.server</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动命令：\"><a href=\"#启动命令：\" class=\"headerlink\" title=\"启动命令：\"></a>启动命令：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application/mysql/support-files]<span class=\"comment\"># ./mysql.server start</span></span><br><span class=\"line\">Starting MySQL.Logging to <span class=\"string\">&#x27;/data/mysql/data/db02.err&#x27;</span>.</span><br><span class=\"line\">. SUCCESS! </span><br><span class=\"line\">[root@db02 /application/mysql/support-files]<span class=\"comment\"># ./mysql.server stop</span></span><br><span class=\"line\">Shutting down MySQL.. SUCCESS! </span><br><span class=\"line\">[root@db02 /application/mysql/support-files]<span class=\"comment\"># ./mysql.server restart</span></span><br><span class=\"line\"> ERROR! MySQL server PID file could not be found!</span><br><span class=\"line\">Starting MySQL. SUCCESS! </span><br><span class=\"line\">[root@db02 /application/mysql/support-files]<span class=\"comment\"># ./mysql.server status</span></span><br><span class=\"line\"> SUCCESS! MySQL running (1526)</span><br></pre></td></tr></table></figure>\n<h4 id=\"sys-v方式启动：\"><a href=\"#sys-v方式启动：\" class=\"headerlink\" title=\"sys-v方式启动：\"></a>sys-v方式启动：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /etc/init.d]<span class=\"comment\"># cp /application/mysql/support-files/mysql.server /etc/init.d/mysqld</span></span><br><span class=\"line\">[root@db02 /etc/init.d]<span class=\"comment\"># service mysqld restart</span></span><br><span class=\"line\">Shutting down MySQL.. SUCCESS! </span><br><span class=\"line\">Starting MySQL. SUCCESS! </span><br></pre></td></tr></table></figure>\n<h3 id=\"systemd启动（C7）\"><a href=\"#systemd启动（C7）\" class=\"headerlink\" title=\"systemd启动（C7）\"></a>systemd启动（C7）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemd方式启动：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># service mysqld stop  &lt;==停止mysql服务器</span></span><br><span class=\"line\">Shutting down MySQL.. SUCCESS!</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/systemd/system/mysqld.service &lt;&lt;<span class=\"string\">EOF   &lt;==编辑systemd启动脚本</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=MySQL Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=man:mysqld(8)</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">User=mysql</span></span><br><span class=\"line\"><span class=\"string\">Group=mysql</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/etc/my.cnf  #按照需求，修改软件安装位置。其他不需要改</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE = 5000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># systemctl restart mysqld   &lt;==启动服务</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># netstat -nltup | grep mysqld  #此时只允许本地登录</span></span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN      1385/mysqld</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何分析处理MySQL数据库无法启动\"><a href=\"#如何分析处理MySQL数据库无法启动\" class=\"headerlink\" title=\"如何分析处理MySQL数据库无法启动\"></a>如何分析处理MySQL数据库无法启动</h2><h3 id=\"without-updating-PID-类似错误\"><a href=\"#without-updating-PID-类似错误\" class=\"headerlink\" title=\"without updating PID 类似错误\"></a>without updating PID 类似错误</h3><h4 id=\"查看日志：\"><a href=\"#查看日志：\" class=\"headerlink\" title=\"查看日志：\"></a>查看日志：</h4><ul>\n<li><strong>在哪？</strong></li>\n<li><strong>/data/mysql/data/主机名.err</strong></li>\n<li><strong>[ERROR] 上下文</strong></li>\n</ul>\n<h4 id=\"可能情况：\"><a href=\"#可能情况：\" class=\"headerlink\" title=\"可能情况：\"></a>可能情况：</h4><ul>\n<li><strong>/etc/my.cnf 路径不对等</strong></li>\n<li><strong>/tmp/mysql.sock文件修改过 或 删除过</strong></li>\n<li><strong>数据目录权限不是mysql</strong></li>\n<li><strong>参数改错了</strong></li>\n</ul>\n<h2 id=\"修改密码：\"><a href=\"#修改密码：\" class=\"headerlink\" title=\"修改密码：\"></a>修改密码：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mysqladmin -u root -p原来的密码 password 591740</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">mysqladmin: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\">Warning: Since password will be sent to server <span class=\"keyword\">in</span> plain text, use ssl connection to ensure password safety.  &lt;==警告：你的密码不安全，让人看见了都。</span><br></pre></td></tr></table></figure>\n<h2 id=\"忘记密码：\"><a href=\"#忘记密码：\" class=\"headerlink\" title=\"忘记密码：\"></a>忘记密码：</h2><h3 id=\"关闭数据库\"><a href=\"#关闭数据库\" class=\"headerlink\" title=\"关闭数据库\"></a>关闭数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -ef | grep mysqld</span></span><br><span class=\"line\">mysql      1942      1  0 16:51 ?        00:00:01 /application/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class=\"line\">root       2019   1309  0 17:14 pts/0    00:00:00 grep --color=auto mysqld</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># systemctl stop mysqld</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># lsof -i :3306</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动数据库到维护模式\"><a href=\"#启动数据库到维护模式\" class=\"headerlink\" title=\"启动数据库到维护模式\"></a>启动数据库到维护模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mysqld_safe --skip-grant-tables --skip-networking &amp;</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mysql</span></span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection <span class=\"built_in\">id</span> is 2</span><br><span class=\"line\">Server version: 5.7.26 MySQL Community Server (GPL)</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">&#x27;help;&#x27;</span> or <span class=\"string\">&#x27;\\h&#x27;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">&#x27;\\c&#x27;</span> to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; alter user root@<span class=\"string\">&#x27;localhost&#x27;</span> identified by <span class=\"string\">&#x27;1&#x27;</span>;  <span class=\"comment\">#维护模式不允许执行此命令</span></span><br><span class=\"line\">ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement</span><br><span class=\"line\">mysql&gt; flush privileges;  <span class=\"comment\">#刷新权限</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; alter user root@<span class=\"string\">&#x27;localhost&#x27;</span> identified by <span class=\"string\">&#x27;1&#x27;</span>;  <span class=\"comment\">#执行成功</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭数据库，并正常启动。\"><a href=\"#关闭数据库，并正常启动。\" class=\"headerlink\" title=\"关闭数据库，并正常启动。\"></a>关闭数据库，并正常启动。</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># systemctl restart mysqld</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mysql -u root -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection <span class=\"built_in\">id</span> is 3</span><br><span class=\"line\">Server version: 5.7.26 MySQL Community Server (GPL)</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">&#x27;help;&#x27;</span> or <span class=\"string\">&#x27;\\h&#x27;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">&#x27;\\c&#x27;</span> to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; </span><br><span class=\"line\">mysql&gt; ^DBye</span><br></pre></td></tr></table></figure>\n","categories":["DBA"],"tags":["MySQL"]},{"title":"PAM认证机制","url":"/forward/36cbf320.html","content":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p><strong>PAM:Pluggable Authentication Modules</strong><br><strong>认证库：文本文件，MySQL，NIS，LDAP等</strong></p>\n<ul>\n<li>Sun公司于1995 年开发的一种与<strong>认证相关的通用框架机制</strong></li>\n<li>PAM 是关注如何为服务验证用户的 API，通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开</li>\n<li>使得管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序</li>\n<li>一种认证框架，自身不做认证</li>\n<li>它提供了对所有服务进行认证的中央机制，适用于本地登录，远程登录，如：telnet,rlogin,fsh,ftp,点对点协议PPP，su等应用程序中，系统管理员<strong>通过PAM配置文件来制定不同应用程序的不同认证策略；</strong>应用程序开发者通过在服务程序中使用PAM API(pam_xxxx( ))来实现对认证方法的调用；而PAM服务模块的开发者则利用PAM SPI来编写模块（主要调用函数pam_sm_xxxx( )供PAM接口库调用，将不同的认证机制加入到系统中；PAM接口库（libpam）则读取配置文件，将应用程序和相应的PAM服务模块联系起来</li>\n</ul>\n<h4 id=\"PAM架构\"><a href=\"#PAM架构\" class=\"headerlink\" title=\"PAM架构\"></a>PAM架构</h4><p><img src=\"/images/img-18.png\" alt=\"PAM架构\"></p>\n<h4 id=\"pam认证原理\"><a href=\"#pam认证原理\" class=\"headerlink\" title=\"pam认证原理\"></a>pam认证原理</h4><p><strong>PAM认证一般遵循这样的顺序：</strong> </p>\n<ul>\n<li>Service(服务)→PAM(配置文件)→pam_*.so<br>PAM认证首先要确定那一项服务，然后加载相应的PAM的配置文件(位于<code>/etc/pam.d</code>下)，最后调用同名的库文件实现控制</li>\n</ul>\n<p><img src=\"/images/img-19.png\" alt=\"认证过程\"></p>\n<h4 id=\"PAM认证机制\"><a href=\"#PAM认证机制\" class=\"headerlink\" title=\"PAM认证机制\"></a>PAM认证机制</h4><h5 id=\"PAM认证过程：\"><a href=\"#PAM认证过程：\" class=\"headerlink\" title=\"PAM认证过程：\"></a>PAM认证过程：</h5><p><strong>1.使用者执行<code>passwd</code>程序，并输入密码</strong><br><strong>2.passwd开始调用PAM模块，PAM模块会搜寻<code>passwd</code>程序的PAM相关设置文件，这个设置文件一般是在<code>/etc/pam.d/</code>里边的与程序同名的文件，即PAM会搜寻<code>/etc/pam.d/pam_unix_passwd.so</code>此设置文件</strong><br><strong>3.经由<code>/etc/pam.d/pam_unix_passwd.so</code>设定文件的数据，取用PAM所提供的相关模块来进行验证</strong><br><strong>4.将验证结果回传给<code>passwd</code>这个程序，而<code>passwd</code>这个程序会根据PAM回传的结果决定下一个动作</strong>（重新输入密码或者通过验证）</p>\n<p><img src=\"/images/img-20.png\" alt=\"PAN认证过程\"></p>\n<h4 id=\"PAM相关文件\"><a href=\"#PAM相关文件\" class=\"headerlink\" title=\"PAM相关文件\"></a>PAM相关文件</h4><ul>\n<li><strong>模块文件目录(库文件)：</strong><code>/lib64/security/*.so</code></li>\n<li><strong>为每种应用模块提供一个专用的配置文件(服务相关)：</strong><code>/etc/pam.d/APP_NAME</code></li>\n<li><strong>环境相关的设置(模块相关)：</strong><code>/etc/security/</code></li>\n<li><strong>主配置文件(通用配置)：</strong><code>/etc/pam.conf</code>，默认不存在</li>\n<li>*注意：**如<code>/etc/pam.d/</code>存在，<code>/etc/pam.conf</code>将失效</li>\n</ul>\n<h4 id=\"PAM的配置文件\"><a href=\"#PAM的配置文件\" class=\"headerlink\" title=\"PAM的配置文件\"></a>PAM的配置文件</h4><h5 id=\"（1）通用配置文件-etc-pam-conf格式\"><a href=\"#（1）通用配置文件-etc-pam-conf格式\" class=\"headerlink\" title=\"（1）通用配置文件/etc/pam.conf格式\"></a>（1）通用配置文件<code>/etc/pam.conf</code>格式</h5><p>application type control module-path arguments</p>\n<h5 id=\"（2）专用配置文件-etc-pam-d-格式\"><a href=\"#（2）专用配置文件-etc-pam-d-格式\" class=\"headerlink\" title=\"（2）专用配置文件/etc/pam.d/*格式\"></a>（2）专用配置文件<code>/etc/pam.d/*</code>格式</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">type</span> control module-path arguments</span><br></pre></td></tr></table></figure>\n<h5 id=\"（3）说明：\"><a href=\"#（3）说明：\" class=\"headerlink\" title=\"（3）说明：\"></a>（3）说明：</h5><ul>\n<li><p>服务名（<code>application</code>）</p>\n</li>\n<li><p><code>telnet、login、ftp</code>等，服务名字“<code>OTHER</code>”代表所有没有在该文件中明确配置的其它服务</p>\n</li>\n<li><p>模块类型（<code>module-type</code>）</p>\n</li>\n<li><p><code>Auth</code> 账号的认证和授权</p>\n</li>\n<li><p><code>Account</code> 与账号管理相关的非认证类的功能，如：</p>\n<ul>\n<li>用来限制/允许用户对某个服务的访问时间</li>\n<li>当前有效的系统资源(最多可以有多少个用户)</li>\n<li>限制用户的位置(例如：root用户只能从控制台登录)</li>\n</ul>\n</li>\n<li><p><code>Session</code> 用户获取到服务之前或使用服务完成之后需要进行一些附加的操作，如：</p>\n<ul>\n<li>记录打开/关闭数据的信息，监视目录等</li>\n</ul>\n</li>\n<li><p><code>Password</code> 用户修改密码时密码复杂度检查机制等功能</p>\n</li>\n<li><p><code>-type</code> 表示因为确实而不能加载的模块将不记录到系统日志，对于那些不总是安装在系统上的模块有用，相当于注释</p>\n</li>\n<li><p><code>control</code> PAM库该如何处理与该服务相关的PAM模块的成功或失败情况</p>\n</li>\n<li><p>例如，两个auth的认证配置。（检查它们之间的关系：与/或/非）</p>\n</li>\n<li><p>实现方式：简单/复杂</p>\n</li>\n<li><p>简单方式实现：一个关健词实现</p>\n<ul>\n<li><code>required</code> ：<strong>一票否决</strong>，表示本模块必须返回成功才能通过认证，但是如果该模块返回失败，失败结果也不会立即通知用户，而是要等到同一type中的所有模块全部执行完毕再将失败结果返回给应用程序，（类联合国五常）<ul>\n<li><strong>表示为必要条件</strong>，且只影响所在类型模块的认证控制。</li>\n<li>该类型认证成功：表示这一步成功</li>\n<li>该类型认证失败：表示整个认证失败，会向下继续认证但是已经失败（“<strong>相当于五常国家中 中国否决，其他国家继续表态，走过场</strong>”）<br><img src=\"/images/img-22.png\" alt=\"required\"></li>\n</ul>\n</li>\n<li><code>requisite</code> ：<strong>一票否决</strong>,和上面类似，只不过其一旦失败。直接将失败结果返回给用户（“<strong>相当于五常国家中 中国否决，其他国家不再表态。</strong>”）</li>\n<li><code>sufficient</code>一票通过，表明本模块返回成功则通过身份认证的要求，不必再执行同一type内的其它模块，但如果<strong>本模块返回失败可忽略</strong>，即为充分条件（“<strong>相当于一把手直接拍板</strong>”）<ul>\n<li>注意：如果前面存在一票否决控制参数已经失败，那么此条件就算满足也不会成功</li>\n<li>如果此行在首行，那么可直接返回成功</li>\n</ul>\n</li>\n<li><code>optional</code>表明本模块是可选的，它的成功与否不会对身份认证起关键作用，其返回值一般被忽略</li>\n<li><code>include</code>调用其他的配置文件中定义的配置信息，相当于函数调用，把其他的文件调用于此</li>\n</ul>\n</li>\n<li><p>复杂详细实现：使用一个或多个“status=action”<br><code>[status1=action1 status2=action …]</code></p>\n<ul>\n<li>Status:检查结果的返回状态</li>\n<li>Action:采取行为ok，done，die，bad，ignore，reset</li>\n<li>ok 模块通过，继续检查</li>\n<li>done 模块通过，返回最后结果给应用</li>\n<li>bad 结果失败，继续检查</li>\n<li>die 结果失败，返回失败结果给应用</li>\n<li>ignore 结果忽略，不影响最后结果</li>\n<li>reset 忽略已经得到的结果</li>\n</ul>\n</li>\n<li><p><code>module-path</code> 用来指明本模块对应的程序文件的路径名</p>\n</li>\n<li><p>相对路径    /lib64/security目录下的模块可使用相对路径如：pam_shells.so、pam_limits.so</p>\n</li>\n<li><p>绝对路径    模块通过读取配置文件完成用户对系统资源的使用控制/etc/security</p>\n</li>\n<li><p><code>Arguments</code> 用来传递给该模块的参数</p>\n</li>\n<li><p>*注意：**修改PAM配置文件将马上生效</p>\n</li>\n<li><p>*建议：**编辑pam规则时，保持至少打开一个root会话，防止配置改错了把自己堵在外面了。</p>\n</li>\n</ul>\n<p><strong>总结：</strong>PAM通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序，同时也便于向系统中添加新的认证手段。</p>\n<h4 id=\"PAM文档说明：\"><a href=\"#PAM文档说明：\" class=\"headerlink\" title=\"PAM文档说明：\"></a>PAM文档说明：</h4><ul>\n<li><code>/usr/share/doc/pam-*</code> </li>\n<li>rpm -qd pam</li>\n<li>man –k pam_</li>\n<li>man 模块名如 <code>man rootok</code></li>\n<li>参考：《<a href=\"http://linux-pam.org/Linux-PAM-html/\">The Linux-PAM System Administrators’ Guide</a>》</li>\n</ul>\n","categories":["OPS"],"tags":["OPS","PAM"]},{"title":"MySQL多实例配置","url":"/forward/4f3d60c1.html","content":"<h4 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h4><p><code>mkdir -p /data/330&#123;7,8,9&#125;/data</code><br><strong>生成各自实例数据存储目录</strong></p>\n<h4 id=\"准备配置文件\"><a href=\"#准备配置文件\" class=\"headerlink\" title=\"准备配置文件\"></a>准备配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#3307实例</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /data/3307/my.cnf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql  #软件目录</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3307/data  #本实例数据目录</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3307/mysql.sock #本实例socket文件</span></span><br><span class=\"line\"><span class=\"string\">log_error=/data/3307/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">port=3307</span></span><br><span class=\"line\"><span class=\"string\">server_id=7</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3307/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"comment\">#3308实例</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /data/3308/my.cnf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3308/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3308/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">log_error=/data/3308/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">port=3308</span></span><br><span class=\"line\"><span class=\"string\">server_id=8</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3308/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"comment\">#3309实例</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /data/3309/my.cnf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3309/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3309/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">log_error=/data/3309/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">port=3309</span></span><br><span class=\"line\"><span class=\"string\">server_id=9</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3309/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"各自实例初始化三套数据\"><a href=\"#各自实例初始化三套数据\" class=\"headerlink\" title=\"各自实例初始化三套数据\"></a>各自实例初始化三套数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> /etc/my.cnf /etc/my.cnf.bak <span class=\"comment\">#防止原始配置文件影响后面数据库的初始化</span></span><br><span class=\"line\">mysqld --initialize-insecure  --user=mysql --datadir=/data/3307/data --basedir=/application/mysql</span><br><span class=\"line\">mysqld --initialize-insecure  --user=mysql --datadir=/data/3308/data --basedir=/application/mysql</span><br><span class=\"line\">mysqld --initialize-insecure  --user=mysql --datadir=/data/3309/data --basedir=/application/mysql</span><br></pre></td></tr></table></figure>\n<h4 id=\"systemd管理多实例\"><a href=\"#systemd管理多实例\" class=\"headerlink\" title=\"systemd管理多实例\"></a>systemd管理多实例</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/systemd/system</span><br><span class=\"line\"><span class=\"built_in\">cp</span> mysqld.service mysqld3307.service</span><br><span class=\"line\"><span class=\"built_in\">cp</span> mysqld.service mysqld3308.service</span><br><span class=\"line\"><span class=\"built_in\">cp</span> mysqld.service mysqld3309.service</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim mysqld3307.service</span><br><span class=\"line\">ExecStart=/application/mysql/bin/mysqld  --defaults-file=/data/3307/my.cnf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim mysqld3308.service</span><br><span class=\"line\">ExecStart=/application/mysql/bin/mysqld  --defaults-file=/data/3308/my.cnf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim mysqld3309.service</span><br><span class=\"line\">ExecStart=/application/mysql/bin/mysqld  --defaults-file=/data/3309/my.cnf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h4><p><code>chown -R mysql.mysql /data/*</code></p>\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld3307.service</span><br><span class=\"line\">systemctl start mysqld3308.service</span><br><span class=\"line\">systemctl start mysqld3309.service</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证多实例\"><a href=\"#验证多实例\" class=\"headerlink\" title=\"验证多实例\"></a>验证多实例</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -lnp|grep 330</span><br><span class=\"line\">mysql -S /data/3307/mysql.sock -e <span class=\"string\">&quot;select @@server_id&quot;</span></span><br><span class=\"line\">mysql -S /data/3308/mysql.sock -e <span class=\"string\">&quot;select @@server_id&quot;</span></span><br><span class=\"line\">mysql -S /data/3309/mysql.sock -e <span class=\"string\">&quot;select @@server_id&quot;</span></span><br></pre></td></tr></table></figure>\n","categories":["DBA"],"tags":["MySQL"]},{"title":"MySQL-DQL","url":"/forward/cb26d424.html","content":"<h2 id=\"环境准备：\"><a href=\"#环境准备：\" class=\"headerlink\" title=\"环境准备：\"></a>环境准备：</h2><p><strong>world库备份下载：<a href=\"https://www.lanzous.com/ib6lytg\">网页连接</a></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| Tables_in_world |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| city            |</span><br><span class=\"line\">| country         |</span><br><span class=\"line\">| countrylanguage |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">3 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc city;</span><br><span class=\"line\">+-------------+----------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field       | Type     | Null | Key | Default | Extra          |</span><br><span class=\"line\">+-------------+----------+------+-----+---------+----------------+</span><br><span class=\"line\">| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| Name        | char(35) | NO   |     |         |                |</span><br><span class=\"line\">| CountryCode | char(3)  | NO   | MUL |         |                |</span><br><span class=\"line\">| District    | char(20) | NO   |     |         |                |</span><br><span class=\"line\">| Population  | int(11)  | NO   |     | 0       |                |</span><br><span class=\"line\">+-------------+----------+------+-----+---------+----------------+</span><br><span class=\"line\">5 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc country;</span><br><span class=\"line\">+----------------+--------------------------------------------------------------------------------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field          | Type                                                                                  | Null | Key | Default | Extra |</span><br><span class=\"line\">+----------------+--------------------------------------------------------------------------------------+------+-----+---------+-------+</span><br><span class=\"line\">| Code           | char(3)                                                                               | NO   | PRI |         |       |</span><br><span class=\"line\">| Name           | char(52)                                                                              | NO   |     |         |       |</span><br><span class=\"line\">| Continent      | enum(<span class=\"string\">&#x27;Asia&#x27;</span>,<span class=\"string\">&#x27;Europe&#x27;</span>,<span class=\"string\">&#x27;North America&#x27;</span>,<span class=\"string\">&#x27;Africa&#x27;</span>,<span class=\"string\">&#x27;Oceania&#x27;</span>,<span class=\"string\">&#x27;Antarctica&#x27;</span>,<span class=\"string\">&#x27;South America&#x27;</span>) | NO   |     | Asia    |       |</span><br><span class=\"line\">| Region         | char(26)                                                                              | NO   |     |         |       |</span><br><span class=\"line\">| SurfaceArea    | <span class=\"built_in\">float</span>(10,2)                                                                           | NO   |     | 0.00    |       |</span><br><span class=\"line\">| IndepYear      | smallint(6)                                                                           | YES  |     | NULL    |       |</span><br><span class=\"line\">| Population     | int(11)                                                                               | NO   |     | 0       |       |</span><br><span class=\"line\">| LifeExpectancy | <span class=\"built_in\">float</span>(3,1)                                                                            | YES  |     | NULL    |       |</span><br><span class=\"line\">| GNP            | <span class=\"built_in\">float</span>(10,2)                                                                           | YES  |     | NULL    |       |</span><br><span class=\"line\">| GNPOld         | <span class=\"built_in\">float</span>(10,2)                                                                           | YES  |     | NULL    |       |</span><br><span class=\"line\">| LocalName      | char(45)                                                                              | NO   |     |         |       |</span><br><span class=\"line\">| GovernmentForm | char(45)                                                                              | NO   |     |         |       |</span><br><span class=\"line\">| HeadOfState    | char(60)                                                                              | YES  |     | NULL    |       |</span><br><span class=\"line\">| Capital        | int(11)                                                                               | YES  |     | NULL    |       |</span><br><span class=\"line\">| Code2          | char(2)                                                                               | NO   |     |         |       |</span><br><span class=\"line\">+----------------+--------------------------------------------------------------------------------------+------+-----+---------+-------+</span><br><span class=\"line\">15 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc countrylanguage;</span><br><span class=\"line\">+-------------+---------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field       | Type          | Null | Key | Default | Extra |</span><br><span class=\"line\">+-------------+---------------+------+-----+---------+-------+</span><br><span class=\"line\">| CountryCode | char(3)       | NO   | PRI |         |       |</span><br><span class=\"line\">| Language    | char(30)      | NO   | PRI |         |       |</span><br><span class=\"line\">| IsOfficial  | enum(<span class=\"string\">&#x27;T&#x27;</span>,<span class=\"string\">&#x27;F&#x27;</span>) | NO   |     | F       |       |</span><br><span class=\"line\">| Percentage  | <span class=\"built_in\">float</span>(4,1)    | NO   |     | 0.0     |       |</span><br><span class=\"line\">+-------------+---------------+------+-----+---------+-------+</span><br><span class=\"line\">4 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DQL查询：\"><a href=\"#DQL查询：\" class=\"headerlink\" title=\"DQL查询：\"></a>DQL查询：</h2><h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><h4 id=\"1-作用-获取MySQL中的数据行\"><a href=\"#1-作用-获取MySQL中的数据行\" class=\"headerlink\" title=\"(1)作用:获取MySQL中的数据行\"></a>(1)作用:获取MySQL中的数据行</h4><h4 id=\"2-单独使用select\"><a href=\"#2-单独使用select\" class=\"headerlink\" title=\"(2)单独使用select\"></a>(2)单独使用select</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select @@xxxx;获取参数信息。</span><br><span class=\"line\">mysql&gt; select @@port;  </span><br><span class=\"line\">mysql&gt; show variables like <span class=\"string\">&#x27;%innodb%&#x27;</span>;  //模糊查询</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-select-函数\"><a href=\"#3-select-函数\" class=\"headerlink\" title=\"(3)select 函数();\"></a>(3)select 函数();</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select database();  //当前库</span><br><span class=\"line\">mysql&gt; select now();  //当前时间</span><br><span class=\"line\">mysql&gt; select version();  //当前数据库版本</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"SQL92标准的使用语法\"><a href=\"#SQL92标准的使用语法\" class=\"headerlink\" title=\"SQL92标准的使用语法\"></a>SQL92标准的使用语法</h3><h3 id=\"select语法执行顺序（单表）-为必带。\"><a href=\"#select语法执行顺序（单表）-为必带。\" class=\"headerlink\" title=\"select语法执行顺序（单表）*为必带。\"></a>select语法执行顺序（单表）*为必带。</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select开始 ----&gt; </span><br><span class=\"line\">from子句* ---&gt;</span><br><span class=\"line\"><span class=\"built_in\">where</span>子句---&gt; </span><br><span class=\"line\">group by子句---&gt;</span><br><span class=\"line\">select后执行条件---&gt;</span><br><span class=\"line\">having子句 ----&gt; </span><br><span class=\"line\">order by ----&gt;</span><br><span class=\"line\"><span class=\"built_in\">limit</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/images/img-28.png\" alt=\"select 执行顺序\"></h2><h3 id=\"SELECT-语句应用\"><a href=\"#SELECT-语句应用\" class=\"headerlink\" title=\"SELECT 语句应用\"></a>SELECT 语句应用</h3><h4 id=\"声明：\"><a href=\"#声明：\" class=\"headerlink\" title=\"声明：\"></a>声明：</h4><ul>\n<li><strong>以下部分语句仅为演示作用，不代表生产操作。</strong></li>\n</ul>\n<h4 id=\"单表查询练习环境：world数据库下表介绍\"><a href=\"#单表查询练习环境：world数据库下表介绍\" class=\"headerlink\" title=\"单表查询练习环境：world数据库下表介绍\"></a>单表查询练习环境：world数据库下表介绍</h4><p><code>SHOW TABLES FROM world;</code></p>\n<ul>\n<li>#<code>city</code>(城市): <code>DESC city;</code></li>\n<li>#<code>id</code>: 自增的无关列，数据行的需要</li>\n<li>#<code>NAME</code>: 城市名字 </li>\n<li>#<code>countrycode</code>：城市所在的国家代号，CHN,USA,JPN。。。。</li>\n<li>#<code>district</code>: 城市的所在的区域，中国是省的意思，美国是洲的意思</li>\n<li>#<code>population</code>: 城市的人口数量</li>\n<li>#<strong>说明</strong>: 此表是历史数据，仅供学习交流使用。</li>\n</ul>\n<hr>\n<h4 id=\"SELECT-1\"><a href=\"#SELECT-1\" class=\"headerlink\" title=\"SELECT *\"></a>SELECT *</h4><p><strong>#适合表数据行较少，生产中使用较少。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM city;</span><br></pre></td></tr></table></figure>\n\n<p><strong>#例子：查询name和population的所有值</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT name,Population FROM city;</span><br><span class=\"line\">SELECT NAME,population FROM world.city;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a>where</h4><h5 id=\"1-WHERE-配合等值查询\"><a href=\"#1-WHERE-配合等值查询\" class=\"headerlink\" title=\"(1).WHERE 配合等值查询\"></a>(1).WHERE 配合等值查询</h5><p>#查询中国的城市信息<br> <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span>;</span><br></pre></td></tr></table></figure></p>\n<p>#查询美国的城市信息<br> <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode=<span class=\"string\">&#x27;USA&#x27;</span>;</span><br></pre></td></tr></table></figure></p>\n<p>#安徽各市人口查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT name,Population </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE District=<span class=\"string\">&#x27;Anhui&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"2-WHERE-配合不等值查询-gt-lt-gt-lt-lt-gt\"><a href=\"#2-WHERE-配合不等值查询-gt-lt-gt-lt-lt-gt\" class=\"headerlink\" title=\"(2).WHERE 配合不等值查询(&gt; &lt; &gt;= &lt;= != &lt;&gt;)\"></a>(2).WHERE 配合不等值查询(&gt; &lt; &gt;= &lt;= != &lt;&gt;)</h5><p>#查询人口小于等于1000的城市<br> <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE Population&lt;=1000;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h5 id=\"3-WHERE-配合模糊-LIKE\"><a href=\"#3-WHERE-配合模糊-LIKE\" class=\"headerlink\" title=\"(3).WHERE 配合模糊(LIKE)\"></a>(3).WHERE 配合模糊(LIKE)</h5><p>#查询国家代号以C开头的<br> <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode LIKE <span class=\"string\">&#x27;C%&#x27;</span>;</span><br></pre></td></tr></table></figure></p>\n<p>#生产中不允许%出现在前面，效率很低。不走索引。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#SELECT * </span></span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode LIKE <span class=\"string\">&#x27;%C%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"4-WHERE-配合逻辑连接符-AND-OR\"><a href=\"#4-WHERE-配合逻辑连接符-AND-OR\" class=\"headerlink\" title=\"(4).WHERE 配合逻辑连接符(AND OR)\"></a>(4).WHERE 配合逻辑连接符(AND OR)</h5><p>#查询城市人口10000-20000的城市。<br> <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE Population &gt;= 10000 AND Population &lt;= 20000;</span><br><span class=\"line\">SELECT * </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE Population BETWEEN 10000 AND 20000;</span><br></pre></td></tr></table></figure></p>\n<p>#查询中国或美国的城市信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span> OR CountryCode=<span class=\"string\">&#x27;USA&#x27;</span>;`</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-UNION-UNION-ALL\"><a href=\"#5-UNION-UNION-ALL\" class=\"headerlink\" title=\"(5).UNION/UNION ALL\"></a>(5).UNION/UNION ALL</h5><p>建议改写为（聚合）:<br> <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM world.city WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span></span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT * FROM world.city WHERE CountryCode=<span class=\"string\">&#x27;USA&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">#UNION //用于聚合语句输出的结果去重</span></span><br><span class=\"line\"><span class=\"comment\">#UNION ALL //不去重</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"GROUP-BY-配合聚合函数应用\"><a href=\"#GROUP-BY-配合聚合函数应用\" class=\"headerlink\" title=\"GROUP BY 配合聚合函数应用\"></a>GROUP BY 配合聚合函数应用</h4><h5 id=\"聚合函数：\"><a href=\"#聚合函数：\" class=\"headerlink\" title=\"聚合函数：\"></a>聚合函数：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">AVG() //计算平均值</span><br><span class=\"line\">COUNT()  //c</span><br><span class=\"line\">SUM()  //所有列之和</span><br><span class=\"line\">MAX() //最大值</span><br><span class=\"line\">MIN()  //最小值</span><br><span class=\"line\">GROUP_CONCAT()  //列转行</span><br><span class=\"line\">   distinct()  //去重</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"1-SUM-所有列之和\"><a href=\"#1-SUM-所有列之和\" class=\"headerlink\" title=\"(1):SUM() 所有列之和\"></a>(1):SUM() 所有列之和</h5><p>#统计一下世界上每个国家的总人口数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CountryCode,SUM(population) </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">GROUP BY CountryCode;</span><br></pre></td></tr></table></figure>\n<p>#统计一下中国每个省的总人口数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT District,SUM(Population) </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span> </span><br><span class=\"line\">GROUP BY District;</span><br></pre></td></tr></table></figure>\n\n<p>#统计一下中国每个省的总人口数</p>\n<hr>\n<h5 id=\"2-COUNT-某列下数据行个数\"><a href=\"#2-COUNT-某列下数据行个数\" class=\"headerlink\" title=\"(2):COUNT() 某列下数据行个数\"></a>(2):COUNT() 某列下数据行个数</h5><p>#统计每个国家的城市个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CountryCode,COUNT(<span class=\"built_in\">id</span>) FROM world.city GROUP BY CountryCode;</span><br><span class=\"line\">\t <span class=\"comment\">#1.拿什么站队</span></span><br><span class=\"line\">\t GROUP BY CountryCode;  //按国家</span><br><span class=\"line\">\t <span class=\"comment\">#2.统计对象</span></span><br><span class=\"line\">\t 城市<span class=\"built_in\">id</span>或name </span><br><span class=\"line\">\t <span class=\"comment\">#3.统计什么</span></span><br><span class=\"line\">\t COUNT(<span class=\"built_in\">id</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"3-GROUP-CONCAT-列转行\"><a href=\"#3-GROUP-CONCAT-列转行\" class=\"headerlink\" title=\"(3):GROUP_CONCAT() 列转行\"></a>(3):GROUP_CONCAT() 列转行</h5><p>#统计显示每个国家省的名字列表 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CountryCode,GROUP_CONCAT(district) </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">GROUP BY CountryCode;</span><br></pre></td></tr></table></figure>\n\n<p>#统计中国每个省的城市名列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT District,GROUP_CONCAT(Name) </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span> </span><br><span class=\"line\">GROUP BY District;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"4-AVG-计算平均值\"><a href=\"#4-AVG-计算平均值\" class=\"headerlink\" title=\"(4):AVG() 计算平均值\"></a>(4):AVG() 计算平均值</h5><p>#统计一下中国每个省的平均口数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT District,AVG(Population) </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span> </span><br><span class=\"line\">GROUP BY District;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"5-HAVING-对结果集进行再次过滤\"><a href=\"#5-HAVING-对结果集进行再次过滤\" class=\"headerlink\" title=\"(5)HAVING 对结果集进行再次过滤\"></a>(5)HAVING 对结果集进行再次过滤</h5><p>#中国总人口数大于1000万的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT District,SUM(Population) </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span> </span><br><span class=\"line\">GROUP BY District</span><br><span class=\"line\">HAVING SUM(Population)&gt;10000000;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"6-ORDER-BY-再排序\"><a href=\"#6-ORDER-BY-再排序\" class=\"headerlink\" title=\"(6)ORDER BY 再排序\"></a>(6)ORDER BY 再排序</h5><p>#中国城市人口数，降序排序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT name,Population </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span> </span><br><span class=\"line\">ORDER BY Population DESC;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#中国每个省的人口数，降序排序</span></span><br><span class=\"line\"> SELECT District,SUM(Population) </span><br><span class=\"line\"> FROM world.city </span><br><span class=\"line\"> WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span> </span><br><span class=\"line\"> GROUP BY District </span><br><span class=\"line\"> ORDER BY SUM(Population) DESC;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"7-指定结果集范围：LIMIT\"><a href=\"#7-指定结果集范围：LIMIT\" class=\"headerlink\" title=\"(7)指定结果集范围：LIMIT\"></a>(7)指定结果集范围：LIMIT</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">LIMIT 5,5; <span class=\"comment\">#跳过五名，显示五名。</span></span><br><span class=\"line\"><span class=\"comment\">#或者 LIMIT 5 OFFSET 5; 显示5行，跳过五行。</span></span><br></pre></td></tr></table></figure>\n<p>#中国城市人口数，降序排序的前五名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT name,Population </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span> </span><br><span class=\"line\">ORDER BY Population DESC</span><br><span class=\"line\">LIMIT 5;</span><br></pre></td></tr></table></figure>\n<p>#中国城市人口数，降序排序的6-10名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT name,Population </span><br><span class=\"line\">FROM world.city </span><br><span class=\"line\">WHERE CountryCode=<span class=\"string\">&#x27;CHN&#x27;</span> </span><br><span class=\"line\">ORDER BY Population DESC</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"8-distinct-去重复\"><a href=\"#8-distinct-去重复\" class=\"headerlink\" title=\"(8)distinct 去重复\"></a>(8)distinct 去重复</h5><p>#检查某列是否可建立唯一索引<br><img src=\"/images/img-21.png\" alt=\"check uniq\"></p>\n<h5 id=\"9-将对结果集进行再查询\"><a href=\"#9-将对结果集进行再查询\" class=\"headerlink\" title=\"(9)将对结果集进行再查询\"></a>(9)将对结果集进行再查询</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select <span class=\"built_in\">sum</span>(单价*数量) from (select 牌子,单价,数量  from 啤酒 </span><br><span class=\"line\">union all </span><br><span class=\"line\">select 牌子,单价,数量  from 饮料</span><br><span class=\"line\">union all </span><br><span class=\"line\">select 牌子,单价,数量  from 矿泉水);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">表别名 </span><br><span class=\"line\">SELECT a.tname  ,GROUP_CONCAT(d.sname) </span><br><span class=\"line\">FROM teacher AS a </span><br><span class=\"line\">JOIN course AS b </span><br><span class=\"line\">ON a.tno = b.tno</span><br><span class=\"line\">JOIN sc as c</span><br><span class=\"line\">ON b.cno = c.cno</span><br><span class=\"line\">JOIN student AS d</span><br><span class=\"line\">ON c.sno = d.sno</span><br><span class=\"line\">WHERE a.tname=<span class=\"string\">&#x27;oldguo&#x27;</span> AND c.score&lt;60</span><br><span class=\"line\">GROUP BY a.tno;</span><br><span class=\"line\"></span><br><span class=\"line\">列别名</span><br><span class=\"line\">select count(distinct(name)) as 个数  from world.city;</span><br></pre></td></tr></table></figure>\n","categories":["DBA"],"tags":["MySQL","SQL"]},{"title":"N卡GPU计算型实例驱动安装","url":"/forward/c6f90662.html","content":"<h2 id=\"N卡GPU型号一览\"><a href=\"#N卡GPU型号一览\" class=\"headerlink\" title=\"N卡GPU型号一览\"></a>N卡GPU型号一览</h2><table>\n<thead>\n<tr>\n<th align=\"center\">产品系列</th>\n<th align=\"center\">M-Class</th>\n<th align=\"center\">P-Series</th>\n<th align=\"center\">P-Series</th>\n<th align=\"center\">V-Series</th>\n<th align=\"center\">T-Series</th>\n<th align=\"center\">V-Series</th>\n<th align=\"center\">A-Series</th>\n<th align=\"center\">A-Series</th>\n<th align=\"center\">A-Series</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">产品家族</td>\n<td align=\"center\">M40</td>\n<td align=\"center\">Tesla P100</td>\n<td align=\"center\">Tesla P4</td>\n<td align=\"center\">Tesla V100</td>\n<td align=\"center\">Tesla T4</td>\n<td align=\"center\">Tesla V100</td>\n<td align=\"center\">NVIDIA A100</td>\n<td align=\"center\">NVIDIA A10</td>\n<td align=\"center\">NVIDIA A100</td>\n</tr>\n</tbody></table>\n<h2 id=\"前置操作\"><a href=\"#前置操作\" class=\"headerlink\" title=\"前置操作\"></a>前置操作</h2><ul>\n<li>确定好待交付机器的规格和GPU型号，下面已T4卡为例。</li>\n<li>跟业务确定好Driver Version和CUDA Version 然后去NVIDIA官网下载对应的驱动脚本</li>\n<li>比如业务要求：<ul>\n<li>Driver Version: 470.82.xx</li>\n<li>CUDA Version: 11.4</li>\n</ul>\n</li>\n</ul>\n<p>进入NVIDIA官网:<a href=\"https://www.nvidia.com/Download/Find.aspx\">https://www.nvidia.com/Download/Find.aspx</a></p>\n<p>Driver 和 CUDA对应关系  <a href=\"https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html\">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html</a></p>\n<p><img src=\"/images/pasted-305.png\" alt=\"N卡驱动\"></p>\n<p>点进去拿到：<code>https://cn.download.nvidia.com/tesla/470.82.01/NVIDIA-Linux-x86_64-470.82.01.run</code></p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><h3 id=\"Debian系统：\"><a href=\"#Debian系统：\" class=\"headerlink\" title=\"Debian系统：\"></a>Debian系统：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 升级内核：</span><br><span class=\"line\">apt install linux-image-amd64 linux-headers-amd64 -y &amp;&amp; reboot</span><br><span class=\"line\"> </span><br><span class=\"line\">2. 然后再执行</span><br><span class=\"line\">wget https://cn.download.nvidia.com/tesla/470.82.01/NVIDIA-Linux-x86_64-470.82.01.run &amp;&amp; <span class=\"built_in\">chmod</span> +x NVIDIA-Linux-x86_64-470.82.01.run &amp;&amp; sh NVIDIA-Linux-x86_64-470.82.01.run &amp;&amp; nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>第一步重启完后这里面有和当前内核版本一致的内核的开发包文件（安装驱动会重新编译内核 必要）<br><img src=\"/images/pasted-306.png\" alt=\"内核开发包\"></p>\n<h3 id=\"CentOS系统：\"><a href=\"#CentOS系统：\" class=\"headerlink\" title=\"CentOS系统：\"></a>CentOS系统：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">请执行以下命令，查询实例中是否安装kernel-devel和kernel-headers包</span><br><span class=\"line\">rpm  -qa | grep $(<span class=\"built_in\">uname</span> -r)</span><br><span class=\"line\"> </span><br><span class=\"line\">回显类似如下信息，即包含了kernel-devel和kernel-headers包的版本信息，表示已安装。</span><br><span class=\"line\">kernel-3.10.0-1062.18.1.el7.x86_64</span><br><span class=\"line\">kernel-devel-3.10.0-1062.18.1.el7.x86_64</span><br><span class=\"line\">kernel-headers-3.10.0-1062.18.1.el7.x86_64</span><br><span class=\"line\"> </span><br><span class=\"line\">然后再执行</span><br><span class=\"line\">wget https://cn.download.nvidia.com/tesla/470.82.01/NVIDIA-Linux-x86_64-470.82.01.run &amp;&amp; <span class=\"built_in\">chmod</span> +x NVIDIA-Linux-x86_64-470.82.01.run &amp;&amp; sh NVIDIA-Linux-x86_64-470.82.01.run &amp;&amp; nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>kernel-devel和kernel版本不一致会导致在安装driver rpm过程中driver编译出错。因此，请您确认回显信息中<code>kernel-*</code>的版本号后，再下载对应版本的kernel-devel。在示例回显信息中，kernel的版本号为<code>3.10.0-1062.18.1.el7.x86_64</code>。</p>\n<p>回显：<br><img src=\"/images/pasted-307.png\" alt=\"nvidia-smi\"></p>\n<h2 id=\"N卡的持久模式\"><a href=\"#N卡的持久模式\" class=\"headerlink\" title=\"N卡的持久模式\"></a>N卡的持久模式</h2><blockquote>\n<p>解决低负载下掉卡、卡休眠</p>\n</blockquote>\n<h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><p>每当一个或多个客户端打开设备文件时，GPU 状态就会保持加载在驱动程序中。一旦所有客户端都关闭了设备文件，除非启用了持久化模式，否则 GPU 状态将被卸载。为避免每次初始化所造成的延迟而影响到效能，可开启 GPU 持久化模式。</p>\n<p>NVIDIA DRIVER PERSISTENCE 文档 <a href=\"https://docs.nvidia.com/deploy/driver-persistence/index.html\">Driver Persistence</a>：</p>\n<blockquote>\n<p>Under Linux systems where X runs by default on the target GPU the kernel mode driver will generally be initalized and kept alive from machine startup to shutdown, courtesy of the X process. On headless systems or situations where no long-lived X-like client maintains a handle to the target GPU, the kernel mode driver will initilize and deinitialize the target GPU each time a target GPU application starts and stops. In HPC environments this situation is quite common. Since it is often desireable to keep the GPU initialized in these cases, NVIDIA provides two options for changing driver behavior: Persistence Mode (Legacy) and the Persistence Daemon.</p>\n</blockquote>\n<p><strong>为什么不开启Persistence Mode，GPU会掉卡？</strong></p>\n<blockquote>\n<p>根据我的分析，因为我在运行的程序是Antares/Ansor，这个程序不是一个单一的GPU Application，而是生成数以万计的GPU Application去验证性能，则在每一个Application运行的过程中，GPU的驱动都需要被反复加载和卸载，一方面会损失很多性能，另一方面driver频繁卸载加载，GPU频繁被初始化，CPU访问PCIe config registers时间过长导致 softlock，从而造成GPU的死机。(引用自：<a href=\"https://bbs.gpuworld.cn/index.php?topic=10353.0\">/bbs.gpuworld.cn/index.p</a>)</p>\n</blockquote>\n<h3 id=\"设置方法\"><a href=\"#设置方法\" class=\"headerlink\" title=\"设置方法\"></a>设置方法</h3><p>一般的机器上安装GPU，GPU的驱动程序会在机器的开启时被加载，机器关闭时再被卸载。而在在没有显示器的Linux操作系统(headless systems)中，尤其是HPC中非常常见，GPU的驱动程序会随着GPU运行的程序开始的时候自动被加载，程序关闭时自动被卸载。nvidia-smi -pm 1设置GPU的Persistence Mode:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvidia-smi -pm 1</span><br></pre></td></tr></table></figure>\n<p>开启了该模式之后，GPU的响应速度会变快，但是待机功耗会增加一点。厂商建议开启GPU的持久模式。gpu默认持久模式关闭的时候，GPU如果负载低，会休眠。之后唤起的时候，有一定几率失败，nvidia-smi -pm 1 这个命令可以使GPU一直保持准备工作的状态，解决GPU卡在低负载情况下跑着跑着被卸载休眠的情况。</p>\n<p>在机器重新启动后，设定将会清空，如要保留则需写入 service 中编辑 <code>/lib/systemd/system/nvidia-persistenced.service</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim /lib/systemd/system/nvidia-persistenced.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=NVIDIA Persistence Daemon</span><br><span class=\"line\">After=syslog.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/var/run/nvidia-persistenced/nvidia-persistenced.pid</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">ExecStart=/usr/bin/nvidia-persistenced --verbose</span><br><span class=\"line\">ExecStopPost=/bin/rm -rf /var/run/nvidia-persistenced/*</span><br><span class=\"line\">TimeoutSec=300</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># systemctl enable nvidia-persistenced</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"前后对比\"><a href=\"#前后对比\" class=\"headerlink\" title=\"前后对比\"></a>前后对比</h3><p>开启前：GPU低负载偶尔掉卡<br><img src=\"/images/pasted-308.png\" alt=\"开启前\"></p>\n<p>开启后：单机4卡不掉<br><img src=\"/images/pasted-309.png\" alt=\"开启后\"></p>\n<h2 id=\"番外-容器GPU集群\"><a href=\"#番外-容器GPU集群\" class=\"headerlink\" title=\"番外-容器GPU集群\"></a>番外-容器GPU集群</h2><p>各大云厂商都支持N卡的k8s容器集群，且集群都带相关能力自动安装N卡驱动（在集群每次纳管节点时自动安装）。这里贴一下相关文档，有机会再结合我的工作实践作详细讲解。<br><strong>阿里云：</strong><a href=\"https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/customize-the-gpu-driver-version-of-the-node-by-specifying-the-version-number\">文档链接</a></p>\n<ul>\n<li>在ACK节点池中打上对应的N卡驱动版本标签，机器纳管进入该节点池时会自行安装对应的驱动</li>\n</ul>\n<p><strong>华为云：</strong><a href=\"https://support.huaweicloud.com/usermanual-cce/cce_10_0141.html\">文档链接</a></p>\n<ul>\n<li>在CCE集群中添加<code>gpu-device-plugin</code>，将N卡驱动传入OBS(对象存储)中。插件每次读取OBS中的驱动包为纳管的节点打上对应的驱动</li>\n</ul>\n<p><strong>腾讯云：</strong><a href=\"https://cloud.tencent.com/document/product/457/32207\">文档链接</a></p>\n<ul>\n<li>在TKE集群纳管GPU节点时可选择需要的驱动进行安装</li>\n</ul>\n","categories":["OPS"],"tags":["GPU","nvidia"]},{"title":"Playbook剧本编排构建rsync+nfs+rersync","url":"/forward/67af6371.html","content":"<h3 id=\"主机列表如下：\"><a href=\"#主机列表如下：\" class=\"headerlink\" title=\"主机列表如下：\"></a>主机列表如下：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[felix]</span><br><span class=\"line\">172.16.1.7:52113</span><br><span class=\"line\">172.16.1.8:52113</span><br><span class=\"line\">172.16.1.31:52113</span><br><span class=\"line\">172.16.1.41:52113</span><br><span class=\"line\">[nfs]</span><br><span class=\"line\">172.16.1.31</span><br><span class=\"line\">172.16.1.32</span><br><span class=\"line\">[backup]</span><br><span class=\"line\">172.16.1.41</span><br><span class=\"line\">[web]</span><br><span class=\"line\">172.16.1.[7:8]</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h3><h4 id=\"第一步准备环境：\"><a href=\"#第一步准备环境：\" class=\"headerlink\" title=\"第一步准备环境：\"></a>第一步准备环境：</h4><p><strong>当然ansible的密钥已经向节点批量分发完毕</strong><br><br><strong>测试所有受管节点是否存活：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 ~]<span class=\"comment\"># ansible all -m ping </span></span><br><span class=\"line\">172.16.1.7 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;discovered_interpreter_python&quot;</span>: <span class=\"string\">&quot;/usr/bin/python&quot;</span></span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    <span class=\"string\">&quot;changed&quot;</span>: <span class=\"literal\">false</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;ping&quot;</span>: <span class=\"string\">&quot;pong&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">172.16.1.8 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;discovered_interpreter_python&quot;</span>: <span class=\"string\">&quot;/usr/bin/python&quot;</span></span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    <span class=\"string\">&quot;changed&quot;</span>: <span class=\"literal\">false</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;ping&quot;</span>: <span class=\"string\">&quot;pong&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">172.16.1.41 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;discovered_interpreter_python&quot;</span>: <span class=\"string\">&quot;/usr/bin/python&quot;</span></span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    <span class=\"string\">&quot;changed&quot;</span>: <span class=\"literal\">false</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;ping&quot;</span>: <span class=\"string\">&quot;pong&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">172.16.1.31 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;discovered_interpreter_python&quot;</span>: <span class=\"string\">&quot;/usr/bin/python&quot;</span></span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    <span class=\"string\">&quot;changed&quot;</span>: <span class=\"literal\">false</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;ping&quot;</span>: <span class=\"string\">&quot;pong&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模拟环境：\"><a href=\"#模拟环境：\" class=\"headerlink\" title=\"模拟环境：\"></a>模拟环境：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible all -m shell -a <span class=\"string\">&#x27;mkdir -p /backup /server/scripts&#x27;</span></span><br><span class=\"line\">ansible web -m shell -a <span class=\"string\">&#x27;mkdir -p /upload /var/html/www /app/logs&#x27;</span></span><br><span class=\"line\">ansible nfs -m shell -a <span class=\"string\">&#x27;mkdir -p /data&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"rsync全网备份：\"><a href=\"#rsync全网备份：\" class=\"headerlink\" title=\"rsync全网备份：\"></a>rsync全网备份：</h4><p><strong>编写playbook</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 ~]<span class=\"comment\"># tree ansible/</span></span><br><span class=\"line\">ansible/</span><br><span class=\"line\">├── file</span><br><span class=\"line\">│?? ├── confxml.xml.j2</span><br><span class=\"line\">│?? ├── mail.rc.j2</span><br><span class=\"line\">│?? ├── rsyncd.conf.tp</span><br><span class=\"line\">│?? ├── sersync</span><br><span class=\"line\">│?? ├── sersync.service</span><br><span class=\"line\">│?? ├── timing_backup-client-all.sh.j2</span><br><span class=\"line\">│?? ├── timing_backup-client-web.sh.j2</span><br><span class=\"line\">│?? ├── timing_backup-servs.sh.j2</span><br><span class=\"line\">│?? └── tools</span><br><span class=\"line\">│??     └── sersync_64bit.tar.gz</span><br><span class=\"line\">└── rsync_nfs_rersync_onekey.yml</span><br></pre></td></tr></table></figure>\n<p><strong>2.实现web01 web02 挂载nfs到 /upload目录，实现开机自动挂载和解决nfs耦合性过高问题</strong><br><br><strong>3.实现nfs共享的目录与backup服务器通过rersync进行实时同步</strong><br><img src=\"/images/img-6.jpg\" alt=\"Playbook\"></p>\n<h4 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h4><p><img src=\"/images/img-6.png\" alt=\"test\"><br>nice!</p>\n","categories":["OPS"],"tags":["OPS","Ansible","Playbook"]},{"title":"Nginx负载调度策略和一致性hash算法","url":"/forward/ae362167.html","content":"<h2 id=\"Nginx的负载均衡算法\"><a href=\"#Nginx的负载均衡算法\" class=\"headerlink\" title=\"Nginx的负载均衡算法\"></a>Nginx的负载均衡算法</h2><h3 id=\"静态调度算法（和节点无关的调度算法）\"><a href=\"#静态调度算法（和节点无关的调度算法）\" class=\"headerlink\" title=\"静态调度算法（和节点无关的调度算法）\"></a>静态调度算法（和节点无关的调度算法）</h3><ul>\n<li><p><code>rr轮询</code>（默认的调度算法）<br>  平均轮询</p>\n</li>\n<li><p><code>wrr权重轮询</code>（通过此参数进行权重调度#weight=number;）<br>  能者多劳</p>\n</li>\n<li><p><code>ip_hash</code>（人话：同一个ip的客户分配到同一台rs上,且不支持backup参数，和weight参数。）<br> 当一个请求到达时，先将客户端IP通过哈希算法哈希出一个值，在随后的客户端请求中，客户端IP的哈希值只要相同，就会分配至同一台服务器，该调度算法可以解决动态网页的session共享问题。（会话保持）<br> LVS负载均衡中的-p参数、keepalive配置里的persistence_ timeout 50参数都类似这个nginx里的ip_hash参数，其功能均为解决动态网页的session共享问题。</p>\n</li>\n</ul>\n<p><strong>会话保持比较流行的解决方案：</strong><br>     1. 弃用此方案，将用户会话存储在后端共享缓存的redis中。供所有前端web服务器从指定的redis缓存服务器中找到共享的会话。<br>     2. cookies技术，服务器根据客户端的请求信息生成cookie并发送给客户端。当客户端请求到第二台节点上时，服务器通过读取客户端的cookie和时间，进行判断是否存在会话。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例：upstream test.aaa &#123; </span><br><span class=\"line\">    ip_hash;  <span class=\"comment\">## 调度算法</span></span><br><span class=\"line\">    server 192.168.1.10:80; </span><br><span class=\"line\">    server 192.168.1.11:80 down; </span><br><span class=\"line\">    server 192.168.1.12:8009 max_fails=3 fail_timeout=20s; </span><br><span class=\"line\">    server 192.168.1.13:8080; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">server &#123; </span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    location / &#123; </span><br><span class=\"line\">    proxy_pass http://test.aaa; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态调度算法\"><a href=\"#动态调度算法\" class=\"headerlink\" title=\"动态调度算法\"></a>动态调度算法</h3><ul>\n<li><p><code>fair</code><br>此算法会根据后端节点服务器的响应时间来分配请求，响应时间短的优先分配。这是更加智能的调度算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair调度算法的，如果需要使用这种调度算法，必须下载Nginx的相关模块upstream_fair。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例：upstream test.aaa &#123; </span><br><span class=\"line\">    fair;  <span class=\"comment\">## 调度算法</span></span><br><span class=\"line\">    server 192.168.1.10:80; </span><br><span class=\"line\">    server 192.168.1.11:80 down; </span><br><span class=\"line\">    server 192.168.1.12:8009 max_fails=3 fail_timeout=20s; </span><br><span class=\"line\">    server 192.168.1.13:8080; </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure></li>\n<li><p><code>least_conn</code><br>此算法会根据后端节点的连接数来决定分配情况，哪个机器连接数少就分发。</p>\n</li>\n<li><p><code>url_hash</code>（人话：同一个URL地址，调度给同一台地址，类似于ip_hash）</p>\n</li>\n</ul>\n<p><strong>作用：</strong>web缓存服务器的负载均衡，提高缓存命中率。<br><strong>举个栗子：</strong>有一个服务器集群A，需要对外提供文件下载，由于文件上传量巨大，没法存储到服务器磁盘中，所以用到了第三方云存储来做文件存储。服务器集群A收到客户端请求之后，需要从云存储中下载文件然后返回，为了省去不必要的网络带宽和下载耗时，在服务器集群A上做了一层临时缓存（缓存一个月）。由于是服务器集群，所以同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。在此类场景下，为了使得缓存命中率提高，很适合使用url_hash策略，同一个url（也就是同一个资源请求）会到达同一台机器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取，既减少了带宽，也减少的下载时间。<br><strong>缺点：</strong>缓存节点不能宕机</p>\n<ul>\n<li>一致性HASH算法</li>\n</ul>\n<p><strong>作用：</strong>一致性HASH算法类似url_hash算法。<br><strong>原理：</strong>通过将用户请求的URI或者指定字符串进行计算，然后调度到后端的服务器上，此后任何用户查找同一个URI或者指定字符串都会被调度到这一台服务器上，因此后端的每个节点缓存的内容都是不同的。<br><strong>区别：</strong>一致性HASH算法可以解决后端某个或几个节点宕机后，缓存的数据动荡的最小<br><strong>配置示例：</strong><br><strong>模块：</strong>ngx_http_consistent_hash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/replay/ngx_http_consistent_hash/archive/master.zip</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>下载并解压unzip ngx_http_consistent_hash-master.zip</p>\n</li>\n<li><p>重新编译Nginx文件，并添加此模块：./configure –add-module=/ngx_http_consistent_hash-master。注意：重新编译会覆盖原有的Nginx，因此在重新编译前，有必要了解上一次编译时，安装了哪些模块：nginx -V</p>\n</li>\n<li><p>make &amp;&amp; make install</p>\n</li>\n</ol>\n<h2 id=\"一致性hash算法\"><a href=\"#一致性hash算法\" class=\"headerlink\" title=\"一致性hash算法\"></a>一致性hash算法</h2><h3 id=\"url-hash算法原理\"><a href=\"#url-hash算法原理\" class=\"headerlink\" title=\"url_hash算法原理\"></a>url_hash算法原理</h3><ol>\n<li><p>对缓存下的键（key，假设为图片的名字）进行hash计算。hash后的值是一个整数（假设为6）</p>\n</li>\n<li><p>对缓存服务器的数量（假设为3台分别为s0,s1,s2），对这个值进行取模计算。公式为[ hash(文件名称)%机器数=余数(机器的编号) ]<br> 得到的结果就是6%3=0，即余数为0 &lt;==即文件应该被缓存在s0节点上面</p>\n</li>\n<li><p>余数为0，那么计算出对应的图片应该缓存在s0上<br> 对同一个文件名称做相同的hash计算时值是不变的，那么用户在访问相同的图片时，在负载均衡器上对文件名称进行hash计算，并用缓存节点数对其取模计算。那么得到的结果(余数)就能计算出文件被缓存在了哪个缓存节点上了。并且用户对缓存资源的访问能够精确命中。</p>\n</li>\n</ol>\n<h3 id=\"url-hash算法缺陷\"><a href=\"#url-hash算法缺陷\" class=\"headerlink\" title=\"url_hash算法缺陷\"></a>url_hash算法缺陷</h3><ol>\n<li><p>通过缓存节点计算原理反推出，如果节点总数发生变化(宕机或者增加节点)那么取模计算出的结果也会变化，导致所有的缓存全部无法按正常的计算结果进行精确命中，从而无法通过负载均衡器的调度来对节点已经缓存好的文件进行访问。</p>\n</li>\n<li><p>结果就是由于节点数的变化导致缓存全部失效，整个前端缓存系统全部需要重新向后端请求数据，导致整个集群被大并发的流量压垮（压力不能在分布式缓存上被削弱而转移到后端服务器）。</p>\n</li>\n</ol>\n<h3 id=\"一致性hash算法原理\"><a href=\"#一致性hash算法原理\" class=\"headerlink\" title=\"一致性hash算法原理\"></a>一致性hash算法原理</h3><p><img src=\"/images/pasted-34.png\" alt=\"一致性hash\"></p>\n<ol>\n<li><p>为了弥补hash算法的不足，而产生了一致性hash算法。其原理就是：一个由2^32次方个点组成的圆（被称为hash环），在负载均衡器的后端有三个编号分别为A、B、C缓存节点。</p>\n</li>\n<li><p>利用hash算法对节点编号进行取模运算 [ hash(节点名如 A)%2^32=余数(0-2^32之间整数) ]，通过计算得到的结果一定是一个0-2^32之间的整数，这个整数就代表这个A节点，那么在这个hash环上一定有一个点能表示节点A。<br>   hash(A)%2^32=”0-2^32之间的一个值”</p>\n</li>\n<li><p>以同样的方式进行取模计算出其他缓存服务器节点的值，并且将节点全部映射到hash环上。</p>\n</li>\n<li><p>在后端真实web服务器上有一张名为a.jpg的图片，且是以图片的名称作为找到图片的key。使用与计算缓存节点相同的公式对a.jpg做取模计算，同时也将他映射到hash环上。</p>\n</li>\n<li><p>缓存节点和图片都被映射到了hash环上后，以a.jpg为起始，顺时针碰到的第一个服务器就是图片应该被存放到的缓存服务器。（其他图片通过相同的算法和缓存方法都被存放到了自己对应的缓存服务器上）</p>\n</li>\n<li><p>由于被缓存对象(图片)与服务器hash后的值是固定的。那么在服务器不变的情况下，用户想要访问该图片时，只需要对url上的文件名进行类似 hash(A)%2^32=”0-2^32之间的一个值” 这样的计算，就可以计算出这张图片被缓存在了hash环上的哪台缓存节点服务器上了。直接去对应的服务器上查找该图片就成了。</p>\n</li>\n</ol>\n<h3 id=\"对比url-hash\"><a href=\"#对比url-hash\" class=\"headerlink\" title=\"对比url_hash\"></a>对比url_hash</h3><ol>\n<li>一致性hash算法如何解决url_hash因单台缓存节点的宕机（数量变化）而导致整个缓存系统血崩的情况？<br>url_hash: hash取模 数量变化 &gt; 缓存失效<br>如果hash环上增加一台服务器D，那么如下图：使得原本缓存在A上的一部分缓存被改变顺时针缓存在了D上，而这种情况下只是失效了一部分缓存，大部分的缓存还是可以正常访问的，从而不至于整个缓存系统全部失效而导致在同一时间所有的压力都集中到后端真实的web服务器上而发生集群雪崩的情况。</li>\n</ol>\n<h3 id=\"一致性hash算法存在的问题\"><a href=\"#一致性hash算法存在的问题\" class=\"headerlink\" title=\"一致性hash算法存在的问题\"></a>一致性hash算法存在的问题</h3><ol>\n<li>hash偏斜，在实际应用中缓存节点不会理想的在hash环上均匀的分布，导致单台缓存服务节点承受大多数的缓存和访问压力（缓存不均匀，多台缓存节点资源使用不均匀，系统崩溃），这也是不希望看到的。</li>\n</ol>\n<p><strong>解决方法：</strong></p>\n<ol>\n<li>服务器尽量多的情况下，分布会均匀的可能性更大。</li>\n<li>在缓存服务器的资源有限的情况下，可以通过现有的物理节点在hash环上映射出足够多的虚拟节点，（假装缓存服务器节点很多）。<br>映射出的虚拟节点越多，hash环上的服务器节点就越多，缓存被平均分布的概率就越大。</li>\n</ol>\n<pre><code>那么用户在读写缓存时，过程就变成了 虚拟节点---&gt;真实节点---&gt;缓存读取\n</code></pre>\n<p><img src=\"/images/pasted-35.png\" alt=\"一致性hash\"></p>\n","categories":["OPS"],"tags":["OPS","Nginx","一致性hash算法"]},{"title":"Redis-5.0.5介绍与C7下的编译安装","url":"/forward/fb94f251.html","content":"<h2 id=\"Redis-是什么\"><a href=\"#Redis-是什么\" class=\"headerlink\" title=\"Redis 是什么\"></a>Redis 是什么</h2><ul>\n<li><p><code>Redis</code> 是一种基于键值对的 <code>NoSQL</code> 数据库,与很多键值对数据库不同,<code>redis</code> 中的值可以有<code>string,hash,list,set,zset,geo</code> 等多种数据结构和算法组成.</p>\n</li>\n<li><p><code>Redis</code> 会将所有的数据都放在内存中,所以他的读写性能非常惊人.Redis 还可以将内存中的数据利用快照和日志的形式保存到硬盘上</p>\n</li>\n<li><p><code>Redis</code> 提供了键过期,发布订阅,事务,流水线等附加功能.</p>\n</li>\n</ul>\n<h3 id=\"Redis-重要特性\"><a href=\"#Redis-重要特性\" class=\"headerlink\" title=\"Redis 重要特性\"></a>Redis 重要特性</h3><ul>\n<li>1.速度快<ul>\n<li>Redis 所有的数据都存放在内存中</li>\n<li>Redis 使用 C 语言实现</li>\n<li>Redis 使用单线程架构</li>\n</ul>\n</li>\n<li>2.基于键值对的数据结构服务器<ul>\n<li>5 中数据结构:字符串,哈希,列表,集合,有序集合</li>\n</ul>\n</li>\n<li>3.丰富的功能<ul>\n<li>提供了键过期功能,可以实现缓存</li>\n<li>提供了发布订阅功能,可以实现消息系统</li>\n<li>提供了 pipeline 功能,客户端可以将一批命令一次性传到 Redis,减少了网络开销</li>\n</ul>\n</li>\n<li>4.简单稳定<ul>\n<li>源码很少,3.0 版本以后 5 万行左右.</li>\n<li>使用单线程模型法,是的 Redis 服务端处理模型变得简单.</li>\n<li>不依赖操作系统的中的类库</li>\n</ul>\n</li>\n<li>5.客户端语言多<ul>\n<li>java,PHP,python,C,C++,Nodejs 等</li>\n</ul>\n</li>\n<li>6.持久化<ul>\n<li>RDB 和 AOF</li>\n</ul>\n</li>\n<li>7.主从复制</li>\n<li>8.高可用和分布式<ul>\n<li>哨兵</li>\n<li>集群</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Redis-应用场景\"><a href=\"#Redis-应用场景\" class=\"headerlink\" title=\"Redis 应用场景\"></a>Redis 应用场景</h3><ul>\n<li>1.缓存-键过期时间<ul>\n<li>缓存 session 会话</li>\n<li>缓存用户信息,找不到再去 mysql 查,查到然后回写到 redis</li>\n</ul>\n</li>\n<li>2.排行榜-列表&amp;有序集合<ul>\n<li>热度排名排行榜</li>\n<li>发布时间排行榜</li>\n</ul>\n</li>\n<li>3.计数器应用-天然支持计数器<ul>\n<li>帖子浏览数</li>\n<li>视频播放次数</li>\n<li>商品浏览数</li>\n</ul>\n</li>\n<li>4.社交网络-集合<ul>\n<li>踩/赞,粉丝,共同好友/喜好,推送,打标签</li>\n</ul>\n</li>\n<li>5.消息队列系统-发布订阅<ul>\n<li>配合 elk 实现日志收集</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"目录规划\"><a href=\"#目录规划\" class=\"headerlink\" title=\"目录规划\"></a>目录规划</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### redis 下载目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /server/&#123;tools,scripts&#125; &amp;&amp; <span class=\"built_in\">cd</span> /server/tools</span><br><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class=\"line\"><span class=\"comment\">### redis 安装目录</span></span><br><span class=\"line\">/application/redis_cluster/redis_&#123;PORT&#125;/&#123;conf,logs,pid&#125;</span><br><span class=\"line\"><span class=\"comment\">### redis 数据目录</span></span><br><span class=\"line\">/data/redis_cluster/redis_&#123;PORT&#125;/</span><br><span class=\"line\"><span class=\"comment\">### redis 运维脚本</span></span><br><span class=\"line\">/server/scripts/redis_shell.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"解析主机\"><a href=\"#解析主机\" class=\"headerlink\" title=\"解析主机\"></a>解析主机</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; /etc/hosts &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">10.0.0.51 db01</span></span><br><span class=\"line\"><span class=\"string\">10.0.0.52 db02</span></span><br><span class=\"line\"><span class=\"string\">10.0.0.53 db03</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置互信\"><a href=\"#配置互信\" class=\"headerlink\" title=\"配置互信\"></a>配置互信</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ssh-keygen </span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ssh-copy-id db02</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ssh-copy-id db03</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install gcc automake autoconf libtool make</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># tar -xf /server/tools/redis-5.0.5.tar.gz -C /application/redis_cluster/</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ln -s /application/redis_cluster/redis-5.0.5/ /application/redis_cluster/redis</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ll /application/redis_cluster/</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root  40 5月  10 15:28 redis -&gt; /application/redis_cluster/redis-5.0.5/</span><br><span class=\"line\">drwxrwxr-x 6 root root 309 6月  13 2018 redis-5.0.5</span><br><span class=\"line\">drwxr-xr-x 5 root root  41 5月  10 15:12 redis_6379</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cd /application/redis_cluster/redis-5.0.5/ &amp;&amp; make //不执行make install，将redis编译好的可执行文件限制在此目录，否则可执行文件会被拷贝到/usr/local/bin 目录中，后者不需要额外添加环境变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">//或者利用官方提供的脚本进行交互式安装</span><br><span class=\"line\"></span><br><span class=\"line\">/application/redis_cluster/redis/utils/install_server.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加环境变量\"><a href=\"#添加环境变量\" class=\"headerlink\" title=\"添加环境变量\"></a>添加环境变量</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat &gt;&gt;/etc/bashrc&lt;&lt;&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/application/redis_cluster/redis/src:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># . /etc/bashrc</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-server -v</span></span><br><span class=\"line\">Redis server v=5.0.5 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=80d2ef2db5b4103a</span><br></pre></td></tr></table></figure>\n<h2 id=\"可执行文件\"><a href=\"#可执行文件\" class=\"headerlink\" title=\"可执行文件\"></a>可执行文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-benchmark  </span><br><span class=\"line\">redis-check-rdb       </span><br><span class=\"line\">redis-check-aof  </span><br><span class=\"line\">redis-cli        <span class=\"comment\">#客户端连接工具</span></span><br><span class=\"line\">redis-sentinel   <span class=\"comment\">#哨兵服务端</span></span><br><span class=\"line\">redis-server     <span class=\"comment\">#服务端</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /application/redis_cluster/redis_6379/conf/redis_6379.conf &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">### 以守护进程模式启动</span></span><br><span class=\"line\">daemonize <span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"comment\">### 绑定的主机地址</span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 10.0.0.51 127.0.0.1</span><br><span class=\"line\"><span class=\"comment\">### 监听端口</span></span><br><span class=\"line\">port 6379</span><br><span class=\"line\"><span class=\"comment\">### pid 文件和 log 文件的保存地址</span></span><br><span class=\"line\">pidfile /opt/redis_cluster/redis_6379/pid/redis_6379.pid</span><br><span class=\"line\">logfile /opt/redis_cluster/redis_6379/logs/redis_6379.<span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\">### 设置数据库的数量，默认数据库为 0</span></span><br><span class=\"line\">databases 16</span><br><span class=\"line\"><span class=\"comment\">### 指定本地持久化文件的文件名,默认是 dump.rdb</span></span><br><span class=\"line\">dbfilename redis_6379.rdb</span><br><span class=\"line\"><span class=\"comment\">### 本地数据库的目录</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /data/redis_cluster/redis_6379</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动连接redis\"><a href=\"#启动连接redis\" class=\"headerlink\" title=\"启动连接redis\"></a>启动连接redis</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-server /application/redis_cluster/redis_6379/conf/redis_6379.conf </span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -ef | grep redis</span></span><br><span class=\"line\">root      4414     1  0 16:14 ?        00:00:00 redis-server 10.0.0.51:6379</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db01</span></span><br><span class=\"line\">db01:6379&gt;</span><br><span class=\"line\">db01:6379&gt; SHUTDOWN //关闭</span><br></pre></td></tr></table></figure>\n<h2 id=\"systemctl管理Redis启动、停止、开机启动\"><a href=\"#systemctl管理Redis启动、停止、开机启动\" class=\"headerlink\" title=\"systemctl管理Redis启动、停止、开机启动\"></a>systemctl管理Redis启动、停止、开机启动</h2><h3 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h3><p>用service来管理服务的时候，是在/etc/init.d/目录中创建一个脚本文件，来管理服务的启动和停止，在systemctl中，也类似，文件目录有所不同，在<code>/lib/systemd/system/</code>目录下创建一个脚本文件<code>redis6379.service</code>，里面的内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/lib/systemd/system/redis6379.service&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Redis</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/redis_cluster/redis/src/redis-server /application/redis_cluster/redis_6379/conf/redis_6379.conf  --daemonize no</span></span><br><span class=\"line\"><span class=\"string\">ExecStop=/application/redis_cluster/redis/src/redis-cli -h 127.0.0.1 -p 6379 shutdown</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>[Unit] 表示这是基础信息<ul>\n<li>Description 是描述</li>\n<li>After 是在那个服务后面启动，一般是网络服务启动后启动</li>\n</ul>\n</li>\n<li>[Service] 表示这里是服务信息<ul>\n<li>ExecStart 是启动服务的命令</li>\n<li>ExecStop 是停止服务的指令</li>\n</ul>\n</li>\n<li>[Install] 表示这是是安装相关信息<ul>\n<li>WantedBy 是以哪种方式启动：multi-user.target表明当系统以多用户方式（默认的运行级别）启动时，这个服务需要被自动运行。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建软链接\"><a href=\"#创建软链接\" class=\"headerlink\" title=\"创建软链接\"></a>创建软链接</h3><p>创建软链接是为了下一步系统\b初始化时自动启动服务<br><code>ln -s /lib/systemd/system/redis6379.service /etc/systemd/system/multi-user.target.wants/redis6379.service</code></p>\n<h3 id=\"刷新配置\"><a href=\"#刷新配置\" class=\"headerlink\" title=\"刷新配置\"></a>刷新配置</h3><p>刚刚配置的服务需要让systemctl能识别，就必须刷新配置<br><code>systemctl daemon-reload</code></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl status redis6379</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart redis6379</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl disable redis6379</span></span><br><span class=\"line\">Removed symlink /etc/systemd/system/multi-user.target.wants/redis6379.service.</span><br></pre></td></tr></table></figure>","categories":["DBA"],"tags":["NoSQL","Redis"]},{"title":"SQL初识","url":"/forward/b571ca78.html","content":"<h3 id=\"SQL介绍\"><a href=\"#SQL介绍\" class=\"headerlink\" title=\"SQL介绍\"></a>SQL介绍</h3><p><strong>结构化查询语言。5.7 版本加入了SQL Mode 严格模式</strong></p>\n<h3 id=\"SQL作用\"><a href=\"#SQL作用\" class=\"headerlink\" title=\"SQL作用\"></a>SQL作用</h3><p><strong>SQL 用来管理和操作MySQL内部的对象</strong><br><strong>SQL对象：</strong></p>\n<ul>\n<li>库：库名，库属性</li>\n<li>表：表名，表属性，列名，记录，数据类型，列属性和约束</li>\n</ul>\n<h3 id=\"SQL语句的类型\"><a href=\"#SQL语句的类型\" class=\"headerlink\" title=\"SQL语句的类型\"></a>SQL语句的类型</h3><ul>\n<li><strong>DDL：数据定义语言    data definition language</strong></li>\n<li><strong>DCL：数据控制语言    data control language</strong></li>\n<li><strong>DML：数据操作语言    data manipulation language</strong></li>\n<li><strong>DQL：数据查询语言    data query language</strong></li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p><img src=\"/images/img-17.png\" alt=\"data type\"></p>\n<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><ul>\n<li><strong>控制数据的规范性，让数据有具体含义，在列上进行控制</strong></li>\n</ul>\n<h4 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h4><h5 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h5><ul>\n<li>char(32):<ul>\n<li>定长长度为32的字符串。</li>\n<li>存储数据时，一次性提供32字符长度的存储空间，存不满，用空格填充。</li>\n</ul>\n</li>\n<li>varchar(32):<ul>\n<li>可变长度的字符串类型。</li>\n<li>存数据时，首先进行字符串长度判断，按需分配存储空间</li>\n<li><strong>会单独占用一个字节来记录此次的字符长度</strong>。超过255之后，需要<strong>两个字节长度</strong>记录字符长度。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"面试题：\"><a href=\"#面试题：\" class=\"headerlink\" title=\"面试题：\"></a>面试题：</h5><ul>\n<li>char 和varchar的区别？<ul>\n<li>  255   65535</li>\n<li>定长（固定存储空间）   变长（按需）</li>\n</ul>\n</li>\n<li>char和varchar 如何选择？<ul>\n<li>char类型，固定长度的字符串列，比如手机号，身份证号，银行卡号，性别等 </li>\n<li>varchar类型，不确定长度的字符串，可以使用。<br>悬念：<br>为什么呢？影响到索引的高度？</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"enum-枚举类型\"><a href=\"#enum-枚举类型\" class=\"headerlink\" title=\"enum 枚举类型\"></a>enum 枚举类型</h5><ul>\n<li><code>enum(&#39;bj&#39;,&#39;sh&#39;,&#39;sz&#39;,&#39;cq&#39;,&#39;hb&#39;,......)</code></li>\n<li>数据行较多时，会影响到索引的应用</li>\n<li><strong>注意：</strong>数字类禁止使用enum类型</li>\n</ul>\n<h5 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h5><ul>\n<li>tinyint </li>\n<li>int</li>\n</ul>\n<h5 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h5><ul>\n<li>timestamp</li>\n<li>datetime</li>\n</ul>\n<p>更多：<a href=\"https://www.jianshu.com/p/08c4b78402ff\">https://www.jianshu.com/p/08c4b78402ff</a></p>\n<h3 id=\"表属性列属性\"><a href=\"#表属性列属性\" class=\"headerlink\" title=\"表属性列属性\"></a>表属性列属性</h3><h4 id=\"表属性\"><a href=\"#表属性\" class=\"headerlink\" title=\"表属性\"></a>表属性</h4><ul>\n<li>存储引擎 ：engine =  InnoDB</li>\n<li>字符集   ：charset = utf8mb4</li>\n<li>排序规则（校对规则） ：collation <ul>\n<li>针对英文字符串大小写问题，用于规定大小写是否敏感。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符集如何选择：\"><a href=\"#字符集如何选择：\" class=\"headerlink\" title=\"字符集如何选择：\"></a>字符集如何选择：</h4><ul>\n<li>utf8    中文  三个字节长度</li>\n<li>utf8mb4 中文  四个字节长度<ul>\n<li>才是真正的utf8，且支持emoji字符</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"列的属性和约束\"><a href=\"#列的属性和约束\" class=\"headerlink\" title=\"列的属性和约束\"></a>列的属性和约束</h4><h5 id=\"主键：-primary-key-PK\"><a href=\"#主键：-primary-key-PK\" class=\"headerlink\" title=\"主键： primary key (PK)\"></a>主键： primary key (PK)</h5><ul>\n<li><strong>特点：唯一，非空.</strong></li>\n<li><strong>什么样的列适合当主键：</strong><br>  数字列，整数列，无关列，自增的</li>\n<li><strong>聚集索引列：</strong></li>\n<li><strong>定义：</strong>是一种约束，也是一种索引类型，在一张表中只能有一个主键。</li>\n</ul>\n<h5 id=\"非空：-Not-NULL\"><a href=\"#非空：-Not-NULL\" class=\"headerlink\" title=\"非空： Not NULL\"></a>非空： Not NULL</h5><p><strong>说明：</strong>我们建议，对于普通列来讲，尽量设置not null，一般配合默认值使用。</p>\n<h5 id=\"默认值：default\"><a href=\"#默认值：default\" class=\"headerlink\" title=\"默认值：default\"></a>默认值：default</h5><p><strong>说明：</strong>数字列的默认值使用0 ,字符串类型，设置为一个nil或null</p>\n<h5 id=\"自增-auto-increment\"><a href=\"#自增-auto-increment\" class=\"headerlink\" title=\"自增 auto_increment\"></a>自增 auto_increment</h5><p><strong>说明：</strong>针对数字列，自动生成顺序值</p>\n<h5 id=\"无符号-unsigned\"><a href=\"#无符号-unsigned\" class=\"headerlink\" title=\"无符号 unsigned\"></a>无符号 unsigned</h5><p><strong>说明：</strong>针对数字列  &lt;==不让有负数符号，必须是正数。</p>\n<h3 id=\"库表操作语句\"><a href=\"#库表操作语句\" class=\"headerlink\" title=\"库表操作语句\"></a>库表操作语句</h3><h4 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h4><h5 id=\"（1）建库-DDL语句\"><a href=\"#（1）建库-DDL语句\" class=\"headerlink\" title=\"（1）建库 DDL语句\"></a>（1）建库 DDL语句</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database oldguo charset utf8mb4;</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">mysql&gt; show create database oldguo;</span><br></pre></td></tr></table></figure>\n<h5 id=\"（2）改库-DDL语句\"><a href=\"#（2）改库-DDL语句\" class=\"headerlink\" title=\"（2）改库 DDL语句\"></a>（2）改库 DDL语句</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter database oldguo1 charset utf8mb4;</span><br></pre></td></tr></table></figure>\n<h5 id=\"（3）删库（不代表生产操作！）\"><a href=\"#（3）删库（不代表生产操作！）\" class=\"headerlink\" title=\"（3）删库（不代表生产操作！）\"></a>（3）删库（不代表生产操作！）</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; drop database oldguo1;</span><br></pre></td></tr></table></figure>\n<h4 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h4><h5 id=\"（0）建表建库规范：\"><a href=\"#（0）建表建库规范：\" class=\"headerlink\" title=\"（0）建表建库规范：\"></a>（0）建表建库规范：</h5><ul>\n<li>1、库名和表名是小写字母</li>\n<li>为啥？开发和生产平台可能会出现问题（操作系统对大小写敏感不同）。</li>\n<li>2、不能以数字开头</li>\n<li>3、不支持-  支持_</li>\n<li>4、内部函数名不能使用</li>\n<li>5、名字和业务功能有关（his,jf,yz,oss,erp,crm…）</li>\n</ul>\n<h5 id=\"（1）建表\"><a href=\"#（1）建表\" class=\"headerlink\" title=\"（1）建表\"></a>（1）建表</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">create table oldfly (</span><br><span class=\"line\"><span class=\"built_in\">id</span> int not null primary key auto_increment comment <span class=\"string\">&#x27;学号&#x27;</span>,</span><br><span class=\"line\">name varchar(255) not null comment <span class=\"string\">&#x27;学生姓名&#x27;</span>,</span><br><span class=\"line\">age tinyint unsigned not null default 0 comment <span class=\"string\">&#x27;学生年龄&#x27;</span>,</span><br><span class=\"line\">gender enum(<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;f&#x27;</span>,<span class=\"string\">&#x27;n&#x27;</span>) not null default <span class=\"string\">&#x27;n&#x27;</span> comment <span class=\"string\">&#x27;性别&#x27;</span></span><br><span class=\"line\">)charset=utf8mb4 engine=innodb;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE oldfei (</span><br><span class=\"line\"><span class=\"built_in\">id</span> int NOT NULL PRIMARY KEY auto_increment COMMENT <span class=\"string\">&#x27;序列&#x27;</span>,</span><br><span class=\"line\">name VARCHAR(255) NOT NULL COMMENT <span class=\"string\">&#x27;姓名&#x27;</span>,</span><br><span class=\"line\">qq VARCHAR(20) NOT NULL UNIQUE COMMENT <span class=\"string\">&#x27;QQ&#x27;</span>,</span><br><span class=\"line\">stime datetime NOT NULL DEFAULT NOW()</span><br><span class=\"line\">)CHARSET=utf8mb4 ENGINE=INNODB</span><br></pre></td></tr></table></figure>\n<h5 id=\"（2）改表\"><a href=\"#（2）改表\" class=\"headerlink\" title=\"（2）改表\"></a>（2）改表</h5><p><strong>添加列：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE oldfly ADD telnum CHAR(11) NOT NULL UNIQUE COMMENT <span class=\"string\">&#x27;手机号&#x27;</span>;</span><br><span class=\"line\">-- 练习：</span><br><span class=\"line\">-- 在上表中加一个状态列state，非空，默认值为1.</span><br><span class=\"line\">ALTER TABLE oldfly ADD state ENUM(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>) DEFAULT 1 NOT NULL COMMENT <span class=\"string\">&#x27;状态&#x27;</span>;</span><br><span class=\"line\">-- online-DDL : pt-osc (自己研究下***，不锁表修改)</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看列-查看表属性-：DESC\"><a href=\"#查看列-查看表属性-：DESC\" class=\"headerlink\" title=\"查看列(查看表属性)：DESC\"></a>查看列(查看表属性)：DESC</h5><p><code>DESC oldfly;</code></p>\n<h5 id=\"删除列（生产不能轻易用）：DROP\"><a href=\"#删除列（生产不能轻易用）：DROP\" class=\"headerlink\" title=\"删除列（生产不能轻易用）：DROP\"></a>删除列（生产不能轻易用）：DROP</h5><p><code>ALTER TABLE oldfly DROP state;</code></p>\n<h5 id=\"在指定name列后插入qq列：-AFTER\"><a href=\"#在指定name列后插入qq列：-AFTER\" class=\"headerlink\" title=\"在指定name列后插入qq列： AFTER\"></a>在指定name列后插入qq列： AFTER</h5><p><code>ALTER TABLE oldfly ADD qq VARCHAR(255) NOT NULL UNIQUE COMMENT &#39;QQ号&#39; AFTER name;</code></p>\n<h5 id=\"首列添加sid列：FIRST\"><a href=\"#首列添加sid列：FIRST\" class=\"headerlink\" title=\"首列添加sid列：FIRST\"></a>首列添加sid列：FIRST</h5><p><code>ALTER TABLE oldfly ADD sid VARCHAR(255) NOT NULL UNIQUE COMMENT &#39;学号&#39; FIRST;</code></p>\n<h5 id=\"修改列属性（覆盖原来）：MODIFY\"><a href=\"#修改列属性（覆盖原来）：MODIFY\" class=\"headerlink\" title=\"修改列属性（覆盖原来）：MODIFY\"></a>修改列属性（覆盖原来）：MODIFY</h5><p><code>ALTER TABLE oldfly MODIFY name VARCHAR(128) NOT NULL;</code></p>\n<h5 id=\"修改列属性（覆盖原来）同时可修改列名：CHANGE\"><a href=\"#修改列属性（覆盖原来）同时可修改列名：CHANGE\" class=\"headerlink\" title=\"修改列属性（覆盖原来）同时可修改列名：CHANGE\"></a>修改列属性（覆盖原来）同时可修改列名：CHANGE</h5><p><code>ALTER TABLE oldfly CHANGE gender gd CHAR(1) NOT NULL DEFAULT &#39;n&#39; COMMENT &#39;性别&#39;;</code></p>\n<h5 id=\"查看详细表结构-show-建表语句-：\"><a href=\"#查看详细表结构-show-建表语句-：\" class=\"headerlink\" title=\"查看详细表结构(show 建表语句)：\"></a>查看详细表结构(show 建表语句)：</h5><p><code>SHOW CREATE TABLE oldfly;</code></p>\n<h5 id=\"创建一个相同表结构的空表：\"><a href=\"#创建一个相同表结构的空表：\" class=\"headerlink\" title=\"创建一个相同表结构的空表：\"></a>创建一个相同表结构的空表：</h5><p><code>CREATE TABLE feichi LIKE oldfly;</code></p>\n<h5 id=\"删除列：\"><a href=\"#删除列：\" class=\"headerlink\" title=\"删除列：\"></a>删除列：</h5><p><code>ALTER TABLE oldfly DROP telnum;</code></p>\n<p><img src=\"/images/img-30.png\" alt=\"DDL\"></p>\n<hr>\n<h5 id=\"插入数据：\"><a href=\"#插入数据：\" class=\"headerlink\" title=\"插入数据：\"></a>插入数据：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---INSERT </span><br><span class=\"line\">---最简单的方法插入记录：</span><br><span class=\"line\">DESC oldfly;</span><br><span class=\"line\">INSERT INTO oldfly VALUES(1,<span class=\"string\">&#x27;xkxkx&#x27;</span>,<span class=\"string\">&#x27;5856215&#x27;</span>,<span class=\"string\">&#x27;20&#x27;</span>);</span><br><span class=\"line\">---最规范的方法插入记录：</span><br><span class=\"line\">INSERT INTO oldfly(name,qq,age) VALUES(<span class=\"string\">&#x27;jl&#x27;</span>,<span class=\"string\">&#x27;229296429&#x27;</span>,<span class=\"string\">&#x27;80&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"批量插入：\"><a href=\"#批量插入：\" class=\"headerlink\" title=\"批量插入：\"></a>批量插入：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO oldfei(name,qq) VALUES</span><br><span class=\"line\">(<span class=\"string\">&#x27;xkxkx&#x27;</span>,<span class=\"string\">&#x27;5856215&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;ssdew&#x27;</span>,<span class=\"string\">&#x27;885728731&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;鱼疯&#x27;</span>,<span class=\"string\">&#x27;383728731&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;小黑&#x27;</span>,<span class=\"string\">&#x27;283728731&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;猴子&#x27;</span>,<span class=\"string\">&#x27;182728731&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;老蔡&#x27;</span>,<span class=\"string\">&#x27;585728731&#x27;</span>)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看所有数据DQL：\"><a href=\"#查看所有数据DQL：\" class=\"headerlink\" title=\"查看所有数据DQL：\"></a>查看所有数据DQL：</h5><p><code>SELECT * FORM oldfly;</code></p>\n<h5 id=\"更新指定记录：\"><a href=\"#更新指定记录：\" class=\"headerlink\" title=\"更新指定记录：\"></a>更新指定记录：</h5><p><code>UPDATE oldfly SET qq=&#39;10001&#39; WHERE id=1;</code></p>\n<h5 id=\"DELETE-注意谨慎操作！！！！-：\"><a href=\"#DELETE-注意谨慎操作！！！！-：\" class=\"headerlink\" title=\"DELETE (注意谨慎操作！！！！)：\"></a>DELETE (注意谨慎操作！！！！)：</h5><p><code>DELETE FROM oldfly WHERE id=4; </code></p>\n<h5 id=\"生产需求：将一个大表全部数据清空\"><a href=\"#生产需求：将一个大表全部数据清空\" class=\"headerlink\" title=\"生产需求：将一个大表全部数据清空\"></a>生产需求：将一个大表全部数据清空</h5><p>DELETE FROM oldguo;<br>TRUNCATE TABLE oldguo;</p>\n<h5 id=\"DELETE-和-TRUNCATE-区别\"><a href=\"#DELETE-和-TRUNCATE-区别\" class=\"headerlink\" title=\"DELETE 和 TRUNCATE 区别\"></a>DELETE 和 TRUNCATE 区别</h5><ol>\n<li>DELETE 逻辑逐行删除，不会降低自增长的起始值。效率很低，碎片较多，会影响到性能。</li>\n<li>TRUNCATE ，属于物理删除，将表段中的区进行清空，不会产生碎片。性能较高。</li>\n</ol>\n<h5 id=\"生产需求：使用update替代delete，进行伪删除\"><a href=\"#生产需求：使用update替代delete，进行伪删除\" class=\"headerlink\" title=\"生产需求：使用update替代delete，进行伪删除\"></a>生产需求：使用update替代delete，进行伪删除</h5><ol>\n<li>添加状态列state (0代表存在，1代表删除)<br><code>ALTER TABLE oldguo ADD state TINYINT NOT NULL DEFAULT 0 ;</code></li>\n<li>使用update模拟delete <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM oldguo WHERE <span class=\"built_in\">id</span>=6;</span><br><span class=\"line\">替换为</span><br><span class=\"line\">UPDATE oldguo SET state=1 WHERE <span class=\"built_in\">id</span>=6;</span><br><span class=\"line\">SELECT * FROM oldguo ;</span><br></pre></td></tr></table></figure></li>\n<li>业务语句修改<br><code>SELECT * FROM oldguo ;</code><br>改为<br><code>SELECT * FROM oldguo WHERE state=0;</code></li>\n</ol>\n<p><img src=\"/images/img-29.png\" alt=\"DML\"></p>\n","categories":["DBA"],"tags":["MySQL","SQL"]},{"title":"Redis-维护工具&常用命令总结","url":"/forward/212d60e3.html","content":"<h2 id=\"Redis-集群常用命令\"><a href=\"#Redis-集群常用命令\" class=\"headerlink\" title=\"Redis 集群常用命令\"></a>Redis 集群常用命令</h2><h3 id=\"集群-cluster\"><a href=\"#集群-cluster\" class=\"headerlink\" title=\"集群(cluster)\"></a>集群(cluster)</h3><ul>\n<li><code>CLUSTER INFO</code> 打印集群的信息</li>\n<li><code>CLUSTER NODES</code> 列出集群当前已知的所有节点（node），以及这些节点的相关信息。</li>\n</ul>\n<h3 id=\"节点-node\"><a href=\"#节点-node\" class=\"headerlink\" title=\"节点(node)\"></a>节点(node)</h3><ul>\n<li><code>CLUSTER MEET &lt;ip&gt; &lt;port&gt;</code> 将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。</li>\n<li><code>CLUSTER FORGET &lt;node_id&gt;</code> 从集群中移除 node_id 指定的节点。</li>\n<li><code>CLUSTER REPLICATE &lt;node_id&gt;</code> 将当前节点设置为 node_id 指定的节点的从节点。</li>\n<li><code>CLUSTER SAVECONFIG</code> 将节点的配置文件保存到硬盘里面。</li>\n</ul>\n<h3 id=\"槽-slot\"><a href=\"#槽-slot\" class=\"headerlink\" title=\"槽(slot)\"></a>槽(slot)</h3><ul>\n<li><code>CLUSTER ADDSLOTS &lt;slot&gt; [slot ...]</code> 将一个或多个槽（slot）指派（assign）给当前节点。</li>\n<li><code>CLUSTER DELSLOTS &lt;slot&gt; [slot ...]</code> 移除一个或多个槽对当前节点的指派。</li>\n<li><code>CLUSTER FLUSHSLOTS</code> 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。</li>\n<li><code>CLUSTER SETSLOT &lt;slot&gt; NODE &lt;node_id&gt;</code> 将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽&gt;，然后再进行指派。</li>\n<li><code>CLUSTER SETSLOT &lt;slot&gt; MIGRATING &lt;node_id&gt;</code> 将本节点的槽 slot 迁移到 node_id 指定的节点中。</li>\n<li><code>CLUSTER SETSLOT &lt;slot&gt; IMPORTING &lt;node_id&gt;</code> 从 node_id 指定的节点中导入槽 slot 到本节点。</li>\n<li><code>CLUSTER SETSLOT &lt;slot&gt; STABLE</code> 取消对槽 slot 的导入（import）或者迁移（migrate）。</li>\n</ul>\n<h3 id=\"键-key\"><a href=\"#键-key\" class=\"headerlink\" title=\"键 (key)\"></a>键 (key)</h3><ul>\n<li><code>CLUSTER KEYSLOT &lt;key&gt;</code> 计算键 key 应该被放置在哪个槽上。</li>\n<li><code>CLUSTER COUNTKEYSINSLOT &lt;slot&gt;</code> 返回槽 slot 目前包含的键值对数量。<code>CLUSTER GETKEYSINSLOT &lt;slot&gt; &lt;count&gt;</code>返回 count 个 slot 槽中的键。</li>\n</ul>\n<h2 id=\"Redis通用运维脚本\"><a href=\"#Redis通用运维脚本\" class=\"headerlink\" title=\"Redis通用运维脚本\"></a>Redis通用运维脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"comment\"># File Name: redis_shell.sh</span></span><br><span class=\"line\"><span class=\"comment\"># Created Time: 2019年05月12日 星期二 12时54分39秒</span></span><br><span class=\"line\"><span class=\"comment\"># Version: V1.0</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Felix</span></span><br><span class=\"line\"><span class=\"comment\"># Organization: 360JR OPS</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">USAG</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;sh <span class=\"variable\">$0</span> &#123;start|stop|restart|login|ps|tail&#125; PORT&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> = 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    REDIS_PORT=<span class=\"string\">&#x27;6379&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> </span><br><span class=\"line\">    [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> = 2 -a -z <span class=\"string\">&quot;<span class=\"subst\">$(echo <span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span>|sed &#x27;s#[0-9]##g&#x27;)</span>&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    REDIS_PORT=<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    USAG</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">REDIS_IP=$(ip addr show enp0s8|sed -nr <span class=\"string\">&#x27;3s#^.*inet (.*)/.*$#\\1#gp&#x27;</span>)</span><br><span class=\"line\">PATH_DIR=/application/redis_cluster/redis_<span class=\"variable\">$&#123;REDIS_PORT&#125;</span>/</span><br><span class=\"line\">PATH_CONF=/application/redis_cluster/redis_<span class=\"variable\">$&#123;REDIS_PORT&#125;</span>/conf/redis_<span class=\"variable\">$&#123;REDIS_PORT&#125;</span>.conf</span><br><span class=\"line\">PATH_LOG=/application/redis_cluster/redis_<span class=\"variable\">$&#123;REDIS_PORT&#125;</span>/logs/redis_<span class=\"variable\">$&#123;REDIS_PORT&#125;</span>.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_START</span></span>()&#123;</span><br><span class=\"line\">    redis-server <span class=\"variable\">$&#123;PATH_CONF&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_SHUTDOWN</span></span>()&#123;</span><br><span class=\"line\">    redis-cli -c -h <span class=\"variable\">$&#123;REDIS_IP&#125;</span> -p <span class=\"variable\">$&#123;REDIS_PORT&#125;</span> shutdown</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_LOGIN</span></span>()&#123;</span><br><span class=\"line\">    redis-cli -c -h <span class=\"variable\">$&#123;REDIS_IP&#125;</span> -p <span class=\"variable\">$&#123;REDIS_PORT&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_PS</span></span>()&#123;</span><br><span class=\"line\">    ps -ef|grep redis</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_TAIL</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">tail</span> -f <span class=\"variable\">$&#123;PATH_LOG&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_STATUS</span></span>()&#123;</span><br><span class=\"line\">    redis-cli -c -h <span class=\"variable\">$&#123;REDIS_IP&#125;</span> -p <span class=\"variable\">$&#123;REDIS_PORT&#125;</span> CLUSTER INFO|grep -Ew <span class=\"string\">&quot;cluster_state|cluster_known_nodes|cluster_slots_assigned&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\nSlots state:&quot;</span></span><br><span class=\"line\">    redis-cli -c -h <span class=\"variable\">$&#123;REDIS_IP&#125;</span> -p <span class=\"variable\">$&#123;REDIS_PORT&#125;</span> CLUSTER NODES|awk <span class=\"string\">&#x27;&#123;print $2,$3,$NF&#125;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        CMD_START</span><br><span class=\"line\">        CMD_PS</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        CMD_SHUTDOWN</span><br><span class=\"line\">        CMD_PS</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">        CMD_SHUTDOWN</span><br><span class=\"line\">        CMD_START</span><br><span class=\"line\">        CMD_PS</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    login)</span><br><span class=\"line\">        CMD_LOGIN</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    ps)</span><br><span class=\"line\">        CMD_PS</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    <span class=\"built_in\">tail</span>)</span><br><span class=\"line\">        CMD_TAIL</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    csstatus)</span><br><span class=\"line\">        CMD_STATUS</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">      USAG</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据导入导出工具\"><a href=\"#数据导入导出工具\" class=\"headerlink\" title=\"数据导入导出工具\"></a>数据导入导出工具</h2><h3 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h3><p>刚切换到 redis 集群的时候肯定会面临数据导入的问题,所以这里推荐使用 redis-migrate-tool 工具来导入单节点数据到集群里</p>\n<p>适用于：redis 3.2&amp;以下版本</p>\n<p><strong>官方地址：</strong><a href=\"https://www.oschina.net/p/redis-migrate-tool\">https://www.oschina.net/p/redis-migrate-tool</a></p>\n<h3 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install automake libtool autoconf bzip2</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /application/redis_cluster/</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vipshop/redis-migrate-tool.git</span><br><span class=\"line\">autoreconf -fvi</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试单节点数据导入集群\"><a href=\"#测试单节点数据导入集群\" class=\"headerlink\" title=\"测试单节点数据导入集群\"></a>测试单节点数据导入集群</h3><h4 id=\"生成配置文件：\"><a href=\"#生成配置文件：\" class=\"headerlink\" title=\"生成配置文件：\"></a>生成配置文件：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt; redis_6379_to_6380.conf  &lt;&lt;EOF</span><br><span class=\"line\">[source]</span><br><span class=\"line\">type: single</span><br><span class=\"line\">servers:</span><br><span class=\"line\">- 10.0.0.51:6379</span><br><span class=\"line\">#源</span><br><span class=\"line\"></span><br><span class=\"line\">[target]</span><br><span class=\"line\">type: redis cluster</span><br><span class=\"line\">servers:</span><br><span class=\"line\">- 10.0.0.51:6380 </span><br><span class=\"line\">#复制到目标集群</span><br><span class=\"line\"></span><br><span class=\"line\">[common]</span><br><span class=\"line\">listen: 0.0.0.0:8888</span><br><span class=\"line\">source_safe: true</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成测试数据\"><a href=\"#生成测试数据\" class=\"headerlink\" title=\"生成测试数据\"></a>生成测试数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//启动单节点</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh login 6379</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(<span class=\"built_in\">seq</span> 1 1000)</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"> redis-cli -c -h db01 -p 6379 <span class=\"built_in\">set</span> 6379k_<span class=\"variable\">$&#123;i&#125;</span> v_<span class=\"variable\">$&#123;i&#125;</span> &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;set 6379k_<span class=\"variable\">$&#123;i&#125;</span> is ok&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh login 6379</span></span><br><span class=\"line\">10.0.0.51:6379&gt; DBSIZE</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1000</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查集群状态：\"><a href=\"#检查集群状态：\" class=\"headerlink\" title=\"检查集群状态：\"></a>检查集群状态：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh csstatus 6380</span></span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\"></span><br><span class=\"line\">Slots state:</span><br><span class=\"line\">10.0.0.52:6380@16380 master 6827-10922</span><br><span class=\"line\">10.0.0.52:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.53:6380@16380 master 10923-16383</span><br><span class=\"line\">10.0.0.51:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.51:6380@16380 myself,master 0-5460</span><br><span class=\"line\">10.0.0.53:6381@16381 slave connected</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行导入命令\"><a href=\"#执行导入命令\" class=\"headerlink\" title=\"执行导入命令\"></a>执行导入命令</h4><p><code>[root@db01 ~]# redis-migrate-tool -c redis_6379_to_6380.conf</code></p>\n<h4 id=\"数据校验\"><a href=\"#数据校验\" class=\"headerlink\" title=\"数据校验\"></a>数据校验</h4><p><code>[root@db01 ~]# redis-migrate-tool -c redis_6379_to_6380.conf -C redis_check</code></p>\n<h2 id=\"分析占用空间比较大的键\"><a href=\"#分析占用空间比较大的键\" class=\"headerlink\" title=\"分析占用空间比较大的键\"></a>分析占用空间比较大的键</h2><h3 id=\"需求背景-1\"><a href=\"#需求背景-1\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h3><p>redis的内存使用太大键值太多,不知道哪些键值占用的容量比较大,而且在线分析会影响性能.</p>\n<h3 id=\"安装工具-1\"><a href=\"#安装工具-1\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install python-pip gcc</span><br><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\">pip install rdbtools</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /data/redis_cluster/redis_6379/</span><br><span class=\"line\">rdb -c memory redis_6379.rdb -f 6379_memory.csv</span><br><span class=\"line\"></span><br><span class=\"line\">分析rdb</span><br><span class=\"line\">awk -F <span class=\"string\">&#x27;,&#x27;</span> <span class=\"string\">&#x27;&#123;print $4,$2,$3,$1&#125;&#x27;</span> 6379_memory.csv |<span class=\"built_in\">sort</span>  &gt; 6379.<span class=\"built_in\">sort</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一些概念：\"><a href=\"#一些概念：\" class=\"headerlink\" title=\"一些概念：\"></a>一些概念：</h2><ul>\n<li><p>缓存穿透：<br>访问一个不存在的key，缓存不起作用，请求会穿透到数据库中，流量过大会挂掉数据库。</p>\n<ul>\n<li>解决方案：<br>采用布隆过滤器，使用一个足够大的bitmap，用于存储可能访问的key，不存在的直接被过滤。<br>访问key未在数据库总查询到值，也将空值写入缓存，但可以设置较短的过期时间。</li>\n</ul>\n</li>\n<li><p>缓存雪崩：<br>大量的key设置了相同的过期时间，导致缓存在同一时刻全部失效，造成瞬时数据库请求量过大，压力大增，引起雪崩。</p>\n<ul>\n<li>解决方案：<br>可以给缓存设置过期时间时加上一个随机值时间，使得每个key的过期时间分布开来，不会集中在同一时刻失效。</li>\n</ul>\n</li>\n<li><p>缓存击穿：<br>一个存在的key，在缓存过期的那一刻，同时有大量的请求。这些请求都会击穿到数据库，造成瞬时数据库请求量过大，压力大增。</p>\n<ul>\n<li>解决方案：<br>在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期的key。</li>\n</ul>\n</li>\n</ul>\n","categories":["DBA"],"tags":["NoSQL","Redis","tools"]},{"title":"SVN-集中式版本控制系统部署","url":"/forward/fabc6ce1.html","content":"<h2 id=\"版本控制工具\"><a href=\"#版本控制工具\" class=\"headerlink\" title=\"版本控制工具\"></a>版本控制工具</h2><h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><ul>\n<li>协同修改 <ul>\n<li>多人并行不悖的修改服务器端的同一个文件。</li>\n</ul>\n</li>\n<li>数据备份<ul>\n<li>如果本地文件发生丢失可以服务器端文件进行恢复。</li>\n</ul>\n</li>\n<li>增量式的版本管理<ul>\n<li>服务器端保存每一个版本信息时只保存有修改的局部内容，节约服务器端资源。</li>\n</ul>\n</li>\n<li>权限控制<ul>\n<li>对团队中参与开发的人员进行权限控制。</li>\n</ul>\n</li>\n<li>历史记录<ul>\n<li>查看修改人、修改时间、修改内容、日志信息。</li>\n<li>将本地文件恢复到某一个历史状态。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"版本控制简介\"><a href=\"#版本控制简介\" class=\"headerlink\" title=\"版本控制简介\"></a>版本控制简介</h3><h4 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h4><p>工程设计领域中使用版本控制管理工程蓝图的设计过程。在 IT 开发过程中也可以 使用版本控制思想管理代码的版本迭代。</p>\n<h4 id=\"版本控制工具-1\"><a href=\"#版本控制工具-1\" class=\"headerlink\" title=\"版本控制工具\"></a>版本控制工具</h4><ul>\n<li><strong>思想：</strong>版本控制 </li>\n<li><strong>实现：</strong>版本控制工具</li>\n<li><strong>集中式版本控制工具：</strong> CVS、SVN、VSS……</li>\n<li><strong>分布式版本控制工具：</strong> Git</li>\n</ul>\n<h3 id=\"SVN基本操作\"><a href=\"#SVN基本操作\" class=\"headerlink\" title=\"SVN基本操作\"></a>SVN基本操作</h3><ul>\n<li>检出（Checkout）<ul>\n<li>把服务器端版本库内容完整下载到本地。</li>\n<li>在整个开发过程中只做一次。</li>\n</ul>\n</li>\n<li>更新（Update）<ul>\n<li>把服务器端相对于本地的新的修改下载到本地。  </li>\n</ul>\n</li>\n<li>提交（Commit）<ul>\n<li>把本地修改上传到服务器</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"安装SVN\"><a href=\"#安装SVN\" class=\"headerlink\" title=\"安装SVN\"></a>安装SVN</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># yum install subversion -y</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># svn --version</span></span><br><span class=\"line\">svn，版本 1.7.14 (r1542130)</span><br><span class=\"line\">   编译于 Apr 11 2018，02:40:28</span><br><span class=\"line\"></span><br><span class=\"line\">版权所有 (C) 2013 Apache 软件基金会。</span><br><span class=\"line\">此软件包含了许多人的贡献，请查看文件 NOTICE 以获得更多信息。</span><br><span class=\"line\">Subversion 是开放源代码软件，请参阅 http://subversion.apache.org/ 站点。</span><br><span class=\"line\"></span><br><span class=\"line\">可使用以下的版本库访问模块: </span><br><span class=\"line\"></span><br><span class=\"line\">* ra_neon : 通过 WebDAV 协议使用 neon 访问版本库的模块。</span><br><span class=\"line\">  - 处理“http”方案</span><br><span class=\"line\">  - 处理“https”方案</span><br><span class=\"line\">* ra_svn : 使用 svn 网络协议访问版本库的模块。  - 使用 Cyrus SASL 认证</span><br><span class=\"line\">  - 处理“svn”方案</span><br><span class=\"line\">* ra_local : 访问本地磁盘的版本库模块。</span><br><span class=\"line\">  - 处理“file”方案</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建并配置版本库\"><a href=\"#创建并配置版本库\" class=\"headerlink\" title=\"创建并配置版本库\"></a>创建并配置版本库</h2><h3 id=\"创建版本库目录和具体项目的目录\"><a href=\"#创建版本库目录和具体项目的目录\" class=\"headerlink\" title=\"创建版本库目录和具体项目的目录\"></a>创建版本库目录和具体项目的目录</h3><p><code>[root@wikifx ~]# mkdir -p /data/svn/repository/&#123;pro_oa,pro_erp&#125;</code></p>\n<h3 id=\"创建svn的版本库\"><a href=\"#创建svn的版本库\" class=\"headerlink\" title=\"创建svn的版本库\"></a>创建svn的版本库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># svnadmin create /data/svn/repository/pro_oa/</span></span><br><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># ll /data/svn/repository/pro_oa/</span></span><br><span class=\"line\">总用量 8</span><br><span class=\"line\">drwxr-xr-x 2 root root  54 7月  14 17:09 conf\t<span class=\"comment\">#版本库的配置文件</span></span><br><span class=\"line\">drwxr-sr-x 6 root root 233 7月  14 17:09 db\t<span class=\"comment\">#数据库存放目录</span></span><br><span class=\"line\">-r--r--r-- 1 root root   2 7月  14 17:09 format\t</span><br><span class=\"line\">drwxr-xr-x 2 root root 231 7月  14 17:09 hooks\t<span class=\"comment\">#钩子程序存放目录</span></span><br><span class=\"line\">drwxr-xr-x 2 root root  41 7月  14 17:09 locks</span><br><span class=\"line\">-rw-r--r-- 1 root root 229 7月  14 17:09 README.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置SVN对应的服务\"><a href=\"#配置SVN对应的服务\" class=\"headerlink\" title=\"配置SVN对应的服务\"></a>配置SVN对应的服务</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>服务端指定： <code>/data/svn/repository/</code><br>客户端访问：<code>svn://svnserver:3690/[pro_oa|pro_erp]</code></p>\n<h3 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h3><p><code>[root@wikifx ~]# systemctl enable svnserve.service</code></p>\n<h3 id=\"SVN服务具体配置\"><a href=\"#SVN服务具体配置\" class=\"headerlink\" title=\"SVN服务具体配置\"></a>SVN服务具体配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># cat &gt; /etc/sysconfig/svnserve &lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"comment\"># OPTIONS is used to pass command-line arguments to svnserve.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># Specify the repository location in -r parameter:</span></span><br><span class=\"line\">OPTIONS=<span class=\"string\">&quot;-r /data/svn/repository/&quot;</span> </span><br><span class=\"line\"><span class=\"comment\">#防止一个SVN服务只能对应一个版本库，所以这里所有版本库的父目录。后期通过url访问到指定版本库</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动验证\"><a href=\"#启动验证\" class=\"headerlink\" title=\"启动验证\"></a>启动验证</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># netstat -lntup</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name        </span><br><span class=\"line\">tcp        0      0 0.0.0.0:3690            0.0.0.0:*               LISTEN      3040/svnserve </span><br><span class=\"line\"></span><br><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># ps -ef | grep svnserve</span></span><br><span class=\"line\">root      3040     1  0 17:50 ?        00:00:00 /usr/bin/svnserve --daemon --pid-file=/run/svnserve/svnserve.pid -r /data/svn/repository/</span><br></pre></td></tr></table></figure>\n<h2 id=\"SVN客户端交互\"><a href=\"#SVN客户端交互\" class=\"headerlink\" title=\"SVN客户端交互\"></a>SVN客户端交互</h2><h3 id=\"创建两个工作目录模拟协同开发\"><a href=\"#创建两个工作目录模拟协同开发\" class=\"headerlink\" title=\"创建两个工作目录模拟协同开发\"></a>创建两个工作目录模拟协同开发</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># mkdir -p ~/workspace/&#123;sony,link&#125;</span></span><br><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># cd workspace/</span></span><br><span class=\"line\">[root@wikifx ~/workspace]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">drwxr-xr-x 2 root root 6 7月  14 18:11 <span class=\"built_in\">link</span></span><br><span class=\"line\">drwxr-xr-x 2 root root 6 7月  14 18:11 sony</span><br></pre></td></tr></table></figure>\n<h3 id=\"检出操作\"><a href=\"#检出操作\" class=\"headerlink\" title=\"检出操作\"></a>检出操作</h3><ul>\n<li><strong>作用：</strong>完整下载版本库中的全部内容</li>\n<li><strong>命令：</strong><code>svn checkout svn://192.168.200.155/pro_oa ./</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># svn checkout svn://192.168.200.155/pro_oa ./</span></span><br><span class=\"line\">取出版本 0。</span><br><span class=\"line\"><span class=\"comment\">#版本库中不存在内容，所以检出为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># ll -a</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">drwxr-xr-x 3 root root 18 7月  14 18:15 .</span><br><span class=\"line\">drwxr-xr-x 4 root root 30 7月  14 18:11 ..</span><br><span class=\"line\">drwxr-xr-x 4 root root 75 7月  14 18:15 .svn <span class=\"comment\">#&lt;-保存本地目录和文件的状态信息，用来和SVN服务器进行交互。勿删勿改</span></span><br><span class=\"line\"><span class=\"comment\">#在指定的工作目录下创建了隐藏目录.svn，这个文件的父目录被称作工作副本；</span></span><br><span class=\"line\"><span class=\"comment\">#版本控制相关操作都需要在工作副本目录下执行，例如：提交，更新等。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提交操作\"><a href=\"#提交操作\" class=\"headerlink\" title=\"提交操作\"></a>提交操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1: 修改文件内容</span><br><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># echo -e &quot;felix1\\nfelix2&quot; &gt; ~/workspace/link/felix.txt</span></span><br><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># cat felix.txt </span></span><br><span class=\"line\">felix1</span><br><span class=\"line\">felix2</span><br><span class=\"line\"></span><br><span class=\"line\">2: 尝试提交报错</span><br><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># svn commit felix.txt </span></span><br><span class=\"line\">svn: E200009: 提交失败(细节如下): </span><br><span class=\"line\">svn: E200009: “/root/workspace/link/felix.txt” 尚未纳入版本控制</span><br><span class=\"line\"><span class=\"comment\">#SVN要求在提交一个新建文件提交之前，必须要先纳入版本控制体系：svn add felix.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">3: 纳入版本控制，再次尝试提交报错</span><br><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># svn add felix.txt</span></span><br><span class=\"line\">A         felix.txt</span><br><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># svn commit felix.txt </span></span><br><span class=\"line\">svn: E205007: 提交失败(细节如下): </span><br><span class=\"line\">svn: E205007: 无法使用外部编辑器获得日志信息；考虑设置环境变量 <span class=\"variable\">$SVN_EDITOR</span>，或者使用 --message (-m) 或 --file (-F) 选项</span><br><span class=\"line\">svn: E205007: 没有设置 SVN_EDITOR，VISUAL 或 EDITOR 环境变量，运行时的配置参数中也没有 “editor-cmd” 选项</span><br><span class=\"line\"><span class=\"comment\">#SVN要求提交时，需要附加所提文件日志信息，用来标记本次操作做的修改：svn commit -m &quot;My first commit&quot; [文件名]</span></span><br><span class=\"line\"></span><br><span class=\"line\">4：打开SVN匿名访问</span><br><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># svn commit -m &quot;My first commit&quot; felix.txt </span></span><br><span class=\"line\">svn: E170001: 提交失败(细节如下): </span><br><span class=\"line\">svn: E170001: 认证失败</span><br><span class=\"line\"><span class=\"comment\">#提交时必须具备相应的权限，我们先打开匿名访问并给予写入权限【找到对应的版本库】</span></span><br><span class=\"line\">vim /data/svn/repository/pro_oa/conf/svnserve.conf</span><br><span class=\"line\"> 19 anon-access = write [临时开启匿名访问]</span><br><span class=\"line\"></span><br><span class=\"line\">5：尝试提交，成功</span><br><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># svn commit -m &quot;My first commit&quot; felix.txt </span></span><br><span class=\"line\">正在增加       felix.txt</span><br><span class=\"line\">传输文件数据.</span><br><span class=\"line\">提交后的版本为 1。</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看操作\"><a href=\"#查看操作\" class=\"headerlink\" title=\"查看操作\"></a>查看操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># svn list svn://192.168.200.155/pro_oa</span></span><br><span class=\"line\">felix.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"SVN冲突\"><a href=\"#SVN冲突\" class=\"headerlink\" title=\"SVN冲突\"></a>SVN冲突</h2><h3 id=\"过时的文件\"><a href=\"#过时的文件\" class=\"headerlink\" title=\"过时的文件\"></a>过时的文件</h3><ul>\n<li>概念：在一个相对服务器端版本来说是旧版本的基础上进行了修改的文件。 </li>\n<li>要求：所有过时的文件都必须先执行更新操作，更新后在最新版基础上修改的 文件才允许提交。</li>\n</ul>\n<h3 id=\"冲突的产生\"><a href=\"#冲突的产生\" class=\"headerlink\" title=\"冲突的产生\"></a>冲突的产生</h3><ul>\n<li>条件 1：本地当前编辑的文件已经过时。</li>\n<li>条件 2：从服务器端更新下来的修改和本地的修改在“同文件同位置”不一致。</li>\n</ul>\n<h3 id=\"冲突的表现\"><a href=\"#冲突的表现\" class=\"headerlink\" title=\"冲突的表现\"></a>冲突的表现</h3><h4 id=\"文件内\"><a href=\"#文件内\" class=\"headerlink\" title=\"文件内\"></a>文件内</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~/workspace/sony]<span class=\"comment\"># cat felix.txt</span></span><br><span class=\"line\">felix1</span><br><span class=\"line\">felix2</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine</span><br><span class=\"line\">felix4</span><br><span class=\"line\">felix3</span><br><span class=\"line\">=======  <span class=\"comment\">#发生冲突时本地自己的内容</span></span><br><span class=\"line\">felix3</span><br><span class=\"line\">felix4</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2 <span class=\"comment\">#发生冲突时服务端内容</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"目录内：\"><a href=\"#目录内：\" class=\"headerlink\" title=\"目录内：\"></a>目录内：</h4><ul>\n<li><code>xxx.mine</code> 文件：发生冲突时本地文件内容</li>\n<li><code>xxx.r[小版本号]</code> 文件：发生冲突前文件内容</li>\n<li><code>xxx.r[大版本号]</code> 文件：发生冲突时服务器端文件内容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~/workspace/sony]<span class=\"comment\"># svn checkout svn://192.168.200.155/pro_oa ./</span></span><br><span class=\"line\">A    felix.txt</span><br><span class=\"line\">取出版本 1。</span><br><span class=\"line\"></span><br><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># cat felix.txt</span></span><br><span class=\"line\">felix1</span><br><span class=\"line\">felix2</span><br><span class=\"line\">felix3</span><br><span class=\"line\">felix4</span><br><span class=\"line\"></span><br><span class=\"line\">[root@wikifx ~/workspace/link]<span class=\"comment\"># svn commit -m &quot;My first commit2&quot; felix.txt</span></span><br><span class=\"line\">正在发送       felix.txt</span><br><span class=\"line\">传输文件数据.</span><br><span class=\"line\">提交后的版本为 2。</span><br><span class=\"line\"></span><br><span class=\"line\">[root@wikifx ~/workspace/sony]<span class=\"comment\"># cat felix.txt </span></span><br><span class=\"line\">felix1</span><br><span class=\"line\">felix2</span><br><span class=\"line\">felix4</span><br><span class=\"line\">felix3</span><br><span class=\"line\"></span><br><span class=\"line\">[root@wikifx ~/workspace/sony]<span class=\"comment\"># svn commit -m &quot;My first commit3&quot; felix.txt</span></span><br><span class=\"line\">正在发送       felix.txt</span><br><span class=\"line\">传输文件数据.svn: E160028: 提交失败(细节如下): </span><br><span class=\"line\">svn: E160028: 文件 “/felix.txt” 已经过时</span><br><span class=\"line\">[root@wikifx ~/workspace/sony]<span class=\"comment\"># svn update felix.txt</span></span><br><span class=\"line\">正在升级 <span class=\"string\">&#x27;felix.txt&#x27;</span>:</span><br><span class=\"line\">在 “/root/workspace/sony/felix.txt” 中发现冲突。</span><br><span class=\"line\">选择: (p) 推迟，(<span class=\"built_in\">df</span>) 显示全部差异，(e) 编辑,</span><br><span class=\"line\">        (mc) 我的版本, (tc) 他人的版本,</span><br><span class=\"line\">        (s) 显示全部选项: p</span><br><span class=\"line\">C    felix.txt</span><br><span class=\"line\">更新到版本 2。</span><br><span class=\"line\">冲突概要：</span><br><span class=\"line\">  正文冲突：1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@wikifx ~/workspace/sony]<span class=\"comment\"># cat felix.txt.r1 #发生冲突前文件内容</span></span><br><span class=\"line\">felix1</span><br><span class=\"line\">felix2</span><br><span class=\"line\">[root@wikifx ~/workspace/sony]<span class=\"comment\"># cat felix.txt.r2 #发生冲突时服务器端文件内容</span></span><br><span class=\"line\">felix1</span><br><span class=\"line\">felix2</span><br><span class=\"line\">felix3</span><br><span class=\"line\">felix4</span><br><span class=\"line\">[root@wikifx ~/workspace/sony]<span class=\"comment\"># cat felix.txt.mine #发生冲突时本地文件内容</span></span><br><span class=\"line\">felix1</span><br><span class=\"line\">felix2</span><br><span class=\"line\">felix4</span><br><span class=\"line\">felix3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"冲突解决：\"><a href=\"#冲突解决：\" class=\"headerlink\" title=\"冲突解决：\"></a>冲突解决：</h3><h4 id=\"手动解决\"><a href=\"#手动解决\" class=\"headerlink\" title=\"手动解决\"></a>手动解决</h4><ul>\n<li>第一步：删除冲突发生时产生的三个多余文件</li>\n<li>第二步：删除冲突文件内多余的符号</li>\n<li>第三步：把文件编辑到满意的状态</li>\n<li>第四步：提交</li>\n</ul>\n<h4 id=\"工具解决\"><a href=\"#工具解决\" class=\"headerlink\" title=\"工具解决\"></a>工具解决</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~/workspace/sony]<span class=\"comment\"># svn update felix.txt</span></span><br><span class=\"line\">正在升级 <span class=\"string\">&#x27;felix.txt&#x27;</span>:</span><br><span class=\"line\">在 “/root/workspace/sony/felix.txt” 中发现冲突。</span><br><span class=\"line\">选择: (p) 推迟，(<span class=\"built_in\">df</span>) 显示全部差异，(e) 编辑,</span><br><span class=\"line\">        (mc) 我的版本, (tc) 他人的版本,</span><br><span class=\"line\">        (s) 显示全部选项: e</span><br><span class=\"line\">没有设置 SVN_EDITOR，VISUAL 或 EDITOR 环境变量，运行时的配置参数中也没有 “editor-cmd” 选项</span><br><span class=\"line\">选择: (p) 推迟，(<span class=\"built_in\">df</span>) 显示全部差异，(e) 编辑,</span><br><span class=\"line\">        (mc) 我的版本, (tc) 他人的版本,</span><br><span class=\"line\">        (s) 显示全部选项: </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要配置SVN_EDITOR环境变量，告知svn客户端vim的路径</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> vim</span><br><span class=\"line\">/usr/bin/vim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;SVN_EDITOR=/usr/bin/vim\\nexport SVN_EDITOR&quot;</span> &gt;&gt; /etc/bashrc</span><br><span class=\"line\">. /etc/bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SVN_EDITOR</span> [验证]</span><br><span class=\"line\">/usr/bin/vim</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"减少冲突的发生\"><a href=\"#减少冲突的发生\" class=\"headerlink\" title=\"减少冲突的发生\"></a>减少冲突的发生</h3><ul>\n<li>尽可能在修改文件前先进行更新操作，尽量在最新版基础上修改文件内容。</li>\n<li>尽量减少多人修改同一个文件的可能性。</li>\n<li>加强团队成员之间的沟通。</li>\n</ul>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>在版本控制过程中，使用多个分支同时推进多个不同功能开发。<br><strong>不使用分支开发：</strong>人与人之间协作<br><strong>使用分支开发：</strong>小组和小组之间协作</p>\n<h3 id=\"应用场景举例\"><a href=\"#应用场景举例\" class=\"headerlink\" title=\"应用场景举例\"></a>应用场景举例</h3><ul>\n<li>蓝色皮肤界面功能：小组 1 </li>\n<li>用户账号管理功能：小组 2 </li>\n<li>支付功能：小组 3 </li>\n</ul>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>多个功能开发齐头并进同时进行  </li>\n<li>任何一个分支上功能开发失败，删除即可，不会对其他分支造成影响</li>\n</ul>\n<h3 id=\"分支相关目录\"><a href=\"#分支相关目录\" class=\"headerlink\" title=\"分支相关目录\"></a>分支相关目录</h3><ul>\n<li>trunk 主干</li>\n<li>branches 分支</li>\n<li>tags 存放项目开发过程中各个里程碑式的代码</li>\n</ul>\n<h2 id=\"SVN权限设置-svnserve-conf文件\"><a href=\"#SVN权限设置-svnserve-conf文件\" class=\"headerlink\" title=\"SVN权限设置[svnserve.conf文件]\"></a>SVN权限设置[svnserve.conf文件]</h2><ul>\n<li>版本库配置文件的目录[进入指定版本库/conf]<ul>\n<li> <code>/data/svn/repository/pro_oa/conf/</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/data/svn/repository/pro_oa/conf/</span><br><span class=\"line\">├── authz</span><br><span class=\"line\">├── passwd</span><br><span class=\"line\">└── svnserve.conf</span><br><span class=\"line\"></span><br><span class=\"line\">vim /data/svn/repository/pro_oa/conf/svnserve.conf</span><br><span class=\"line\"> 19 anon-access = none [关闭匿名访问]</span><br><span class=\"line\"> 20 auth-access = write [打开授权访问]</span><br><span class=\"line\"> 27 password-db = passwd [用passwd文件开启用户名+密码认证]</span><br><span class=\"line\"> 34 authz-db = authz [用authz文件配置权限]</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加用户-passwd文件\"><a href=\"#添加用户-passwd文件\" class=\"headerlink\" title=\"添加用户[passwd文件]\"></a>添加用户[passwd文件]</h3><p><strong>说明：</strong>这里添加三个用户。kate用户预计单独分为一组测试只读权限，其他账号为一组测试读写权限。<br><strong>格式：</strong>用户名 = 密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># cat &gt;&gt; /data/svn/repository/pro_oa/conf/passwd &lt;&lt;EOF</span></span><br><span class=\"line\">pincheng = 123321</span><br><span class=\"line\">felix = 123321</span><br><span class=\"line\"></span><br><span class=\"line\">kate = 123321</span><br><span class=\"line\">EOF</span><br><span class=\"line\">[root@wikifx ~]<span class=\"comment\"># cat /data/svn/repository/pro_oa/conf/passwd</span></span><br><span class=\"line\"><span class=\"comment\">### This file is an example password file for svnserve.</span></span><br><span class=\"line\"><span class=\"comment\">### Its format is similar to that of svnserve.conf. As shown in the</span></span><br><span class=\"line\"><span class=\"comment\">### example below it contains one section labelled [users].</span></span><br><span class=\"line\"><span class=\"comment\">### The name and password for each user follow, one account per line.</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"built_in\">users</span>]</span><br><span class=\"line\"><span class=\"comment\"># harry = harryssecret</span></span><br><span class=\"line\"><span class=\"comment\"># sally = sallyssecret</span></span><br><span class=\"line\">pincheng = 123321</span><br><span class=\"line\">felix = 123321</span><br><span class=\"line\"></span><br><span class=\"line\">kate = 123321</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置权限-authz文件\"><a href=\"#配置权限-authz文件\" class=\"headerlink\" title=\"配置权限[authz文件]\"></a>配置权限[authz文件]</h3><p>声明用户组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /data/svn/repository/pro_oa/conf/authz</span><br><span class=\"line\"> 21 [<span class=\"built_in\">groups</span>]</span><br><span class=\"line\"> 22 <span class=\"comment\"># harry_and_sally = harry,sally</span></span><br><span class=\"line\"> 23 <span class=\"comment\"># harry_sally_and_joe = harry,sally,&amp;joe</span></span><br><span class=\"line\"> 24 development = pincheng,felix  <span class=\"comment\">#开发组 = 成员1，成员2</span></span><br><span class=\"line\"> 25 <span class=\"built_in\">test</span> = kate\t\t<span class=\"comment\">#测试组 = 成员1</span></span><br></pre></td></tr></table></figure>\n<p>分配用户组权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /data/svn/repository/pro_oa/conf/authz</span><br><span class=\"line\"> 32 [/] \t\t\t<span class=\"comment\">#指定路径。“/”针对此版本库根目录</span></span><br><span class=\"line\"> 33 @development = rw \t<span class=\"comment\">#@组名1 = 读写</span></span><br><span class=\"line\"> 34 @<span class=\"built_in\">test</span> = r \t\t<span class=\"comment\">#@组名2 = 只读</span></span><br><span class=\"line\"> 35 * = \t\t\t<span class=\"comment\">#* = 表示除了上面已经授权的用户外，其他用户没有任何权限</span></span><br></pre></td></tr></table></figure>\n\n<p>svn win客户端推荐：<a href=\"https://tortoisesvn.net/\">https://tortoisesvn.net/</a><br>最新版小乌龟：<a href=\"https://osdn.net/frs/redir.php?m=xtom_hk&f=/storage/g/t/to/tortoisesvn/1.14.0/Application/TortoiseSVN-1.14.0.28885-x64-svn-1.14.0.msi\">下载地址</a></p>\n<p>小乌龟汉化语言包：<a href=\"https://osdn.net/projects/tortoisesvn/storage/1.14.0/Language%20Packs/LanguagePack_1.14.0.28885-x64-zh_CN.msi/\">下载地址</a></p>\n","categories":["OPS"],"tags":["OPS","SVN"]},{"title":"Zabbix-LNMP环境下zabbix4.4的编译安装","url":"/forward/ae26d423.html","content":"<h2 id=\"安装要求\"><a href=\"#安装要求\" class=\"headerlink\" title=\"安装要求\"></a>安装要求</h2><h3 id=\"硬件选型\"><a href=\"#硬件选型\" class=\"headerlink\" title=\"硬件选型\"></a>硬件选型</h3><p><strong>内存和磁盘：</strong></p>\n<ul>\n<li><p>Zabbix 运行需要物理内存和磁盘空间。如果刚接触 Zabbix，128 MB 的物理内存和 256 MB 的可用磁盘空间可能是一个很好的起点。 然而，所需的内存和磁盘空间显然取决于被监控的主机数量和配置参数。 如果您计划调整参数以保留较长的历史数据，那么您应该考虑至少有几 GB 磁盘空间，以便有足够的磁盘空间将历史数据存储在数据库中。</p>\n</li>\n<li><p>每个 Zabbix 守护程序进程都需要与数据库服务器建立多个连接。 为连接分配的内存量取决于数据库引擎的配置。</p>\n</li>\n</ul>\n<p><strong>CPU</strong><br>Zabbix，尤其是 Zabbix 数据库可能需要大量 CPU 资源，该具体取决于被监控参数的数量和所选的数据库引擎。</p>\n<p><strong>其他硬件</strong><br>如果需要启用短信（SMS）通知功能，需要串行通讯口（serial communication port）和串行GSM调制解调器（serial GSM modem）。USB转串行转接器也同样可以工作。</p>\n<p><strong>硬件资源配置参考</strong><br>下表提供了几个硬件配置参考：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">规模</th>\n<th align=\"left\">平台</th>\n<th align=\"left\">CPU/内存</th>\n<th align=\"left\">数据库</th>\n<th align=\"left\">受监控的主机数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">小型</td>\n<td align=\"left\">CentOS</td>\n<td align=\"left\">Virtual Appliance</td>\n<td align=\"left\">MySQL InnoDB</td>\n<td align=\"left\">100</td>\n</tr>\n<tr>\n<td align=\"left\">中型</td>\n<td align=\"left\">CentOS</td>\n<td align=\"left\">2 CPU cores/2GB</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">InnoDB</td>\n</tr>\n<tr>\n<td align=\"left\">大型</td>\n<td align=\"left\">RedHat Enterprise Linux</td>\n<td align=\"left\">4 CPU cores/8GB</td>\n<td align=\"left\">RAID10 MySQL InnoDB 或 PostgreSQL</td>\n<td align=\"left\">&gt;1000</td>\n</tr>\n<tr>\n<td align=\"left\">极大型</td>\n<td align=\"left\">RedHat Enterprise Linux</td>\n<td align=\"left\">8 CPU cores/16GB</td>\n<td align=\"left\">Fast RAID10 MySQL InnoDB 或 PostgreSQL</td>\n<td align=\"left\">&gt;10000</td>\n</tr>\n</tbody></table>\n<h2 id=\"环境准备：\"><a href=\"#环境准备：\" class=\"headerlink\" title=\"环境准备：\"></a>环境准备：</h2><table>\n<thead>\n<tr>\n<th align=\"left\">服务</th>\n<th align=\"left\">版本</th>\n<th align=\"left\">安装方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">zabbix</td>\n<td align=\"left\">4.4.1</td>\n<td align=\"left\">源码编译安装</td>\n</tr>\n<tr>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">5.7</td>\n<td align=\"left\">二进制安装</td>\n</tr>\n<tr>\n<td align=\"left\">PHP</td>\n<td align=\"left\">7.3.5</td>\n<td align=\"left\">源码编译安装</td>\n</tr>\n<tr>\n<td align=\"left\">Nginx</td>\n<td align=\"left\">1.16.1</td>\n<td align=\"left\">编译安装</td>\n</tr>\n</tbody></table>\n<h2 id=\"MySQL二进制安装\"><a href=\"#MySQL二进制安装\" class=\"headerlink\" title=\"MySQL二进制安装\"></a>MySQL二进制安装</h2><p><strong>参见：</strong><a href=\"https://cakepanit.com/forward/a7fae6f0.html\">https://cakepanit.com/forward/a7fae6f0.html</a></p>\n<h3 id=\"配置文件：\"><a href=\"#配置文件：\" class=\"headerlink\" title=\"配置文件：\"></a>配置文件：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /data/mysql_3306/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/application/mysql</span><br><span class=\"line\">datadir=/data/mysql_3306/data</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br><span class=\"line\">log-error=/data/mysql_3306/mysql.log</span><br><span class=\"line\">log_bin=/data/binlog/mysql-bin</span><br><span class=\"line\">binlog_format=row</span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\">server-id=52</span><br><span class=\"line\">gtid-mode=on</span><br><span class=\"line\">enforce-gtid-consistency=true</span><br><span class=\"line\">log-slave-updates=1</span><br><span class=\"line\">relay_log_purge=0</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections=1024</span><br><span class=\"line\">back_log=128</span><br><span class=\"line\">wait_timeout=60</span><br><span class=\"line\">interactive_timeout=7200</span><br><span class=\"line\">key_buffer_size=16M</span><br><span class=\"line\">query_cache_size=64M</span><br><span class=\"line\">query_cache_type=1</span><br><span class=\"line\">query_cache_limit=50M</span><br><span class=\"line\">max_connect_errors=20</span><br><span class=\"line\">sort_buffer_size=2M</span><br><span class=\"line\">max_allowed_packet=32M</span><br><span class=\"line\">join_buffer_size=2M</span><br><span class=\"line\">thread_cache_size=200</span><br><span class=\"line\">innodb_buffer_pool_size=1024M</span><br><span class=\"line\">innodb_flush_log_at_trx_commit=1</span><br><span class=\"line\">innodb_log_buffer_size=32M</span><br><span class=\"line\">innodb_log_file_size=128M</span><br><span class=\"line\">innodb_log_files_in_group=3</span><br><span class=\"line\">binlog_cache_size=2M</span><br><span class=\"line\">max_binlog_cache_size=8M</span><br><span class=\"line\">max_binlog_size=512M</span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\">read_buffer_size=2M</span><br><span class=\"line\">read_rnd_buffer_size=2M</span><br><span class=\"line\">bulk_insert_buffer_size=8M</span><br><span class=\"line\">[client]</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加载MySQL数据库函数库-etc-ld-so-conf\"><a href=\"#加载MySQL数据库函数库-etc-ld-so-conf\" class=\"headerlink\" title=\"加载MySQL数据库函数库/etc/ld.so.conf\"></a>加载MySQL数据库函数库/etc/ld.so.conf</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/application/mysql-5.7.26-linux-glibc2.12-x86_64/lib/&quot;</span> &gt;&gt; /etc/ld.so.conf.d/mariadb-x86_64.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ldconfig //重建动态链接库缓存</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ldconfig -p | grep libmysqlclient.so.20</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># echo &quot;/application/mysql-5.7.26-linux-glibc2.12-x86_64/lib/&quot; &gt;&gt; /etc/ld.so.conf.d/mariadb-x86_64.conf</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ldconfig</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ldconfig -p | grep libmysqlclient.so.20</span></span><br><span class=\"line\">        libmysqlclient.so.20 (libc6,x86-64) =&gt; /application/mysql-5.7.26-linux-glibc2.12-x86_64/lib/libmysqlclient.so.20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建zabbix库，并授权\"><a href=\"#创建zabbix库，并授权\" class=\"headerlink\" title=\"创建zabbix库，并授权\"></a>创建zabbix库，并授权</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database zabbix default charset utf8mb4;</span><br><span class=\"line\">grant all on zabbix.* to <span class=\"string\">&#x27;zabbix&#x27;</span>@<span class=\"string\">&#x27;127.0.0.1&#x27;</span> identified by <span class=\"string\">&#x27;123123a&#x27;</span>;<span class=\"comment\">#授权一个用户</span></span><br><span class=\"line\">FLUSH PRIVILEGES; <span class=\"comment\">#刷新权限</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx编译安装\"><a href=\"#Nginx编译安装\" class=\"headerlink\" title=\"Nginx编译安装\"></a>Nginx编译安装</h2><p><strong>参见</strong><a href=\"https://cakepanit.com/forward/bac240f7.html#10-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx\">https://cakepanit.com/forward/bac240f7.html#10-编译安装nginx</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemd启动：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># chown -R www.www /application/nginx</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/lib/systemd/system/nginx.service&lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=The NGINX HTTP and reverse proxy server</span><br><span class=\"line\">After=syslog.target network-online.target remote-fs.target nss-lookup.target</span><br><span class=\"line\">Wants=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/application/nginx/logs/nginx.pid</span><br><span class=\"line\">ExecStartPre=/application/nginx/sbin/nginx -t</span><br><span class=\"line\">ExecStart=/application/nginx/sbin/nginx</span><br><span class=\"line\">ExecReload=/application/nginx/sbin/nginx -s reload</span><br><span class=\"line\">ExecStop=/bin/kill -s QUIT <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /application/nginx/conf/nginx.conf</span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">include conf.d/*.conf; 加入</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /application/nginx/conf/conf.d/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /application/nginx/conf/conf.d/zabbix.conf &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 10.0.0.51; <span class=\"comment\">#本机IP</span></span><br><span class=\"line\"><span class=\"comment\">#    access_log /var/log/nginx/host.access.log main;</span></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root html/zabbix;</span><br><span class=\"line\">        index index.html index.htm index.php;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root html/zabbix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">        root html/zabbix;</span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        fastcgi_index index.php;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME $document_root<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        include /application/nginx/conf/fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R www.www /application/nginx/</span><br></pre></td></tr></table></figure>\n<h2 id=\"PHP7-3编译安装\"><a href=\"#PHP7-3编译安装\" class=\"headerlink\" title=\"PHP7.3编译安装\"></a>PHP7.3编译安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">安装php依赖：</span><br><span class=\"line\">yum install zlib-devel libxml2-devel libjpeg-devel libjpeg-turbo-devel libiconv-devel -y</span><br><span class=\"line\">yum install freetype-devel libpng-devel gd-devel libcurl-devel libxslt-devel libxslt-devel -y</span><br><span class=\"line\">检查：</span><br><span class=\"line\">rpm -qa zlib-devel libxml2-devel libjpeg-turbo-devel libiconv-devel</span><br><span class=\"line\">rpm -qa freetype-devel libpng-devel gd-devel libcurl-devel libxslt-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">id</span> www</span><br><span class=\"line\">uid=1001(www) gid=1001(www) 组=1001(www)</span><br><span class=\"line\"></span><br><span class=\"line\">补充依赖：</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /server/tools/</span><br><span class=\"line\">wget http://www.mirrorservice.org/pub/gnu/libiconv/libiconv-1.16.tar.gz</span><br><span class=\"line\">tar -xf libiconv-1.16.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> libiconv-1.16/</span><br><span class=\"line\">./configure --prefix=/application/libiconv</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">yum install libmcrypt-devel -y </span><br><span class=\"line\">yum install mhash -y</span><br><span class=\"line\">yum install mcrypt -y</span><br><span class=\"line\"></span><br><span class=\"line\">编译php73 //用户为www</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /server/tools</span><br><span class=\"line\">wget http://mirrors.sohu.com/php/php-7.3.5.tar.gz</span><br><span class=\"line\">tar -xf php-7.3.5.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> php-7.3.5/</span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=/application/php-7.3.5 \\</span><br><span class=\"line\">--enable-mysqlnd  \\</span><br><span class=\"line\">--with-mysqli=mysqlnd \\</span><br><span class=\"line\">--with-pdo-mysql=mysqlnd \\</span><br><span class=\"line\">--with-iconv-dir=/application/libiconv \\</span><br><span class=\"line\">--with-freetype-dir \\</span><br><span class=\"line\">--with-jpeg-dir \\</span><br><span class=\"line\">--with-png-dir \\</span><br><span class=\"line\">--with-zlib \\</span><br><span class=\"line\">--with-libxml-dir=/usr \\</span><br><span class=\"line\">--with-gettext \\</span><br><span class=\"line\">--enable-xml \\</span><br><span class=\"line\">--disable-rpath \\</span><br><span class=\"line\">--enable-bcmath \\</span><br><span class=\"line\">--enable-shmop \\</span><br><span class=\"line\">--enable-sysvsem \\</span><br><span class=\"line\">--enable-inline-optimization \\</span><br><span class=\"line\">--with-curl \\</span><br><span class=\"line\">--enable-mbregex \\</span><br><span class=\"line\">--enable-fpm \\</span><br><span class=\"line\">--enable-mbstring \\</span><br><span class=\"line\">--with-gd \\</span><br><span class=\"line\">--with-openssl \\</span><br><span class=\"line\">--with-mhash \\</span><br><span class=\"line\">--enable-pcntl \\</span><br><span class=\"line\">--enable-sockets \\</span><br><span class=\"line\">--with-xmlrpc \\</span><br><span class=\"line\">--enable-soap \\</span><br><span class=\"line\">--enable-short-tags \\</span><br><span class=\"line\">--enable-static \\</span><br><span class=\"line\">--with-xsl \\</span><br><span class=\"line\">--with-fpm-user=www \\</span><br><span class=\"line\">--with-fpm-group=www \\</span><br><span class=\"line\">--enable-ftp \\</span><br><span class=\"line\">--enable-opcache=no</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 /server/tools/php-7.3.5]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db01 /server/tools/php-7.3.5]<span class=\"comment\"># make &amp;&amp; make install </span></span><br><span class=\"line\">[root@db01 /server/tools/php-7.3.5]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置php\"><a href=\"#配置php\" class=\"headerlink\" title=\"配置php\"></a>配置php</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 /application]<span class=\"comment\"># ln -s /application/php-7.3.5/ /application/php</span></span><br><span class=\"line\">lrwxrwxrwx  1 root   root     23 5月  19 14:13 php -&gt; /application/php-7.3.5/</span><br><span class=\"line\"></span><br><span class=\"line\">配置php.ini(php解析器配置文件):</span><br><span class=\"line\">[root@db01 /server/tools/php-7.3.5]<span class=\"comment\"># cp php.ini-production /application/php/lib/php.ini</span></span><br><span class=\"line\"></span><br><span class=\"line\">配置PHP FPM:</span><br><span class=\"line\">[root@db01 /application/php/etc]<span class=\"comment\"># cp php-fpm.conf.default php-fpm.conf</span></span><br><span class=\"line\">[root@db01 /application/php/etc]<span class=\"comment\"># cd php-fpm.d/</span></span><br><span class=\"line\">[root@db01 /application/php/etc/php-fpm.d]<span class=\"comment\"># cp www.conf.default www.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s#;pid = run/php-fpm.pid#pid = run/php-fpm.pid#g&#x27;</span> /application/php/etc/php-fpm.conf</span><br><span class=\"line\"></span><br><span class=\"line\">启动测试：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># /application/php/sbin/php-fpm</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># netstat -lntup</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      29265/php-fpm: mast</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># chown -R www.www /application/php*</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"systemd启动php\"><a href=\"#systemd启动php\" class=\"headerlink\" title=\"systemd启动php\"></a>systemd启动php</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/systemd/system/php-fpm.service&lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=The PHP FastCGI Process Manager</span><br><span class=\"line\">After=syslog.target network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">User=www</span><br><span class=\"line\">Group=www</span><br><span class=\"line\">PermissionsStartOnly=<span class=\"literal\">true</span></span><br><span class=\"line\">ExecStartPre=/usr/bin/chown www.www -R /application/php/</span><br><span class=\"line\"><span class=\"comment\">#PIDFile=/application/php/var/run/php-fpm.pid</span></span><br><span class=\"line\">ExecStart=/application/php/sbin/php-fpm --fpm-config /application/php/etc/php-fpm.conf</span><br><span class=\"line\">ExecStop=/bin/kill -INT <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># echo &#x27;export PATH=&quot;/application/php/bin/:/application/php/sbin/:$PATH&quot;&#x27; &gt;&gt; /etc/bashrc</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># . /etc/bashrc</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># php -v</span></span><br><span class=\"line\">PHP 7.3.5 (cli) (built: May 19 2020 14:08:45) ( NTS )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译安装zabbix\"><a href=\"#编译安装zabbix\" class=\"headerlink\" title=\"编译安装zabbix\"></a>编译安装zabbix</h2><h3 id=\"创建zabbix用户并安装依赖\"><a href=\"#创建zabbix用户并安装依赖\" class=\"headerlink\" title=\"创建zabbix用户并安装依赖\"></a>创建zabbix用户并安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradd -s /sbin/nologin zabbix -M</span><br><span class=\"line\">yum -y install curl curl-devel net-snmp net-snmp-devel perl-DBI libevent-devel </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /server/tools</span><br><span class=\"line\">wget https://nchc.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/4.4.1/zabbix-4.4.1.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -xf zabbix-4.4.1.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">cd</span> zabbix-4.4.1/</span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=/application/zabbix \\</span><br><span class=\"line\">--enable-server \\</span><br><span class=\"line\">--enable-agent \\</span><br><span class=\"line\">--with-mysql=/application/mysql/bin/mysql_config \\</span><br><span class=\"line\">--with-net-snmp \\</span><br><span class=\"line\">--with-libxml2 \\</span><br><span class=\"line\">--with-libcurl</span><br><span class=\"line\">出现这个代表预编译成功：</span><br><span class=\"line\">***********************************************************</span><br><span class=\"line\">*            Now run <span class=\"string\">&#x27;make install&#x27;</span>                       *</span><br><span class=\"line\">*                                                         *</span><br><span class=\"line\">*            Thank you <span class=\"keyword\">for</span> using Zabbix!                  *</span><br><span class=\"line\">*              &lt;http://www.zabbix.com&gt;                    *</span><br><span class=\"line\">***********************************************************</span><br><span class=\"line\"></span><br><span class=\"line\">预编译说明：</span><br><span class=\"line\">--prefix= //安装到指定位置</span><br><span class=\"line\">--enable-server //安装zabbix server</span><br><span class=\"line\">--enable-agent //安装zabbix agent</span><br><span class=\"line\">--with-mysql= //指定mysql配置路径</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">官方给的解释：对于虚拟机监视--with-libcurl和--with-libxml2配置选项是必需的; --with-libcurlSMTP身份验证和web.page.*Zabbix代理项也是必需的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置zabbix-server\"><a href=\"#配置zabbix-server\" class=\"headerlink\" title=\"配置zabbix_server\"></a>配置zabbix_server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export PATH=<span class=\"variable\">$PATH</span>:/application/zabbix/sbin/:/application/zabbix/bin/&quot;</span> &gt;&gt;/etc/bashrc</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># . /etc/etc/bashrc</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># zabbix_</span></span><br><span class=\"line\">zabbix_agentd  zabbix_get     zabbix_sender  zabbix_server </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R zabbix.zabbix /application/zabbix/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># zabbix_server --version</span></span><br><span class=\"line\">zabbix_server (Zabbix) 4.4.1</span><br><span class=\"line\">Revision 8870606e6a 28 October 2019, compilation time: May 19 2020 16:00:18</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入zabbix的sql脚本\"><a href=\"#导入zabbix的sql脚本\" class=\"headerlink\" title=\"导入zabbix的sql脚本\"></a>导入zabbix的sql脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uzabbix -p123123a -h127.0.0.1 zabbix &lt; /server/tools/zabbix-4.4.1/database/mysql/schema.sql </span><br><span class=\"line\">mysql -uzabbix -p123123a -h127.0.0.1 zabbix &lt; /server/tools/zabbix-4.4.1/database/mysql/images.sql </span><br><span class=\"line\">mysql -uzabbix -p123123a -h127.0.0.1 zabbix &lt; /server/tools/zabbix-4.4.1/database/mysql/data.sql</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置zabbix-server-1\"><a href=\"#配置zabbix-server-1\" class=\"headerlink\" title=\"配置zabbix_server\"></a>配置zabbix_server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">LogFile=/application/zabbix/zabbix_server.log           //zabbix日志文件</span></span><br><span class=\"line\"><span class=\"string\">DBHost=127.0.0.1</span></span><br><span class=\"line\"><span class=\"string\">DBName=zabbix</span></span><br><span class=\"line\"><span class=\"string\">DBUser=zabbix</span></span><br><span class=\"line\"><span class=\"string\">DBPassword=123123a</span></span><br><span class=\"line\"><span class=\"string\">DBPort=3306</span></span><br><span class=\"line\"><span class=\"string\">Timeout=30</span></span><br><span class=\"line\"><span class=\"string\">AlertScriptsPath=/application/zabbix/alertscripts       //邮件微信告警</span></span><br><span class=\"line\"><span class=\"string\">ExternalScripts=/application/zabbix/externalscripts</span></span><br><span class=\"line\"><span class=\"string\">LogSlowQueries=3000                                     //慢查询相关</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span> &gt; /application/zabbix/etc/zabbix_server.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动zabbix-server\"><a href=\"#启动zabbix-server\" class=\"headerlink\" title=\"启动zabbix_server\"></a>启动zabbix_server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># zabbix_server</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -aux | grep zabbix</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># netstat -lntup | grep zabbix</span></span><br><span class=\"line\">tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      27647/zabbix_agentd </span><br><span class=\"line\">tcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN      7221/zabbix_server</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /application/zabbix/zabbix_server.log</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置zabbix-web\"><a href=\"#配置zabbix-web\" class=\"headerlink\" title=\"配置zabbix_web\"></a>配置zabbix_web</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mkdir -p /application/nginx/html/zabbix/</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cp -ar /server/tools/zabbix-4.4.1/frontends/php/* /application/nginx/html/zabbix/</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># chown -R www.www /application/nginx/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问zabbix-web\"><a href=\"#访问zabbix-web\" class=\"headerlink\" title=\"访问zabbix_web\"></a>访问zabbix_web</h3><p><a href=\"http://10.0.0.51/\">http://10.0.0.51/</a><br><img src=\"/images/img-128.png\" alt=\"p1\"></p>\n<h3 id=\"根据提示优化告警：\"><a href=\"#根据提示优化告警：\" class=\"headerlink\" title=\"根据提示优化告警：\"></a>根据提示优化告警：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s#post_max_size = 8M#post_max_size = 32M#g&#x27;</span> /application/php/lib/php.ini</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s#max_execution_time = 30#max_execution_time = 300#g&#x27;</span> /application/php/lib/php.ini</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s#max_input_time = 60#max_input_time = 300#g&#x27;</span> /application/php/lib/php.ini</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s#;date.timezone =#date.timezone = Asia/Shanghai#g&#x27;</span> /application/php/lib/php.ini</span><br><span class=\"line\">systemctl restart php-fpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"继续安装：\"><a href=\"#继续安装：\" class=\"headerlink\" title=\"继续安装：\"></a>继续安装：</h3><p><img src=\"/images/img-129.png\" alt=\"p2\"><br><img src=\"/images/img-130.png\" alt=\"p3\"><br><img src=\"/images/img-131.png\" alt=\"p4\"></p>\n<h3 id=\"登陆zabbix-web：\"><a href=\"#登陆zabbix-web：\" class=\"headerlink\" title=\"登陆zabbix_web：\"></a>登陆zabbix_web：</h3><p>**默认账号:**Admin<br>**默认密码:**zabbix<br><img src=\"/images/img-132.png\" alt=\"p5\"><br><img src=\"/images/img-133.png\" alt=\"p6\"></p>\n","categories":["OPS"],"tags":["OPS","Zabbix"]},{"title":"Zabbix-初始配置&解决4.4版本中文乱码","url":"/forward/f353577b.html","content":"<p><strong>1.禁用默认的Zabbix Server主机的监控</strong><br>Configuration &gt; Hosts &gt; 勾选Zabbix server &gt; Disable</p>\n<p><strong>2.禁用guest用户</strong><br>Administration &gt; User groups &gt; 勾选Guests &gt; Disable</p>\n<p><strong>3.更改admin的密码，防止弱口令爆破</strong><br>Administration &gt; Users &gt; Admin &gt; Change password</p>\n<p><strong>4.更改语言</strong><br>Administration &gt; Users &gt; Admin &gt; Language</p>\n<p><strong>5.中文乱码问题</strong></p>\n<ul>\n<li>下载字体包：<a href=\"https://github.com/maxsky/Yahei-Monaco-Hybrid-Font/archive/master.zip\">https://github.com/maxsky/Yahei-Monaco-Hybrid-Font/archive/master.zip</a></li>\n<li>上传字体：<code>/application/nginx-1.16.1/html/zabbix/assets/fonts/</code><br>YaHeiMonacoHybrid.ttf</li>\n<li>修改字体：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s#DejaVuSans#YaHeiMonacoHybrid#g&#x27;</span> /application/nginx-1.16.1/html/zabbix/include/defines.inc.php</span><br></pre></td></tr></table></figure>\n<ul>\n<li>浏览器刷新zabbix页面</li>\n</ul>\n","categories":["OPS"],"tags":["OPS","Zabbix"]},{"title":"Zookeeper-单节点与分布式","url":"/forward/7be7c575.html","content":"<blockquote>\n<p>ZooKeeper是一个分布式开源框架，提供了协调分布式应用的基本服务，它向外部应用暴露一组通用服务——分布式同步（Distributed Synchronization）、命名服务（Naming Service）、集群维护（Group Maintenance）等，简化分布式应用协调及其管理的难度，提供高性能的分布式服务。ZooKeeper本身可以以Standalone模式安装运行，不过它的长处在于通过分布式ZooKeeper集群（一个Leader，多个Follower），基于一定的策略来保证ZooKeeper集群的稳定性和可用性，从而实现分布式应用的可靠性。</p>\n</blockquote>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"规范目录\"><a href=\"#规范目录\" class=\"headerlink\" title=\"规范目录\"></a>规范目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#root用户执行</span></span><br><span class=\"line\">useradd hadoop</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /application/hadoop <span class=\"comment\">#zookeeper安装目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/zookeeper/zkdata <span class=\"comment\">#zookeeper数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/zookeeper/zklog <span class=\"comment\">#zookeeper日志目录</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R hadoop.hadoop /application/hadoop <span class=\"comment\">#授权</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R hadoop.hadoop /data/zookeeper</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">su - hadoop</span><br><span class=\"line\"><span class=\"comment\">#普通用户执行</span></span><br><span class=\"line\">tar -xf jdk-8u161-linux-x64.tar.gz -C /application/hadoop/</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /application/hadoop/jdk1.8.0_161/ /application/hadoop/jdk</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"java环境变量\"><a href=\"#java环境变量\" class=\"headerlink\" title=\"java环境变量\"></a>java环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#普通用户执行</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt;~/.bashrc &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/application/hadoop/jdk </span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$JAVA_HOME</span>/jre/bin:<span class=\"variable\">$PATH</span> </span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib:<span class=\"variable\">$JAVA_HOME</span>/jre/lib:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar</span><br><span class=\"line\">EOF</span><br><span class=\"line\">. ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">[hadoop@cdh001 ~]$ java -version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ZooKeeper-Standalone模式\"><a href=\"#ZooKeeper-Standalone模式\" class=\"headerlink\" title=\"ZooKeeper Standalone模式\"></a>ZooKeeper Standalone模式</h2><p>从Apache网站上（zookeeper.apache.org）下载ZooKeeper软件包，我选择了3.4.5版本的（zookeeper-3.4.5-cdh5.10.0.tar.gz），在一台Linux机器上安装非常容易，只需要解压缩后，简单配置一下即可以启动ZooKeeper服务器进程。</p>\n<h3 id=\"解压安装zookeeper\"><a href=\"#解压安装zookeeper\" class=\"headerlink\" title=\"解压安装zookeeper\"></a>解压安装zookeeper</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[hadoop@cdh001 ~]$ tar -xf zookeeper-3.4.5-cdh5.10.0.tar.gz -C /application/hadoop/</span><br><span class=\"line\">[hadoop@cdh001 ~]$ <span class=\"built_in\">cd</span> /application/hadoop/</span><br><span class=\"line\">[hadoop@cdh001 ~]$ <span class=\"built_in\">ln</span> -s /application/hadoop/zookeeper-3.4.5-cdh5.10.0/ /application/hadoop/zookeeper</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加配置\"><a href=\"#添加配置\" class=\"headerlink\" title=\"添加配置\"></a>添加配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /application/zookeeper/conf/zoo.cfg &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span> </span><br><span class=\"line\"><span class=\"comment\"># The number of milliseconds of each tick</span></span><br><span class=\"line\"><span class=\"comment\"># 这个时间是作为 Zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔</span></span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"><span class=\"comment\"># The number of ticks that the initial </span></span><br><span class=\"line\"><span class=\"comment\"># synchronization phase can take</span></span><br><span class=\"line\"><span class=\"comment\"># 配置 Zookeeper接受客户端初始化连接时最长能忍受多少个心跳时间间隔数。</span></span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"><span class=\"comment\"># The number of ticks that can pass between </span></span><br><span class=\"line\"><span class=\"comment\"># sending a request and getting an acknowledgement</span></span><br><span class=\"line\"><span class=\"comment\"># Leader与Follower之间发送消息，请求和应答时间长度</span></span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"><span class=\"comment\"># the directory where the snapshot is stored.</span></span><br><span class=\"line\"><span class=\"comment\"># do not use /tmp for storage, /tmp here is just </span></span><br><span class=\"line\"><span class=\"comment\"># example sakes.</span></span><br><span class=\"line\"><span class=\"comment\"># 数据目录</span></span><br><span class=\"line\">dataDir=/data/zookeeper/zkdata</span><br><span class=\"line\"><span class=\"comment\"># 日志目录</span></span><br><span class=\"line\">dataLogDir=/data/zookeeper/zklog</span><br><span class=\"line\"><span class=\"comment\"># the port at which the clients will connect</span></span><br><span class=\"line\"><span class=\"comment\"># 侦听端口</span></span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Be sure to read the maintenance section of the </span></span><br><span class=\"line\"><span class=\"comment\"># administrator guide before turning on autopurge.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The number of snapshots to retain in dataDir</span></span><br><span class=\"line\"><span class=\"comment\">#autopurge.snapRetainCount=3</span></span><br><span class=\"line\"><span class=\"comment\"># Purge task interval in hours</span></span><br><span class=\"line\"><span class=\"comment\"># Set to &quot;0&quot; to disable auto purge feature</span></span><br><span class=\"line\"><span class=\"comment\">#autopurge.purgeInterval=1</span></span><br><span class=\"line\"><span class=\"comment\">#server，每个节点服务编号=服务器ip地址：集群通信端口：选举端口(Leader宕机后)</span></span><br><span class=\"line\">server.1=zoo-01:2888:3888</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">修改单节点的服务编号</span><br><span class=\"line\">cdh001:</span><br><span class=\"line\"><span class=\"built_in\">cat</span>&gt;/data/zookeeper/zkdata/myid&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Zookeeper环境变量\"><a href=\"#Zookeeper环境变量\" class=\"headerlink\" title=\"Zookeeper环境变量\"></a>Zookeeper环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#普通用户执行</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt;~/.bashrc &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ZOOKEEPER_HOME=/application/zookeeper</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$ZOOKEEPER_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/application/aria2/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\">. ~/.bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"防火墙放行并启动\"><a href=\"#防火墙放行并启动\" class=\"headerlink\" title=\"防火墙放行并启动\"></a>防火墙放行并启动</h3><p><code>2181</code>zookeeper服务端口<br><code>2888</code>集群通信端口<br><code>3888</code>选举端口</p>\n<p><code>zkServer.sh restart</code> 重启服务<br><code>zkServer.sh status</code> 查看服务运行状态<br><code>zkServer.sh stop</code> 关闭服务</p>\n<h3 id=\"检查进程\"><a href=\"#检查进程\" class=\"headerlink\" title=\"检查进程\"></a>检查进程</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jps</span><br><span class=\"line\">1558 QuorumPeerMain </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Zookeeper客户端连接\"><a href=\"#Zookeeper客户端连接\" class=\"headerlink\" title=\"Zookeeper客户端连接\"></a>Zookeeper客户端连接</h3><p>在客户端连接ZooKeeper服务器，执行如下命令：<br><code>bin/zkCli.sh -server dynamic:2181</code><br>上面dynamic是我的主机名，如果在本机执行，则执行如下命令即可：<br><code>bin/zkCli.sh</code></p>\n<h2 id=\"ZooKeeper-Distributed模式\"><a href=\"#ZooKeeper-Distributed模式\" class=\"headerlink\" title=\"ZooKeeper Distributed模式\"></a>ZooKeeper Distributed模式</h2><blockquote>\n<p>首先要明确的是，ZooKeeper集群是一个独立的分布式协调服务集群，“独立”的含义就是说，如果想使用ZooKeeper实现分布式应用的协调与管理，简化协调与管理，任何分布式应用都可以使用，这就要归功于Zookeeper的数据模型（Data Model）和层次命名空间（Hierarchical Namespace）结构。</p>\n</blockquote>\n<h3 id=\"主机名称到IP地址映射配置\"><a href=\"#主机名称到IP地址映射配置\" class=\"headerlink\" title=\"主机名称到IP地址映射配置\"></a>主机名称到IP地址映射配置</h3><p>ZooKeeper集群中具有两个关键的角色：<code>Leader</code>和<code>Follower</code><br><strong>集群中所有的节点作为一个整体对分布式应用提供服务，集群中每个节点之间都互相连接，所以，在配置的ZooKeeper集群的时候，每一个节点的host到IP地址的映射都要配置上集群中其它结点的映射信息。</strong></p>\n<h3 id=\"hosts解析（所有节点执行）\"><a href=\"#hosts解析（所有节点执行）\" class=\"headerlink\" title=\"hosts解析（所有节点执行）\"></a>hosts解析（所有节点执行）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; /etc/hosts &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">10.0.0.50 cdh001 </span><br><span class=\"line\">10.0.0.60 cdh002</span><br><span class=\"line\">10.0.0.70 cdh003</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>ZooKeeper采用一种称为<code>Leader election</code>的选举算法。在整个集群运行过程中，只有一个<code>Leader</code>，其他的都是<code>Follower</code>，如果ZooKeeper集群在运行过程中<code>Leader</code>出了问题，系统会采用该算法重新选出一个<code>Leader</code>(通过3388端口)。因此，各个结点之间要能够保证互相连接，必须配置上述映射。<br><br>ZooKeeper集群启动的时候，会首先选出一个<code>Leader</code>，在<code>Leader election</code>过程中，某一个满足选举算的结点就能成为<code>Leader</code>。</p>\n<h3 id=\"配置节点互信\"><a href=\"#配置节点互信\" class=\"headerlink\" title=\"配置节点互信\"></a>配置节点互信</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">批量密钥分发，配置所有节点互信（所有节点执行）</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#yum install sshpass -y</span></span><br><span class=\"line\">ssh-keygen -f ~/.ssh/id_rsa  -P <span class=\"string\">&#x27;&#x27;</span> -q</span><br><span class=\"line\"><span class=\"keyword\">for</span> ip <span class=\"keyword\">in</span> 50 60 70  <span class=\"comment\">#&lt;==客户端ip</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">sshpass -p123 ssh-copy-id -p22 -f -i ~/.ssh/id_rsa.pub <span class=\"string\">&quot;-o StrictHostKeyChecking=no&quot;</span> 10.0.0.<span class=\"variable\">$ip</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#个人习惯非必要</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二进制安装\"><a href=\"#二进制安装\" class=\"headerlink\" title=\"二进制安装\"></a>二进制安装</h3><p>解压安装zookeeper（所有节点执行）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[hadoop@cdh001 ~]$ tar -xf zookeeper-3.4.5-cdh5.10.0.tar.gz -C /application/hadoop/</span><br><span class=\"line\">[hadoop@cdh001 ~]$ <span class=\"built_in\">ln</span> -s /application/hadoop/zookeeper-3.4.5-cdh5.10.0/ /application/hadoop/zookeeper</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改ZooKeeper配置文件\"><a href=\"#修改ZooKeeper配置文件\" class=\"headerlink\" title=\"修改ZooKeeper配置文件\"></a>修改ZooKeeper配置文件</h3><p>配置文件（所有节点执行）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /application/hadoop/zookeeper/conf/zoo.cfg &lt;&lt;&#x27;EOF&#x27;</span><br><span class=\"line\"># The number of milliseconds of each tick</span><br><span class=\"line\"># 这个时间是作为 Zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"># The number of ticks that the initial </span><br><span class=\"line\"># synchronization phase can take</span><br><span class=\"line\"># 配置 Zookeeper接受客户端初始化连接时最长能忍受多少个心跳时间间隔数。</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"># The number of ticks that can pass between </span><br><span class=\"line\"># sending a request and getting an acknowledgement</span><br><span class=\"line\"># Leader与Follower之间发送消息，请求和应答时间长度</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"># the directory where the snapshot is stored.</span><br><span class=\"line\"># do not use /tmp for storage, /tmp here is just </span><br><span class=\"line\"># example sakes.</span><br><span class=\"line\"># 数据目录</span><br><span class=\"line\">dataDir=/data/zookeeper/zkdata</span><br><span class=\"line\"># 日志目录</span><br><span class=\"line\">dataLogDir=/data/zookeeper/zklog</span><br><span class=\"line\"># the port at which the clients will connect</span><br><span class=\"line\"># 侦听端口</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\">#</span><br><span class=\"line\"># Be sure to read the maintenance section of the </span><br><span class=\"line\"># administrator guide before turning on autopurge.</span><br><span class=\"line\">#</span><br><span class=\"line\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class=\"line\">#</span><br><span class=\"line\"># The number of snapshots to retain in dataDir</span><br><span class=\"line\">#autopurge.snapRetainCount=3</span><br><span class=\"line\"># Purge task interval in hours</span><br><span class=\"line\"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class=\"line\">#autopurge.purgeInterval=1</span><br><span class=\"line\">#server，每个节点服务编号=服务器ip地址：集群通信端口：选举端口</span><br><span class=\"line\">server.1=cdh001:2888:3888</span><br><span class=\"line\">server.2=cdh002:2888:3888</span><br><span class=\"line\">server.3=cdh003:2888:3888</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改每个节点的服务编号\"><a href=\"#修改每个节点的服务编号\" class=\"headerlink\" title=\"修改每个节点的服务编号\"></a>修改每个节点的服务编号</h3><p><strong>在我们配置的<code>dataDir</code>指定的目录下面，创建一个<code>myid</code>文件，里面内容为一个数字，用来标识当前主机，<code>conf/zoo.cfg</code>文件中配置的server.X中X为什么数字，则<code>myid</code>文件中就输入这个数字</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cdh001:</span><br><span class=\"line\"><span class=\"built_in\">cat</span>&gt;/data/zookeeper/zkdata/myid&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">cdh002:</span><br><span class=\"line\"><span class=\"built_in\">cat</span>&gt;/data/zookeeper/zkdata/myid&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">cdh003:</span><br><span class=\"line\"><span class=\"built_in\">cat</span>&gt;/data/zookeeper/zkdata/myid&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">3</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动zookeeper（所有节点执行）\"><a href=\"#启动zookeeper（所有节点执行）\" class=\"headerlink\" title=\"启动zookeeper（所有节点执行）\"></a>启动zookeeper（所有节点执行）</h3><p><code>zkServer.sh restart</code> 重启服务<br><code>zkServer.sh status</code> 查看服务运行状态<br><code>zkServer.sh stop</code> 关闭服务</p>\n<h3 id=\"集群验证\"><a href=\"#集群验证\" class=\"headerlink\" title=\"集群验证\"></a>集群验证</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[hadoop@cdh001 ~]$ /application/hadoop/zookeeper/bin/zkServer.sh status</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /application/hadoop/zookeeper/bin/../conf/zoo.cfg</span><br><span class=\"line\">Mode: follower</span><br><span class=\"line\"></span><br><span class=\"line\">[hadoop@cdh002 ~]$ /application/hadoop/zookeeper/bin/zkServer.sh status</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /application/hadoop/zookeeper/bin/../conf/zoo.cfg</span><br><span class=\"line\">Mode: follower</span><br><span class=\"line\"></span><br><span class=\"line\">[hadoop@cdh003 ~]$ /application/hadoop/zookeeper/bin/zkServer.sh status</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /application/hadoop/zookeeper/bin/../conf/zoo.cfg</span><br><span class=\"line\">Mode: leader</span><br></pre></td></tr></table></figure>\n\n\n","categories":["OPS"],"tags":["OPS","分布式","Zookeeper"]},{"title":"Zabbix-实现邮件+微信告警","url":"/forward/2f09977b.html","content":"<h2 id=\"邮件告警\"><a href=\"#邮件告警\" class=\"headerlink\" title=\"邮件告警\"></a>邮件告警</h2><h3 id=\"定义发件人\"><a href=\"#定义发件人\" class=\"headerlink\" title=\"定义发件人\"></a>定义发件人</h3><p>管理 &gt; 报警媒介类型 &gt; Email<br><img src=\"/images/img-144.png\" alt=\"邮件发件人\"></p>\n<h3 id=\"发件测试：\"><a href=\"#发件测试：\" class=\"headerlink\" title=\"发件测试：\"></a>发件测试：</h3><p><img src=\"/images/img-145.png\" alt=\"发件测试\"></p>\n<h3 id=\"定义收件人\"><a href=\"#定义收件人\" class=\"headerlink\" title=\"定义收件人\"></a>定义收件人</h3><ul>\n<li>个人资料 &gt; 报警媒介 &gt; 添加</li>\n<li>确保动作已启用</li>\n</ul>\n<h3 id=\"压力测试：\"><a href=\"#压力测试：\" class=\"headerlink\" title=\"压力测试：\"></a>压力测试：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ab -n 10000 -c 4000 http://10.0.0.53/</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/img-146.png\" alt=\"测试\"></p>\n<h3 id=\"发信日志\"><a href=\"#发信日志\" class=\"headerlink\" title=\"发信日志\"></a>发信日志</h3><p>报表 &gt; 动作日志</p>\n<h3 id=\"邮件格式\"><a href=\"#邮件格式\" class=\"headerlink\" title=\"邮件格式\"></a>邮件格式</h3><p>配置 &gt; 动作 &gt; 操作</p>\n<h2 id=\"微信告警\"><a href=\"#微信告警\" class=\"headerlink\" title=\"微信告警\"></a>微信告警</h2><h3 id=\"加入企业微信\"><a href=\"#加入企业微信\" class=\"headerlink\" title=\"加入企业微信\"></a>加入企业微信</h3><h3 id=\"关注微工作台\"><a href=\"#关注微工作台\" class=\"headerlink\" title=\"关注微工作台\"></a>关注微工作台</h3><p><img src=\"/images/img-147.png\" alt=\"企业微信助手\"></p>\n<h3 id=\"创建企业应用\"><a href=\"#创建企业应用\" class=\"headerlink\" title=\"创建企业应用\"></a>创建企业应用</h3><p>进入企业微信后台 &gt; 应用管理 &gt; 自建应用<br>获取企业应用信息：<br><img src=\"/images/img-148.png\" alt=\"获取应用信息\"></p>\n<h3 id=\"上传python脚本\"><a href=\"#上传python脚本\" class=\"headerlink\" title=\"上传python脚本\"></a>上传python脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\">#-*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\">#author: yanggd</span></span><br><span class=\"line\"><span class=\"comment\">#date: 2018-04-20</span></span><br><span class=\"line\"><span class=\"comment\">#comment: zabbix接入微信报警脚本</span></span><br><span class=\"line\"></span><br><span class=\"line\">import requests</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import os</span><br><span class=\"line\">import json</span><br><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.basicConfig(level = logging.DEBUG, format = <span class=\"string\">&#x27;%(asctime)s, %(filename)s, %(levelname)s, %(message)s&#x27;</span>,</span><br><span class=\"line\">                datefmt = <span class=\"string\">&#x27;%a, %d %b %Y %H:%M:%S&#x27;</span>,</span><br><span class=\"line\">                filename = os.path.join(<span class=\"string\">&#x27;/tmp&#x27;</span>,<span class=\"string\">&#x27;weixin.log&#x27;</span>),</span><br><span class=\"line\">                filemode = <span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#以下三项是根据你自己企业微信的信息填写</span></span><br><span class=\"line\">corpid=<span class=\"string\">&#x27;wwc74a658df899****&#x27;</span>  </span><br><span class=\"line\">appsecret=<span class=\"string\">&#x27;uSDSLXWXxFAG_qjqL73SEmE2vbo1mSbQOK230****&#x27;</span></span><br><span class=\"line\">agentid=1000002</span><br><span class=\"line\"><span class=\"comment\">#获取accesstoken</span></span><br><span class=\"line\">token_url=<span class=\"string\">&#x27;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&#x27;</span> + corpid + <span class=\"string\">&#x27;&amp;corpsecret=&#x27;</span> + appsecret</span><br><span class=\"line\">req=requests.get(token_url)</span><br><span class=\"line\">accesstoken=req.json()[<span class=\"string\">&#x27;access_token&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#发送消息</span></span><br><span class=\"line\">msgsend_url=<span class=\"string\">&#x27;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=&#x27;</span> + accesstoken</span><br><span class=\"line\"></span><br><span class=\"line\">touser=sys.argv[1]</span><br><span class=\"line\">subject=sys.argv[2]</span><br><span class=\"line\"><span class=\"comment\">#toparty=&#x27;3|4|5|6&#x27;</span></span><br><span class=\"line\">message=sys.argv[2] + <span class=\"string\">&quot;\\n\\n&quot;</span> +sys.argv[3]</span><br><span class=\"line\"></span><br><span class=\"line\">params=&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;touser&quot;</span>: touser,</span><br><span class=\"line\"><span class=\"comment\">#       &quot;toparty&quot;: toparty,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;msgtype&quot;</span>: <span class=\"string\">&quot;text&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;agentid&quot;</span>: agentid,</span><br><span class=\"line\">        <span class=\"string\">&quot;text&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;content&quot;</span>: message</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;safe&quot;</span>:0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">req=requests.post(msgsend_url, data=json.dumps(params))</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(<span class=\"string\">&#x27;sendto:&#x27;</span> + touser + <span class=\"string\">&#x27;;;subject:&#x27;</span> + subject + <span class=\"string\">&#x27;;;message:&#x27;</span> + message)</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装pip工具\"><a href=\"#安装pip工具\" class=\"headerlink\" title=\"安装pip工具\"></a>安装pip工具</h3><p><code>[root@db01 ~]# yum install python2-pip -y</code></p>\n<h3 id=\"安装依赖：\"><a href=\"#安装依赖：\" class=\"headerlink\" title=\"安装依赖：\"></a>安装依赖：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># pip install requests -i http://mirrors.aliyun.com/pypi/simple -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试脚本：\"><a href=\"#测试脚本：\" class=\"headerlink\" title=\"测试脚本：\"></a>测试脚本：</h3><p><code>python weixin.py YaoFeiChi &#39;外卖到了&#39; &#39;请到楼下取餐3/18 16:53&#39;</code></p>\n<p><img src=\"/images/img-149.png\" alt=\"微信告警测试\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /application/zabbix/etc/zabbix_server.conf</span></span><br><span class=\"line\">LogFile=/application/zabbix/zabbix_server.log</span><br><span class=\"line\">DBHost=127.0.0.1</span><br><span class=\"line\">DBName=zabbix</span><br><span class=\"line\">DBUser=zabbix</span><br><span class=\"line\">DBPassword=123123a</span><br><span class=\"line\">DBPort=3306</span><br><span class=\"line\">Timeout=30</span><br><span class=\"line\">AlertScriptsPath=/application/zabbix/alertscripts <span class=\"comment\">#告警脚本存放目录</span></span><br><span class=\"line\">ExternalScripts=/application/zabbix/externalscripts</span><br><span class=\"line\">LogSlowQueries=3000</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mkdir -p /application/zabbix/alertscripts</span></span><br><span class=\"line\">[root@db01 /application/zabbix/alertscripts]<span class=\"comment\"># chmod +x weixin.py </span></span><br><span class=\"line\">[root@db01 /application/zabbix/alertscripts]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rwxr-xr-x 1 root root 1351 5月  24 21:27 weixin.py</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置zabbix发件人：\"><a href=\"#配置zabbix发件人：\" class=\"headerlink\" title=\"配置zabbix发件人：\"></a>配置zabbix发件人：</h3><p>进入zabbix &gt; 管理 &gt; 报警媒介类型 &gt; 创建媒体类型<br><img src=\"/images/img-150.png\" alt=\"微信发件人\"></p>\n<h3 id=\"参数：\"><a href=\"#参数：\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;ALERT.SENDTO&#125; //发给谁</span><br><span class=\"line\">&#123;ALERT.SUBJECT&#125; //报警标题</span><br><span class=\"line\">&#123;ALERT.MESSAGE&#125; //报警内容</span><br></pre></td></tr></table></figure>\n<p><strong>官方文档：</strong><a href=\"https://www.zabbix.com/documentation/3.0/manual/introduction/whatsnew300\">https://www.zabbix.com/documentation/3.0/manual/introduction/whatsnew300</a></p>\n<h3 id=\"配置zabbix收件人：\"><a href=\"#配置zabbix收件人：\" class=\"headerlink\" title=\"配置zabbix收件人：\"></a>配置zabbix收件人：</h3><p>个人资料 &gt; 报警媒介 &gt; 添加 &gt; 微信报警<br><img src=\"/images/img-151.png\" alt=\"微信收件人\"></p>\n<h3 id=\"微信脚本日志：\"><a href=\"#微信脚本日志：\" class=\"headerlink\" title=\"微信脚本日志：\"></a>微信脚本日志：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ll /tmp/weixin.log</span></span><br><span class=\"line\">-rw-rw-r-- 1 zabbix zabbix 2194 5月  24 21:47 /tmp/weixin.log. //注意日志权限</span><br></pre></td></tr></table></figure>\n<h3 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h3><p><img src=\"/images/img-152.png\" alt=\"微信告警测试\"></p>\n","categories":["OPS"],"tags":["OPS","Zabbix"]},{"title":"Zabbix-自定义监控项、触发器、告警","url":"/forward/3837938a.html","content":"<h2 id=\"Zabbix监控的添加顺序\"><a href=\"#Zabbix监控的添加顺序\" class=\"headerlink\" title=\"Zabbix监控的添加顺序\"></a>Zabbix监控的添加顺序</h2><ol>\n<li>添加主机组</li>\n<li>添加主机</li>\n<li>添加监控项目</li>\n<li>根据监控项目可以添加图形或者触发器</li>\n</ol>\n<h2 id=\"监控需求\"><a href=\"#监控需求\" class=\"headerlink\" title=\"监控需求\"></a>监控需求</h2><ol>\n<li>监控主机是否存活</li>\n<li>监控主机的端口是否能通</li>\n</ol>\n<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><h3 id=\"第一步：添加主机组：\"><a href=\"#第一步：添加主机组：\" class=\"headerlink\" title=\"第一步：添加主机组：\"></a>第一步：添加主机组：</h3><p>配置 &gt; 主机群组 &gt; 创建主机群组</p>\n<blockquote>\n<p>ps:主机组名字建议以业务或功能进行区分,如www，或数据库</p>\n</blockquote>\n<h3 id=\"第二步：创建监控主机\"><a href=\"#第二步：创建监控主机\" class=\"headerlink\" title=\"第二步：创建监控主机\"></a>第二步：创建监控主机</h3><p>配置 &gt; 主机 &gt; 创建主机</p>\n<ul>\n<li>主机名称 //被监控主机名</li>\n<li>群组 //主机组</li>\n<li>接口<ul>\n<li>Agent interfaces [zabbix提供一个agent客户端，安装在linux/win等]</li>\n<li>SNMP interfaces [使用snmp协议监控路由交换]</li>\n<li>JMX interfaces [监控java进程]</li>\n<li>IPMI interfaces [监控硬件信息]</li>\n</ul>\n</li>\n</ul>\n<p>克隆添加主机<br>配置 &gt; 主机 &gt; 想要克隆的主机 &gt; Clone</p>\n<h2 id=\"zabbix-agent监控主机：\"><a href=\"#zabbix-agent监控主机：\" class=\"headerlink\" title=\"zabbix-agent监控主机：\"></a>zabbix-agent监控主机：</h2><p><strong>被监控主机安装zabbix客户端</strong><br>zabbix-agent和zabbix-server在同一台机器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -ivh https://mirrors-i.tuna.tsinghua.edu.cn/zabbix/zabbix/4.4/rhel/7/x86_64/zabbix-agent-4.4.1-1.el7.x86_64.rpm</span><br><span class=\"line\">systemctl restart zabbix-agent</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> zabbix-agent</span><br></pre></td></tr></table></figure>\n\n<p>zabbix-agent和zabbix-server不在同一台机器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装zabbix-agent</span></span><br><span class=\"line\">rpm -ivh https://mirrors-i.tuna.tsinghua.edu.cn/zabbix/zabbix/4.4/rhel/7/x86_64/zabbix-agent-4.4.1-1.el7.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装zabbix-agent并指向zabbix服务器ip</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/Server=127.0.0.1/Server=10.0.0.51/g&#x27;</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class=\"line\">systemctl restart zabbix-agent</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> zabbix-agent</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/img-135.png\" alt=\"zabbix-agent\"></p>\n<h2 id=\"监控项介绍：\"><a href=\"#监控项介绍：\" class=\"headerlink\" title=\"监控项介绍：\"></a>监控项介绍：</h2><ul>\n<li>CPU</li>\n<li>Disk<ul>\n<li>Disk average queue size (avgqu-sz) 每个读操作平均所需的时间，该值越大，表示排队等待处理的io越多</li>\n<li>Disk read rate 读取速率</li>\n<li>Disk read request avg waiting time (r_await) 每个读操作平均所需的时间</li>\n<li>Disk utilization 磁盘利用率</li>\n<li>Disk write rate 磁盘写入速率</li>\n<li>Disk write request avg waiting time (w_await) 每个写操作平均所需的时间</li>\n</ul>\n</li>\n<li>General<ul>\n<li>Maximum number of open file descriptors 打开的最大文件描述符 <code>ulimit -n</code></li>\n<li>Maximum number of processes 最大进程数</li>\n<li>Number of logged in users 登陆用户数</li>\n<li>Number of running processes 正在运行的进程数</li>\n<li>System boot time 系统启动时间</li>\n<li>System description 系统描述</li>\n<li>System local time 系统本地时间</li>\n<li>System name 主机名</li>\n</ul>\n</li>\n<li>Memory<ul>\n<li>Available memory 有效内存</li>\n<li>Free swap space 可用虚拟内存</li>\n<li>Free swap space in % 可用虚拟内存（％）</li>\n<li>Memory utilization 内存利用率</li>\n<li>Total memory 总内存</li>\n<li>Total swap space 总虚拟内存</li>\n</ul>\n</li>\n<li>Interface enp0s3 <ul>\n<li>Bits received 接收bite</li>\n<li>Bits sent 发送bite</li>\n<li>Inbound packets discarded 入站被丢弃</li>\n<li>Inbound packets with errors 入站数据包有错误</li>\n<li>Interface type 接口类型</li>\n<li>Operational status 运行状态</li>\n<li>Outbound packets discarded 出站被丢弃的数据包</li>\n<li>Outbound packets with errors 错误的出站数据包</li>\n</ul>\n</li>\n<li>Filesystem /  根分区<ul>\n<li>Free inodes in % 可用inode</li>\n<li>Space utilization 空间利用率</li>\n<li>Total space 空间总大小</li>\n<li>Used space 已用空间</li>\n</ul>\n</li>\n<li>Inventory <ul>\n<li>Operating system 操作系统</li>\n<li>Operating system architecture 操作系统架构</li>\n<li>Software installed 以安装的软件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"自定义监控项：\"><a href=\"#自定义监控项：\" class=\"headerlink\" title=\"自定义监控项：\"></a>自定义监控项：</h2><h3 id=\"监控硬盘tps：\"><a href=\"#监控硬盘tps：\" class=\"headerlink\" title=\"监控硬盘tps：\"></a>监控硬盘tps：</h3><ul>\n<li>命令行，手动取值.(或写脚本)</li>\n<li>修改zabbix_agent配置文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/zabbix/zabbix_agentd.conf</span><br><span class=\"line\">Option: UserParameter </span><br><span class=\"line\">UserParameter=&lt;key&gt;,&lt;shell <span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\">例如：</span><br><span class=\"line\">UserParameter=sda_tps,iostat|awk <span class=\"string\">&#x27;$1 ~/sda/&#123;print $2&#125;&#x27;</span></span><br><span class=\"line\">systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure>\n<ul>\n<li>服务端做取值测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.4/rhel/7/x86_64/zabbix-get-4.4.1-1.el7.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">zabbix_get -s 10.0.0.53 -p 10050 -k sda_tps</span><br><span class=\"line\">0.28</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>web界面添加和查看<br>设置：<br>配置 &gt; 主机 &gt; 指定主机 &gt; 监控项 &gt; 创建监控项<br><img src=\"/images/img-136.png\" alt=\"创建监控项\"><br>查看：<br>监测 &gt; 最新数据 &gt; 选择主机 &gt; 过滤名称 &gt; 查看细节<br><img src=\"/images/img-137.png\" alt=\"查看监控项\"></li>\n</ul>\n<h3 id=\"监控tcp80端口并发数：\"><a href=\"#监控tcp80端口并发数：\" class=\"headerlink\" title=\"监控tcp80端口并发数：\"></a>监控tcp80端口并发数：</h3><ul>\n<li><p>配置zabbix_agent</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db03 ~]<span class=\"comment\"># netstat -na | awk &#x27;$4 ~/:80/&amp;&amp;$6 ~/ESTABLISHED/&#123;print $5&quot;---&gt;&quot;$4&#125;&#x27;</span></span><br><span class=\"line\">10.0.0.51:17425---&gt;10.0.0.53:80</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/zabbix/zabbix_agentd.conf</span><br><span class=\"line\">UserParameter=tcp80_count,netstat -na | awk <span class=\"string\">&#x27;$4 ~/:80/&amp;&amp;$6 ~/ESTABLISHED/&#123;print $5&quot;---&gt;&quot;$4&#125;&#x27;</span> | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\">systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure></li>\n<li><p>服务端做取值测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># zabbix_get -s 10.0.0.53 -k tcp80_count</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></li>\n<li><p>web界面定义<br><img src=\"/images/img-138.png\" alt=\"定义监控项\"></p>\n</li>\n<li><p>Linux下压力测试命令ab</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># yum whatprovides ab</span></span><br><span class=\"line\">属于httpd-tools</span><br><span class=\"line\">  -n在测试会话中所执行的请求个数。默认时，仅执行一个请求</span><br><span class=\"line\">  -c一次产生的请求个数。默认是一次一个</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ab -n 10000 -c 200 http://10.0.0.53/</span></span><br></pre></td></tr></table></figure>\n<p>查看：<br><img src=\"/images/img-139.png\" alt=\"查看取值\"></p>\n</li>\n</ul>\n<h2 id=\"监控项批量复制：\"><a href=\"#监控项批量复制：\" class=\"headerlink\" title=\"监控项批量复制：\"></a>监控项批量复制：</h2><p>zabbix_server<br>配置 &gt; 主机 &gt; 监控项 &gt;  勾选自定义监控项 &gt; 复制 &gt; 目标 &gt; 主机 &gt; 复制</p>\n<p>zabbix_agent<br>在/etc/zabbix/zabbix_agentd.d/目录中加入监控项配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">如：</span><br><span class=\"line\">UserParameter=sda_tps,iostat|awk <span class=\"string\">&#x27;$1 ~/sda/&#123;print $2&#125;&#x27;</span></span><br><span class=\"line\">UserParameter=tcp80_count,netstat -na | awk <span class=\"string\">&#x27;$4 ~/:80/&amp;&amp;$6 ~/ESTABLISHED/&#123;print $5&quot;---&gt;&quot;$4&#125;&#x27;</span> | <span class=\"built_in\">wc</span> -l </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"触发器配置\"><a href=\"#触发器配置\" class=\"headerlink\" title=\"触发器配置\"></a>触发器配置</h2><p>配置 &gt; 主机 &gt; 触发器 &gt; 创建触发器 &gt; 添加</p>\n<h3 id=\"常用函数：\"><a href=\"#常用函数：\" class=\"headerlink\" title=\"常用函数：\"></a>常用函数：</h3><ul>\n<li><code>last()</code>最新值达到</li>\n<li><code>avg()</code> 平均值达到</li>\n<li><code>diff()</code> 对比文件的差异比如配合md5<br><img src=\"/images/img-140.png\" alt=\"触发器\"></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;www_001:tcp80_count.last()&#125;&gt;100 //最近一个并发数大于100，那么告警</span><br><span class=\"line\">www_001 //监控主机名</span><br><span class=\"line\">tcp80_count //监控项的key</span><br><span class=\"line\">last() //函数方法</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启用动作：\"><a href=\"#启用动作：\" class=\"headerlink\" title=\"启用动作：\"></a>启用动作：</h3><p>配置 &gt; 动作 &gt; Report problems to Zabbix administrators &gt; 启用</p>\n<p><strong>定义告警内容：</strong><br><img src=\"/images/img-143.png\" alt=\"告警内容\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">告警主机: &#123;HOSTNAME1&#125;</span><br><span class=\"line\">主机分组: &#123;TRIGGER.HOSTGROUP.NAME&#125;</span><br><span class=\"line\">告警时间: &#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span><br><span class=\"line\">告警等级: &#123;TRIGGER.SEVERITY&#125;</span><br><span class=\"line\">告警信息: &#123;TRIGGER.NAME&#125;</span><br><span class=\"line\">告警项目: &#123;TRIGGER.KEY1&#125;</span><br><span class=\"line\">问题详情: &#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class=\"line\">当前状态: &#123;TRIGGER.STATUS&#125;</span><br><span class=\"line\">事件ID: &#123;EVENT.ID&#125;</span><br><span class=\"line\"><span class=\"comment\">#恢复操作内容一样，把故障改成恢复</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"告警提示音\"><a href=\"#告警提示音\" class=\"headerlink\" title=\"告警提示音\"></a>告警提示音</h3><p>用户资料 &gt; 正在发送消息 &gt; 勾选前端消息中<br><img src=\"/images/img-141.png\" alt=\"告警音\"></p>\n<h3 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h3><p>对10.0.0.51做压力测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ab -n 100000 -c 4000 http://10.0.0.53/</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/img-142.png\" alt=\"告警查看\"></p>\n","categories":["OPS"],"tags":["OPS","Zabbix"]},{"title":"Hello World","url":"/forward/4a17b156.html","content":"<h2 id=\"失語時代下的喃喃自語\"><a href=\"#失語時代下的喃喃自語\" class=\"headerlink\" title=\"失語時代下的喃喃自語\"></a>失語時代下的喃喃自語</h2><p>纪念2017年愚人节，reddit网站发起一项为期三天的社会实验（2017年4月1日-4月3日），号召所有注册用户在一块100万像素的画布上作画（1000*1000），用户有16种像素颜色选择，生成一次后需要等待20分钟到5分钟之后才可以进行下一次编辑。凭借大家的协作创造出得一幅伟大的作品并载入互联网史册。</p>\n<p>在混乱中建立秩序，文明也在一次次破坏重建中焕发了新的面貌，当资源有限的情况下，一个群体想要生存势必要蚕食别的群体，生存还是毁灭的问题在短短的72小时内在一块小小的帆布画版上不断上演。虽然这个活动在几年前就已经结束了，但现实中比Reddit这场社会实验残酷百倍的故事却从未停歇。<br><del>国家之间的冲突，族群之间的恶意。在更大纬度的战场，渗透于各个领域的对垒，甚至已经关乎到十几亿几十亿人们的幸福生活。</del></p>\n<p>活动地址参见：<a href=\"https://www.reddit.com/r/place/\">reddit/r/place</a><br>活动详情参见：<a href=\"https://en.wikipedia.org/wiki/Place_(Reddit)\">维基百科</a><br>画板元素详解：<a href=\"https://draemm.li/various/place-atlas/\">The /r/place Atlas</a><br>变化过程参见：<a href=\"https://www.bilibili.com/video/BV1WW41197qY\">bilibil</a></p>\n<p>活动结束时最终快照[高清]：<br><img src=\"/images/img--1.png\" alt=\"reddit-place-2017\"></p>\n","tags":["place"]},{"title":"k8s企业级DevOps实践-HPA容器的弹性伸缩","url":"/forward/2aa52898.html","content":"<h2 id=\"HPA概述\"><a href=\"#HPA概述\" class=\"headerlink\" title=\"HPA概述\"></a>HPA概述</h2><p>Horizontal Pod Autoscaler(HPA)是根据资源利用率或者自定义指标自动调整replication controller, Deployment 或 ReplicaSet，实现部署的水平自动扩缩容，让部署的规模接近于实际服务的负载。如果是DaemonSet这种无法缩放的对象，他是不支持的。</p>\n<h2 id=\"HPA控制原理\"><a href=\"#HPA控制原理\" class=\"headerlink\" title=\"HPA控制原理\"></a>HPA控制原理</h2><p>K8s中的MetricsServer会持续采集Pod的指标数据，HPA 控制器通过 Metrics Server（需要提前安装） 的 API（Heapster 的 API 或聚合 API）获取集群中资源的使用状态，基于用户定义的扩缩容规则进行计算，得到目标 Pod 副本数量。当目标 Pod 副本数量与当前副本数量不同时，HPA 控制器就向 Pod 的副本控制器（Deployment、RC 或 ReplicaSet）发起 scale 操作，然后副本控制器会调整 Pod 的副本数量，完成扩缩容操作。</p>\n<p><img src=\"/images/pasted-57.png\" alt=\"HPA\"></p>\n<p>假设存在一个叫 A 的 Deployment，包含3个 Pod，每个副本的 Request 值是 1 核，当前 3 个 Pod 的 CPU 利用率分别是 60%、70% 与 80%，此时我们设置 HPA阈值为 50%，最小副本为 3，最大副本为 10。接下来我们将上述的数据带入公式中：</p>\n<p>总的 Pod 的利用率是 60%+70%+80% = 210%</p>\n<p>当前的 Target 是 3</p>\n<p>算式的结果是 70%，大于50%阈值，因此当前的 Target 数目过小，需要进行扩容<br>重新设置 Target 值为 5，此时算式的结果为 42% 低于 50%，判断还需要扩容两个容器<br>此时 HPA 设置 Replicas 为 5，进行 Pod 的水平扩容。</p>\n<p>经过上面的推演，可以协助开发者快速理解 HPA 最核心的原理，不过上面的推演结果和实际情况下是有所出入的，如果开发者进行试验的话，会发现 Replicas 最终的结果是 6 而不是 5。这是由于 HPA 中一些细节的处理导致的。<br>主要包含如下三个主要的方面：</p>\n<blockquote>\n<p>噪声处理<br>通过上面的公式可以发现，Target 的数目很大程度上会影响最终的结果，而在 Kubernetes 中，无论是变更或者升级，都更倾向于使用 Recreate 而不是 Restart 的方式进行处理。这就导致了在 Deployment 的生命周期中，可能会出现某一个时间，Target 会由于计算了 Starting 或者 Stopping 的 Pod 而变得很大。这就会给 HPA 的计算带来非常大的噪声，在 HPA Controller 的计算中，如果发现当前的对象存在 Starting 或者 Stopping 的 Pod 会直接跳过当前的计算周期，等待状态都变为 Running 再进行计算。</p>\n</blockquote>\n<blockquote>\n<p>冷却周期<br>在弹性伸缩中，冷却周期是不能逃避的一个话题，很多时候我们期望快速弹出与快速回收，而另一方面，我们又不希望集群震荡，所以一个弹性伸缩活动冷却周期的具体数值是多少，一直被开发者所挑战。在 HPA 中，默认的扩容冷却周期是 3 分钟，缩容冷却周期是 5 分钟。</p>\n</blockquote>\n<blockquote>\n<p>界值计算<br>我们回到刚才的计算公式，第一次我们算出需要弹出的容器数目是 5，此时扩容后整体的负载是 42%，但是我们似乎忽略了一个问题：一个全新的 Pod 启动会不会自己就占用了部分资源？此外，8% 的缓冲区是否就能够缓解整体的负载情况？要知道当一次弹性扩容完成后，下一次扩容要最少等待 3 分钟才可以继续扩容。为了解决这些问题，HPA 引入了边界值 △，目前在计算边界条件时，会自动加入 10% 的缓冲，这也是为什么在刚才的例子中最终的计算结果为 6 的原因。</p>\n</blockquote>\n<h2 id=\"HPA工作流程\"><a href=\"#HPA工作流程\" class=\"headerlink\" title=\"HPA工作流程\"></a>HPA工作流程</h2><ul>\n<li>创建HPA资源，设定目标CPU使用率限额，以及最大/最小实例数，一定要设置Pod的资源限制参数: request，否则HPA不会工作。</li>\n<li>控制管理器每隔30s(在kube-controller-manager.service中可以通过–horizontal-pod-autoscaler-sync-period修改)查询metrics的资源使用情况。</li>\n<li>然后与创建时设定的值和指标做对比(平均值之和/限额)，求出目标调整的实例个数。</li>\n<li>目标调整的实例数不能超过第一条中设定的最大/最小实例数。如果没有超过，则扩容；超过，则扩容至最大的实例个数。</li>\n<li>重复第2-4步。</li>\n</ul>\n<h2 id=\"自动伸缩算法\"><a href=\"#自动伸缩算法\" class=\"headerlink\" title=\"自动伸缩算法\"></a>自动伸缩算法</h2><p>HPA Controller会通过调整副本数量使得CPU使用率尽量向期望值靠近，而且不是完全相等。另官方考虑到自动扩展的决策可能需要一段时间才会生效：例如当pod所需要的CPU负荷过大，从而在创建一个新pod的过程中，系统的CPU使用量可能会同样在有一个攀升的过程。所以在每一次作出决策后的一段时间内，将不再进行扩展决策。对于扩容而言，这个时间段为3分钟，缩容为5分钟(在kube-controller-manager.service中可以通过<br><code>--horizontal-pod-autoscaler-downscale-delay</code>，<br><code>--horizontal-pod-autoscaler-upscale-delay</code>进行调整)。<br>HPA Controller中有一个tolerance（容忍力）的概念，它允许一定范围内的使用量的不稳定，现在默认为0.1，这也是出于维护系统稳定性的考虑。例如设定HPA调度策略为cpu使用率高于50%触发扩容，那么只有当使用率大于55%或者小于45%才会触发伸缩活动，HPA会尽力把Pod的使用率控制在这个范围之间。<br>具体的每次扩容或者缩容的多少Pod的算法为：Ceil(前采集到的使用率 / 用户自定义的使用率) * Pod数量)。<br>每次最大扩容pod数量不会超过当前副本数量的2倍。</p>\n<h2 id=\"HPA使用场景\"><a href=\"#HPA使用场景\" class=\"headerlink\" title=\"HPA使用场景\"></a>HPA使用场景</h2><p>使用<code>kubectl scale</code>命令可以实现对pod的快速伸缩功能，但是我们平时工作中我们并不能提前预知访问量有多少，资源需求多少。这就很麻烦了，总不能为了需求总是把pod设置为最多状态，这样太浪费资源；也不能当请求量上来以后再去伸缩pod，这样会有好多请求不成功。</p>\n<h2 id=\"HPA版本说明\"><a href=\"#HPA版本说明\" class=\"headerlink\" title=\"HPA版本说明\"></a>HPA版本说明</h2><p>目前版本有：autoscaling/v1、autoscaling/v2beta1和autoscaling/v2beta2 三个大版本 。</p>\n<ul>\n<li>autoscaling/v1 只支持CPU一个指标的弹性伸缩</li>\n<li>autoscaling/v2beta1 支持自定义指标</li>\n<li>autoscaling/v2beta2 支持外部指标</li>\n</ul>\n<blockquote>\n<p>kubectl explain hpa ##默认查询到的是autoscaling/v1版本<br>kubectl explain hpa –api-version=autoscaling/v2beta1 ##如果使用其他版本，可以使用–api-version指明版本</p>\n</blockquote>\n<h2 id=\"HPA操作演示\"><a href=\"#HPA操作演示\" class=\"headerlink\" title=\"HPA操作演示\"></a>HPA操作演示</h2><p>例如：我有个deployment叫myapp现在只有一个副本数，最多只能8个副本数，当pod的cpu平均利用率超过百分之50或内存平均值超过百分之50时，pod将自动增加副本数以提供服务。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">autoscaling/v2beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">HorizontalPodAutoscaler</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myapp-hpa</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">scaleTargetRef:</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">myapp</span>   <span class=\"comment\">#设置相关连的工作负载</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span>         <span class=\"comment\">##至少1个副本</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">4</span>         <span class=\"comment\">##最多4个副本</span></span><br><span class=\"line\">  <span class=\"attr\">metrics:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">Resource</span></span><br><span class=\"line\">    <span class=\"attr\">resource:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">cpu</span></span><br><span class=\"line\">      <span class=\"attr\">targetAverageUtilization:</span> <span class=\"number\">10</span>  <span class=\"comment\">##注意此时是根据使用率，也可以根据使用量：targetAverageValue</span></span><br><span class=\"line\"><span class=\"comment\"># 内存方式不建议用，开发人员技术能力参差不齐，防止内存溢出疯狂扩容</span></span><br><span class=\"line\"><span class=\"comment\">#  - type: Resource</span></span><br><span class=\"line\"><span class=\"comment\">#    resource:</span></span><br><span class=\"line\"><span class=\"comment\">#      name: memory</span></span><br><span class=\"line\"><span class=\"comment\">#      targetAverageUtilization: 10  ##注意此时是根据使用率，也可以根据使用量：targetAverageValue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">等价于：</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">autoscale</span> <span class=\"string\">deployment</span> <span class=\"string\">myapp-hpa</span> <span class=\"string\">--cpu-percent=10</span> <span class=\"string\">--min=1</span> <span class=\"string\">--max=4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl describe hpa name 查看创建详细</span></span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["OPS","Kubernetes","弹性伸缩"]},{"title":"information_schema.tables基础应用","url":"/forward/5234d9e2.html","content":"<h3 id=\"information-schema-tables基础应用\"><a href=\"#information-schema-tables基础应用\" class=\"headerlink\" title=\"information_schema.tables基础应用\"></a>information_schema.tables基础应用</h3><p><img src=\"/images/img-36.png\" alt=\"information_schema\"></p>\n<h3 id=\"虚拟库\"><a href=\"#虚拟库\" class=\"headerlink\" title=\"虚拟库\"></a>虚拟库</h3><h5 id=\"创建视图：\"><a href=\"#创建视图：\" class=\"headerlink\" title=\"创建视图：\"></a>创建视图：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW <span class=\"built_in\">test</span> AS SELECT world.city.`Name`,world.country.`Code`,world.city.Population </span><br><span class=\"line\">FROM world.city</span><br><span class=\"line\">JOIN world.country</span><br><span class=\"line\">ON world.city.CountryCode = world.country.`Code`</span><br><span class=\"line\">WHERE world.city.Population&lt;100;</span><br></pre></td></tr></table></figure>\n<h5 id=\"调用视图：\"><a href=\"#调用视图：\" class=\"headerlink\" title=\"调用视图：\"></a>调用视图：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM <span class=\"built_in\">test</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"元数据？\"><a href=\"#元数据？\" class=\"headerlink\" title=\"元数据？\"></a>元数据？</h4><p>  —-&gt; “基表”（无法直接查询和修改的）<br>  —-&gt; DDL 进行元数据修改<br>  —-&gt; show ,desc(show),information_schema(全局类的统计和查询)</p>\n<h3 id=\"information-schema\"><a href=\"#information-schema\" class=\"headerlink\" title=\"information_schema\"></a>information_schema</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DESC information_schema.tables;</span><br><span class=\"line\">重要列：</span><br><span class=\"line\">TABLE_SCHEMA       <span class=\"comment\">#表所在的库</span></span><br><span class=\"line\">TABLE_NAME         <span class=\"comment\">#表名</span></span><br><span class=\"line\">ENGINE             <span class=\"comment\">#表的存储引擎</span></span><br><span class=\"line\">TABLE_ROWS         <span class=\"comment\">#表的行数</span></span><br><span class=\"line\">AVG_ROW_LENGTH     <span class=\"comment\">#平均行长度</span></span><br><span class=\"line\">INDEX_LENGTH       <span class=\"comment\">#索引的长度</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"要查询整个数据库下，所有库和对应的表名。\"><a href=\"#要查询整个数据库下，所有库和对应的表名。\" class=\"headerlink\" title=\"要查询整个数据库下，所有库和对应的表名。\"></a>要查询整个数据库下，所有库和对应的表名。</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table_schema,table_name</span><br><span class=\"line\">FROM information_schema.tables;</span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"查询world和school，下所有表\"><a href=\"#查询world和school，下所有表\" class=\"headerlink\" title=\"查询world和school，下所有表\"></a>查询world和school，下所有表</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table_schema,GROUP_CONCAT(table_name) </span><br><span class=\"line\">FROM information_schema.tables</span><br><span class=\"line\">WHERE table_schema=<span class=\"string\">&#x27;world&#x27;</span> OR table_schema=<span class=\"string\">&#x27;school&#x27;</span></span><br><span class=\"line\">GROUP BY table_schema;</span><br><span class=\"line\">改写：</span><br><span class=\"line\">SELECT table_schema,table_name </span><br><span class=\"line\">FROM information_schema.tables</span><br><span class=\"line\">WHERE table_schema=<span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">UNION ALL </span><br><span class=\"line\">SELECT table_schema,table_name </span><br><span class=\"line\">FROM information_schema.tables</span><br><span class=\"line\">WHERE table_schema=<span class=\"string\">&#x27;school&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"统计一下每个库下的表的个数。\"><a href=\"#统计一下每个库下的表的个数。\" class=\"headerlink\" title=\"统计一下每个库下的表的个数。\"></a>统计一下每个库下的表的个数。</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table_schema,COUNT(table_name)</span><br><span class=\"line\">FROM information_schema.tables</span><br><span class=\"line\">GROUP BY table_schema;</span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"查询整个数据库中所有的库对应的表名，每个库显示成一行\"><a href=\"#查询整个数据库中所有的库对应的表名，每个库显示成一行\" class=\"headerlink\" title=\"查询整个数据库中所有的库对应的表名，每个库显示成一行\"></a>查询整个数据库中所有的库对应的表名，每个库显示成一行</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table_schema,GROUP_CONCAT(table_name) </span><br><span class=\"line\">FROM information_schema.tables</span><br><span class=\"line\">GROUP BY  table_schema;</span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"统计每表数据用量\"><a href=\"#统计每表数据用量\" class=\"headerlink\" title=\"统计每表数据用量\"></a>统计每表数据用量</h5><p>公式：<br><code>每张表的数据量=AVG_ROW_LENGTH(平均行长度)*TABLE_ROWS(行数)+INDEX_LENGTH(引索长度) SELECT</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select TABLE_SCHEMA,table_name,(AVG_ROW_LENGTH*TABLE_ROWS+INDEX_LENGTH)/1024/1024 AS mb</span><br><span class=\"line\">from information_schema.tables</span><br><span class=\"line\">WHERE TABLE_SCHEMA NOT IN(<span class=\"string\">&#x27;sys&#x27;</span>,<span class=\"string\">&#x27;performance&#x27;</span>,<span class=\"string\">&#x27;information_schema&#x27;</span>) </span><br><span class=\"line\">ORDER BY mb DESC;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT AVG_ROW_LENGTH,TABLE_ROWS,INDEX_LENGTH FROM information_schema.tables;</span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"统计一下每个库的真实数据量\"><a href=\"#统计一下每个库的真实数据量\" class=\"headerlink\" title=\"统计一下每个库的真实数据量\"></a>统计一下每个库的真实数据量</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TABLE_SCHEMA,count(table_name),SUM(AVG_ROW_LENGTH*TABLE_ROWS+INDEX_LENGTH)/1024/1024 AS total_mb</span><br><span class=\"line\">FROM information_schema.tables</span><br><span class=\"line\">GROUP BY TABLE_SCHEMA;</span><br><span class=\"line\"></span><br><span class=\"line\">// 统计出每表数据用量，更具库名进行站队，计算每库下表的个数以及库下的每表数据量之和。</span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"总数据量\"><a href=\"#总数据量\" class=\"headerlink\" title=\"总数据量\"></a>总数据量</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">（平均行长度所有列之和*平均行数所有列之和+引索长度所有列之和）</span><br><span class=\"line\">SELECT SUM(AVG_ROW_LENGTH*TABLE_ROWS+INDEX_LENGTH)/1024/1024 AS total_mb</span><br><span class=\"line\">FROM information_schema.tables;</span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"CONCAT-拼接函数示例：\"><a href=\"#CONCAT-拼接函数示例：\" class=\"headerlink\" title=\"CONCAT()拼接函数示例：\"></a>CONCAT()拼接函数示例：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CONCAT(USER,<span class=\"string\">&quot;@&quot;</span>,HOST)</span><br><span class=\"line\">FROM mysql.user;</span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"生产需求-单库单表备份\"><a href=\"#生产需求-单库单表备份\" class=\"headerlink\" title=\"生产需求:单库单表备份\"></a>生产需求:单库单表备份</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -p123  world city &gt;/tmp/world_city.sql</span><br><span class=\"line\">--- 模仿以上命令，对整个数据库下的1000张表进行单独备份，</span><br><span class=\"line\">--- 排除sys(5.6没有)，performance，information_schema</span><br></pre></td></tr></table></figure>\n<hr>\n<h6 id=\"批量分表备份：\"><a href=\"#批量分表备份：\" class=\"headerlink\" title=\"批量分表备份：\"></a>批量分表备份：</h6><p><strong>1：生成拼接语句</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CONCAT(<span class=\"string\">&quot;mysqldump -uroot -p123  &quot;</span>,table_schema,<span class=\"string\">&quot; &quot;</span>,table_name,<span class=\"string\">&quot; &gt;/tmp/&quot;</span>,table_schema,<span class=\"string\">&quot;_&quot;</span>,table_name,<span class=\"string\">&quot;.sql&quot;</span>)  </span><br><span class=\"line\">FROM information_schema.tables </span><br><span class=\"line\">WHERE table_schema NOT IN(<span class=\"string\">&#x27;sys&#x27;</span>,<span class=\"string\">&#x27;performance&#x27;</span>,<span class=\"string\">&#x27;information_schema&#x27;</span>)  <span class=\"comment\">#排除库</span></span><br><span class=\"line\">INTO OUTFILE <span class=\"string\">&#x27;/tmp/bak.sh&#x27;</span>;  <span class=\"comment\">#&lt;导出脚本</span></span><br></pre></td></tr></table></figure>\n<p><strong>2：解除mysql导出限制</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf </span><br><span class=\"line\">secure-file-priv=/tmp</span><br></pre></td></tr></table></figure>\n<p><strong>3：重启数据库已生效配置</strong><br><code>/etc/init.d/mysqld restart</code></p>\n<hr>\n<h6 id=\"批量执行语句\"><a href=\"#批量执行语句\" class=\"headerlink\" title=\"批量执行语句\"></a>批量执行语句</h6><p>例子：模仿以下语句，批量实现world下所有表的操作语句生成<br><code>alter table world.city discard tablespace;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select concat(<span class=\"string\">&quot;alter table &quot;</span>,table_schema,<span class=\"string\">&quot;.&quot;</span>,table_name,<span class=\"string\">&quot;discard tablespace;&quot;</span>) </span><br><span class=\"line\">from information_schema.tables </span><br><span class=\"line\"><span class=\"built_in\">where</span> table_schema=<span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">into outfile <span class=\"string\">&#x27;/tmp/discard.sql&#x27;</span>;</span><br></pre></td></tr></table></figure>\n","categories":["DBA"],"tags":["MySQL","mysql备份"]},{"title":"gRPC程序健康检查&Kubernetes部署&负载均衡","url":"/forward/48a90e5c.html","content":"<blockquote>\n<p>本文介绍gRPC程序健康检查+Kubernetes部署+负载均衡</p>\n</blockquote>\n<p>参考文档:</p>\n<ul>\n<li><a href=\"https://github.com/grpc-ecosystem/grpc-health-probe\">https://github.com/grpc-ecosystem/grpc-health-probe</a></li>\n<li><a href=\"https://github.com/grpc/grpc/blob/v1.15.0/doc/health-checking.md\">https://github.com/grpc/grpc/blob/v1.15.0/doc/health-checking.md</a></li>\n<li><a href=\"https://help.aliyun.com/document_detail/313328.html\">通过Ingress Controller实现gRPC服务访问 - 阿里云帮助中心</a></li>\n<li><a href=\"https://kubernetes.github.io/ingress-nginx/examples/grpc/\">grpc - NGINX Ingress Controller</a></li>\n<li><a href=\"https://nginx.org/en/docs/http/ngx_http_v2_module.html\">ngx_http_v2_module - NGINX</a></li>\n<li><a href=\"https://kubernetes.io/zh/blog/2018/10/01/%E5%9C%A8-kubernetes-%E4%B8%8A%E5%AF%B9-grpc-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/\">在 Kubernetes 上对 gRPC 服务器进行健康检查 - Kubernetes 博客</a></li>\n<li><a href=\"https://kubernetes.io/blog/2018/11/07/grpc-load-balancing-on-kubernetes-without-tears/\">gRPC Load Balancing on Kubernetes without Tears - Kubernetes 博客</a></li>\n<li><a href=\"https://konghq.com/blog/manage-grpc-services-kong/\">如何使用 Kong 管理您的 gRPC 服务 - KongHQ</a></li>\n</ul>\n<h2 id=\"健康检查相关\"><a href=\"#健康检查相关\" class=\"headerlink\" title=\"健康检查相关\"></a>健康检查相关</h2><p>我们都知道Kubernetes的健康检查（存活探针和就绪探针）可以使您的应用程序在睡眠时保持可用状态。当检测到没有回应的 Pod 时，会将其标记为不健康，并使这些 Pod 重新启动或重新安排。</p>\n<p>在老版本的 Kubernetes 原生并不支持 gRPC 健康检查。gRPC 的开发人员在 Kubernetes 中部署时可以采用以下三种方法：<br><img src=\"/images/pasted-159.png\" alt=\"health\"></p>\n<ol>\n<li><code>httpGet prob</code>: 不能与 gRPC 一起使用。您需要重构您的应用程序，必须同时支持 gRPC 和 HTTP/1.1 协议（在不同的端口号上）。</li>\n<li><code>tcpSocket probe</code>: 打开 gRPC 服务器的 Socket 是没有意义的，因为它无法读取响应主体。</li>\n<li><code>exec probe</code>: 将定期调用容器生态系统中的程序。对于 gRPC，这意味着开发人员要自己实现健康 RPC，然后使用容器编写并交付客户端工具。</li>\n</ol>\n<h3 id=\"grpc-health-probe-解决方案\"><a href=\"#grpc-health-probe-解决方案\" class=\"headerlink\" title=\"grpc-health-probe 解决方案\"></a>grpc-health-probe 解决方案</h3><p>gRPC有一个<a href=\"https://github.com/grpc/grpc/blob/v1.15.0/doc/health-checking.md\">标准的健康检查协议</a>。它可以从任何语言轻松使用。生成的代码和用于设置运行状况的实用程序几乎都在gRPC的所有语言实现中提供。</p>\n<p>在 gRPC 应用程序中实现了此健康检查协议，那么可以使用标准或通用工具调用<code>Check()</code>方法来确定服务器状态。</p>\n<p><img src=\"/images/pasted-160.png\" alt=\"grpc-health-probe\"></p>\n<p>使用此工具，您可以在所有 gRPC 应用程序中使用相同的健康检查配置。这种方法有以下要求：</p>\n<ul>\n<li>用您喜欢的语言找到 gRPC 的 “健康” 模块并开始使用它例如 <a href=\"https://pkg.go.dev/github.com/grpc/grpc-go/health\">Golang</a>。</li>\n<li>将二进制文件 <code>grpc_health_probe</code> 送到容器中。</li>\n<li>配置 Kubernetes 的 “exec” 检查模块来调用容器中的 “grpc_health_probe” 工具。在这种情况下，执行 “grpc_health_probe” 将通过 localhost 调用您的 gRPC 服务器，因为它们位于同一个容器中。</li>\n</ul>\n<blockquote>\n<p>以下内容译自<code>grpc-health-probe</code>官方文档<br>1.<code>grpc_health_probe</code>实用程序允许您查询 gRPC 服务的健康状况，这些服务通过gRPC 健康检查协议公开服务的状态。<br>2.<code>grpc_health_probe</code>是指用于在健康检查GRPC应用 Kubernetes，使用EXEC探针执行。<br>3.⚠️ Kubernetes v1.23 现在引入了内置的 gRPC 健康检查 功能作为 alpha 功能。因此，您可能不再需要使用此工具，而是使用原生 Kubernetes 功能。<br>4.如果您使用的是旧版本的 Kubernetes，或者使用高级配置（例如自定义元数据、TLS 或更精细的超时调整），或者根本不使用 Kubernetes，这个工具仍然很有用。<br>5.此命令行实用程序生成 RPC 到<code>/grpc.health.v1.Health/Check</code>. 如果它以SERVING状态响应，grpc_health_probe它将成功退出，否则它将以非零退出代码退出（如下所述）。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#成功</span></span><br><span class=\"line\">$ grpc_health_probe -addr=localhost:5000</span><br><span class=\"line\">healthy: SERVING</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#失败</span></span><br><span class=\"line\">$ grpc_health_probe -addr=localhost:9999 -connect-timeout 250ms -rpc-timeout 100ms</span><br><span class=\"line\">failed to connect service at <span class=\"string\">&quot;localhost:9999&quot;</span>: context deadline exceeded</span><br><span class=\"line\"><span class=\"built_in\">exit</span> status 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"Dockerfile-Yaml编写\"><a href=\"#Dockerfile-Yaml编写\" class=\"headerlink\" title=\"Dockerfile_Yaml编写\"></a>Dockerfile_Yaml编写</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> registry.cn-shanghai.aliyuncs.com/xxxx/base:alpine-glibc-Shanghai</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> GRPC_HEALTH_PROBE_VERSION=v0.<span class=\"number\">4.6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +x ip138_updating_interface &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   wget -qO /bin/grpc_health_probe https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/<span class=\"variable\">$&#123;GRPC_HEALTH_PROBE_VERSION&#125;</span>/grpc_health_probe-linux-arm64 &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">chmod</span> +x /bin/grpc_health_probe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8031</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/app/ip138_updating_interface&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;[YOUR-DOCKER-IMAGE]&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/grpc_health_probe&quot;</span>, <span class=\"string\">&quot;-addr=:5000&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/grpc_health_probe&quot;</span>, <span class=\"string\">&quot;-addr=:5000&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"负载均衡相关\"><a href=\"#负载均衡相关\" class=\"headerlink\" title=\"负载均衡相关\"></a>负载均衡相关</h2><p>随着微服务的增长，gRPC在这些较小的服务之间的相互通信中获得了很大的普及，在后台，gRPC使用http/2在同一连接和双工流中复用许多请求。</p>\n<p>使用具有结构化数据的快速，轻便的二进制协议作为服务之间的通信介质确实很有吸引力，但是使用gRPC时需要考虑一些因素，最重要的是如何处理负载均衡。</p>\n<h3 id=\"gRPC使用粘性连接\"><a href=\"#gRPC使用粘性连接\" class=\"headerlink\" title=\"gRPC使用粘性连接\"></a>gRPC使用粘性连接</h3><p>gRPC连接是粘性的。这意味着当从客户端到服务器建立连接时，相同的连接将被尽可能长时间地用于许多请求（多路复用）。这样做是为了避免所有最初的时间和资源花费在TCP握手上。因此，当客户端获取与服务器实例的连接时，它将保持连接。</p>\n<p>现在，当同一客户端开始发送大量请求时，它们都将转到同一服务器实例。而这正是问题所在，将没有机会将负载分配给其他实例。他们都去同一个实例。这就是为什么粘性连接会使负载平衡变得非常困难。</p>\n<p>可以实现gRPC负载的方式有很多种如<code>DNS服务发现</code>、<code>客户端实现</code>等等，生产环境中为了不给开发人员添加负担，我这里只说一下服务端通过7层负载实现gRPC负载均衡的过程<br><img src=\"/images/pasted-162.png\" alt=\"四层负载\"><br>上图种中间的LB工作在OSI参考模型第4层。因此，它非常快，可以处理更多的连接。当出现新的TCP通信连接时，负载均衡器将选择一个实例，并且在连接有效期内将连接路由到该单个实例。</p>\n<p>然而如上面所说gRPC连接是粘性的和持久的，因此它会在负载均衡器后面的客户端和同一服务端实例之间保持长时间相同的连接，只要服务端不挂。</p>\n<h3 id=\"粘性连接和k8s的弹性伸缩\"><a href=\"#粘性连接和k8s的弹性伸缩\" class=\"headerlink\" title=\"粘性连接和k8s的弹性伸缩\"></a>粘性连接和k8s的弹性伸缩</h3><p>如果单个POD上的负载（内存或cpu）高于自动伸缩策略，则将导致在该目标工作负载中启动一个新的副本POD。<br>但是，目标工作负载中的新POD将无济于事。为什么? 同样是因为gRPC连接是持久的且具有粘性。正在发送大量请求的客户端，将继续将它们发送到与其连接的同一POD上。</p>\n<p>因此，新的POD就算被启动，也没有请求过载将流向新的实例。利用率高的同一POD仍在接收来自客户端的请求负载（因为客户端一直在重用相同的连接）。</p>\n<p>HPA策略可能会不断触发并向目标工作负载添加新POD（因为单个POD的cpu /内存过载）。但是这些新POD接收的流量几乎为零。自动缩放策略可能会继续触发并可能最大化目标工作负载中允许的POD，而实际上的新建的POD并没有参与到流量负载分担。</p>\n<h3 id=\"负载均衡解决办法\"><a href=\"#负载均衡解决办法\" class=\"headerlink\" title=\"负载均衡解决办法\"></a>负载均衡解决办法</h3><p>综上所述就意味着我们需要一个 7 层负载均衡，而 K8s 的 Service 核心使用的是 kube proxy，这是一个 4 层负载均衡，所以不能满足我们的要求。</p>\n<blockquote>\n<p>gRPC 官方博客的文章 <a href=\"https://grpc.io/blog/grpc-load-balancing/\">gRPC Load Balancing</a> 也给出了 gRPC 负载均衡的思路：</p>\n</blockquote>\n<ul>\n<li>客户端型负载均衡(ZooKeeper/Etcd/Consul/DNS 等)，适用于流量较高的场景</li>\n<li>代理式的负载均衡(Haproxy/Nginx/Traefik/Envoy/Linkerd 等)，适用于服务器需要对外提供统一的入口场景，通常我们说的 ServiceMesh 就是这种方式</li>\n</ul>\n<blockquote>\n<p>以下内容译自<code>gRPC</code>官方博客<br>In L7 (application level) load balancing, the LB terminates and parses the HTTP/2 protocol. The LB can inspect each request and assign a backend based on the request contents. For example, a session cookie sent as part of HTTP header can be used to associate with a specific backend, so all requests for that session are served by the same backend. Once the LB has chosen an appropriate backend, it creates a new HTTP/2 connection to that backend. It then forwards the HTTP/2 streams received from the client to the backend(s) of choice. With HTTP/2, LB can distribute the streams from one client among multiple backends.<br>-<br>在 L7（应用层）负载均衡中，LB 终止并解析 HTTP/2 协议。LB 可以检查每个请求并根据请求内容分配后端。例如，作为 HTTP 标头的一部分发送的会话 cookie 可用于与特定后端关联，因此该会话的所有请求都由同一后端提供服务。一旦 LB 选择了合适的后端，它就会创建一个到该后端的新 HTTP/2 连接。然后它将从客户端接收到的 HTTP/2 流转发到选择的后端。使用 HTTP/2，LB 可以将来自一个客户端的流分发到多个后端。</p>\n</blockquote>\n<p><img src=\"/images/pasted-161.png\" alt=\"四层负载\"></p>\n<h3 id=\"Ingress-Nginx\"><a href=\"#Ingress-Nginx\" class=\"headerlink\" title=\"Ingress Nginx\"></a>Ingress Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node001 ingress]<span class=\"comment\"># cat svc1.yaml </span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: grpchttps</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - name: https</span><br><span class=\"line\">    port: 8844 </span><br><span class=\"line\">    targetPort: 443</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    nodePort: 8844</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br></pre></td></tr></table></figure>\n<p>Ingress nginx gRPC默认跑在https所在端口，这里将443端口映射为8844。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: grpc-ingress</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    # 注意这里：必须要配置以指明后端服务为gRPC服务</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/backend-protocol: &quot;GRPC&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  # gRPC服务域名</span><br><span class=\"line\">  - host: grpc-service.fxeyeinterface.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - path: /</span><br><span class=\"line\">        pathType: Prefix</span><br><span class=\"line\">        backend:</span><br><span class=\"line\">            # gRPC服务</span><br><span class=\"line\">            serviceName: grpc-service</span><br><span class=\"line\">            servicePort: 50051</span><br><span class=\"line\">  tls:</span><br><span class=\"line\">  - hosts:</span><br><span class=\"line\">    - grpc-service.fxeyeinterface.com</span><br><span class=\"line\">    secretName: grpc-service.fxeyeinterface.com #可以随便写一个名字，使用ingress默认颁发的证书</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-165.png\" alt=\"grpcurl\"><br>查看访问日志:<br><img src=\"/images/pasted-166.png\" alt=\"nginx\"></p>\n<h3 id=\"Ingress-Kong\"><a href=\"#Ingress-Kong\" class=\"headerlink\" title=\"Ingress Kong\"></a>Ingress Kong</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加KONG http2 所需端口</span></span><br><span class=\"line\"> - name: KONG_PROXY_LISTEN</span><br><span class=\"line\">  value: 0.0.0.0:8000, 0.0.0.0:8443 ssl, 0.0.0.0:8888 http2, 0.0.0.0:8844 ssl http2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建service</span></span><br><span class=\"line\">curl -XPOST http://kong-proxy.kong:8001/services \\</span><br><span class=\"line\">--data name=service-as-grpc \\</span><br><span class=\"line\">--data protocol=grpc \\</span><br><span class=\"line\">--data host=grpc-service.default.svc.cluster.local \\</span><br><span class=\"line\">--data port=50051</span><br><span class=\"line\"></span><br><span class=\"line\">curl -XPOST http://kong-proxy.kong:8001/services/service-as-grpc/routes \\</span><br><span class=\"line\">--data protocols=grpc \\</span><br><span class=\"line\">--data <span class=\"string\">&quot;hosts=grpc-service.fxeyeinterface.com&quot;</span> \\</span><br><span class=\"line\">--data name=service-ar-grpc \\</span><br><span class=\"line\">--data paths=/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其中，kong-proxy.kong:8001 为kong in k8s的管理端口，paths对应的具体的grpc后端</span></span><br><span class=\"line\"><span class=\"comment\"># 其它的grpc后端按上新建即可</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-163.png\" alt=\"grpcurl\"><br>查看访问日志：<br><img src=\"/images/pasted-164.png\" alt=\"kong\"></p>\n","categories":["OPS"],"tags":["OPS","Kubernetes","gRPC"]},{"title":"k8s企业级DevOps实践-Kong的两种打开方式","url":"/forward/55d102bd.html","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>KONG的核心对象为:upstream、target、service、route</p>\n<ul>\n<li>upstream: 是对上游服务器的抽象；</li>\n<li>target: 代表了一个物理服务，是 ip + port 的抽象；</li>\n<li>service: 是抽象层面的服务，他可以直接映射到一个物理服务(host 指向 ip + port)，也可以指向一个upstream 来做到负载均衡；</li>\n<li>route: 是路由的抽象，他负责将实际的 request 映射到 service。</li>\n</ul>\n<p>KONG监听的端口为：8000、8001、8443、8444、8100</p>\n<ul>\n<li>8444: 带ssl的管理端口</li>\n<li>8000/8443: 分别是用来监听来自客户端的Http 和 Https请求，等价于 Nginx 默认的 80 端口</li>\n<li>8001: 端口便是默认的管理端口，可以通过 HTTP Restful API 来动态管理 Kong 的配置</li>\n<li>8100: 为prometheus获取metrics指标端口</li>\n</ul>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p>Nginx Conf01:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream helloUpstream &#123;</span><br><span class=\"line\">    server localhost:3000 weight=100;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    location /hello &#123;</span><br><span class=\"line\">    proxy_pass http://helloUpstream;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上简单的 Nginx 配置，可以转换为如下的 Http 请求。</p>\n<h3 id=\"Kong实现\"><a href=\"#Kong实现\" class=\"headerlink\" title=\"Kong实现\"></a>Kong实现</h3><p><strong>1)配置 upstream</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># curl -X POST http://10.0.0.207:8001/upstreams --data &quot;name=testUpstream&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>2)配置 target</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># curl -X POST http://10.0.0.207:8001/upstreams/testUpstream/targets --data &quot;target=localhost:3000&quot; --data &quot;weight=100&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>3)配置 service</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># curl -X POST http://10.0.0.207:8001/services --data &quot;name=hello&quot; --data &quot;host=testUpstream&quot;</span><br><span class=\"line\">输出:&quot;id&quot;:&quot;f3ed44ca-908f-4595-b26e-1a543740e642&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>4)配置 route</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># curl -X POST http://10.0.0.207:8001/routes --data &quot;paths[]=/hello&quot; --data &quot;service.id=f3ed44ca-908f-4595-b26e-1a543740e642&quot;</span><br><span class=\"line\"># curl -X POST http://10.0.0.207:8001/routes --data &quot;paths[]=/hello&quot; --data &quot;name=routehello&quot; --data &quot;service.name=hello&quot;</span><br></pre></td></tr></table></figure>\n<p>这一切都是动态的，无需手动 reload nginx.conf<br>为 Kong 新增路由信息时涉及到了 <code>upstream，target，service，route</code> 等概念，便是 Kong 最核心的四个对象。</p>\n<p><strong>为 hello 服务添加50次/秒的限流:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl -X POST http://localhost:8001/services/hello/plugins \\</span></span><br><span class=\"line\">\t--data <span class=\"string\">&quot;name=rate-limiting&quot;</span> \\</span><br><span class=\"line\">\t--data <span class=\"string\">&quot;config.second=50&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>为 hello 服务添加 jwt 插件:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl -X POST http://localhost:8001/services/login/plugins \\</span></span><br><span class=\"line\">\t--data <span class=\"string\">&quot;name=jwt&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>插件也可以安装在 route 之上</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#\tcurl -X POST http://localhost:8001/routes/&#123;routeId&#125;/plugins \\</span></span><br><span class=\"line\">\t--data <span class=\"string\">&quot;name=rate-limiting&quot;</span> \\</span><br><span class=\"line\">\t--data <span class=\"string\">&quot;config.second=50&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># curl -X POST http://localhost:8001/routes/&#123;routeId&#125;/plugins \\</span></span><br><span class=\"line\">\t--data <span class=\"string\">&quot;name=jwt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web管理界面\"><a href=\"#Web管理界面\" class=\"headerlink\" title=\"Web管理界面\"></a>Web管理界面</h3><p>这里不赘述</p>\n<h3 id=\"日志收集\"><a href=\"#日志收集\" class=\"headerlink\" title=\"日志收集\"></a>日志收集</h3>","categories":["OPS"],"tags":["OPS","Kong","Kubernetes"]},{"title":"k8s企业级DevOps实践-k8s调度策略:NodeSelector/nodeAffinity/污点与容忍","url":"/forward/1758bdeb.html","content":"<h3 id=\"为何要控制Pod应该如何调度\"><a href=\"#为何要控制Pod应该如何调度\" class=\"headerlink\" title=\"为何要控制Pod应该如何调度\"></a>为何要控制Pod应该如何调度</h3><ul>\n<li>集群中有些机器的配置高（SSD，更好的内存等），我们希望核心的服务（比如说数据库）运行在上面</li>\n<li>某两个服务的网络传输很频繁，我们希望它们最好在同一台机器上 </li>\n<li>……</li>\n</ul>\n<h3 id=\"NodeSelector调度\"><a href=\"#NodeSelector调度\" class=\"headerlink\" title=\"NodeSelector调度\"></a>NodeSelector调度</h3><p> <code>label</code>是<code>kubernetes</code>中一个非常重要的概念，用户可以非常灵活的利用 label 来管理集群中的资源，POD 的调度可以根据节点的 label 进行特定的部署。 </p>\n<p>查看节点的label：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes --show-labels</span><br></pre></td></tr></table></figure>\n\n<p>为节点打label：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl label node k8s-master disktype=ssd</span><br></pre></td></tr></table></figure>\n\n<p>当 node 被打上了相关标签后，在调度的时候就可以使用这些标签了，只需要在spec 字段中添加<code>nodeSelector</code>字段，里面是我们需要被调度的节点的 label。 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">true</span>\t<span class=\"comment\"># 声明pod的网络模式为host模式，效果通docker run --net=host</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span> </span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/opt/mysql/data</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span>   <span class=\"comment\"># 使用节点选择器将Pod调度到指定label的节点</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  \t<span class=\"attr\">image:</span> <span class=\"number\">172.21</span><span class=\"number\">.32</span><span class=\"number\">.6</span><span class=\"string\">:5000/demo/mysql:5.7</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n<p>测试可参见：<a href=\"/forward/6b4e4d76.html#Pod%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96\">mysql on k8s持久化</a></p>\n<h3 id=\"nodeAffinity节点亲和性调度\"><a href=\"#nodeAffinity节点亲和性调度\" class=\"headerlink\" title=\"nodeAffinity节点亲和性调度\"></a>nodeAffinity节点亲和性调度</h3><p>节点亲和性，比上面的<code>nodeSelector</code>更加灵活，它可以进行一些简单的逻辑组合，不只是简单的相等匹配 。分为两种，软策略和硬策略。</p>\n<ul>\n<li><p><code>preferredDuringSchedulingIgnoredDuringExecution</code>：软策略，如果你没有满足调度要求的节点的话，Pod就会忽略这条规则，继续完成调度过程，说白了就是满足条件最好了，没有满足就忽略掉的策略。</p>\n</li>\n<li><p><code>requiredDuringSchedulingIgnoredDuringExecution</code>： 硬策略，如果没有满足条件的节点的话，就不断重试直到满足条件为止，简单说就是你必须满足我的要求，不然我就不会调度Pod。</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#要求 Pod 不能运行在20和30两个节点上，如果其他节点满足disktype=ssd的话就优先调度到这个节点上</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"number\">172.21</span><span class=\"number\">.32</span><span class=\"number\">.6</span><span class=\"string\">:5000/demo/myblog</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">          <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">            <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span> <span class=\"comment\">#硬性规定</span></span><br><span class=\"line\">                <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                    <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">kubernetes.io/hostname</span></span><br><span class=\"line\">                      <span class=\"attr\">operator:</span> <span class=\"string\">NotIn</span></span><br><span class=\"line\">                      <span class=\"attr\">values:</span></span><br><span class=\"line\">                        <span class=\"bullet\">-</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.20</span></span><br><span class=\"line\">                        <span class=\"bullet\">-</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.30</span></span><br><span class=\"line\">            <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span> <span class=\"comment\">#软性规定</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">1</span></span><br><span class=\"line\">                  <span class=\"attr\">preference:</span></span><br><span class=\"line\">                    <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                    <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">disktype</span></span><br><span class=\"line\">                      <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                      <span class=\"attr\">values:</span></span><br><span class=\"line\">                        <span class=\"bullet\">-</span> <span class=\"string\">ssd</span></span><br><span class=\"line\">                        <span class=\"bullet\">-</span> <span class=\"string\">sas</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n<p>这里的匹配逻辑是 label 的值在某个列表中，现在<code>Kubernetes</code>提供的操作符有下面的几种：</p>\n<ul>\n<li>In：label 的值在某个列表中</li>\n<li>NotIn：label 的值不在某个列表中</li>\n<li>Gt：label 的值大于某个值</li>\n<li>Lt：label 的值小于某个值</li>\n<li>Exists：某个 label 存在</li>\n<li>DoesNotExist：某个 label 不存在</li>\n</ul>\n<blockquote>\n<p>如果<code>nodeSelectorTerms</code>下面有多个选项的话，满足任何一个条件就可以了；如果<code>matchExpressions</code>有多个选项的话，则必须同时满足这些条件才能正常调度 Pod</p>\n</blockquote>\n<h3 id=\"污点-Taints-与容忍-tolerations\"><a href=\"#污点-Taints-与容忍-tolerations\" class=\"headerlink\" title=\"污点(Taints)与容忍(tolerations)\"></a>污点(Taints)与容忍(tolerations)</h3><p>对于<code>nodeAffinity</code>无论是硬策略还是软策略方式，都是调度 Pod 到预期节点上，而<code>Taints</code>恰好与之相反，如果一个节点标记为 Taints ，除非 Pod 也被标识为可以容忍污点节点，否则该 Taints 节点不会被调度Pod。</p>\n<p>Taints(污点)是Node的一个属性，设置了Taints(污点)后，因为有了污点，所以Kubernetes是不会将Pod调度到这个Node上的。于是Kubernetes就给Pod设置了个属性Tolerations(容忍)，只要Pod能够容忍Node上的污点，那么Kubernetes就会忽略Node上的污点，就能够(不是必须)把Pod调度过去。</p>\n<p>比如用户希望把 Master 节点保留给 Kubernetes 系统组件使用，或者把一组具有特殊资源预留给某些 Pod，则污点就很有用了，Pod 不会再被调度到 taint 标记过的节点。在<a href=\"/forward/57e2aa11.html#%E8%AE%BE%E7%BD%AEmaster%E8%8A%82%E7%82%B9%E6%98%AF%E5%90%A6%E5%8F%AF%E8%B0%83%E5%BA%A6%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89\">K8s集群搭建</a>时就利用污点与容忍特性，将master也当作了工作节点加入到了k8s集群当中</p>\n<p>taint 标记节点举例如下：<br>设置污点：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> kubectl taint node [<span class=\"type\">node_name</span>] key=value:[<span class=\"type\">effect</span>]   </span><br><span class=\"line\">      其中[<span class=\"type\">effect</span>] 可取值： [ <span class=\"type\">NoSchedule</span> | <span class=\"type\">PreferNoSchedule</span> | <span class=\"type\">NoExecute</span> ]</span><br><span class=\"line\">       NoSchedule：一定不能被调度。</span><br><span class=\"line\">       PreferNoSchedule：尽量不要调度。</span><br><span class=\"line\">       NoExecute：不仅不会调度，还会驱逐Node上已有的Pod。</span><br><span class=\"line\">  示例：kubectl taint node k8s<span class=\"literal\">-master</span> smoke=true:NoSchedule</span><br></pre></td></tr></table></figure>\n\n<p>去除污点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">去除指定key及其effect：</span><br><span class=\"line\">     kubectl taint nodes [node_name] key:[effect]-    <span class=\"comment\">#这里的key不用指定value</span></span><br><span class=\"line\">                </span><br><span class=\"line\"> 去除指定key所有的effect: </span><br><span class=\"line\">     kubectl taint nodes node_name key-</span><br><span class=\"line\"> </span><br><span class=\"line\"> 示例：</span><br><span class=\"line\">     kubectl taint node k8s-master smoke=<span class=\"literal\">true</span>:NoSchedule</span><br><span class=\"line\">     kubectl taint node k8s-master smoke:NoExecute-</span><br><span class=\"line\">     kubectl taint node k8s-master smoke-</span><br></pre></td></tr></table></figure>\n\n<p>污点演示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 给k8s-slave1打上污点，smoke=true:NoSchedule</span></span><br><span class=\"line\">$ kubectl taint node k8s-master smoke=<span class=\"literal\">true</span>:NoSchedule</span><br><span class=\"line\">$ kubectl taint node k8s-slave1 drunk=<span class=\"literal\">true</span>:NoSchedule</span><br><span class=\"line\">$ kubectl taint node k8s-slave2 perm=<span class=\"literal\">true</span>:NoSchedule</span><br><span class=\"line\"></span><br><span class=\"line\">此时，master节点打上了污点抽烟，slave1节点打上了污点喝酒，slave2节点打上了污点烫头。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 扩容myblog的Pod，观察新Pod的调度情况</span></span><br><span class=\"line\">$ kubectl -n demo scale deploy myblog --replicas=3</span><br><span class=\"line\">$ kubectl -n demo get po -w    <span class=\"comment\">## pending</span></span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">myblog-749b5dbc4b-6lgwm   1/1     Running   0          66m</span><br><span class=\"line\">myblog-749b5dbc4b-jx5j2   1/1     Running   0          65m</span><br><span class=\"line\">myblog-749b5dbc4b-vtb57   0/1     Pending   0          15s</span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running   0          156m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看事件</span></span><br><span class=\"line\">$ kubectl -n demo describe po myblog-749b5dbc4b-vtb57</span><br><span class=\"line\">Warning  FailedScheduling  &lt;unknown&gt;  default-scheduler  0/3 nodes are available: 3 node(s) had taints that the pod didn<span class=\"string\">&#x27;t tolerate.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 扩容的pod由于受不了三个节点的抽烟喝酒烫头污点，从而无法调度到任何一个节点😄</span></span><br></pre></td></tr></table></figure>\n\n<p>Pod容忍污点示例：<code>myblog/deployment/deploy-myblog-taint.yaml</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: myblog</span><br><span class=\"line\">  namespace: demo</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: <span class=\"number\">3</span>   <span class=\"comment\">#指定Pod副本数</span></span><br><span class=\"line\">  selector:             <span class=\"comment\">#指定Pod的选择器</span></span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: myblog</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:   <span class=\"comment\">#给Pod打label</span></span><br><span class=\"line\">        app: myblog</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      tolerations: <span class=\"comment\">#设置容忍性</span></span><br><span class=\"line\">      - key: <span class=\"string\">&quot;smoke&quot;</span> </span><br><span class=\"line\">        operator: <span class=\"string\">&quot;Equal&quot;</span>  <span class=\"comment\">#如果操作符为Exists，那么value属性可省略,不指定operator，默认为Equal</span></span><br><span class=\"line\">        value: <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        effect: <span class=\"string\">&quot;NoSchedule&quot;</span></span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: myblog</span><br><span class=\"line\">        image: <span class=\"number\">192.168</span>.<span class=\"number\">56.10</span>:<span class=\"number\">5000</span>/myblog:v3</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>或者在线更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl -n demo edit deploy myblog</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f deploy-myblog-taint.yaml</span><br><span class=\"line\"><span class=\"comment\"># 上面的编排文件中定义了myblog这个pod只容忍了抽烟污点，即master的污点 应用之后，我们检查一下调度情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl -n demo get po -o wide</span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE     IP              NODE </span><br><span class=\"line\">myblog-7fc47887f9-h5529   1/1     Running   0          2m56s   10.244.0.4      k8s-master </span><br><span class=\"line\">myblog-7fc47887f9-k85mr   1/1     Running   0          3m27s   10.244.0.2      k8s-master</span><br><span class=\"line\">myblog-7fc47887f9-v6qbf   1/1     Running   0          3m13s   10.244.0.3      k8s-master</span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running   0          170m    192.168.56.20   k8s-slave1 </span><br><span class=\"line\"></span><br><span class=\"line\">发现所有的myblogpod 和 其副本都调度到了master节点上面</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"number\">172.21</span><span class=\"number\">.32</span><span class=\"number\">.6</span><span class=\"string\">:5000/demo/myblog</span></span><br><span class=\"line\">      <span class=\"attr\">tolerations:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">operator:</span> <span class=\"string\">&quot;Exists&quot;</span></span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["OPS","Kubernetes","调度策略"]},{"title":"k8s企业级DevOps实践-搭建镜像仓库","url":"/forward/6cfd7a23.html","content":"<h2 id=\"搭建本地镜像仓库\"><a href=\"#搭建本地镜像仓库\" class=\"headerlink\" title=\"搭建本地镜像仓库\"></a>搭建本地镜像仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd /opt/</span></span><br><span class=\"line\">[root@localhost opt]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 1281480</span><br><span class=\"line\">-rw-r--r--. 1 root root 1312232098 4月  11 17:55 registry.tar.gz</span><br><span class=\"line\">[root@localhost opt]<span class=\"comment\"># tar -xf registry.tar.gz </span></span><br><span class=\"line\">[root@localhost registry-data]<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost opt]<span class=\"comment\"># ls</span></span><br><span class=\"line\">registry-data  registry.tar.gz</span><br><span class=\"line\">[root@localhost opt]<span class=\"comment\"># cd registry-data/</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost registry-data]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 25728</span><br><span class=\"line\">drwxr-xr-x. 3 root root       20 4月   9 2020 registry</span><br><span class=\"line\">-rw-------. 1 root root 26344448 4月   9 2020 registry-v2.tar</span><br><span class=\"line\">[root@localhost registry-data]<span class=\"comment\"># docker load -i registry.tar.gz</span></span><br><span class=\"line\">registry/        registry-v2.tar  </span><br><span class=\"line\">[root@localhost registry-data]<span class=\"comment\"># docker load -i registry-v2.tar //加载仓库镜像</span></span><br><span class=\"line\">7444ea29e45e: Loading layer  4.671MB/4.671MB</span><br><span class=\"line\">9d08b7a37338: Loading layer  1.563MB/1.563MB</span><br><span class=\"line\">c62467775792: Loading layer  20.08MB/20.08MB</span><br><span class=\"line\">588f0b714a86: Loading layer  3.584kB/3.584kB</span><br><span class=\"line\">a330d9dc14ce: Loading layer  2.048kB/2.048kB</span><br><span class=\"line\">Loaded image: registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost registry-data]<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">registry            2                   708bc6af7e5e        14 months ago       25.8MB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker镜像启动镜像仓库服务\"><a href=\"#docker镜像启动镜像仓库服务\" class=\"headerlink\" title=\"docker镜像启动镜像仓库服务\"></a>docker镜像启动镜像仓库服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 5000:5000 --restart always -v /opt/registry-data/registry:/var/lib/registry --name registry registry:2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 默认仓库不带认证，若需要认证，参考https://docs.docker.com/registry/deploying/#restricting-access</span></span><br></pre></td></tr></table></figure>\n\n<p>假设启动镜像仓库服务的主机地址为192.168.56.10，该目录中已存在的镜像列表：</p>\n<table>\n<thead>\n<tr>\n<th>现镜像仓库地址</th>\n<th>原镜像仓库地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>192.168.56.10:5000/coreos/flannel:v0.11.0-amd64</td>\n<td>quay.io/coreos/flannel:v0.11.0-amd64</td>\n</tr>\n<tr>\n<td>192.168.56.10:5000/mysql:5.7</td>\n<td>mysql:5.7</td>\n</tr>\n<tr>\n<td>192.168.56.10:5000/nginx:alpine</td>\n<td>nginx:alpine</td>\n</tr>\n<tr>\n<td>192.168.56.10:5000/centos:centos7.5.1804</td>\n<td>centos:centos7.5.1804</td>\n</tr>\n<tr>\n<td>192.168.56.10:5000/elasticsearch/elasticsearch:7.4.2</td>\n<td>docker.elastic.co/elasticsearch/elasticsearch:7.4.2</td>\n</tr>\n<tr>\n<td>192.168.56.10:5000/fluentd-es-root:v1.6.2-1.0</td>\n<td>gcr.io/google_containers/fluentd-elasticsearch:v2.4.0</td>\n</tr>\n<tr>\n<td>192.168.56.10:5000/kibana/kibana:7.4.2</td>\n<td>docker.elastic.co/kibana/kibana:7.4.2</td>\n</tr>\n<tr>\n<td>192.168.56.10:5000/kubernetesui/dashboard:v2.0.0-beta5</td>\n<td>kubernetesui/dashboard:v2.0.0-beta5</td>\n</tr>\n<tr>\n<td>192.168.56.10:5000/kubernetesui/metrics-scraper:v1.0.1</td>\n<td>kubernetesui/metrics-scraper:v1.0.1</td>\n</tr>\n<tr>\n<td>192.168.56.10:5000/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0</td>\n<td>quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0</td>\n</tr>\n</tbody></table>\n<h2 id=\"推送本地镜像到镜像仓库中\"><a href=\"#推送本地镜像到镜像仓库中\" class=\"headerlink\" title=\"推送本地镜像到镜像仓库中\"></a>推送本地镜像到镜像仓库中</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker tag nginx:alpine localhost:5000/nginx:alpine</span><br><span class=\"line\">$ docker push localhost:5000/nginx:alpine</span><br><span class=\"line\"><span class=\"comment\">## 我的镜像仓库给外部访问，不能通过localhost，尝试使用内网地址172.21.16.3:5000/nginx:alpine</span></span><br><span class=\"line\">$ docker tag nginx:alpine 192.168.56.10:5000/nginx:alpine</span><br><span class=\"line\">$ docker push 192.168.56.10:5000/nginx:alpine</span><br><span class=\"line\">The push refers to repository [172.21.16.3:5000/nginx]</span><br><span class=\"line\">Get https://192.168.56.10:5000/v2/: http: server gave HTTP response to HTTPS client</span><br><span class=\"line\"><span class=\"comment\">## docker默认不允许向http的仓库地址推送，如何做成https的，参考：https://docs.docker.com/registry/deploying/#run-an-externally-accessible-registry</span></span><br><span class=\"line\"><span class=\"comment\">## 我们没有可信证书机构颁发的证书和域名，自签名证书需要在每个节点中拷贝证书文件，比较麻烦，因此我们通过配置daemon的方式，来跳过证书的验证：</span></span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://8xpk5wnt.mirror.aliyuncs.com&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;insecure-registries&quot;</span>: [</span><br><span class=\"line\">     <span class=\"string\">&quot;192.168.56.10:5000&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ systemctl restart docker</span><br><span class=\"line\">$ docker push 192.168.56.10:5000/nginx:alpine</span><br><span class=\"line\">$ docker images\t<span class=\"comment\"># IMAGE ID相同，等于起别名或者加快捷方式</span></span><br><span class=\"line\">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">192.168.56.10:5000/nginx   alpine              377c0837328f        4 weeks ago         </span><br><span class=\"line\">nginx                    alpine              377c0837328f        4 weeks ago         </span><br><span class=\"line\">localhost:5000/nginx     alpine              377c0837328f        4 weeks ago         </span><br><span class=\"line\">registry                 2                   708bc6af7e5e        2 months ago       </span><br></pre></td></tr></table></figure>\n\n","categories":["OPS"],"tags":["OPS","Docker","Kubernetes"]},{"title":"k8s企业级DevOps实践-Django应用容器化实践","url":"/forward/3ea5fff1.html","content":"<h2 id=\"django项目介绍\"><a href=\"#django项目介绍\" class=\"headerlink\" title=\"django项目介绍\"></a>django项目介绍</h2><ul>\n<li>项目地址：<a href=\"https://gitee.com/pinchengx/pythondemo.git\">https://gitee.com/pinchengx/pythondemo.git</a></li>\n<li>python3 + uwsgi + nginx + mysql</li>\n<li>内部服务端口8002</li>\n</ul>\n<p><img src=\"/images/pasted-9.png\" alt=\"项目内数据库配置\"></p>\n<h3 id=\"构建命令\"><a href=\"#构建命令\" class=\"headerlink\" title=\"构建命令\"></a>构建命令</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> docker build . <span class=\"literal\">-t</span> ImageName:ImageTag <span class=\"operator\">-f</span> Dockerfile</span><br></pre></td></tr></table></figure>\n\n<p>如何理解构建镜像的过程？</p>\n<p>Dockerfile是一堆指令，在docker build的时候，按照该指令进行操作，最终生成我们期望的镜像</p>\n<ul>\n<li>FROM 指定基础镜像，必须为第一个命令</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">\tFROM &lt;image&gt;</span><br><span class=\"line\">\tFROM &lt;image&gt;:&lt;tag&gt;</span><br><span class=\"line\">示例：</span><br><span class=\"line\">\tFROM mysql:5.7</span><br><span class=\"line\">注意：</span><br><span class=\"line\">\ttag是可选的，如果不使用tag时，会使用latest版本的基础镜像</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>MAINTAINER 镜像维护者的信息</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">\tMAINTAINER &lt;name&gt;</span><br><span class=\"line\">示例：</span><br><span class=\"line\">\t  MAINTAINER Yongxin Li</span><br><span class=\"line\">    MAINTAINER inspur_lyx@hotmail.com</span><br><span class=\"line\">    MAINTAINER Yongxin Li &lt;inspur_lyx@hotmail.com&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>COPY|ADD 添加本地文件到镜像中</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">\tCOPY &lt;src&gt;... &lt;dest&gt;</span><br><span class=\"line\">示例：</span><br><span class=\"line\">    ADD hom* /mydir/          # 添加所有以&quot;hom&quot;开头的文件</span><br><span class=\"line\">    ADD test relativeDir/     # 添加 &quot;test&quot; 到 `WORKDIR`/relativeDir/</span><br><span class=\"line\">    ADD test /absoluteDir/    # 添加 &quot;test&quot; 到 /absoluteDir/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>WORKDIR 工作目录</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">\tWORKDIR /path/to/workdir</span><br><span class=\"line\">示例：</span><br><span class=\"line\">    WORKDIR /a  (这时工作目录为/a)</span><br><span class=\"line\">注意：</span><br><span class=\"line\">    通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RUN 构建镜像过程中执行命令</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">\tRUN &lt;command&gt;</span><br><span class=\"line\">示例：</span><br><span class=\"line\">    RUN yum install nginx</span><br><span class=\"line\">    RUN pip install django</span><br><span class=\"line\">    RUN mkdir test &amp;&amp; rm -rf /var/lib/unusedfiles</span><br><span class=\"line\">注意：</span><br><span class=\"line\">    RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。</span><br><span class=\"line\">    如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>CMD 构建容器后调用，也就是在容器启动时才进行调用</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">    CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (执行可执行文件，优先)</span><br><span class=\"line\">    CMD [&quot;param1&quot;,&quot;param2&quot;] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span><br><span class=\"line\">    CMD command param1 param2 (执行shell内部命令)</span><br><span class=\"line\">示例：</span><br><span class=\"line\">    CMD [&quot;/usr/bin/wc&quot;,&quot;--help&quot;]</span><br><span class=\"line\">    CMD ping www.baidu.com</span><br><span class=\"line\">注意：</span><br><span class=\"line\">    CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ENTRYPOINT 设置容器初始化命令，使其可执行化</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">    ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (可执行文件, 优先)</span><br><span class=\"line\">    ENTRYPOINT command param1 param2 (shell内部命令)</span><br><span class=\"line\">示例：</span><br><span class=\"line\">    ENTRYPOINT [&quot;/usr/bin/wc&quot;,&quot;--help&quot;]</span><br><span class=\"line\">注意：</span><br><span class=\"line\">\tENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ENV 设置容器内环境变量</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">    ENV &lt;key&gt; &lt;value&gt;</span><br><span class=\"line\">    ENV &lt;key&gt;=&lt;value&gt;</span><br><span class=\"line\">示例：</span><br><span class=\"line\">    ENV myName John</span><br><span class=\"line\">    ENV myCat=fluffy</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>EXPOSE 设置容器对外暴露的端口</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">    EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br><span class=\"line\">示例：</span><br><span class=\"line\">    EXPOSE 80 443</span><br><span class=\"line\">    EXPOSE 8080</span><br><span class=\"line\">    EXPOSE 11211/tcp 11211/udp</span><br><span class=\"line\">注意：</span><br><span class=\"line\">    EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/pasted-7.png\" alt=\"Dockerfile介绍\"></p>\n<p>Dockerfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This my first django Dockerfile</span></span><br><span class=\"line\"><span class=\"comment\"># Version 1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Base images 基础镜像</span></span><br><span class=\"line\">FROM centos:centos7.5.1804</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#MAINTAINER 维护者信息</span></span><br><span class=\"line\">LABEL maintainer=<span class=\"string\">&quot;admin@cakepanit.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ENV 设置环境变量</span></span><br><span class=\"line\">ENV LANG en_US.UTF-8</span><br><span class=\"line\">ENV LC_ALL en_US.UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#RUN 执行以下命令</span></span><br><span class=\"line\">RUN curl -so /etc/yum.repos.d/Centos-7.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">RUN yum install -y  python36 python3-devel gcc pcre-devel zlib-devel make net-tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#工作目录</span></span><br><span class=\"line\">WORKDIR /opt/myblog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#拷贝本地文件至Docker工作目录</span></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装nginx</span></span><br><span class=\"line\">RUN tar -zxf nginx-1.16.1.tar.gz -C /opt  &amp;&amp; <span class=\"built_in\">cd</span> /opt/nginx-1.16.1 &amp;&amp; ./configure --prefix=/usr/local/nginx \\</span><br><span class=\"line\">&amp;&amp; make &amp;&amp; make install &amp;&amp; <span class=\"built_in\">ln</span> -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">RUN <span class=\"built_in\">cp</span> myblog.conf /usr/local/nginx/conf/myblog.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装依赖的插件</span></span><br><span class=\"line\">RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\">RUN <span class=\"built_in\">chmod</span> +x run.sh &amp;&amp; <span class=\"built_in\">rm</span> -rf ~/.cache/pip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#EXPOSE 映射端口</span></span><br><span class=\"line\">EXPOSE 8002</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#容器启动时执行命令</span></span><br><span class=\"line\">CMD [<span class=\"string\">&quot;./run.sh&quot;</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"执行构建\"><a href=\"#执行构建\" class=\"headerlink\" title=\"执行构建\"></a>执行构建</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># git clone https://gitee.com/pinchengx/pythondemo.git</span></span><br><span class=\"line\">正克隆到 <span class=\"string\">&#x27;pythondemo&#x27;</span>...</span><br><span class=\"line\">remote: Enumerating objects: 174, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (174/174), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (124/124), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Total 174 (delta 43), reused 171 (delta 43), pack-reused 0</span><br><span class=\"line\">接收对象中: 100% (174/174), 549.02 KiB | 0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">处理 delta 中: 100% (43/43), <span class=\"keyword\">done</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ls</span></span><br><span class=\"line\">anaconda-ks.cfg  pythondemo</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd pythondemo/</span></span><br><span class=\"line\">[root@localhost pythondemo]<span class=\"comment\"># vi Dockerfile</span></span><br><span class=\"line\">[root@localhost pythondemo]<span class=\"comment\"># docker build . -t myblog:v1 -f Dockerfile</span></span><br><span class=\"line\">Sending build context to Docker daemon   3.13MB</span><br><span class=\"line\">Step 1/14 : FROM centos:centos7.5.1804</span><br><span class=\"line\"> ---&gt; cf49811e3cdb</span><br><span class=\"line\">Step 2/14 : LABEL maintainer=<span class=\"string\">&quot;admin@cakepanit.com&quot;</span></span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 57284e4faa85</span><br><span class=\"line\">Removing intermediate container 57284e4faa85</span><br><span class=\"line\"> ---&gt; 5a5064f11010</span><br><span class=\"line\">Step 3/14 : ENV LANG en_US.UTF-8</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 5580a38c898a</span><br><span class=\"line\"> </span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">Step 12/14 : RUN <span class=\"built_in\">chmod</span> +x run.sh &amp;&amp; <span class=\"built_in\">rm</span> -rf ~/.cache/pip</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> d90abf9fd8bc</span><br><span class=\"line\">Removing intermediate container d90abf9fd8bc</span><br><span class=\"line\"> ---&gt; 07799364dfdc</span><br><span class=\"line\">Step 13/14 : EXPOSE 8002</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 5d4a87c278d6</span><br><span class=\"line\">Removing intermediate container 5d4a87c278d6</span><br><span class=\"line\"> ---&gt; c696f083eda2</span><br><span class=\"line\">Step 14/14 : CMD [<span class=\"string\">&quot;./run.sh&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> c9be094b20ef</span><br><span class=\"line\">Removing intermediate container c9be094b20ef</span><br><span class=\"line\"> ---&gt; 0a05e540407f</span><br><span class=\"line\">Successfully built 0a05e540407f</span><br><span class=\"line\">Successfully tagged myblog:v1 //构建成功</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定制化基础镜像\"><a href=\"#定制化基础镜像\" class=\"headerlink\" title=\"定制化基础镜像\"></a>定制化基础镜像</h2><p><strong>原因：</strong>基础镜像中存在Python环境以及Nginx。业务镜像基于此基础镜像进行构建可以大大节省业务镜像的构建成本和时间</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pythondemo/Dockerfile-base</span></span><br><span class=\"line\"><span class=\"comment\"># Base images 基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos:centos7.<span class=\"number\">5.1804</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#MAINTAINER 维护者信息</span></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span><span class=\"language-bash\"> maintainer=<span class=\"string\">&quot;admin@cakepanit.com&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ENV 设置环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LANG en_US.UTF-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LC_ALL en_US.UTF-<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#RUN 执行以下命令</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> curl -so /etc/yum.repos.d/Centos-7.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum install -y  python36 python3-devel gcc pcre-devel zlib-devel make net-tools</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> nginx-1.16.1.tar.gz  /opt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装nginx</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> tar -zxf /opt/nginx-1.16.1.tar.gz -C /opt  &amp;&amp; <span class=\"built_in\">cd</span> /opt/nginx-1.16.1 &amp;&amp; ./configure --prefix=/usr/local/nginx &amp;&amp; make &amp;&amp; make install &amp;&amp; <span class=\"built_in\">ln</span> -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"构建基础镜像\"><a href=\"#构建基础镜像\" class=\"headerlink\" title=\"构建基础镜像\"></a>构建基础镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker build . -t centos-python3-nginx:v1 -f Dockerfile-base</span><br><span class=\"line\">$ docker tag centos-python3-nginx:v1 192.168.56.10:5000/base/centos-python3-nginx:v1</span><br><span class=\"line\">$ docker push 192.168.56.10:5000/base/centos-python3-nginx:v1The push refers to repository [192.168.56.10:5000/base/centos-python3-nginx]</span><br><span class=\"line\">42f8946f2974: Pushed </span><br><span class=\"line\">a74fe1f5e36f: Pushed </span><br><span class=\"line\">1be36d417e09: Pushed </span><br><span class=\"line\">47ad3ab7c395: Pushed </span><br><span class=\"line\">4826cdadf1ef: Pushed </span><br><span class=\"line\">v1: digest: sha256:1ad23deee53bb54c7b7d8b08bb133c37d933f14e881fdd7ab4660ac0d901bcb1 size: 1370</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简化业务Dockerfile\"><a href=\"#简化业务Dockerfile\" class=\"headerlink\" title=\"简化业务Dockerfile\"></a>简化业务Dockerfile</h3><p><strong>即：</strong>利用构建好的基础镜像省去80%步骤，专注于代码依赖等环境。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pythondemo/Dockerfile-optimized</span></span><br><span class=\"line\"><span class=\"comment\"># This my first django Dockerfile</span></span><br><span class=\"line\"><span class=\"comment\"># Version 1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Base images 基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos-python3-nginx:v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#MAINTAINER 维护者信息</span></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span><span class=\"language-bash\"> maintainer=<span class=\"string\">&quot;admin@cakepanit.com&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#工作目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /opt/myblog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#拷贝文件至工作目录</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">cp</span> myblog.conf /usr/local/nginx/conf/myblog.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装依赖的插件</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +x run.sh &amp;&amp; <span class=\"built_in\">rm</span> -rf ~/.cache/pip</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#EXPOSE 映射端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8002</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#容器启动时执行命令</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;./run.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker build . -t myblog:v2 -f Dockerfile-optimized</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行mysql\"><a href=\"#运行mysql\" class=\"headerlink\" title=\"运行mysql\"></a>运行mysql</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 3306:3306 --name mysql  -v /opt/mysql/mysql-data/:/var/lib/mysql -e MYSQL_DATABASE=myblog -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\">//生产环境下，不建议将数据库安装在容器中。此处为演示</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看数据库</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti mysql bash</span><br><span class=\"line\"><span class=\"comment\">#/ mysql -uroot -p123456</span></span><br><span class=\"line\"><span class=\"comment\">#/ show databases;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## navicator连接</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-8.png\" alt=\"测试\"></p>\n<h2 id=\"启动Django应用\"><a href=\"#启动Django应用\" class=\"headerlink\" title=\"启动Django应用\"></a>启动Django应用</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 启动容器</span></span><br><span class=\"line\">$ docker run -d -p 8002:8002 --name myblog -e MYSQL_HOST=192.168.56.10 -e MYSQL_USER=root -e MYSQL_PASSWD=123456 myblog:v2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-10.png\" alt=\"启动项目\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## migrate mysql初始化项目数据</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti myblog bash</span><br><span class=\"line\"><span class=\"comment\">#/ python3 manage.py makemigrations</span></span><br><span class=\"line\"><span class=\"comment\">#/ python3 manage.py migrate</span></span><br><span class=\"line\"><span class=\"comment\">#/ python3 manage.py createsuperuser</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建超级用户</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti myblog python3 manage.py createsuperuser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 收集静态文件</span></span><br><span class=\"line\"><span class=\"comment\">## $ docker exec -ti myblog python3 manage.py collectstatic</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-11.png\" alt=\"初始化\"></p>\n<p><img src=\"/images/pasted-12.png\" alt=\"登陆\"></p>\n<h2 id=\"构建mysql镜像，替换默认编码\"><a href=\"#构建mysql镜像，替换默认编码\" class=\"headerlink\" title=\"构建mysql镜像，替换默认编码\"></a>构建mysql镜像，替换默认编码</h2><p>解决项目无法保存中文问题<br><code>dockerfiles/mysql/my.cnf</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">cat</span> my.cnf</span><br><span class=\"line\">[<span class=\"type\">mysqld</span>]</span><br><span class=\"line\">user=root</span><br><span class=\"line\">character<span class=\"literal\">-set-server</span>=utf8</span><br><span class=\"line\">lower_case_table_names=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"type\">client</span>]</span><br><span class=\"line\">default<span class=\"literal\">-character-set</span>=utf8</span><br><span class=\"line\">[<span class=\"type\">mysql</span>]</span><br><span class=\"line\">default<span class=\"literal\">-character-set</span>=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">!includedir /etc/mysql/conf.d/</span><br><span class=\"line\">!includedir /etc/mysql/mysql.conf.d/</span><br></pre></td></tr></table></figure>\n\n<p><code>dockerfiles/mysql/Dockerfile</code></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> mysql:<span class=\"number\">5.7</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> my.cnf /etc/mysql/my.cnf</span></span><br><span class=\"line\"><span class=\"comment\">## CMD或者ENTRYPOINT默认继承</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> docker build . <span class=\"literal\">-t</span> mysql:<span class=\"number\">5.7</span><span class=\"literal\">-utf8</span></span><br><span class=\"line\"><span class=\"variable\">$</span> docker tag mysql:<span class=\"number\">5.7</span><span class=\"literal\">-utf8</span> <span class=\"number\">172.21</span>.<span class=\"number\">16.3</span>:<span class=\"number\">5000</span>/mysql:<span class=\"number\">5.7</span><span class=\"literal\">-utf8</span></span><br><span class=\"line\"><span class=\"variable\">$</span> docker push <span class=\"number\">172.21</span>.<span class=\"number\">16.3</span>:<span class=\"number\">5000</span>/mysql:<span class=\"number\">5.7</span><span class=\"literal\">-utf8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 删除旧的mysql容器，使用新镜像启动,不用再次初始化</span></span><br><span class=\"line\"><span class=\"variable\">$</span> docker <span class=\"built_in\">rm</span> <span class=\"operator\">-f</span> mysql</span><br><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">rm</span> <span class=\"literal\">-rf</span> /opt/mysql/mysql<span class=\"literal\">-data</span>/*</span><br><span class=\"line\"><span class=\"variable\">$</span> docker run <span class=\"literal\">-d</span> <span class=\"literal\">-p</span> <span class=\"number\">3306</span>:<span class=\"number\">3306</span> <span class=\"literal\">--name</span> mysql <span class=\"literal\">-v</span> /opt/mysql/mysql<span class=\"literal\">-data</span>/:/var/lib/mysql <span class=\"literal\">-e</span> MYSQL_DATABASE=myblog <span class=\"literal\">-e</span> MYSQL_ROOT_PASSWORD=<span class=\"number\">123456</span> <span class=\"number\">172.21</span>.<span class=\"number\">32.6</span>:<span class=\"number\">5000</span>/mysql:<span class=\"number\">5.7</span><span class=\"literal\">-utf8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 重新migrate</span></span><br><span class=\"line\"><span class=\"variable\">$</span> docker exec <span class=\"literal\">-ti</span> myblog bash</span><br><span class=\"line\"><span class=\"comment\">#/ python3 manage.py makemigrations</span></span><br><span class=\"line\"><span class=\"comment\">#/ python3 manage.py migrate</span></span><br><span class=\"line\"><span class=\"comment\">#/ python3 manage.py createsuperuser</span></span><br></pre></td></tr></table></figure>\n<p>至此，Django项目容器化已完成。</p>\n","categories":["OPS"],"tags":["OPS","Docker","Kubernetes"]},{"title":"k8s企业级DevOps实践-Kubernetes中DaemonSet启动日志收集","url":"/forward/ad8d3f77.html","content":"<h3 id=\"下载filebeat\"><a href=\"#下载filebeat\" class=\"headerlink\" title=\"下载filebeat\"></a>下载filebeat</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.0-linux-x86_64.tar.gz</span><br><span class=\"line\">tar -xf filebeat-7.4.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"制作filebeat镜像\"><a href=\"#制作filebeat镜像\" class=\"headerlink\" title=\"制作filebeat镜像\"></a>制作filebeat镜像</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat filebeat-<span class=\"number\">7.4</span>.<span class=\"number\">0</span>-linux-x86_64/dockerfile</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> registry.cn-shanghai.aliyuncs.com/wikifx/base:alpine-glibc-Shanghai</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +x  filebeat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/app/filebeat&quot;</span>, <span class=\"string\">&quot;-e&quot;</span>, <span class=\"string\">&quot;-path.home&quot;</span>, <span class=\"string\">&quot;./&quot;</span>, <span class=\"string\">&quot;-path.data&quot;</span>, <span class=\"string\">&quot;./data&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编排文件编写\"><a href=\"#编排文件编写\" class=\"headerlink\" title=\"编排文件编写\"></a>编排文件编写</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ops</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ops</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">filebeat</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">filebeat.yml:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">    filebeat.inputs:</span></span><br><span class=\"line\"><span class=\"string\">    - type: log</span></span><br><span class=\"line\"><span class=\"string\">      enabled: true</span></span><br><span class=\"line\"><span class=\"string\">      paths:</span></span><br><span class=\"line\"><span class=\"string\">        - /var/applogs/*/*.log</span></span><br><span class=\"line\"><span class=\"string\">      tags: [&quot;k8s_applogs&quot;, &quot;SH&quot;]</span></span><br><span class=\"line\"><span class=\"string\">      multiline.pattern: &#x27;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">      multiline.negate: true</span></span><br><span class=\"line\"><span class=\"string\">      multiline.match: after</span></span><br><span class=\"line\"><span class=\"string\">      tail_files: true</span></span><br><span class=\"line\"><span class=\"string\"></span>    </span><br><span class=\"line\">    <span class=\"attr\">filebeat.config.modules:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class=\"line\">      <span class=\"attr\">reload.enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attr\">setup.template.settings:</span></span><br><span class=\"line\">      <span class=\"attr\">index.number_of_shards:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">output.logstash:</span></span><br><span class=\"line\">      <span class=\"attr\">hosts:</span> [<span class=\"string\">&quot;172.19.111.144:8080&quot;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attr\">processors:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_host_metadata:</span></span><br><span class=\"line\">            <span class=\"attr\">netinfo.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">cache.ttl:</span> <span class=\"string\">5m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">logscollection</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">logscollection</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ops</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">logscollection</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">logscollection</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">args:</span> [</span><br><span class=\"line\">      \t<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;/etc/filebeat.yml&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/base:logscollection-public</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">logscollection-public</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">10m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">            <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/filebeat.yml</span></span><br><span class=\"line\">            <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">subPath:</span> <span class=\"string\">filebeat.yml</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">applogs</span></span><br><span class=\"line\">            <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/applogs</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">defaultMode:</span> <span class=\"number\">0444</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/var/applogs</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">DirectoryOrCreate</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">applogs</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装执行\"><a href=\"#安装执行\" class=\"headerlink\" title=\"安装执行\"></a>安装执行</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node002 DaemonSet]# kubectl apply -f logscollection</span><br><span class=\"line\">namespace/ops created</span><br><span class=\"line\">configmap/filebeat-config created</span><br><span class=\"line\">daemonset.apps/logscollection created</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-94.png\" alt=\"install\"></p>\n<p><img src=\"/images/pasted-95.png\" alt=\"result\"></p>\n","categories":["OPS"],"tags":["OPS","ELK","Kubernetes"]},{"title":"k8s企业级DevOps实践-最小linux系统alpine制作Docker基础镜像","url":"/forward/8cd3cd17.html","content":"<p><a href=\"https://www.alpinelinux.org/\">Alpine</a>简称高山的 是一款非常适合做k8s基础镜像的linux</p>\n<ol>\n<li>小巧：基于Musl libc和busybox，和busybox一样小巧，最小的Docker镜像只有5MB；</li>\n<li>安全：面向安全的轻量发行版；</li>\n<li>简单：提供APK包管理工具，软件的搜索、安装、删除、升级都非常方便。</li>\n<li>适合容器使用：由于小巧、功能完备，非常适合作为容器的基础镜像。</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nodejs环境，</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine+glibc环境</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\">  sed -i <span class=\"string\">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">apk --no-cache add ca-certificates wget &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">wget -q -O /etc/apk/keys/sgerrand.rsa.pub http://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">wget http://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">apk add --no-cache npm &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">apk add --no-cache nodejs &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">apk add --no-cache glibc-2.28-r0.apk &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">apk add --no-cache curl &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"built_in\">rm</span> -rf * &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">apk add --no-cache -U tzdata &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"built_in\">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br></pre></td></tr></table></figure>\n\n<p>构建推送至镜像仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build . -t registry.cn-shanghai.aliyuncs.com/******/cake:alpine-glibc-nodejs</span><br></pre></td></tr></table></figure>\n\n<p><strong>2024更新</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest AS builder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\">  sed -i <span class=\"string\">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">apk --no-cache add ca-certificates wget &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">wget http://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r1/glibc-2.35-r1.apk </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /app/glibc-2.35-r1.apk .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\">  sed -i <span class=\"string\">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">wget -q -O /etc/apk/keys/sgerrand.rsa.pub http://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">apk add --no-cache glibc-2.35-r1.apk &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"built_in\">rm</span> -rf * &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">apk add --no-cache -U tzdata &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"comment\"># 修改时区</span></span><br><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量，确保应用使用 glibc</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LD_LIBRARY_PATH /usr/glibc-compat/lib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建docker build ./ -t alpine-glibc-shanghai:v1.0</span></span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@nvm-jscs02-sys-devops-03:/fei<span class=\"comment\"># docker run -it alpine-glibc-shanghai:v1.0 /bin/sh</span></span><br><span class=\"line\">/app <span class=\"comment\"># cat /etc/alpine-release </span></span><br><span class=\"line\">3.20.3</span><br><span class=\"line\">/app <span class=\"comment\"># env</span></span><br><span class=\"line\">HOSTNAME=9cc999ef3a61</span><br><span class=\"line\">LD_LIBRARY_PATH=/usr/glibc-compat/lib</span><br><span class=\"line\">SHLVL=1</span><br><span class=\"line\">HOME=/root</span><br><span class=\"line\">TERM=xterm</span><br><span class=\"line\">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class=\"line\">PWD=/app</span><br></pre></td></tr></table></figure>\n<p>接下去就可以用这个镜像作为golang程序的基础镜像了</p>\n<p><strong>例如：一个kratos程序容器化</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@nvm-jscs02-sys-devops-03:~/ares-build<span class=\"comment\"># tree </span></span><br><span class=\"line\">.</span><br><span class=\"line\">├── api</span><br><span class=\"line\">│   └── interface</span><br><span class=\"line\">│       └── v1</span><br><span class=\"line\">│           ├── sync.bm.go</span><br><span class=\"line\">│           ├── sync.pb.go</span><br><span class=\"line\">│           ├── sync.proto</span><br><span class=\"line\">│           └── sync.swagger.json</span><br><span class=\"line\">├── app</span><br><span class=\"line\">│   └── interface</span><br><span class=\"line\">│       └── v1</span><br><span class=\"line\">│           ├── cmd</span><br><span class=\"line\">│           │   ├── main.go</span><br><span class=\"line\">│           │   ├── wire_gen.go</span><br><span class=\"line\">│           │   └── wire.go</span><br><span class=\"line\">│           ├── configs</span><br><span class=\"line\">│           │   ├── 忽略</span><br><span class=\"line\">│           └── internal</span><br><span class=\"line\">│               ├── biz</span><br><span class=\"line\">│               │   ├── 忽略</span><br><span class=\"line\">│               ├── data</span><br><span class=\"line\">│               │   ├── 忽略</span><br><span class=\"line\">│               ├── server</span><br><span class=\"line\">│               │   ├── grpc.go</span><br><span class=\"line\">│               │   └── http.go</span><br><span class=\"line\">│               └── service</span><br><span class=\"line\">│                   ├── 忽略</span><br><span class=\"line\"></span><br><span class=\"line\">├── cloudrepo</span><br><span class=\"line\">...</span><br><span class=\"line\">├── dockerfile</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">├── go.sum</span><br><span class=\"line\">└── utils</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#dockerfile内容，多阶段构建</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.22</span> AS builder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . ./</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> go <span class=\"built_in\">env</span> -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> go mod tidy</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> go mod download</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app/app/interface/v1/cmd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> CGO_ENABLED=0 GOOS=linux go build -o ares .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里用到了上一步构建的带glibc的alpine基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine-glibc-shanghai:v1.<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /app/app/interface/v1/cmd/ares .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +x ares</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> configs</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /app/app/interface/v1/configs/application.toml ./configs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;./ares&quot;</span>]</span></span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["OPS","Docker","Kubernetes"]},{"title":"企业级备份方案x3","url":"/forward/8e9bbd7d.html","content":"<h2 id=\"全网-Rsync-备份解决方案\"><a href=\"#全网-Rsync-备份解决方案\" class=\"headerlink\" title=\"全网 Rsync 备份解决方案\"></a>全网 Rsync 备份解决方案</h2><h3 id=\"项目需求\"><a href=\"#项目需求\" class=\"headerlink\" title=\"项目需求\"></a>项目需求</h3><p>&emsp;&emsp;<strong>对本项目中 web01、web02 服务器重要数据定时备份推送至后端 backpack 服务器 上。</strong></p>\n<span id=\"more\"></span>\n<h3 id=\"要求如下\"><a href=\"#要求如下\" class=\"headerlink\" title=\"要求如下\"></a>要求如下</h3><p>&emsp;&emsp;<strong>每天晚上 00 点整在 web 服务器上打包备份系统配置文件、网站程序目录及访问日 志并通过 rsync 命令推送到服务器 backup 上备份保留(备份思路可以是先在本地按日 期打包，然后再推到备份服务器 B 上)&emsp;&emsp;</strong></p>\n<p><strong>服务器主机名分别为 web01、web02、backup 、nfs01，主机信息见下表:</strong></p>\n<table>\n<thead>\n<tr>\n<th>服务器说明</th>\n<th align=\"center\">外网 IP(NAT) SSH 用</th>\n<th align=\"right\">内网 IP(NAT)交换数据用</th>\n<th align=\"right\">主机名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Nginx web 服务器</td>\n<td align=\"center\">10.0.0.7/24</td>\n<td align=\"right\">172.16.1.7/24</td>\n<td align=\"right\">web01</td>\n</tr>\n<tr>\n<td>Nginx web 服务器</td>\n<td align=\"center\">10.0.0.7/24</td>\n<td align=\"right\">172.16.1.8/24</td>\n<td align=\"right\">web02</td>\n</tr>\n<tr>\n<td>NFS 存储服务器</td>\n<td align=\"center\">10.0.0.31/24</td>\n<td align=\"right\">172.16.1.31/24</td>\n<td align=\"right\">nfs01</td>\n</tr>\n<tr>\n<td>Rsync 备份服务器</td>\n<td align=\"center\">10.0.0.41/24</td>\n<td align=\"right\">172.16.1.41/24</td>\n<td align=\"right\">backup</td>\n</tr>\n</tbody></table>\n<h3 id=\"备份要求\"><a href=\"#备份要求\" class=\"headerlink\" title=\"备份要求\"></a>备份要求</h3><p>&emsp;&emsp;<strong>每天晚上 00 点整在 Web 服务器上打包备份系统配置文件、网站程序目录及访问 日志并通过 rsync 命令推送备份服务器 backup 上备份保留</strong></p>\n<h3 id=\"具体备份需求\"><a href=\"#具体备份需求\" class=\"headerlink\" title=\"具体备份需求\"></a>具体备份需求</h3><ul>\n<li><strong>所有服务器的备份目录必须都为 <code>/backup</code></strong></li>\n<li><strong>要备份的系统配置文件包括但不限于:</strong></li>\n</ul>\n<ul>\n<li>a) 定时任务服务的配置文件(<code>/var/spool/cron/root</code>)(适合web和nfs服务器)。</li>\n<li>b) 开机自启动的配置文件(<code>/etc/rc.local</code>)(适合 web 和 nfs 服务器)。</li>\n<li>c) 日常脚本的目录(<code>/server/scripts</code>)。<ul>\n<li>Web 服务器站点目录假定为<code>/var/html/www</code>，如果没有可以先模拟创建。</li>\n<li>Web 服务器访问日志路径假定为<code>/app/logs</code>，如果没有可以先模拟创建。</li>\n<li>Web 服务器本地保留打包后的 7 天备份数据即可(本地留存不能多于 7 天，因为太多硬盘会满)。</li>\n<li>备份服务器 backup 上,保留最近 7 天的备份数据，同时保留 6 个月内每周一的所有数据副本。</li>\n<li>备份服务器上,要按照备份数据服务器的内网 IP 为目录保存备份，备份的文件按照时间名字保存。 </li>\n<li>需要确保备份的数据尽量完整正确，在备份服务器上对备份的数据是否完整进行检查。</li>\n<li>每天早晨 8:00 把备份成功或失败结果信息发给系统管理员邮箱中。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"项目逻辑架构图\"><a href=\"#项目逻辑架构图\" class=\"headerlink\" title=\"项目逻辑架构图\"></a>项目逻辑架构图</h3><p><img src=\"/images/img-1.png\" alt=\"逻辑架构\"></p>\n<h3 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h3><ul>\n<li><strong>1)搭建 backup 服务器</strong></li>\n<li>i.部署 rsync 服务</li>\n<li><strong>2)搭建 web01 服务器</strong></li>\n<li>i.验证 rsync 服务能否推送成功</li>\n<li>ii. 开发脚本实现打包、备份、推送、校验、删除 </li>\n<li><strong>3)配置定时任务每天 8 点定时执行</strong></li>\n<li><strong>4)backup 服务器</strong></li>\n<li>i.开发脚本实现校验、删除、报警</li>\n<li>ii. 配置定时任务每天 00 点定时推送</li>\n<li><strong>5)同理搭建存储 web02 服务器</strong></li>\n</ul>\n<h3 id=\"项目实施\"><a href=\"#项目实施\" class=\"headerlink\" title=\"项目实施\"></a>项目实施</h3><h4 id=\"搭建-backup-服务器\"><a href=\"#搭建-backup-服务器\" class=\"headerlink\" title=\"搭建 backup 服务器\"></a>搭建 backup 服务器</h4><p><strong>(虚拟机模拟)</strong></p>\n<h4 id=\"安装服务软件\"><a href=\"#安装服务软件\" class=\"headerlink\" title=\"安装服务软件\"></a>安装服务软件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@backup ~]<span class=\"comment\"># rsync --version</span></span><br><span class=\"line\">rsync version 3.1.2 protocol version 31</span><br></pre></td></tr></table></figure>\n<h4 id=\"备份并配置配置文件-etc-rsyncd-conf\"><a href=\"#备份并配置配置文件-etc-rsyncd-conf\" class=\"headerlink\" title=\"备份并配置配置文件 /etc/rsyncd.conf\"></a>备份并配置配置文件 /etc/rsyncd.conf</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /etc/rsyncd.conf&#123;,.ori&#125; </span><br><span class=\"line\"><span class=\"built_in\">cat</span>&gt;/etc/rsyncd.conf&lt;&lt;<span class=\"string\">EOF </span></span><br><span class=\"line\"><span class=\"string\">#rsync_config_start </span></span><br><span class=\"line\"><span class=\"string\">#created by bincheng</span></span><br><span class=\"line\"><span class=\"string\">#site: https://cakepanit.com </span></span><br><span class=\"line\"><span class=\"string\">uid = rsync</span></span><br><span class=\"line\"><span class=\"string\">gid = rsync</span></span><br><span class=\"line\"><span class=\"string\">use chroot = no</span></span><br><span class=\"line\"><span class=\"string\">fake super = yes</span></span><br><span class=\"line\"><span class=\"string\">max connections = 200</span></span><br><span class=\"line\"><span class=\"string\">timeout = 600</span></span><br><span class=\"line\"><span class=\"string\">pid file = /var/run/rsyncd.pid</span></span><br><span class=\"line\"><span class=\"string\">lock file = /var/run/rsync.lock</span></span><br><span class=\"line\"><span class=\"string\">log file = /var/log/rsyncd.log</span></span><br><span class=\"line\"><span class=\"string\">ignore errors</span></span><br><span class=\"line\"><span class=\"string\">read only = false</span></span><br><span class=\"line\"><span class=\"string\">list = false</span></span><br><span class=\"line\"><span class=\"string\">hosts allow = 172.16.1.0/24</span></span><br><span class=\"line\"><span class=\"string\">hosts deny = 0.0.0.0/32</span></span><br><span class=\"line\"><span class=\"string\">auth users = rsync_backup</span></span><br><span class=\"line\"><span class=\"string\">secrets file = /etc/rsync.password </span></span><br><span class=\"line\"><span class=\"string\">[backup]</span></span><br><span class=\"line\"><span class=\"string\">comment = welcome to oldboyedu backup! </span></span><br><span class=\"line\"><span class=\"string\">path = /backup/</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建用户和备份目录\"><a href=\"#创建用户和备份目录\" class=\"headerlink\" title=\"创建用户和备份目录\"></a>创建用户和备份目录</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@backup ~]<span class=\"comment\"># useradd rsync</span></span><br><span class=\"line\">[root@backup ~]<span class=\"comment\"># id rsync</span></span><br><span class=\"line\">uid=1001(rsync) gid=1001(rsync) <span class=\"built_in\">groups</span>=1001(rsync) </span><br><span class=\"line\">[root@backup ~]<span class=\"comment\"># mkdir –p /backup</span></span><br><span class=\"line\">[root@backup ~]<span class=\"comment\"># chown -R rsync.rsync /backup/ </span></span><br><span class=\"line\">[root@backup ~]<span class=\"comment\"># ls -ld /backup/</span></span><br><span class=\"line\">drwxr-xr-x 2 rsync rsync 6 4 月 15 12:12 /backup/</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动和检查\"><a href=\"#启动和检查\" class=\"headerlink\" title=\"启动和检查\"></a>启动和检查</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rsyncd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rsyncd</span><br><span class=\"line\">systemctl status rsyncd</span><br><span class=\"line\">[root@backup ~]<span class=\"comment\"># ps -ef|grep sync|grep -v grep #检查进程</span></span><br><span class=\"line\">root 7521 1 0 11:39 ? 00:00:00 /usr/bin/rsync --daemon --no-detach </span><br><span class=\"line\">[root@backup ~]<span class=\"comment\"># netstat -lntup|grep 873 #检查端口</span></span><br><span class=\"line\">tcp   0   0 0.0.0.0:873    0.0.0.0:*    LISTEN7521/rsync</span><br><span class=\"line\">tcp6  0   0 :::873         :::*         LISTEN7521/rsync</span><br><span class=\"line\">[root@backup ~]<span class=\"comment\"># lsof -i :873 #检查端口</span></span><br><span class=\"line\">COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">rsync 7521 root 3u IPv4 41439 0t0 TCP *:rsync (LISTEN) </span><br><span class=\"line\">rsync 7521 root 5u IPv6 41440 0t0 TCP *:rsync (LISTEN)</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置密码文件\"><a href=\"#配置密码文件\" class=\"headerlink\" title=\"配置密码文件\"></a>配置密码文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@backup ~]<span class=\"comment\"># echo &quot;rsync_backup:oldboy&quot; &gt; /etc/rsync.password </span></span><br><span class=\"line\">[root@backup ~]<span class=\"comment\"># chmod 600 /etc/rsync.password</span></span><br><span class=\"line\">[root@backup ~]<span class=\"comment\"># cat /etc/rsync.password</span></span><br><span class=\"line\">rsync_backup:oldboy</span><br><span class=\"line\">[root@backup ~]<span class=\"comment\"># ls -l /etc/rsync.password</span></span><br><span class=\"line\">-rw------- 1 root root 20 4月 15 11:51 /etc/rsync.password</span><br></pre></td></tr></table></figure>\n<h4 id=\"web01-客户端-rsync-部署\"><a href=\"#web01-客户端-rsync-部署\" class=\"headerlink\" title=\"web01 客户端 rsync 部署\"></a>web01 客户端 rsync 部署</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@web01~]<span class=\"comment\"># ehco &#x27;exportRSYNC_PASSWORD=123456&#x27;&gt;&gt;/etc/bashrc </span></span><br><span class=\"line\">[root@web01 ~]<span class=\"comment\"># tail -1 /etc/bashrc</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> RSYNC_PASSWORD=123456</span><br><span class=\"line\">[root@web01 ~]<span class=\"comment\"># . /etc/bashrc</span></span><br><span class=\"line\">[root@web01 ~]<span class=\"comment\"># echo $RSYNC_PASSWORD </span></span><br><span class=\"line\">123456</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证验证-web01-客户端-rsync-服务能否推送成功\"><a href=\"#验证验证-web01-客户端-rsync-服务能否推送成功\" class=\"headerlink\" title=\"验证验证 web01 客户端 rsync 服务能否推送成功\"></a>验证验证 web01 客户端 rsync 服务能否推送成功</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@web01 ~]<span class=\"comment\"># rsync -avz / etc/hosts rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password</span></span><br><span class=\"line\">sending incremental file list</span><br><span class=\"line\">hosts</span><br><span class=\"line\">sent 89 bytes received 49 bytes 276.00 bytes/sec</span><br><span class=\"line\">total size is 332 speedup is 2.41</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开发脚本实现打包、备份、推送、校验、删除\"><a href=\"#开发脚本实现打包、备份、推送、校验、删除\" class=\"headerlink\" title=\"开发脚本实现打包、备份、推送、校验、删除\"></a>开发脚本实现打包、备份、推送、校验、删除</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> /server/scripts/bak.sh <span class=\"comment\">#创建脚本文件</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">IP=`ifconfig eth1 |awk -F <span class=\"string\">&quot;[ ]+&quot;</span> <span class=\"string\">&#x27;NR==2&#123;print $3&#125;&#x27;</span>` <span class=\"comment\">#定义变量 IP</span></span><br><span class=\"line\">[ -d /backup/<span class=\"variable\">$IP</span> ] || <span class=\"built_in\">mkdir</span> -p /backup/<span class=\"variable\">$IP</span> <span class=\"comment\">#判断IP目录是否存在 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $(<span class=\"built_in\">date</span> +%w) -eq 2 ] <span class=\"comment\">#判断如果周数=2则打包文件日期为前一天</span></span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">date</span>=$(<span class=\"built_in\">date</span> +%F -d <span class=\"string\">&quot;-1day&quot;</span>)_Monday <span class=\"comment\">#标记周一的文件 </span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">date</span>=$(<span class=\"built_in\">date</span> +%F -d <span class=\"string\">&quot;-1day&quot;</span>) </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> / &amp;&amp;\\</span><br><span class=\"line\"><span class=\"comment\">#打包</span></span><br><span class=\"line\">tar zcfh /backup/<span class=\"variable\">$IP</span>/sysconfig_<span class=\"variable\">$&#123;date&#125;</span>.tar.gz var/spool/cron/root</span><br><span class=\"line\">etc/rc.local server/scripts &amp;&amp;\\</span><br><span class=\"line\">tar zcf /backup/<span class=\"variable\">$IP</span>/webdata_<span class=\"variable\">$&#123;date&#125;</span>.tar.gz var/html/www &amp;&amp;\\ </span><br><span class=\"line\">tar zcf /backup/<span class=\"variable\">$IP</span>/accesslog_<span class=\"variable\">$&#123;date&#125;</span>.tar.gz app/logs &amp;&amp;\\ </span><br><span class=\"line\"><span class=\"comment\">#查找</span></span><br><span class=\"line\">find /backup -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*.tar.gz&quot;</span> | xargs</span><br><span class=\"line\"><span class=\"built_in\">md5sum</span> &gt;/backup/<span class=\"variable\">$IP</span>/check_<span class=\"variable\">$&#123;date&#125;</span> &amp;&amp;\\</span><br><span class=\"line\"><span class=\"comment\">#推送</span></span><br><span class=\"line\">rsync -az backup/ rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password &amp;&amp;\\</span><br><span class=\"line\"><span class=\"comment\">#删除</span></span><br><span class=\"line\">find backup/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*.tar.gz&quot;</span> -mtime +7 |xargs <span class=\"built_in\">rm</span> –rf</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置定时任务每天-00-点定时推送\"><a href=\"#配置定时任务每天-00-点定时推送\" class=\"headerlink\" title=\"配置定时任务每天 00 点定时推送\"></a>配置定时任务每天 00 点定时推送</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># crontab -e #crond-id-001:time sync by oldboy</span></span><br><span class=\"line\">*/5 * * * * /usr/sbin/ntpdate ntp1.aliyun.com &amp;&gt;/dev/null </span><br><span class=\"line\"><span class=\"comment\">#每天定时推送备份文件到 backup 服务器</span></span><br><span class=\"line\">00 00 * * * /bin/bash /server/scripts/bak.sh &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>\n<h4 id=\"backup-服务器开发脚本实现校验、删除、报警\"><a href=\"#backup-服务器开发脚本实现校验、删除、报警\" class=\"headerlink\" title=\"backup 服务器开发脚本实现校验、删除、报警\"></a>backup 服务器开发脚本实现校验、删除、报警</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> /server/scripts/bakup.sh</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LANG=<span class=\"string\">&quot;en&quot;</span></span><br><span class=\"line\">find /backup/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;check_<span class=\"variable\">$&#123;date&#125;</span>*&quot;</span> | xargs <span class=\"built_in\">md5sum</span> -c &gt;&gt;/tmp/mail_$(<span class=\"built_in\">date</span> +%F).txt</span><br><span class=\"line\">IP=`ifconfig eth1 |awk -F <span class=\"string\">&quot;[ ]+&quot;</span> <span class=\"string\">&#x27;NR==2&#123;print $3&#125;&#x27;</span>` <span class=\"comment\">#定义变量 IP</span></span><br><span class=\"line\">find /backup/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*.tar.gz&quot;</span> -mtime +180|xargs <span class=\"built_in\">rm</span> -rf</span><br><span class=\"line\">find /backup/ -<span class=\"built_in\">type</span> f ! -name <span class=\"string\">&quot;*_Monday.tar.gz&quot;</span> -mtime +7|xargs <span class=\"built_in\">rm</span> -rf mail -s <span class=\"string\">&quot;备份校验_<span class=\"variable\">$date</span>&quot;</span> 18947117523@163.com &lt;/tmp/mail_$(<span class=\"built_in\">date</span> +%F).txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置定时任务每天-8-点执行校验、删除、发送邮件\"><a href=\"#配置定时任务每天-8-点执行校验、删除、发送邮件\" class=\"headerlink\" title=\"配置定时任务每天 8 点执行校验、删除、发送邮件\"></a>配置定时任务每天 8 点执行校验、删除、发送邮件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@backup /server/scripts]<span class=\"comment\"># crontab -e</span></span><br><span class=\"line\"><span class=\"comment\">#crond-id-001:time sync by pincheng</span></span><br><span class=\"line\"><span class=\"comment\">#每天 8 点执行校验、删除、发送邮件</span></span><br><span class=\"line\">*/5 * * * * /usr/sbin/ntpdate ntp1.aliyun.com &amp;&gt;/dev/null 00 08 * * * /bin/bash /server/scripts/backup.sh &gt;&amp;/dev/null</span><br></pre></td></tr></table></figure>\n<h3 id=\"校验脚本对比\"><a href=\"#校验脚本对比\" class=\"headerlink\" title=\"校验脚本对比\"></a>校验脚本对比</h3><h4 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">IP=`ifconfig eth1 |awk -F <span class=\"string\">&quot;[ ]+&quot;</span> <span class=\"string\">&#x27;NR==2&#123;print $3&#125;&#x27;</span>` <span class=\"comment\">#定义变量 IP</span></span><br><span class=\"line\">find /backup/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*.tar.gz&quot;</span> -mtime +180|xargs <span class=\"built_in\">rm</span> -rf</span><br><span class=\"line\">find /backup/ -<span class=\"built_in\">type</span> f ! -name <span class=\"string\">&quot;*_Monday.tar.gz&quot;</span> -mtime +7|xargs <span class=\"built_in\">rm</span> -rf i=`/usr/bin/ls -l /backup/ |awk -F <span class=\"string\">&#x27;[ ]&#x27;</span> <span class=\"string\">&#x27;NR&gt;1&#123;print $NF&#125;&#x27;</span>`;<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span> &amp;&gt;/dev/null</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> /backup/<span class=\"variable\">$n</span></span><br><span class=\"line\">    [ -f check* ] <span class=\"keyword\">if</span> [ $? -eq 0 ] </span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        /usr/bin/md5sum -c /backup/<span class=\"variable\">$n</span>/check* &gt;&gt;/tmp/mail_$(<span class=\"built_in\">date</span> +%F).txt       <span class=\"keyword\">if</span> [ $? -ne 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$n</span> 校验失败&quot;</span> &gt;&gt;/tmp/mail_$(<span class=\"built_in\">date</span> +%F).txt <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$n</span> 校验成功&quot;</span> &gt;&gt;/tmp/mail_$(<span class=\"built_in\">date</span> +%F).txt <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;没有 <span class=\"variable\">$n</span> 的校验文件 &quot;</span> &gt;&gt;/tmp/mail_$(<span class=\"built_in\">date</span> +%F).txt</span><br><span class=\"line\">    <span class=\"keyword\">fi</span>   </span><br><span class=\"line\">    <span class=\"built_in\">let</span> j++</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;总共有<span class=\"variable\">$j</span> 个客户端推送成功&quot;</span> &gt;&gt;/tmp/mail_$(<span class=\"built_in\">date</span> +%F).txt</span><br><span class=\"line\">mail -s <span class=\"string\">&quot;备份校验_<span class=\"variable\">$date</span>&quot;</span> 244713047@qq.com &lt;/tmp/mail_$(<span class=\"built_in\">date</span> +%F).txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#by pincheng at 513247869</span></span><br><span class=\"line\"><span class=\"comment\"># www.oldboyedu.com IP=$(hostname -i) Path=/backup #保持每周 1 的副本</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $(<span class=\"built_in\">date</span> +%w) -eq 2 ];</span><br><span class=\"line\"><span class=\"keyword\">then</span> </span><br><span class=\"line\">    <span class=\"built_in\">date</span>=<span class=\"string\">&quot;<span class=\"subst\">$(date +%F -d <span class=\"string\">&quot;-1day&quot;</span>)</span>_week1&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">date</span>=<span class=\"string\">&quot;<span class=\"subst\">$(date +%F -d <span class=\"string\">&quot;-1day&quot;</span>)</span>&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">LANG=en</span><br><span class=\"line\">find /backup -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*<span class=\"variable\">$&#123;date&#125;</span>*.log&quot;</span>|xargs <span class=\"built_in\">md5sum</span> -c &gt;&gt;<span class=\"variable\">$Path</span>/<span class=\"variable\">$&#123;date&#125;</span>_result.<span class=\"built_in\">log</span> 2&gt;&amp;1</span><br><span class=\"line\">mail -s <span class=\"string\">&quot;<span class=\"variable\">$date</span> bak result&quot;</span> oldboytraining@163.com &lt;<span class=\"variable\">$Path</span>/<span class=\"variable\">$&#123;date&#125;</span>_result.<span class=\"built_in\">log</span> find /backup/ -<span class=\"built_in\">type</span> f -mtime +7 ! -name <span class=\"string\">&quot;*week1*&quot;</span>|xargs <span class=\"built_in\">rm</span> -f</span><br><span class=\"line\">find /backup/ -<span class=\"built_in\">type</span> f -mtime +180|xargs <span class=\"built_in\">rm</span> -f</span><br><span class=\"line\">mail -s <span class=\"string\">&quot;result.log&quot;</span> xxxxx@xx.com &lt;/<span class=\"variable\">$Path</span>/<span class=\"variable\">$&#123;date&#125;</span>_result.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>#待更新</p>\n","categories":["OPS"],"tags":["OPS","数据备份"]},{"title":"企业级OpenVPN搭建","url":"/forward/2cfbf2d2.html","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><blockquote>\n<p>这篇文章其实是2019年年末记录的，当时是因为疫情原因公司需要协助员工在家办公。开发部门和总部安全部门认为直接吧公司内网系统开放访问不安全，一个一个给员工家里公网IP加白名单也不现实。就临危受命接下了搭建<del>VPN</del>的任务。这次将文档整理发出其实在纠结会不会被请去喝茶，毕竟话题敏感。希望人没事</p>\n</blockquote>\n<blockquote>\n<p>PS:文档在记录时并没有太多中文参考资料，是自己摸索的，所以可能生成的有些证书并没有用上(多余的操作)。大家海涵</p>\n</blockquote>\n<h3 id=\"OpenVPN介绍\"><a href=\"#OpenVPN介绍\" class=\"headerlink\" title=\"OpenVPN介绍\"></a>Open<del>VPN</del>介绍</h3><ul>\n<li>Open<del>VPN</del>是一个用于创建虚拟专用网络加密通道的软件包，最早由James Yonan编写。Open<del>VPN</del>允许创建的<del>VPN</del>使用公开密钥、电子证书、或者用户名／密码来进行身份验证。</li>\n<li>它大量使用了OpenSSL加密库中的SSLv3/TLSv1协议函数库。</li>\n<li>目前Open<del>VPN</del>能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Microsoft Windows以及Android、iOS、MacOS(2020年官方推出Mac客户端)上运行，并包含了许多安全性的功能。它并不是一个基于Web的<del>VPN</del>软件，也不与IPsec及其他<del>VPN</del>软</li>\n<li>Open<del>VPN</del>2.0后引入了用户名/口令组合的身份验证方式，它可以省略客户端证书，但是仍有一份服务器证书需要被用作加密。 Open<del>VPN</del>所有的通信都基于一个单一的IP端口， 默认且推荐使用UDP协议通讯，同时TCP也被支持。Open<del>VPN</del>连接能通过大多数的代理服务器，并且能够在NAT的环境中很好地工作。服务端具有向客 户端“推送”某些网络配置信息的功能，这些信息包括：IP地址、路由设置等。</li>\n<li>Open<del>VPN</del>提供了两种虚拟网络接口：通用Tun/Tap驱动，通过它们， 可以建立三层IP隧道，或者虚拟二层以太网，后者可以传送任何类型的二层以太网络数据。传送的数据可通过LZO算法压缩。在选择协议时候，需要注意2个加密隧道之间的网络状况，如有高延迟或者丢包较多的情况下，请选择TCP协议作为底层协议，UDP协议由于存在无连接和重传机制，导致要隧道上层的协议进行重传，效率非常低下。</li>\n</ul>\n<p><del>VPN</del>的主要作用是在局域网外部时也可以访问局域网的资源，比如公司内网有许多资源只能公司内网访问，而我们外派出差员工还想访问公司内网资源[如:GitLab/测试库/其他测试环境接口]就需要通过连接公司公网出口暴露<del>VPN</del>来实现。</p>\n<p>由于众所周知的原因，几种简单的<del>VPN</del>协议比如L2TP/IPsec和PPTP协议在大陆地区已经被干扰的基本无法正常使用了。因此也就SSL <del>VPN</del>还可以使用。SSL <del>VPN</del>有非常多种，但很多都是商业软件，不开源也不适合个人搭建。而Open<del>VPN</del>是一款开源的SSL <del>VPN</del>，可以很容易找到搭建的方法，非常符合我们的要求。</p>\n<p><img src=\"/images/pasted-145.png\" alt=\"OpenVpn\"></p>\n<h3 id=\"开始搭建-基于账号密码认证\"><a href=\"#开始搭建-基于账号密码认证\" class=\"headerlink\" title=\"开始搭建(基于账号密码认证)\"></a>开始搭建(基于账号密码认证)</h3><h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y openssl openssl-devel lzo lzo-devel pam pam-devel pam_mysql automake pkgconfig gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h4 id=\"规范安装目录\"><a href=\"#规范安装目录\" class=\"headerlink\" title=\"规范安装目录\"></a>规范安装目录</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /application/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-easy-rsa-并生成相关证书\"><a href=\"#安装-easy-rsa-并生成相关证书\" class=\"headerlink\" title=\"安装 easy-rsa 并生成相关证书\"></a>安装 easy-rsa 并生成相关证书</h4><p>easy-rsa 下载地址：<a href=\"https://codeload.github.com/OpenVPN/easy-rsa-old/zip/master\">网页链接</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 ~]<span class=\"comment\"># unzip -d /application/ easy-rsa-old-master.zip</span></span><br><span class=\"line\">[root@m01 /application/easy-rsa-old-master]<span class=\"comment\"># ls</span></span><br><span class=\"line\">configure.ac  COPYING  COPYRIGHT.GPL  distro  doc  easy-rsa  Makefile.am</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成相关证书\"><a href=\"#生成相关证书\" class=\"headerlink\" title=\"生成相关证书\"></a>生成相关证书</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 /application/easy-rsa-old-master]<span class=\"comment\"># cd /application/easy-rsa-old-master/easy-rsa/2.0/</span></span><br><span class=\"line\">[root@m01 /application/easy-rsa-old-master/easy-rsa/2.0]<span class=\"comment\"># ls</span></span><br><span class=\"line\">build-ca     build-key         build-key-server  clean-all      openssl-0.9.6.cnf  pkitool      vars</span><br><span class=\"line\">build-dh     build-key-pass    build-req         inherit-inter  openssl-0.9.8.cnf  revoke-full  whichopensslcnf</span><br><span class=\"line\">build-inter  build-key-pkcs12  build-req-pass    list-crl       openssl-1.0.0.cnf  sign-req</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"准备-openssl-相关文件\"><a href=\"#准备-openssl-相关文件\" class=\"headerlink\" title=\"准备 openssl 相关文件\"></a>准备 openssl 相关文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 /application/easy-rsa-old-master/easy-rsa/2.0]<span class=\"comment\"># ln -s openssl-1.0.0.cnf openssl.cnf</span></span><br><span class=\"line\">[root@m01 /application/easy-rsa-old-master/easy-rsa/2.0]<span class=\"comment\"># ll openssl.cnf </span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 17 2月   2 01:34 openssl.cnf -&gt; openssl-1.0.0.cnf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编辑证书基本信息\"><a href=\"#编辑证书基本信息\" class=\"headerlink\" title=\"编辑证书基本信息\"></a>编辑证书基本信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pwd</span> </span><br><span class=\"line\">/application/easy-rsa-old-master/easy-rsa/2.0</span><br><span class=\"line\">vim vars </span><br><span class=\"line\"> 67 <span class=\"built_in\">export</span> KEY_COUNTRY=<span class=\"string\">&quot;CN&quot;</span></span><br><span class=\"line\"> 68 <span class=\"built_in\">export</span> KEY_PROVINCE=<span class=\"string\">&quot;SH&quot;</span></span><br><span class=\"line\"> 69 <span class=\"built_in\">export</span> KEY_CITY=<span class=\"string\">&quot;Shanghai&quot;</span></span><br><span class=\"line\"> 70 <span class=\"built_in\">export</span> KEY_ORG=<span class=\"string\">&quot;360XXX&quot;</span></span><br><span class=\"line\"> 71 <span class=\"built_in\">export</span> KEY_EMAIL=<span class=\"string\">&quot;yaXXXXXhi-jk@360jiXXXng.net&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">. vars  <span class=\"comment\">#生效环境变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##生成证书，以下命令全部一直回车</span></span><br><span class=\"line\">./clean-all   </span><br><span class=\"line\">(y/n)y</span><br><span class=\"line\"><span class=\"comment\">#清空所有证书（keys目录下）</span></span><br><span class=\"line\">./build-ca   </span><br><span class=\"line\">(y/n)y</span><br><span class=\"line\"><span class=\"comment\">#生成服务器ca证书</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##生成证书如下：</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> keys/</span><br><span class=\"line\">ca.crt  ca.key  index.txt  serial</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成服务器端秘钥\"><a href=\"#生成服务器端秘钥\" class=\"headerlink\" title=\"生成服务器端秘钥\"></a>生成服务器端秘钥</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./build-key-server server</span><br><span class=\"line\">(y/n)y</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成密钥如下\"><a href=\"#生成密钥如下\" class=\"headerlink\" title=\"生成密钥如下\"></a>生成密钥如下</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> keys</span><br><span class=\"line\">01.pem  ca.crt  ca.key  index.txt  index.txt.attr  index.txt.old  serial  serial.old  server.crt  server.csr  server.key</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成客户端证书\"><a href=\"#生成客户端证书\" class=\"headerlink\" title=\"生成客户端证书\"></a>生成客户端证书</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./build-key client</span><br><span class=\"line\">(y/n)y</span><br><span class=\"line\">(y/n)y</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建迪菲·赫尔曼密钥\"><a href=\"#创建迪菲·赫尔曼密钥\" class=\"headerlink\" title=\"创建迪菲·赫尔曼密钥\"></a>创建迪菲·赫尔曼密钥</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 会生成dh2048.pem文件（生成过程比较慢，在此期间不要去中断它）</span></span><br><span class=\"line\">./build-dh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看生成的所有证书\"><a href=\"#查看生成的所有证书\" class=\"headerlink\" title=\"查看生成的所有证书\"></a>查看生成的所有证书</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 /application/easy-rsa-old-master/easy-rsa/2.0]<span class=\"comment\"># ls keys/</span></span><br><span class=\"line\">01.pem  ca.crt  client.crt  client.key  index.txt       index.txt.attr.old  serial      server.crt  server.key</span><br><span class=\"line\">02.pem  ca.key  client.csr  dh2048.pem  index.txt.attr  index.txt.old       serial.old  server.csr</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装openvpn\"><a href=\"#安装openvpn\" class=\"headerlink\" title=\"安装openvpn\"></a>安装open<del>vpn</del></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 ~]<span class=\"comment\"># tar -xf openvpn-2.4.8.tar.gz </span></span><br><span class=\"line\">[root@m01 ~]<span class=\"comment\"># cd openvpn-2.4.8/</span></span><br><span class=\"line\">./configure --prefix=/application/openvpn-2.4.8 &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">[root@m01 /application]<span class=\"comment\"># ln -s openvpn-2.4.8 openvpn</span></span><br><span class=\"line\">[root@m01 /application]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">drwxr-xr-x 5 root root 178 1月  23 2018 easy-rsa-old-master</span><br><span class=\"line\">lrwxrwxrwx 1 root root  13 2月   2 02:06 openvpn -&gt; openvpn-2.4.8</span><br><span class=\"line\">drwxr-xr-x 6 root root  57 2月   2 02:06 openvpn-2.4.8</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置openvpn\"><a href=\"#配置openvpn\" class=\"headerlink\" title=\"配置openvpn\"></a>配置open<del>vpn</del></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">配置 OpenVPN 服务端</span><br><span class=\"line\">创建配置文件目录和证书目录：</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/openvpn        <span class=\"comment\"># openvpn 配置文件路径</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/openvpn/pki    <span class=\"comment\"># openvpn 证书存放位置</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成ta-key文件（防DDos攻击、UDP淹没等恶意攻击）\"><a href=\"#生成ta-key文件（防DDos攻击、UDP淹没等恶意攻击）\" class=\"headerlink\" title=\"生成ta.key文件（防DDos攻击、UDP淹没等恶意攻击）\"></a>生成ta.key文件（防DDos攻击、UDP淹没等恶意攻击）</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 /application/easy-rsa-old-master/easy-rsa/2.0/keys]<span class=\"comment\"># /application/openvpn/sbin/openvpn --genkey --secret ta.key </span></span><br><span class=\"line\">[root@m01 /application/easy-rsa-old-master/easy-rsa/2.0/keys]<span class=\"comment\"># ls</span></span><br><span class=\"line\">ta.key</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将签名生成的-CA-证书秘钥和服务端证书秘钥拷贝到证书目录中\"><a href=\"#将签名生成的-CA-证书秘钥和服务端证书秘钥拷贝到证书目录中\" class=\"headerlink\" title=\"将签名生成的 CA 证书秘钥和服务端证书秘钥拷贝到证书目录中\"></a>将签名生成的 CA 证书秘钥和服务端证书秘钥拷贝到证书目录中</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 /application/easy-rsa-old-master/easy-rsa/2.0/keys]<span class=\"comment\"># cp &#123;ca.crt,ca.key,dh2048.pem,server.crt,server.key,ta.key&#125; /etc/openvpn/pki/</span></span><br><span class=\"line\">[root@ZJVPN /application/easy-rsa-old-master/easy-rsa/2.0/keys]<span class=\"comment\"># ll /etc/openvpn/pki/</span></span><br><span class=\"line\">总用量 28</span><br><span class=\"line\">-rw-r--r-- 1 root root 2382 2月   2 05:43 ca.crt</span><br><span class=\"line\">-rw------- 1 root root 3268 2月   2 05:43 ca.key</span><br><span class=\"line\">-rw-r--r-- 1 root root  424 2月   2 05:43 dh2048.pem</span><br><span class=\"line\">-rw-r--r-- 1 root root 8146 2月   2 05:43 server.crt</span><br><span class=\"line\">-rw------- 1 root root 3272 2月   2 05:43 server.key</span><br><span class=\"line\">-rw------- 1 root root  636 2月   2 05:43 ta.key</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拷贝配置文件模版\"><a href=\"#拷贝配置文件模版\" class=\"headerlink\" title=\"拷贝配置文件模版\"></a>拷贝配置文件模版</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 ~]<span class=\"comment\"># cp openvpn-2.4.8/sample/sample-config-files/server.conf /etc/openvpn/</span></span><br><span class=\"line\">[root@m01 ~]<span class=\"comment\"># tree /etc/openvpn/</span></span><br><span class=\"line\">/etc/openvpn/</span><br><span class=\"line\">├── pki</span><br><span class=\"line\">├── pki</span><br><span class=\"line\">│   ├── ca.crt</span><br><span class=\"line\">│   ├── ca.key</span><br><span class=\"line\">│   ├── dh2048.pem</span><br><span class=\"line\">│   ├── ipp.txt</span><br><span class=\"line\">│   ├── server.crt</span><br><span class=\"line\">│   ├── server.key</span><br><span class=\"line\">│   └── ta.key</span><br><span class=\"line\">└── server.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编辑openvpn配置文件\"><a href=\"#编辑openvpn配置文件\" class=\"headerlink\" title=\"编辑openvpn配置文件\"></a>编辑open<del>vpn</del>配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 ~]<span class=\"comment\"># cat /etc/openvpn/server.conf </span></span><br><span class=\"line\"><span class=\"built_in\">local</span> 0.0.0.0</span><br><span class=\"line\">port 8888</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\">dev tun</span><br><span class=\"line\">ca /etc/openvpn/pki/ca.crt</span><br><span class=\"line\">cert /etc/openvpn/pki/server.crt</span><br><span class=\"line\">key /etc/openvpn/pki/server.key  <span class=\"comment\"># This file should be kept secret</span></span><br><span class=\"line\">dh /etc/openvpn/pki/dh2048.pem</span><br><span class=\"line\">server 10.10.10.0 255.255.255.0    <span class=\"comment\"># 分配给客户端的虚拟局域网段</span></span><br><span class=\"line\">push <span class=\"string\">&quot;dhcp-option DNS 192.168.200.177&quot;</span>    <span class=\"comment\">#客户端连入后使用的DNS</span></span><br><span class=\"line\">push <span class=\"string\">&quot;dhcp-option DNS 114.114.114.114&quot;</span></span><br><span class=\"line\">ifconfig-pool-persist ipp.txt</span><br><span class=\"line\"><span class=\"comment\">#k8sDNS</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.200.177 255.255.255.255&quot;</span>  <span class=\"comment\"># 推送路由和DNS到客户端</span></span><br><span class=\"line\"><span class=\"comment\">#k8s负载</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.200.120 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#gitlab新</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.55 255.255.255.255&quot;</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.249 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#内网测试库</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.233 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#felix电脑</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.32 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#老麦测试机</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.238 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#jacky电脑</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.17 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#mo电脑</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.121 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#三楼</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 182.18.3.0 255.255.255.0&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#VPN</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.160 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#测试机网段</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.200.0 255.255.255.0&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#lke</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.2.0 255.255.255.0&quot;</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.19 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#hali</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.114 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#August</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.14 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#签名层</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.71 255.255.255.255&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#国内文章</span></span><br><span class=\"line\">push <span class=\"string\">&quot;route 192.168.1.171 255.255.255.255&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">client-to-client</span><br><span class=\"line\">keepalive 10 120</span><br><span class=\"line\">tls-auth /etc/openvpn/pki/ta.key 0 <span class=\"comment\"># This file is secret</span></span><br><span class=\"line\">cipher AES-256-CBC</span><br><span class=\"line\">comp-lzo</span><br><span class=\"line\">;max-clients 50</span><br><span class=\"line\">user nobody</span><br><span class=\"line\">group nobody</span><br><span class=\"line\">auth-user-pass-verify /etc/openvpn/checkpsw.sh via-env</span><br><span class=\"line\">script-security 3</span><br><span class=\"line\"><span class=\"comment\">#client-cert-not-required</span></span><br><span class=\"line\">;link-mtu 1500</span><br><span class=\"line\">verify-client-cert none</span><br><span class=\"line\">username-as-common-name</span><br><span class=\"line\">persist-key</span><br><span class=\"line\">persist-tun</span><br><span class=\"line\">status /var/log/openvpn-status.log</span><br><span class=\"line\"><span class=\"built_in\">log</span>         /var/log/openvpn.log</span><br><span class=\"line\">log-append  /var/log/openvpn.log</span><br><span class=\"line\">verb 3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#这里选择了推送部分路由通过tun虚拟网卡设备，如果是0.0.0.0的话会导致连上VPN的客户端上网卡顿，即全部流量都走VPN访问</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"上传密码验证脚本\"><a href=\"#上传密码验证脚本\" class=\"headerlink\" title=\"上传密码验证脚本\"></a>上传密码验证脚本</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@m01 /etc/openvpn]<span class=\"comment\"># ls</span></span><br><span class=\"line\">checkpsw.sh  pki  server.conf</span><br><span class=\"line\">[root@m01 /etc/openvpn]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 8</span><br><span class=\"line\">-rw-r--r-- 1 root root 1167 2月   2 02:59 checkpsw.sh <span class=\"comment\">#验证账号密码脚本</span></span><br><span class=\"line\">drwxr-xr-x 2 root root  102 2月   2 05:43 pki <span class=\"comment\">#账号密码文件 账号一行一个</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 1174 2月   2 05:47 server.conf</span><br><span class=\"line\">[root@ZJVPN /etc/openvpn]<span class=\"comment\"># chmod +x checkpsw.sh </span></span><br><span class=\"line\">[root@ZJVPN /etc/openvpn]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 8</span><br><span class=\"line\">-rwxr-xr-x 1 root root 1167 2月   2 02:59 checkpsw.sh</span><br><span class=\"line\">drwxr-xr-x 2 root root  102 2月   2 05:43 pki</span><br><span class=\"line\">-rw-r--r-- 1 root root 1174 2月   2 05:47 server.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> checkpsw.sh</span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">###########################################################</span></span><br><span class=\"line\"><span class=\"comment\"># checkpsw.sh (C) 2004 Mathias Sundman </span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This script will authenticate OpenVPN users against</span></span><br><span class=\"line\"><span class=\"comment\"># a plain text file. The passfile should simply contain</span></span><br><span class=\"line\"><span class=\"comment\"># one row per user with the username first followed by</span></span><br><span class=\"line\"><span class=\"comment\"># one or more space(s) or tab(s) and then the password.</span></span><br><span class=\"line\">PASSFILE=<span class=\"string\">&quot;/etc/openvpn/psw-file&quot;</span></span><br><span class=\"line\">LOG_FILE=<span class=\"string\">&quot;/application/openvpn/logs/openvpn-password.log&quot;</span></span><br><span class=\"line\">TIME_STAMP=`<span class=\"built_in\">date</span> <span class=\"string\">&quot;+%Y-%m-%d %T&quot;</span>`</span><br><span class=\"line\"><span class=\"comment\">###########################################################</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -r <span class=\"string\">&quot;<span class=\"variable\">$&#123;PASSFILE&#125;</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;TIME_STAMP&#125;</span>: Could not open password file \\&quot;<span class=\"variable\">$&#123;PASSFILE&#125;</span>\\&quot; for reading.&quot;</span> &gt;&gt; <span class=\"variable\">$&#123;LOG_FILE&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">CORRECT_PASSWORD=`awk <span class=\"string\">&#x27;!/^;/&amp;&amp;!/^#/&amp;&amp;$1==&quot;&#x27;</span><span class=\"variable\">$&#123;username&#125;</span><span class=\"string\">&#x27;&quot;&#123;print $2;exit&#125;&#x27;</span> <span class=\"variable\">$&#123;PASSFILE&#125;</span>`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$&#123;CORRECT_PASSWORD&#125;</span>&quot;</span> = <span class=\"string\">&quot;&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;TIME_STAMP&#125;</span>: User does not exist: username=\\&quot;<span class=\"variable\">$&#123;username&#125;</span>\\&quot;, password=\\&quot;<span class=\"variable\">$&#123;password&#125;</span>\\&quot;.&quot;</span> &gt;&gt; <span class=\"variable\">$&#123;LOG_FILE&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$&#123;password&#125;</span>&quot;</span> = <span class=\"string\">&quot;<span class=\"variable\">$&#123;CORRECT_PASSWORD&#125;</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;TIME_STAMP&#125;</span>: Successful authentication: username=\\&quot;<span class=\"variable\">$&#123;username&#125;</span>\\&quot;.&quot;</span> &gt;&gt; <span class=\"variable\">$&#123;LOG_FILE&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;TIME_STAMP&#125;</span>: Incorrect password: username=\\&quot;<span class=\"variable\">$&#123;username&#125;</span>\\&quot;, password=\\&quot;<span class=\"variable\">$&#123;password&#125;</span>\\&quot;.&quot;</span> &gt;&gt; <span class=\"variable\">$&#123;LOG_FILE&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@m01 ~]<span class=\"comment\"># ll /etc/openvpn/psw-file</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 151 12月  1 11:05 /etc/openvpn/psw-file</span><br><span class=\"line\">[root@m01 ~]<span class=\"comment\"># cat /etc/openvpn/psw-file</span></span><br><span class=\"line\">felix 591740</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置systemd启动脚本\"><a href=\"#配置systemd启动脚本\" class=\"headerlink\" title=\"配置systemd启动脚本\"></a>配置systemd启动脚本</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /usr/lib/systemd/system/openvpn.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=openvpn</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">  </span><br><span class=\"line\">[Service]</span><br><span class=\"line\">EnvironmentFile=-/etc/openvpn/openvpn</span><br><span class=\"line\">ExecStart=/application/openvpn/sbin/openvpn --config /etc/openvpn/server.conf</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">LimitNOFILE=65536</span><br><span class=\"line\">  </span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now openvpn.service </span><br></pre></td></tr></table></figure>\n<p>2021年补图<br><img src=\"/images/pasted-137.png\" alt=\"补图\"></p>\n<h4 id=\"配置-iptables-策略：\"><a href=\"#配置-iptables-策略：\" class=\"headerlink\" title=\"配置 iptables 策略：\"></a>配置 iptables 策略：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 10.10.10.0/24 -o eth0 -j MASQUERADE</span><br><span class=\"line\">也可以这样做：添加 iptables 转发规则，对所有源地址（openvpn为客户端分配的地址）为 10.10.10.0/24 的数据包转发后进行源地址转换，伪装成 openvpn 服务器内网地址 x.x.x.x， 这样 VPN 客户端就可以访问服务器内网的其他机器了。</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t nat -A POSTROUTING -s 10.10.10.0/24 -j SNAT --to-source 192.168.1.160</span><br><span class=\"line\">iptables -I INPUT -p tcp -m tcp --dport 8888 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h4 id=\"开启内核路由转发功能\"><a href=\"#开启内核路由转发功能\" class=\"headerlink\" title=\"开启内核路由转发功能\"></a>开启内核路由转发功能</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\">添加如下内容</span><br><span class=\"line\">net.ipv4.ip_forward = 1</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装OpenVPN客户端\"><a href=\"#安装OpenVPN客户端\" class=\"headerlink\" title=\"安装OpenVPN客户端\"></a>安装Open<del>VPN</del>客户端</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">客户端安装完成后，将以下证书和秘钥文件拷贝到安装目录中的 config 目录下：</span><br><span class=\"line\">[root@ZJVPN /etc/openvpn/pki]<span class=\"comment\"># cd /application/easy-rsa-old-master/easy-rsa/2.0/keys/</span></span><br><span class=\"line\">[root@ZJVPN /application/easy-rsa-old-master/easy-rsa/2.0/keys]<span class=\"comment\"># ls</span></span><br><span class=\"line\">01.pem  ca.crt  client.crt  client.key  index.txt       index.txt.attr.old  serial      server.crt  server.key</span><br><span class=\"line\">02.pem  ca.key  client.csr  dh2048.pem  index.txt.attr  index.txt.old       serial.old  server.csr  ta.key</span><br><span class=\"line\">[root@ZJVPN /application/easy-rsa-old-master/easy-rsa/2.0/keys]<span class=\"comment\"># sz &#123;ca.crt,client.crt,client.key,ta.key&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Windows<br><img src=\"/images/pasted-138.png\" alt=\"windows客户端\"><br><img src=\"/images/pasted-142.png\" alt=\"windows客户端\"><br>检查路由是否已经推送到客户端<br><img src=\"/images/pasted-143.png\" alt=\"windows客户端\"><br>MacOS<br><img src=\"/images/pasted-139.png\" alt=\"MacOS\"><br><img src=\"/images/pasted-140.png\" alt=\"MacOS\"><br>检查路由是否已经推送到客户端<br><img src=\"/images/pasted-144.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>这里选择了推送部分路由通过tun虚拟网卡设备，如果是0.0.0.0的话会导致连上<del>VPN</del>的客户端上网卡顿，即全部流量都走<del>VPN</del>访问。</p>\n</blockquote>\n<blockquote>\n<p>到此为止，我们就构建好了一个点到站<del>VPN</del>，如果你的服务器在公司内网需要麻烦IT同事将你的<del>VPN</del>端口如我这里的8888端口通过公司防火墙或者最外层路由设备做DNAT映射出去。在OPEN<del>VPN</del>服务端配置文件中添加相关内网资源如Git仓库、测试数据库的内网IP 加入到路由中。在psw-file给出差员工开账号，吧相关证书和配置文件发给他们让他们可以连接你的<del>VPN</del>。</p>\n</blockquote>\n<p>客户端下载：<a href=\"https://openvpn.net/vpn-client/\">https://openvpn.net/vpn-client/</a></p>\n<p>客户端主配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">client</span><br><span class=\"line\">dev tun</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\">remote 你的公网ip 8888</span><br><span class=\"line\">resolv-retry infinite</span><br><span class=\"line\">nobind</span><br><span class=\"line\">persist-key</span><br><span class=\"line\">persist-tun</span><br><span class=\"line\">ca ca.crt</span><br><span class=\"line\">cert client.crt</span><br><span class=\"line\">key client.key</span><br><span class=\"line\">remote-cert-tls server</span><br><span class=\"line\">tls-auth ta.key 1</span><br><span class=\"line\">cipher AES-256-CBC</span><br><span class=\"line\">auth-user-pass</span><br><span class=\"line\">auth-nocache</span><br><span class=\"line\">comp-lzo</span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["OPS","OPENVPN"]},{"title":"树莓派3B-安装java8部署Minecraft服务器","url":"/forward/8bd2a16a.html","content":"<h4 id=\"java8-arm-下载地址\"><a href=\"#java8-arm-下载地址\" class=\"headerlink\" title=\"java8(arm)下载地址\"></a>java8(arm)下载地址</h4><ul>\n<li><p>1）32位：<br><a href=\"https://github.com/frekele/oracle-java/releases/download/8u212-b10/jdk-8u212-linux-arm32-vfp-hflt.tar.gz\">https://github.com/frekele/oracle-java/releases/download/8u212-b10/jdk-8u212-linux-arm32-vfp-hflt.tar.gz</a></p>\n</li>\n<li><p>2）64位：<br><a href=\"https://github.com/frekele/oracle-java/releases/download/8u212-b10/jdk-8u212-linux-arm64-vfp-hflt.tar.gz\">https://github.com/frekele/oracle-java/releases/download/8u212-b10/jdk-8u212-linux-arm64-vfp-hflt.tar.gz</a></p>\n</li>\n</ul>\n<hr>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><h5 id=\"创建安装目录：\"><a href=\"#创建安装目录：\" class=\"headerlink\" title=\"创建安装目录：\"></a>创建安装目录：</h5><p><code>mkdir -p /app/java</code></p>\n<h5 id=\"解压：\"><a href=\"#解压：\" class=\"headerlink\" title=\"解压：\"></a>解压：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -xf jdk-8u212-linux-arm64-vfp-hflt.tar.gz -C /app/java/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"添加环境变量：\"><a href=\"#添加环境变量：\" class=\"headerlink\" title=\"添加环境变量：\"></a>添加环境变量：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/app/java/jdk1.8.0_212</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar</span><br><span class=\"line\"></span><br><span class=\"line\">. /etc/profile</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"配置mc服务端：\"><a href=\"#配置mc服务端：\" class=\"headerlink\" title=\"配置mc服务端：\"></a>配置mc服务端：</h4><h5 id=\"服务端整合包下载地址-空岛生存v1-9-兼容Minecraft客户端1-12-2-：Download\"><a href=\"#服务端整合包下载地址-空岛生存v1-9-兼容Minecraft客户端1-12-2-：Download\" class=\"headerlink\" title=\"服务端整合包下载地址(空岛生存v1.9 兼容Minecraft客户端1.12.2)：Download\"></a>服务端整合包下载地址(空岛生存v1.9 兼容Minecraft客户端1.12.2)：<a href=\"https://pincheng.lanzous.com/ibbcc5g\">Download</a></h5><hr>\n<h4 id=\"部署：\"><a href=\"#部署：\" class=\"headerlink\" title=\"部署：\"></a>部署：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -xf mc.tar.gz -C /app/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编辑启动脚本-整合包中已添加-：\"><a href=\"#编辑启动脚本-整合包中已添加-：\" class=\"headerlink\" title=\"编辑启动脚本(整合包中已添加)：\"></a>编辑启动脚本(整合包中已添加)：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /app/mc/server.sh</span><br><span class=\"line\">java -Xms256M -Xmx1024M -jar ./Spigot-1.12.2.jar nogui</span><br><span class=\"line\"></span><br><span class=\"line\">-Xms 为jvm启动时分配的内存，比如-Xms256m，表示分配256M</span><br><span class=\"line\">-Xmx 为jvm运行过程中分配的最大内存，比如-Xms1024m，表示jvm进程最多只能够占用1024M内存</span><br><span class=\"line\"><span class=\"comment\">#由于树莓派3B性能局限性，且这个mc服务端整合包是空岛生存对性能要求不高。所以我配置如上</span></span><br><span class=\"line\">-jar 接mc服务端jar文件</span><br><span class=\"line\">nogui 表示没有图形界面</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关闭服务端正版验证：\"><a href=\"#关闭服务端正版验证：\" class=\"headerlink\" title=\"关闭服务端正版验证：\"></a>关闭服务端正版验证：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /app/mc/server.properties</span><br><span class=\"line\">onlin-mode=<span class=\"literal\">false</span>  <span class=\"comment\">#这里改为false，否则盗版客户端进不去</span></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"启动：\"><a href=\"#启动：\" class=\"headerlink\" title=\"启动：\"></a>启动：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@S01:~<span class=\"comment\"># cd /app/mc/</span></span><br><span class=\"line\">root@S01:/app/mc<span class=\"comment\"># ls</span></span><br><span class=\"line\">ASkyBlock            K.BAT              Spigot-1.12.2.jar</span><br><span class=\"line\">ASkyBlock_nether     libs               spigot.yml</span><br><span class=\"line\">banned-ips.json      logs               usercache.json</span><br><span class=\"line\">banned-players.json  ops.json           wepif.yml</span><br><span class=\"line\">bukkit.yml           permissions.yml    whitelist.json</span><br><span class=\"line\">commands.yml         plugins            world</span><br><span class=\"line\">data-storage         server.properties  world_nether</span><br><span class=\"line\">eula.txt             server.sh          world_the_end</span><br><span class=\"line\">help.yml             Spawn</span><br><span class=\"line\">root@S01:/app/mc<span class=\"comment\"># sh server.sh </span></span><br><span class=\"line\">Loading libraries, please <span class=\"built_in\">wait</span>...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动成功：\"><a href=\"#启动成功：\" class=\"headerlink\" title=\"启动成功：\"></a>启动成功：</h5><p><img src=\"/images/img-66.png\"></p>\n<hr>\n<h4 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h4><p><img src=\"/images/img-67.png\" alt=\" \"></p>\n<h5 id=\"添加树莓派服务器地址：\"><a href=\"#添加树莓派服务器地址：\" class=\"headerlink\" title=\"添加树莓派服务器地址：\"></a>添加树莓派服务器地址：</h5><p><img src=\"/images/img-68.png\" alt=\" \"></p>\n<h5 id=\"连接进入：\"><a href=\"#连接进入：\" class=\"headerlink\" title=\"连接进入：\"></a>连接进入：</h5><p><img src=\"/images/img-69.png\" alt=\" \"></p>\n<p><img src=\"/images/img-70.png\" alt=\" \"></p>\n","categories":["OPS"],"tags":["OPS","树莓派","Minecraft"]},{"title":"集群搭建前优化方案","url":"/forward/d6f16b84.html","content":"<h2 id=\"分区方案\"><a href=\"#分区方案\" class=\"headerlink\" title=\"分区方案\"></a>分区方案</h2><h3 id=\"普通分区形式\"><a href=\"#普通分区形式\" class=\"headerlink\" title=\"普通分区形式\"></a>普通分区形式</h3><ul>\n<li><strong>/boot 引导分区 512M-1024M</strong></li>\n<li><strong>swap 交换分区   内存大于8G，给8G。内存小于8G，给到1.5倍的内存。</strong></li>\n<li><strong>/   给所有空间</strong></li>\n</ul>\n<h4 id=\"使用条件\"><a href=\"#使用条件\" class=\"headerlink\" title=\"使用条件\"></a>使用条件</h4><ul>\n<li><strong>1、数据不那么重要。</strong></li>\n<li><strong>2、必须必须要有备份策略：就是实时的。</strong><ul>\n<li><strong>内部人员发布数据，同时发布到两台以上生产服务器里。是三个备份，GIT上，代码。</strong></li>\n<li><strong>外部用户写入数据（图片、视频 文字），</strong></li>\n<li><strong>同时发布到两台服务器后面共享的服务器上（对这个共享服务器做备份），</strong></li>\n<li><strong>两个备份。</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"存储服务器（含数据库）的分区方式\"><a href=\"#存储服务器（含数据库）的分区方式\" class=\"headerlink\" title=\"存储服务器（含数据库）的分区方式\"></a>存储服务器（含数据库）的分区方式</h3><ul>\n<li><strong>/boot 引导分区 512M-1024M</strong></li>\n<li><strong>swap 交换分区   内存大于8G，给8G。内存小于8G，给到1.5倍的内存。</strong></li>\n<li><strong>/   给100G</strong><br></li>\n<li><strong>/data  剩余给数据分区 ，data可以是任意名称。</strong></li>\n</ul>\n<h3 id=\"门户网站的分区方案\"><a href=\"#门户网站的分区方案\" class=\"headerlink\" title=\"门户网站的分区方案\"></a>门户网站的分区方案</h3><ul>\n<li><strong>/boot 引导分区 512M-1024M</strong></li>\n<li><strong>swap 交换分区   内存大于8G，给8G。内存小于8G，给到1.5倍的内存。</strong></li>\n<li><strong>/   给100G</strong></li>\n<li><strong>剩余保留，将来哪个部门使用，使用部门自己分剩余的分区。</strong></li>\n</ul>\n<h3 id=\"错误分区方案\"><a href=\"#错误分区方案\" class=\"headerlink\" title=\"错误分区方案\"></a>错误分区方案</h3><ul>\n<li><strong>/boot 引导分区 512M-1024M</strong></li>\n<li><strong>swap 交换分区   内存大于8G，给8G。内存小于8G，给到1.5倍的内存。</strong></li>\n<li><strong>/home 家目录</strong></li>\n<li><strong>/var</strong></li>\n<li><strong>/usr</strong></li>\n<li><strong>/</strong></li>\n</ul>\n<h3 id=\"LVM动态调整。降低性能。\"><a href=\"#LVM动态调整。降低性能。\" class=\"headerlink\" title=\"LVM动态调整。降低性能。\"></a>LVM动态调整。降低性能。</h3><p><strong>传统企业，没有多少用户，一天同时几十个并发访问，数据量还不大。</strong><br></p>\n<h2 id=\"更改网卡名字为传统eth\"><a href=\"#更改网卡名字为传统eth\" class=\"headerlink\" title=\"更改网卡名字为传统eth*\"></a>更改网卡名字为传统eth*</h2><p><strong>安装时按Tab键在grub(100行左右)结尾添加</strong><code>net.ifnames=0 biosdevname=0</code><br></p>\n<h2 id=\"语言环境\"><a href=\"#语言环境\" class=\"headerlink\" title=\"语言环境\"></a>语言环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/locale.conf</span><br><span class=\"line\">英语：en_US.UTF-8</span><br><span class=\"line\">中文：zh_CN.UTF-8</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置网络\"><a href=\"#配置网络\" class=\"headerlink\" title=\"配置网络\"></a>配置网络</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmtui(c6 setup)</span><br><span class=\"line\">ip route <span class=\"comment\">#查看网关</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更改国内YUM源\"><a href=\"#更改国内YUM源\" class=\"headerlink\" title=\"更改国内YUM源\"></a>更改国内YUM源</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -s -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">curl -s -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo <span class=\"comment\">#epel源中弥补官方源没有的软件包</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"企业运维常用基础工具包\"><a href=\"#企业运维常用基础工具包\" class=\"headerlink\" title=\"企业运维常用基础工具包\"></a>企业运维常用基础工具包</h2><h3 id=\"CentOS6和CentOS7都要安装的企业运维常用基础工具包\"><a href=\"#CentOS6和CentOS7都要安装的企业运维常用基础工具包\" class=\"headerlink\" title=\"CentOS6和CentOS7都要安装的企业运维常用基础工具包\"></a>CentOS6和CentOS7都要安装的企业运维常用基础工具包</h3><pre><code>yum install tree nmap dos2unix lrzsz nc lsof wget tcpdump htop iftop iotop sysstat nethogs -y\n</code></pre>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree\t\t<span class=\"comment\">#tree以树形结构显示文件和目录</span></span><br><span class=\"line\">nmap\t<span class=\"comment\">#端口扫描工具</span></span><br><span class=\"line\">dos2unix\t<span class=\"comment\">#转换脚本格式工具</span></span><br><span class=\"line\">lrzsz\t\t<span class=\"comment\">#包含上传（rz）下载（sz）文件工具</span></span><br><span class=\"line\">nc\t\t<span class=\"comment\">#文件传输、端口检查工具</span></span><br><span class=\"line\">lsof\t\t<span class=\"comment\">#反查端口进程，已经服务开发文件工具</span></span><br><span class=\"line\">wget\t<span class=\"comment\">#下载工具</span></span><br><span class=\"line\">tcpdump\t<span class=\"comment\">#抓包、监听等重要排错工具</span></span><br><span class=\"line\">htop\t<span class=\"comment\">#系统进程相关信息查看工具</span></span><br><span class=\"line\">iftop\t<span class=\"comment\">#查看主机网卡带宽工具</span></span><br><span class=\"line\">sysstat\t<span class=\"comment\">#含有sar，iostat等重要性能查看工具</span></span><br><span class=\"line\">nethogs\t<span class=\"comment\">#显示进程的网络流量</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CentOS7要安装的企业运维常用基础工具包\"><a href=\"#CentOS7要安装的企业运维常用基础工具包\" class=\"headerlink\" title=\"CentOS7要安装的企业运维常用基础工具包\"></a>CentOS7要安装的企业运维常用基础工具包</h3><pre><code>yum install psmisc net-tools bash-completion vim-enhanced -y \n</code></pre>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">psmisc\t<span class=\"comment\">#含有killall、pstree等命令</span></span><br><span class=\"line\">net-tools\t<span class=\"comment\">#含有netstat、ifconfig、route、arp等命令</span></span><br><span class=\"line\">bash-completion </span><br><span class=\"line\">bash-completion-extras\t<span class=\"comment\">##tab 补全功能工具包</span></span><br><span class=\"line\">vim-enhanced\t<span class=\"comment\">#vim编辑器工具包</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS7升级内核\"><a href=\"#CentOS7升级内核\" class=\"headerlink\" title=\"CentOS7升级内核\"></a>CentOS7升级内核</h3><p>1）更新yum源仓库:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class=\"line\">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>2）查看可用的内核包：<br><code>yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot;   list available</code></p>\n<p>3）安装最新版本内核</p>\n<p><code>yum --enablerepo=elrepo-kernel  install kernel-ml</code></p>\n<p>4）查看系统上的所有可用内核</p>\n<p><code>awk -F \\&#39; &#39;$1==&quot;menuentry &quot;&#123;print i++ &quot; : &quot; $2&#125;&#39; /etc/grub2.cfg</code></p>\n<p>5）设置新的内核为grub2的默认版本：</p>\n<p><code>grub2-set-default 0</code></p>\n<p>6）生成 grub 配置文件并重启：</p>\n<p><code>grub2-mkconfig -o /boot/grub2/grub.cfg</code></p>\n<p>7）重新启动服务器：<code>reboot</code></p>\n<p>8）查看内核版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@<span class=\"built_in\">test</span> ~]<span class=\"comment\"># uname -r</span></span><br><span class=\"line\">5.7.6-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gcc升级\"><a href=\"#gcc升级\" class=\"headerlink\" title=\"gcc升级\"></a>gcc升级</h3><p>1）需要将gcc升级到8.1.0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@pincheng ~]<span class=\"comment\"># cd /usr/local/src/</span></span><br><span class=\"line\">[root@pincheng src]<span class=\"comment\"># wget http://ftp.gnu.org/gnu/gcc/gcc-8.1.0/gcc-8.1.0.tar.gz</span></span><br><span class=\"line\">[root@pincheng src]<span class=\"comment\"># tar xf gcc-8.1.0.tar.gz</span></span><br><span class=\"line\">[root@pincheng src]<span class=\"comment\"># cd gcc-8.1.0/</span></span><br></pre></td></tr></table></figure>\n\n<p>2）运行自带脚本，完成下载、配置、安装依赖库，可以节约我们大量的时间和精力</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@pincheng gcc-8.1.0]<span class=\"comment\"># ./contrib/download_prerequisites </span></span><br></pre></td></tr></table></figure>\n\n<p>3)建立一个目录供编译出的文件存放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@pincheng gcc-8.1.0]<span class=\"comment\"># mkdir gcc-build-8.1.0</span></span><br><span class=\"line\">[root@pincheng gcc-8.1.0]<span class=\"comment\"># cd gcc-build-8.1.0</span></span><br></pre></td></tr></table></figure>\n<p>4）生成makefile文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@pincheng gcc-build-8.1.0]<span class=\"comment\"># ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib</span></span><br></pre></td></tr></table></figure>\n<p>5）编译（很耗时，-j4对多核处理器的优化）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@pincheng gcc-build-8.1.0]<span class=\"comment\"># make -j4 &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>\n<p>6）验证是否成功，如果还是显示原来的版本，则需要重启系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@pincheng ~]<span class=\"comment\"># gcc -v</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"补充安装包组\"><a href=\"#补充安装包组\" class=\"headerlink\" title=\"补充安装包组\"></a>补充安装包组</h2><p>mini安装时，应当选择四个包组分别是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum group install <span class=\"string\">&quot;Compatibility&quot;</span> <span class=\"string\">&quot;Base&quot;</span> <span class=\"string\">&quot;Development tools&quot;</span></span><br><span class=\"line\">yum group install <span class=\"string\">&quot;debuging Tools&quot;</span> <span class=\"string\">&quot;Dial-up Networking Support&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># yum groups mark convert </span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># yum grouplist        #&lt;==查看所有包组名称，包括已安装的和未安装的</span></span><br><span class=\"line\">Available Environment Groups:<span class=\"comment\">#可用的包组</span></span><br><span class=\"line\">   Minimal Install</span><br><span class=\"line\">   Compute Node</span><br><span class=\"line\">   Infrastructure Server</span><br><span class=\"line\">   File and Print Server</span><br><span class=\"line\">   Cinnamon Desktop</span><br><span class=\"line\">   MATE Desktop</span><br><span class=\"line\">   Basic Web Server</span><br><span class=\"line\">   Virtualization Host</span><br><span class=\"line\">   Server with GUI</span><br><span class=\"line\">   GNOME Desktop</span><br><span class=\"line\">   KDE Plasma Workspaces</span><br><span class=\"line\">   Development and Creative Workstation</span><br><span class=\"line\">Installed Groups:<span class=\"comment\">#已安装的包组</span></span><br><span class=\"line\">   Development Tools</span><br><span class=\"line\">   Legacy UNIX Compatibility</span><br><span class=\"line\">   Milkymist</span><br><span class=\"line\">   Security Tools</span><br><span class=\"line\">   System Administration Tools</span><br></pre></td></tr></table></figure>\n<p><strong>查看如果系统未安装或是忘记安装这些组包，须完善。</strong></p>\n<h2 id=\"集群优化\"><a href=\"#集群优化\" class=\"headerlink\" title=\"集群优化\"></a>集群优化</h2><h3 id=\"地址规划\"><a href=\"#地址规划\" class=\"headerlink\" title=\"地址规划\"></a>地址规划</h3><p><img src=\"/images/img-7.png\" alt=\"ip规划\"></p>\n<h3 id=\"目录规划\"><a href=\"#目录规划\" class=\"headerlink\" title=\"目录规划\"></a>目录规划</h3><p><img src=\"/images/img-8.png\" alt=\"dir\"></p>\n<p><strong>统一环境：</strong></p>\n<ul>\n<li>系统的基础优化</li>\n<li>修改主机名ip地址</li>\n<li>主机名能解析</li>\n</ul>\n<h3 id=\"系统基础优化：\"><a href=\"#系统基础优化：\" class=\"headerlink\" title=\"系统基础优化：\"></a>系统基础优化：</h3><h4 id=\"修改提示符颜色\"><a href=\"#修改提示符颜色\" class=\"headerlink\" title=\"修改提示符颜色\"></a>修改提示符颜色</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@s01 ~]$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;PS1=&#x27;[\\[\\e[34;1m\\]\\u@\\[\\e[0m\\]\\[\\e[32;1m\\]\\H\\[\\e[0m\\]\\[\\e[31;1m\\] \\w\\[\\e[0m\\]]\\$ &#x27;&quot;</span> &gt;&gt; /etc/bashrc</span><br><span class=\"line\">. /etc/bashrc</span><br></pre></td></tr></table></figure>\n<h4 id=\"规范目录\"><a href=\"#规范目录\" class=\"headerlink\" title=\"规范目录\"></a>规范目录</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /server/tools</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /server/scripts</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置所有主机域名hosts解析\"><a href=\"#配置所有主机域名hosts解析\" class=\"headerlink\" title=\"配置所有主机域名hosts解析\"></a>配置所有主机域名hosts解析</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/hosts&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4</span></span><br><span class=\"line\"><span class=\"string\">::1 localhost localhost.localdomain localhost6 localhost6.localdomain6</span></span><br><span class=\"line\"><span class=\"string\">172.16.1.5 lb01</span></span><br><span class=\"line\"><span class=\"string\">172.16.1.6 lb02</span></span><br><span class=\"line\"><span class=\"string\">172.16.1.7 web01</span></span><br><span class=\"line\"><span class=\"string\">172.16.1.8 web02</span></span><br><span class=\"line\"><span class=\"string\">172.16.1.9 web03</span></span><br><span class=\"line\"><span class=\"string\">172.16.1.31 nfs01</span></span><br><span class=\"line\"><span class=\"string\">172.16.1.41 backup</span></span><br><span class=\"line\"><span class=\"string\">172.16.1.51 db01 db01.etiantian.org</span></span><br><span class=\"line\"><span class=\"string\">172.16.1.61 m01</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更改主机名\"><a href=\"#更改主机名\" class=\"headerlink\" title=\"更改主机名\"></a>更改主机名</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname 主机名</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新yum源\"><a href=\"#更新yum源\" class=\"headerlink\" title=\"更新yum源\"></a>更新yum源</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -s -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">curl -s -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo <span class=\"comment\">#epel源</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"关闭SELinux\"><a href=\"#关闭SELinux\" class=\"headerlink\" title=\"关闭SELinux\"></a>关闭SELinux</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s#SELINUX=.*#SELINUX=disabled#g&#x27;</span> /etc/selinux/config</span><br><span class=\"line\">grep SELINUX=disabled /etc/selinux/config </span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">getenforce</span><br></pre></td></tr></table></figure>\n<h4 id=\"关闭firewalld防火墙\"><a href=\"#关闭firewalld防火墙\" class=\"headerlink\" title=\"关闭firewalld防火墙\"></a>关闭firewalld防火墙</h4><pre><code>PS:有外网的服务器要开，纯内网服务器可以关闭。\n</code></pre>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">systemctl status firewalld</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加普通用户并提权\"><a href=\"#添加普通用户并提权\" class=\"headerlink\" title=\"添加普通用户并提权\"></a>添加普通用户并提权</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradd felix</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 591740|passwd --stdin felix  </span><br><span class=\"line\">\\<span class=\"built_in\">cp</span> /etc/sudoers /etc/sudoers.ori</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;felix  ALL=(ALL) NOPASSWD: ALL &quot;</span> &gt;&gt;/etc/sudoers</span><br><span class=\"line\"><span class=\"built_in\">tail</span> -1 /etc/sudoers</span><br><span class=\"line\">visudo -c</span><br></pre></td></tr></table></figure>\n<h4 id=\"更改字符集\"><a href=\"#更改字符集\" class=\"headerlink\" title=\"更改字符集\"></a>更改字符集</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /etc/locale.conf&#123;,.ori&#125;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;LANG=&quot;zh_CN.UTF-8&quot;&#x27;</span> &gt;/etc/locale.conf   或者  localectl set-locale LANG=<span class=\"string\">&quot;zh_CN.UTF-8&quot;</span></span><br><span class=\"line\">. /etc/locale.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$LANG</span></span><br><span class=\"line\">zh_CN.UTF-8</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/locale.conf.ori </span><br><span class=\"line\">LANG=<span class=\"string\">&quot;en_US.UTF-8&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"时间同步\"><a href=\"#时间同步\" class=\"headerlink\" title=\"时间同步\"></a>时间同步</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install ntpdate -y</span><br><span class=\"line\">/usr/sbin/ntpdate ntp3.aliyun.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;#crond-id-001:time sync by oldboy&#x27;</span> &gt;&gt;/var/spool/cron/root</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;*/5 * * * * /usr/sbin/ntpdate ntp3.aliyun.com &gt;/dev/null 2&gt;&amp;1&quot;</span>&gt;&gt;/var/spool/cron/root</span><br><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure>\n<h4 id=\"提升命令行操作安全性（可选优化）\"><a href=\"#提升命令行操作安全性（可选优化）\" class=\"headerlink\" title=\"提升命令行操作安全性（可选优化）\"></a>提升命令行操作安全性（可选优化）</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提升命令行安全（可选配置）</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export TMOUT=300&#x27;</span> &gt;&gt;/etc/profile  <span class=\"comment\">#&lt;==会话超时时间300s</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export HISTSIZE=5&#x27;</span> &gt;&gt;/etc/profile  <span class=\"comment\">#&lt;==只保留5个历史命令</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export HISTFILESIZE=5&#x27;</span> &gt;&gt;/etc/profile   <span class=\"comment\">#&lt;==~/.bash_history 只保留五个</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -3 /etc/profile</span><br><span class=\"line\">. /etc/profile</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件描述符\"><a href=\"#文件描述符\" class=\"headerlink\" title=\"文件描述符\"></a>文件描述符</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">一般情况下，一台服务器被访问时，会启用很多的程序，而启动每一个程序的进程都会占用文件服务器描述符的大小，因此有时需要加大文件描述符的大小，从而不影响到程序的启动。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;*               -       nofile          65535 &#x27;</span> &gt;&gt;/etc/security/limits.conf </span><br><span class=\"line\"><span class=\"built_in\">tail</span> -1 /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -SHn   65535   <span class=\"comment\">#&lt;==临时修改文件描述符大小 </span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -n        <span class=\"comment\">#&lt;==命令方式查看配置结果</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"内核优化\"><a href=\"#内核优化\" class=\"headerlink\" title=\"内核优化\"></a>内核优化</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt;/etc/sysctl.conf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_fin_timeout = 2</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_tw_reuse = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_tw_recycle = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_syncookies = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_keepalive_time = 600</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_local_port_range = 4000    65000</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_max_tw_buckets = 36000</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.route.gc_timeout = 100</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_syn_retries = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_synack_retries = 1</span></span><br><span class=\"line\"><span class=\"string\">net.core.somaxconn = 16384</span></span><br><span class=\"line\"><span class=\"string\">net.core.netdev_max_backlog = 16384</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_max_orphans = 16384</span></span><br><span class=\"line\"><span class=\"string\">#以下参数是对iptables防火墙的优化，防火墙不开会提示，可以忽略不理。</span></span><br><span class=\"line\"><span class=\"string\">net.nf_conntrack_max = 25000000</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_max = 25000000</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_tcp_timeout_established = 180</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120</span></span><br><span class=\"line\"><span class=\"string\">net.core.wmem_default = 8388608</span></span><br><span class=\"line\"><span class=\"string\">net.core.rmem_default = 8388608</span></span><br><span class=\"line\"><span class=\"string\">net.core.wmem_max = 16777216</span></span><br><span class=\"line\"><span class=\"string\">net.core.rmem_max = 16777216</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<h4 id=\"基础优化操作项：优化SSH远程连接效率\"><a href=\"#基础优化操作项：优化SSH远程连接效率\" class=\"headerlink\" title=\"基础优化操作项：优化SSH远程连接效率\"></a>基础优化操作项：优化SSH远程连接效率</h4><ul>\n<li><strong>禁止root远程连接</strong><br></li>\n<li><strong>修改默认22端口，改为52113</strong><br></li>\n<li><strong>监听内网服务器IP</strong><br><br><code>\\cp /etc/ssh/sshd_config&#123;..ori&#125;</code>#备份<br><br><code>sed -i -e &quot;17s/.*/Port 52113/g&quot;/etc/ssh/sshd_config</code>#说明：修改ssh服务监听的默认22端口，使用自定义指定的监听端口进行连接<br><br><code>sed -i -e &quot;19s/.*/ListenAddress 172.16.1.41/g&quot;/etc/ssh/sshd_config</code>#说明：修改ssh服务监听的默认ip地址，默认为0.0.0.0全部监听，可以自定义指定监听内网ip地址<br><br><code>sed -i -e &quot;38s/.*/PermitRootLogin no/g&quot;/etc/ssh/sshd_config</code>#关闭ssh登录root用户权限，提升系统安全性<br><br><code>sed -i -e &quot;64s/.*/PermitEmptyPasswords no/g&quot;/etc/ssh/sshd_config</code>#说明：禁止空密码用户ssh连接登录系统</li>\n</ul>\n<p><strong>#如果是CentOS6还要修改ssh配置，防止连接速度慢优化</strong><br><br><strong>既把<code>UseDNS yes</code>改为<code>UseDNS no</code>，把<code>GSSAPIAuthentication yes</code> 改为<code>GSSAPIAuthentication no</code>经过检查发现CentOS7.6已经默认都改好了。</strong></p>\n<p><strong>提别说明：以上均采用sed替换方式修改ssh服务配置文件，替换时指定的行号会根据不同版本的系统有变化，最好以工作中常用的系统为主，修改相应行号。</strong></p>\n<h4 id=\"扩展优化操作项-修改yum-conf文件配置信息\"><a href=\"#扩展优化操作项-修改yum-conf文件配置信息\" class=\"headerlink\" title=\"扩展优化操作项-修改yum.conf文件配置信息\"></a>扩展优化操作项-修改yum.conf文件配置信息</h4><p><strong>保留yum安装的软件包</strong></p>\n<p><strong>将<code>/etc/yum.conf</code>中的<code>keepcache=0</code>改为<code>keepcache=1</code>，为日后一键安装网站集群留好rpm及依赖工具包。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@backup ~]<span class=\"comment\"># vim /etc/yum.conf </span></span><br><span class=\"line\"></span><br><span class=\"line\">[main]</span><br><span class=\"line\">cachedir=/var/cache/yum/<span class=\"variable\">$basearch</span>/<span class=\"variable\">$releasever</span></span><br><span class=\"line\">keepcache=1     <span class=\"comment\">#&lt;===</span></span><br><span class=\"line\">debuglevel=2</span><br><span class=\"line\">logfile=/var/log/yum.log</span><br><span class=\"line\">exactarch=1</span><br><span class=\"line\">obsoletes=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">plugins=1</span><br><span class=\"line\">installonly_limit=5</span><br><span class=\"line\">bugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&amp;ref=http://bugs.centos.org/bug_report_page.php?category=yum</span><br><span class=\"line\">distroverpkg=centos-release</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  This is the default, if you make this bigger yum won&#x27;t see if the metadata</span></span><br><span class=\"line\"><span class=\"comment\"># is newer on the remote and so you&#x27;ll &quot;gain&quot; the bandwidth of not having to</span></span><br><span class=\"line\"><span class=\"comment\"># download the new metadata and &quot;pay&quot; for it by yum not having correct</span></span><br><span class=\"line\"><span class=\"comment\"># information.</span></span><br><span class=\"line\"><span class=\"comment\">#  It is esp. important, to have correct metadata, for distributions like</span></span><br><span class=\"line\"><span class=\"comment\"># Fedora which don&#x27;t keep old packages around. If you don&#x27;t like this checking</span></span><br><span class=\"line\"><span class=\"comment\"># interupting your command line usage, it&#x27;s much better to have something</span></span><br><span class=\"line\"><span class=\"comment\"># manually check the metadata once an hour (yum-updatesd will do this).</span></span><br><span class=\"line\"><span class=\"comment\"># metadata_expire=90m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PUT YOUR REPOS HERE OR IN separate files named file.repo</span></span><br><span class=\"line\"><span class=\"comment\"># in /etc/yum.repos.d</span></span><br></pre></td></tr></table></figure>\n<p><strong>软件包保存目录：<code>/var/cache/yum/</code></strong></p>\n<h4 id=\"精简并保留必要的开机自启动服务\"><a href=\"#精简并保留必要的开机自启动服务\" class=\"headerlink\" title=\"精简并保留必要的开机自启动服务\"></a>精简并保留必要的开机自启动服务</h4><p><strong>（如crond、sshd、network、rsyslog、sysstat、NetworkManager、irqbalance）。</strong><br><br><code>systemctl list-unit-files | grep enabled</code> &lt;==查看开机自启服务<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl list-unit-files |grep <span class=\"built_in\">enable</span>|egrep -v <span class=\"string\">&quot;sshd.service|crond.service|sysstat|rsyslog|^NetworkManager.service|irqbalance.service&quot;</span>|awk <span class=\"string\">&#x27;&#123;print &quot;systemctl disable&quot;,$1&#125;&#x27;</span>|bash</span><br></pre></td></tr></table></figure>\n\n<p><strong>简单解析（以管道为一组）：</strong><br></p>\n<ul>\n<li><strong>管道1：列出所有服务</strong><br></li>\n<li><strong>管道2：过滤出开机自启动的服务</strong><br></li>\n<li><strong>管道3：egrep -v 取反，将<br><code>sshd.service|crond.service|sysstat|rsyslog|^NetworkManager.service|irqbalance.service</code> 保留项排除</strong><br></li>\n<li><strong>管道4：利用awk 不指定分隔符 默认空格，打印出systemctl disable 接$1 即 服务名</strong><br></li>\n<li><strong>管道5：将组合出的数据流（命令）交给bash执行</strong><br></li>\n</ul>\n<p><strong>结果：</strong><br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@s01 ~]<span class=\"comment\"># netstat -lntup</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      705/sshd            </span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      705/sshd</span><br></pre></td></tr></table></figure>\n<h4 id=\"锁定关键系统文件\"><a href=\"#锁定关键系统文件\" class=\"headerlink\" title=\"锁定关键系统文件\"></a>锁定关键系统文件</h4><p><strong>如<code>/etc/passwd、/etc/shadow、/etc/group、/etc/gshadow、/etc/inittab</code>，处理以上内容后把chattr、lsattr改名为felix，转移走，这样就安全多了。</strong><br></p>\n<h4 id=\"调整用户登录提示信息\"><a href=\"#调整用户登录提示信息\" class=\"headerlink\" title=\"调整用户登录提示信息\"></a>调整用户登录提示信息</h4><p><code>/etc/motd、</code>清空<code>/etc/issue、/etc/issue.net</code>，<strong>去除系统及内核版本登录前的屏幕显示。</strong><br></p>\n<h4 id=\"清除多余的系统虚拟用户账号\"><a href=\"#清除多余的系统虚拟用户账号\" class=\"headerlink\" title=\"清除多余的系统虚拟用户账号\"></a>清除多余的系统虚拟用户账号</h4><h4 id=\"禁止主机被ping（内核参数）\"><a href=\"#禁止主机被ping（内核参数）\" class=\"headerlink\" title=\"禁止主机被ping（内核参数）\"></a>禁止主机被ping（内核参数）</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv4.icmp_echo_ignore_all=1&quot;</span> &gt;&gt; /etc/sysctl.conf </span><br><span class=\"line\">sysctl -p </span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["OPS","优化"]},{"title":"各公版系统修改锁定DNS","url":"/forward/d4ac701.html","content":"<h2 id=\"Ubuntu系列\"><a href=\"#Ubuntu系列\" class=\"headerlink\" title=\"Ubuntu系列\"></a>Ubuntu系列</h2><h3 id=\"Ubuntu-16-x\"><a href=\"#Ubuntu-16-x\" class=\"headerlink\" title=\"Ubuntu 16.x\"></a>Ubuntu 16.x</h3><p>1）编辑或创建 <code>/etc/dhcp/dhclient.conf</code>文件。</p>\n<p>注意：您必须拥有根用户权限才能编辑此文件。您可以使用<code>sudo -i</code>成为根用户，或者使用 sudo 执行所有命令。</p>\n<p>2）将 supersede 命令添加到文件以覆盖 domain-name-servers。:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># /etc/dhcp/dhclient.conf 文件尾部追加</span><br><span class=\"line\">supersede domain-name-servers 172.22.xxx.xxx,10.xx.xx.202,10.xx.xx.244;</span><br><span class=\"line\">supersede domain-name &quot;xxx.bilibili.xxx&quot;;</span><br></pre></td></tr></table></figure>\n<p>在此修改之后，resolv.conf 文件将在实例重启时或重启网络时更新，以仅包含您在 dhclient 文件中指定的 DNS 服务器。有关 supersede 命令的更多信息，请参阅 Linux 手册页上的 <a href=\"https://linux.die.net/man/5/dhclient.conf\">dhclient.conf(5)</a>。</p>\n<p>3）重启实例或网络。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart networking</span><br></pre></td></tr></table></figure>\n<h3 id=\"Ubuntu-18-x-22\"><a href=\"#Ubuntu-18-x-22\" class=\"headerlink\" title=\"Ubuntu 18.x ~ 22\"></a>Ubuntu 18.x ~ 22</h3><p>默认情况下，在 Ubuntu 18.x 上，由 <a href=\"http://netplan.io/\">netplan.io</a> 软件包处理网络接口配置，且由启用系统解析的服务使用存根解析程序处理 DNS 查询。存根解析程序 IP 位于 <code>/etc/resolv.conf</code>。</p>\n<p>在这些发行版中DNS被systemd-resolved模块接管。原来配置DNS的文件 <code>/etc/resolv.conf</code> 已经变成了指向systemd-resolve服务在本地侦听的端口 <code>127.0.0.53:53</code>。这个文件本身标注了不要修改，因为它已经变成了软连接，指向了systemd-resolve控制的配置文件。且修改完重启会被DHCP的配置覆盖，所以不能手动修改<br><img src=\"/images/pasted-281.png\" alt=\"ubuntudns\"><br>在18～22发行版中，所有的dns解析请求都会被劫持到本地127的这个localdns。再由localdns向上游云厂商提供的dns请求解析。<br>在不改的情况下，<code>127.0.0.53:53</code>的上游服务器是由云厂商dhcp服务器统一分配。这里100.100.2.x由阿里云分配而来<br><img src=\"/images/pasted-282.png\" alt=\"ubuntudns\"><br>运行以下步骤以覆盖厂商 DNS 服务器值：</p>\n<p>1）Netplan 通常将配置文件存储在 /etc/netplan 目录中。创建名为 /etc/netplan/dns.yaml 的文件，然后通过以下行填充此文件。请务必将占位符 DNS 服务器 IP 地址替换为首选地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF &gt; /etc/netplan/dns.yaml</span></span><br><span class=\"line\"><span class=\"string\">network:</span></span><br><span class=\"line\"><span class=\"string\">    version: 2</span></span><br><span class=\"line\"><span class=\"string\">    ethernets:</span></span><br><span class=\"line\"><span class=\"string\">        eth0:        </span></span><br><span class=\"line\"><span class=\"string\">            nameservers:</span></span><br><span class=\"line\"><span class=\"string\">                    search: [host.bilibili.co]</span></span><br><span class=\"line\"><span class=\"string\">                    addresses: [172.22.xxx.xx, 10.66.xxx.xxx, 10.68.xxx.xxx]</span></span><br><span class=\"line\"><span class=\"string\">            dhcp4-overrides:</span></span><br><span class=\"line\"><span class=\"string\">                    use-dns: false</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>在进行这些更改后，仍然可以在 /etc/resolv.conf 中看到类似127.0.0.53。这是正常的。存根解析程序 IP 对于您的操作系统来说是本地的，在后台中，存根解析程序将使用您在前述 dns.yaml 文件中指定的 DNS 服务器。</p>\n<p>2）重启服务器或运行 netplan apply 使生效</p>\n<p><img src=\"/images/pasted-283.png\" alt=\"ubuntudns\"><br>符合预期</p>\n<p>ubuntu 22验证方法<br><img src=\"/images/pasted-284.png\" alt=\"ubuntudns\"></p>\n<h2 id=\"Debian系列-8-11\"><a href=\"#Debian系列-8-11\" class=\"headerlink\" title=\"Debian系列 8~11\"></a>Debian系列 8~11</h2><p>debian的 <code>/etc/resolv.conf</code>配置文件中 也提示我们不要直接修改这个文件。<br><img src=\"/images/pasted-285.png\" alt=\"debiandns\"><br>它是一个软链接，指向 <code>/run/resolvconf</code> 目录下的“真实文件”。该文件是在系统启动时生成的；同时也是注释告诉我们不要直接修改该文件的原因。</p>\n<p>经过了解，在网卡启动或机器启动时。系统中的dhclient程序即dhcp客户端。会向厂商的虚拟交换机发送dhcp请求获得网卡的 ip 网关 dns 等信息，并覆盖<code>/etc/resolvconf/run/resolv.conf</code> 文件。大致流程如下图：<br><img src=\"/images/pasted-286.png\" alt=\"debiandns\"><br>1）这里可以修改dhclient配置文件达到修改dns的目的，运行以下步骤以覆盖厂商 DNS 服务器值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;supersede domain-name-servers 172.22.xxx.xxx,10.66.xxx.xxx,10.68.xxx.xxx;&quot;</span> &gt;&gt; /etc/dhcp/dhclient.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;supersede domain-name &quot;xxx.bilibili.xxx&quot;;&#x27;</span> &gt;&gt; /etc/dhcp/dhclient.conf</span><br></pre></td></tr></table></figure>\n<p>2）重启网络服务或重启服务器使生效<br><img src=\"/images/pasted-287.png\" alt=\"debiandns\"></p>\n<h2 id=\"CentOS-7\"><a href=\"#CentOS-7\" class=\"headerlink\" title=\"CentOS 7\"></a>CentOS 7</h2><p>默认情况下，由 NetworkManager 服务管理 resolv.conf 文件。该服务会通过 DHCP 提供的 DNS 服务器填充此文件。</p>\n<p><strong>方案1（推荐）:</strong> 这里简单操作可以使用如下步骤，写入配置并锁定文件实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/resolv.conf</span><br><span class=\"line\">nameserver 172.22.xxx.xxx</span><br><span class=\"line\">nameserver 10.66.xxx.xxx</span><br><span class=\"line\">nameserver 10.68.xxx.xxx</span><br><span class=\"line\"> </span><br><span class=\"line\">chattr +i /etc/dhcp/dhclient.conf</span><br><span class=\"line\">lsattr /etc/dhcp/dhclient.conf</span><br></pre></td></tr></table></figure>\n\n<p><strong>方案2:</strong> 参照debian方案实现自定义dns</p>\n<p>还需：在每个接口的配置文件 (<code>/etc/sysconfig/network-scripts/ifcfg-*</code>) 中将 PEERDNS 参数设置为 yes。</p>\n<p>*<em>方案3:</em> 修改NetworkManager配置，阻止其接管 resolv.conf 文件</p>\n<p>1）使用以下内容创建 <code>/etc/NetworkManager/conf.d/disable-resolve.conf-managing.conf</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[main]</span><br><span class=\"line\">dns=none</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整理成脚本\"><a href=\"#整理成脚本\" class=\"headerlink\" title=\"整理成脚本\"></a>整理成脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 脚本支持Debian8～11 Ubuntu16～22 CentOS7 私有dns修改和配置锁定</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Netplan</span></span>()&#123;</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF &gt; /etc/netplan/dns.yaml</span></span><br><span class=\"line\"><span class=\"string\">network:</span></span><br><span class=\"line\"><span class=\"string\">    version: 2</span></span><br><span class=\"line\"><span class=\"string\">    ethernets:</span></span><br><span class=\"line\"><span class=\"string\">        eth0:        </span></span><br><span class=\"line\"><span class=\"string\">            nameservers:</span></span><br><span class=\"line\"><span class=\"string\">                    addresses: [172.22.xxx.xxx, 10.66.xxx.xxx, 10.68.xxx.xxx]</span></span><br><span class=\"line\"><span class=\"string\">            dhcp4-overrides:</span></span><br><span class=\"line\"><span class=\"string\">                    use-dns: false</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"built_in\">return</span> $?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Dhclient</span></span>()&#123;</span><br><span class=\"line\"><span class=\"comment\">#查找是否存在配置，不存在则写入</span></span><br><span class=\"line\">grep <span class=\"string\">&quot;bilibili.co&quot;</span> /etc/dhcp/dhclient.conf</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -eq 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;配置已存在&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span> &gt;&gt; /etc/dhcp/dhclient.conf &amp;&amp;\\ </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;supersede domain-name-servers 172.22.xxx.xxx,10.66.xxx.xxx,10.68.xxx.xxx;&quot;</span> &gt;&gt; /etc/dhcp/dhclient.conf &amp;&amp;\\</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;supersede domain-name &quot;host.bilibili.co&quot;;&#x27;</span> &gt;&gt; /etc/dhcp/dhclient.conf &amp;&amp;\\</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;dns写入成功&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">return</span> $?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Ubuntu</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">#如果系统版本大于等于18,那么执行netplan修改dns,</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ `<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$os_version</span> &gt;= 18&quot;</span> | bc` -eq 1 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;系统为<span class=\"variable\">$&#123;os&#125;</span>系统版本为<span class=\"variable\">$&#123;os_version&#125;</span>,即将修改配置netplan&quot;</span></span><br><span class=\"line\">        Netplan &amp;&amp; netplan apply &amp;&amp;\\</span><br><span class=\"line\">        chattr +i /etc/netplan/dns.yaml <span class=\"comment\">#锁定配置</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"comment\">#小于18版本的执行修改dhclient的配置文件</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;系统为<span class=\"variable\">$&#123;os&#125;</span>系统版本为<span class=\"variable\">$&#123;os_version&#125;</span>,即将修改dhclient配置文件&quot;</span></span><br><span class=\"line\">        Dhclient &amp;&amp; systemctl restart networking &amp;&amp;\\</span><br><span class=\"line\">        chattr +i /etc/dhcp/dhclient.conf <span class=\"comment\">#锁定配置</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Debian</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;系统为<span class=\"variable\">$os</span>,即将修改dhclient配置文件&quot;</span></span><br><span class=\"line\">        Dhclient &amp;&amp; systemctl restart networking &amp;&amp;\\</span><br><span class=\"line\">        chattr +i /etc/dhcp/dhclient.conf <span class=\"comment\">#锁定配置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Centos</span></span>()&#123;</span><br><span class=\"line\">\\<span class=\"built_in\">cp</span> /etc/resolv.conf&#123;,.bak&#125;</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/resolv.conf &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">nameserver 172.22.xxx.xxx</span></span><br><span class=\"line\"><span class=\"string\">nameserver 10.66.xxx.xxx</span></span><br><span class=\"line\"><span class=\"string\">nameserver 10.68.xxx.xxx</span></span><br><span class=\"line\"><span class=\"string\">options timeout:2 attempts:3 single-request-reopen</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;系统为<span class=\"variable\">$&#123;os&#125;</span>系统版本为<span class=\"variable\">$&#123;os_version&#125;</span>,即将修改/etc/resolv.conf&quot;</span></span><br><span class=\"line\">chattr +i /etc/resolv.conf <span class=\"comment\">#锁定配置</span></span><br><span class=\"line\"><span class=\"built_in\">return</span> $?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">    [ $(<span class=\"built_in\">id</span> -u) != <span class=\"string\">&quot;0&quot;</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请使用root身份执行&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    os=$(awk -F <span class=\"string\">&quot;[=\\&quot;]+&quot;</span> <span class=\"string\">&#x27;$1~/^ID$/&#123;print $2&#125;&#x27;</span> /etc/os-release)</span><br><span class=\"line\">    os_version=$(awk -F <span class=\"string\">&quot;[=\\&quot;]+&quot;</span> <span class=\"string\">&#x27;$1~/^VERSION_ID$/&#123;print $2&#125;&#x27;</span> /etc/os-release)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$os</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        centos)</span><br><span class=\"line\">        Centos</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        ubuntu)</span><br><span class=\"line\">        Ubuntu</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        debian)</span><br><span class=\"line\">        Debian</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["OPS","DNS"]},{"title":"Canal容器化&Kubernetes部署","url":"/forward/29b0e6a9.html","content":"<blockquote>\n<p>本文介绍Canal服务容器化+Kubernetes部署</p>\n</blockquote>\n<p>参考文档:</p>\n<ul>\n<li><a href=\"https://github.com/alibaba/canal\">https://github.com/alibaba/canal</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/81450\">https://github.com/kubernetes/kubernetes/issues/81450</a></li>\n<li><a href=\"https://hub.docker.com/r/canal/canal-server\">https://hub.docker.com/r/canal/canal-server</a></li>\n</ul>\n<h2 id=\"什么是Canal\"><a href=\"#什么是Canal\" class=\"headerlink\" title=\"什么是Canal\"></a>什么是Canal</h2><p>Canal 是阿里巴巴的一个开源项目，基于java实现，整体已经在很多大型的互联网项目生产环境中使用，包括阿里、美团等都有广泛的应用，是一个非常成熟的数据库同步方案，基础的使用只需要进行简单的配置即可。</p>\n<ul>\n<li>canal是通过模拟成为mysql 的slave的方式，监听mysql 的binlog日志来获取数据，binlog设置为row模式以后，不仅能获取到执行的每一个增删改的脚本，同时还能获取到修改前和修改后的数据。</li>\n</ul>\n<p>基于这个特性，canal就能高性能的获取到mysql数据数据的变更。简而言之就是做MySQL数据异构的。想具体了解可以参考<a href=\"https://github.com/alibaba/canal\">官方文档</a>这里不再赘述</p>\n<h2 id=\"Canal容器化\"><a href=\"#Canal容器化\" class=\"headerlink\" title=\"Canal容器化\"></a>Canal容器化</h2><p>通过查看官方的Dockerfile发现写的并不专业，镜像中存在很多冗余配置如Prometheus获取监控指标的客户端、服务可用性健康检查脚本并不纯粹，而且镜像前台启动是通过<code>tail -f /dev/null &amp;</code> 这个命令启动的。相当于吧容器当成虚拟机使用。这样做其实并不合理所以决定动手修改并用<a href=\"https://www.alpinelinux.org/downloads/\">Alpine</a>作为基础镜像重新打包</p>\n<p><img src=\"/images/pasted-151.png\" alt=\"upload successful\"></p>\n<p>官方镜像800M+，自己打包的镜像400M+</p>\n<p><img src=\"/images/pasted-156.png\" alt=\"canalimage\"></p>\n<p>修改1:入口启动脚本app.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/app/jdk1.8.0_181</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> /tmp/start.log</span><br><span class=\"line\">host=`hostname -i`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">start_canal</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;start canal ...&quot;</span></span><br><span class=\"line\">    managerAddress=`perl -le <span class=\"string\">&#x27;print $ENV&#123;&quot;canal.admin.manager&quot;&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -z <span class=\"string\">&quot;<span class=\"variable\">$managerAddress</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\"># canal_local.properties mode</span></span><br><span class=\"line\">        adminPort=`perl -le <span class=\"string\">&#x27;print $ENV&#123;&quot;canal.admin.port&quot;&#125;&#x27;</span>`</span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$adminPort</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">            adminPort=11110</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cd</span> /app/canal-server/bin/ &amp;&amp; bash restart.sh</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        metricsPort=`perl -le <span class=\"string\">&#x27;print $ENV&#123;&quot;canal.metrics.pull.port&quot;&#125;&#x27;</span>`</span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$metricsPort</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">            metricsPort=11112</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">        destination=`perl -le <span class=\"string\">&#x27;print $ENV&#123;&quot;canal.destinations&quot;&#125;&#x27;</span>`</span><br><span class=\"line\">        <span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$destination</span>&quot;</span> =~ <span class=\"string\">&#x27;,&#x27;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;multi destination:<span class=\"variable\">$destination</span> is not support&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">exit</span> 1;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$destination</span>&quot;</span> != <span class=\"string\">&quot;&quot;</span> ] &amp;&amp; [ <span class=\"string\">&quot;<span class=\"variable\">$destination</span>&quot;</span> != <span class=\"string\">&quot;example&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> [ -d /app/canal-server/conf/example ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">                    <span class=\"built_in\">mv</span> /app/canal-server/conf/example /app/canal-server/conf/<span class=\"variable\">$destination</span></span><br><span class=\"line\">                <span class=\"keyword\">fi</span></span><br><span class=\"line\">            <span class=\"keyword\">fi</span> </span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">cd</span> /app/canal-server/bin/ &amp;&amp; bash restart.sh</span><br><span class=\"line\">    <span class=\"keyword\">fi</span>  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">main</span></span> () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;==&gt; START STATUS&quot;</span></span><br><span class=\"line\">    start_canal</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n\n<p>修改2:canal启动脚本startup.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash </span></span><br><span class=\"line\"></span><br><span class=\"line\">current_path=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;`uname`&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    Linux)</span><br><span class=\"line\">\t\tbin_abs_path=$(<span class=\"built_in\">readlink</span> -f $(<span class=\"built_in\">dirname</span> <span class=\"variable\">$0</span>))</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t*)</span><br><span class=\"line\">\t\tbin_abs_path=`<span class=\"built_in\">cd</span> $(<span class=\"built_in\">dirname</span> <span class=\"variable\">$0</span>); <span class=\"built_in\">pwd</span>`</span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\">base=<span class=\"variable\">$&#123;bin_abs_path&#125;</span>/..</span><br><span class=\"line\">canal_conf=<span class=\"variable\">$base</span>/conf/canal.properties</span><br><span class=\"line\">canal_local_conf=<span class=\"variable\">$base</span>/conf/canal_local.properties</span><br><span class=\"line\">logback_configurationFile=<span class=\"variable\">$base</span>/conf/logback.xml</span><br><span class=\"line\"><span class=\"built_in\">export</span> LANG=en_US.UTF-8</span><br><span class=\"line\"><span class=\"built_in\">export</span> BASE=<span class=\"variable\">$base</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"variable\">$base</span>/bin/canal.pid ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;found canal.pid , Please run stop.sh first ,then startup.sh&quot;</span> 2&gt;&amp;2</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"variable\">$base</span>/logs/canal ] ; <span class=\"keyword\">then</span> </span><br><span class=\"line\">\t<span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$base</span>/logs/canal</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## set java path</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$JAVA</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">  JAVA=$(<span class=\"built_in\">which</span> java)</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">ALIBABA_JAVA=<span class=\"string\">&quot;/usr/alibaba/java/bin/java&quot;</span></span><br><span class=\"line\">TAOBAO_JAVA=<span class=\"string\">&quot;/opt/taobao/java/bin/java&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$JAVA</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -f <span class=\"variable\">$ALIBABA_JAVA</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">  \tJAVA=<span class=\"variable\">$ALIBABA_JAVA</span></span><br><span class=\"line\">  <span class=\"keyword\">elif</span> [ -f <span class=\"variable\">$TAOBAO_JAVA</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">  \tJAVA=<span class=\"variable\">$TAOBAO_JAVA</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  \t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Cannot find a Java JDK. Please set either set JAVA or put java (&gt;=1.5) in your PATH.&quot;</span> 2&gt;&amp;2</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">in</span></span><br><span class=\"line\">0 ) </span><br><span class=\"line\">\t;;</span><br><span class=\"line\">1 )\t</span><br><span class=\"line\">\tvar=$*</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$var</span>&quot;</span> = <span class=\"string\">&quot;local&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tcanal_conf=<span class=\"variable\">$canal_local_conf</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ -f <span class=\"variable\">$var</span> ] ; <span class=\"keyword\">then</span> </span><br><span class=\"line\">\t\t\tcanal_conf=<span class=\"variable\">$var</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;THE PARAMETER IS NOT CORRECT.PLEASE CHECK AGAIN.&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span>;;</span><br><span class=\"line\">2 )\t</span><br><span class=\"line\">\tvar=<span class=\"variable\">$1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$var</span>&quot;</span> = <span class=\"string\">&quot;local&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tcanal_conf=<span class=\"variable\">$canal_local_conf</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ -f <span class=\"variable\">$var</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\tcanal_conf=<span class=\"variable\">$var</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> = <span class=\"string\">&quot;debug&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t\tDEBUG_PORT=<span class=\"variable\">$2</span></span><br><span class=\"line\">\t\t\t\tDEBUG_SUSPEND=<span class=\"string\">&quot;n&quot;</span></span><br><span class=\"line\">\t\t\t\tJAVA_DEBUG_OPT=<span class=\"string\">&quot;-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=<span class=\"variable\">$DEBUG_PORT</span>,server=y,suspend=<span class=\"variable\">$DEBUG_SUSPEND</span>&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">     <span class=\"keyword\">fi</span>;;</span><br><span class=\"line\">* )</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;THE PARAMETERS MUST BE TWO OR LESS.PLEASE CHECK AGAIN.&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\">str=`file -L <span class=\"variable\">$JAVA</span> | grep 64-bit`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$str</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\">#\tJAVA_OPTS=&quot;-server -Xms2048m -Xmx3072m -Xmn1024m -XX:SurvivorRatio=2 -XX:PermSize=96m -XX:MaxPermSize=256m -Xss256k -XX:-UseAdaptiveSizePolicy -XX:MaxTenuringThreshold=15 -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:+HeapDumpOnOutOfMemoryError&quot;</span></span><br><span class=\"line\">                JAVA_OPTS=<span class=\"string\">&quot;-server -Xms1024m -Xmx2048m -Xmn1024m -XX:SurvivorRatio=2 -XX:PermSize=96m -XX:MaxPermSize=256m -Xss256k -XX:-UseAdaptiveSizePolicy -XX:MaxTenuringThreshold=15 -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:+HeapDumpOnOutOfMemoryError&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tJAVA_OPTS=<span class=\"string\">&quot;-server -Xms1024m -Xmx1024m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:MaxPermSize=128m &quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">JAVA_OPTS=<span class=\"string\">&quot; <span class=\"variable\">$JAVA_OPTS</span> -Djava.awt.headless=true -Djava.net.preferIPv4Stack=true -Dfile.encoding=UTF-8&quot;</span></span><br><span class=\"line\">CANAL_OPTS=<span class=\"string\">&quot;-DappName=otter-canal -Dlogback.configurationFile=<span class=\"variable\">$logback_configurationFile</span> -Dcanal.conf=<span class=\"variable\">$canal_conf</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -e <span class=\"variable\">$canal_conf</span> -a -e <span class=\"variable\">$logback_configurationFile</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span> </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$base</span>/lib/*;</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> CLASSPATH=<span class=\"variable\">$i</span>:<span class=\"string\">&quot;<span class=\"variable\">$CLASSPATH</span>&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br><span class=\"line\"> \tCLASSPATH=<span class=\"string\">&quot;<span class=\"variable\">$base</span>/conf:<span class=\"variable\">$CLASSPATH</span>&quot;</span>;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;cd to <span class=\"variable\">$bin_abs_path</span> for workaround relative path&quot;</span></span><br><span class=\"line\">  \t<span class=\"built_in\">cd</span> <span class=\"variable\">$bin_abs_path</span></span><br><span class=\"line\"> \t</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> LOG CONFIGURATION : <span class=\"variable\">$logback_configurationFile</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> canal conf : <span class=\"variable\">$canal_conf</span> </span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> CLASSPATH :<span class=\"variable\">$CLASSPATH</span></span><br><span class=\"line\">\t<span class=\"variable\">$JAVA</span> <span class=\"variable\">$JAVA_OPTS</span> <span class=\"variable\">$JAVA_DEBUG_OPT</span> <span class=\"variable\">$CANAL_OPTS</span> -classpath .:<span class=\"variable\">$CLASSPATH</span> com.alibaba.otter.canal.deployer.CanalLauncher</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$base</span>/bin/canal.pid </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;cd to <span class=\"variable\">$current_path</span> for continue&quot;</span></span><br><span class=\"line\">  \t<span class=\"built_in\">cd</span> <span class=\"variable\">$current_path</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;canal conf(&quot;</span><span class=\"variable\">$canal_conf</span><span class=\"string\">&quot;) OR log configration file(<span class=\"variable\">$logback_configurationFile</span>) is not exist,please create then first!&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>编写Dockefile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> registry.cn-shanghai.aliyuncs.com/wikifx/base:alpine-glibc-Shanghai</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> https://cakepanit.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk add --no-cache perl &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">    apk add --no-cache file &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">    apk add --no-cache bash &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"built_in\">chmod</span> +x /app/*.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  admin , 11111 canal , 11112 metrics</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">11110</span> <span class=\"number\">11111</span> <span class=\"number\">11112</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/app/app.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>构建并上传：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build . -t registry.cn-shanghai.aliyuncs.com/xxxx/base:canal-server-v1.1.5 -f Dockerfile</span><br><span class=\"line\"></span><br><span class=\"line\">docker push registry.cn-shanghai.aliyuncs.com/xxxx/base:canal-server-v1.1.5</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署至k8s\"><a href=\"#部署至k8s\" class=\"headerlink\" title=\"部署至k8s\"></a>部署至k8s</h2><p>这里将Canal-Client和刚打包好的Canal-Server启动到同一个pod中，Canal-Client为公司开发人员开发，处理自己业务逻辑的。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">bservices</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">canalconfig</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">bservices</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">canalconfig</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">canal.properties:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">    #################################################</span></span><br><span class=\"line\"><span class=\"string\">    ######### \t\tcommon argument\t\t#############</span></span><br><span class=\"line\"><span class=\"string\">    #################################################</span></span><br><span class=\"line\"><span class=\"string\">    # tcp bind ip</span></span><br><span class=\"line\"><span class=\"string\">    canal.ip =</span></span><br><span class=\"line\"><span class=\"string\">    # register ip to zookeeper</span></span><br><span class=\"line\"><span class=\"string\">    canal.register.ip =</span></span><br><span class=\"line\"><span class=\"string\">    canal.port = 11111</span></span><br><span class=\"line\"><span class=\"string\">    canal.metrics.pull.port = 11112</span></span><br><span class=\"line\"><span class=\"string\">    # canal instance user/passwd</span></span><br><span class=\"line\"><span class=\"string\">    # canal.user = canal</span></span><br><span class=\"line\"><span class=\"string\">    # canal.passwd = E3619321C1A937C46A0D8BD1DAC39F93B27D4458</span></span><br><span class=\"line\"><span class=\"string\"></span>    </span><br><span class=\"line\">    <span class=\"comment\"># canal admin config</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.admin.manager = 127.0.0.1:8089</span></span><br><span class=\"line\">    <span class=\"string\">canal.admin.port</span> <span class=\"string\">=</span> <span class=\"number\">11110</span></span><br><span class=\"line\">    <span class=\"string\">canal.admin.user</span> <span class=\"string\">=</span> <span class=\"string\">admin</span></span><br><span class=\"line\">    <span class=\"string\">canal.admin.passwd</span> <span class=\"string\">=</span> <span class=\"string\">4ACFE3202A5FF5CF467898FC58AAB1D615029441</span></span><br><span class=\"line\">    <span class=\"comment\"># admin auto register</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.admin.register.auto = true</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.admin.register.cluster =</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.admin.register.name =</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">canal.zkServers</span> <span class=\"string\">=</span> <span class=\"string\">zk-service.baseservice:2181</span></span><br><span class=\"line\">    <span class=\"comment\">#zookeeper存储位置点信息</span></span><br><span class=\"line\">    <span class=\"comment\"># flush data to zk</span></span><br><span class=\"line\">    <span class=\"string\">canal.zookeeper.flush.period</span> <span class=\"string\">=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"string\">canal.withoutNetty</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># tcp, kafka, rocketMQ, rabbitMQ</span></span><br><span class=\"line\">    <span class=\"string\">canal.serverMode</span> <span class=\"string\">=</span> <span class=\"string\">tcp</span></span><br><span class=\"line\">    <span class=\"comment\"># flush meta cursor/parse position to file</span></span><br><span class=\"line\">    <span class=\"string\">canal.file.data.dir</span> <span class=\"string\">=</span> <span class=\"string\">$&#123;canal.conf.dir&#125;</span></span><br><span class=\"line\">    <span class=\"string\">canal.file.flush.period</span> <span class=\"string\">=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"comment\">## memory store RingBuffer size, should be Math.pow(2,n)</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.memory.buffer.size</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"comment\">## memory store RingBuffer used memory unit size , default 1kb</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.memory.buffer.memunit</span> <span class=\"string\">=</span> <span class=\"number\">1024</span> </span><br><span class=\"line\">    <span class=\"comment\">## meory store gets mode used MEMSIZE or ITEMSIZE</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.memory.batch.mode</span> <span class=\"string\">=</span> <span class=\"string\">MEMSIZE</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.memory.rawEntry</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">## detecing config</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.detecting.enable</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate key update x=now()</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.detecting.sql</span> <span class=\"string\">=</span> <span class=\"string\">select</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.detecting.interval.time</span> <span class=\"string\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.detecting.retry.threshold</span> <span class=\"string\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.detecting.heartbeatHaEnable</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># support maximum transaction size, more than the size of the transaction will be cut into multiple transactions delivery</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.transaction.size</span> <span class=\"string\">=</span>  <span class=\"number\">1024</span></span><br><span class=\"line\">    <span class=\"comment\"># mysql fallback connected to new master should fallback times</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.fallbackIntervalInSeconds</span> <span class=\"string\">=</span> <span class=\"number\">60</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># network config</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.network.receiveBufferSize</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.network.sendBufferSize</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.network.soTimeout</span> <span class=\"string\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># binlog filter config</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.druid.ddl</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.query.dcl</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.query.dml</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.query.ddl</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.table.error</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.rows</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.transaction.entry</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.dml.insert</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.dml.update</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.dml.delete</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># binlog format/image check</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.binlog.format</span> <span class=\"string\">=</span> <span class=\"string\">ROW,STATEMENT,MIXED</span> </span><br><span class=\"line\">    <span class=\"string\">canal.instance.binlog.image</span> <span class=\"string\">=</span> <span class=\"string\">FULL,MINIMAL,NOBLOB</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># binlog ddl isolation</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.get.ddl.isolation</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># parallel parser config</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.parser.parallel</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">## concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.parser.parallelThreadSize = 16</span></span><br><span class=\"line\">    <span class=\"comment\">## disruptor ringbuffer size, must be power of 2</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.parser.parallelBufferSize</span> <span class=\"string\">=</span> <span class=\"number\">256</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># table meta tsdb info</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.enable</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.dir</span> <span class=\"string\">=</span> <span class=\"string\">$&#123;canal.file.data.dir:../conf&#125;/$&#123;canal.instance.destination:&#125;</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.url</span> <span class=\"string\">=</span> <span class=\"string\">jdbc:h2:$&#123;canal.instance.tsdb.dir&#125;/h2;CACHE_SIZE=1000;MODE=MYSQL;</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.dbUsername</span> <span class=\"string\">=</span> <span class=\"string\">canal</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.dbPassword</span> <span class=\"string\">=</span> <span class=\"string\">canal</span></span><br><span class=\"line\">    <span class=\"comment\"># dump snapshot interval, default 24 hour</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.snapshot.interval</span> <span class=\"string\">=</span> <span class=\"number\">24</span></span><br><span class=\"line\">    <span class=\"comment\"># purge snapshot expire , default 360 hour(15 days)</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.snapshot.expire</span> <span class=\"string\">=</span> <span class=\"number\">360</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#################################################</span></span><br><span class=\"line\">    <span class=\"comment\">######### \t\tdestinations\t\t#############</span></span><br><span class=\"line\">    <span class=\"comment\">#################################################</span></span><br><span class=\"line\">    <span class=\"string\">canal.destinations</span> <span class=\"string\">=</span> <span class=\"string\">example</span></span><br><span class=\"line\">    <span class=\"comment\"># conf root dir</span></span><br><span class=\"line\">    <span class=\"string\">canal.conf.dir</span> <span class=\"string\">=</span> <span class=\"string\">../conf</span></span><br><span class=\"line\">    <span class=\"comment\"># auto scan instance dir add/remove and start/stop instance</span></span><br><span class=\"line\">    <span class=\"string\">canal.auto.scan</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"string\">canal.auto.scan.interval</span> <span class=\"string\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"comment\"># set this value to &#x27;true&#x27; means that when binlog pos not found, skip to latest.</span></span><br><span class=\"line\">    <span class=\"comment\"># WARN: pls keep &#x27;false&#x27; in production env, or if you know what you want.</span></span><br><span class=\"line\">    <span class=\"string\">canal.auto.reset.latest.pos.mode</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.spring.xml</span> <span class=\"string\">=</span> <span class=\"string\">classpath:spring/tsdb/h2-tsdb.xml</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.tsdb.spring.xml = classpath:spring/tsdb/mysql-tsdb.xml</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">canal.instance.global.mode</span> <span class=\"string\">=</span> <span class=\"string\">spring</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.global.lazy</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.global.manager.address</span> <span class=\"string\">=</span> <span class=\"string\">$&#123;canal.admin.manager&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.global.spring.xml = classpath:spring/memory-instance.xml</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.global.spring.xml = classpath:spring/file-instance.xml</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.global.spring.xml</span> <span class=\"string\">=</span> <span class=\"string\">classpath:spring/default-instance.xml</span></span><br><span class=\"line\">    <span class=\"comment\">#将位置点存入zookeeper</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##################################################</span></span><br><span class=\"line\">    <span class=\"comment\">######### \t      MQ Properties      #############</span></span><br><span class=\"line\">    <span class=\"comment\">##################################################</span></span><br><span class=\"line\">    <span class=\"comment\"># aliyun ak/sk , support rds/mq</span></span><br><span class=\"line\">    <span class=\"string\">canal.aliyun.accessKey</span> <span class=\"string\">=</span></span><br><span class=\"line\">    <span class=\"string\">canal.aliyun.secretKey</span> <span class=\"string\">=</span></span><br><span class=\"line\">    <span class=\"string\">canal.aliyun.uid=</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">canal.mq.flatMessage</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"string\">canal.mq.canalBatchSize</span> <span class=\"string\">=</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"string\">canal.mq.canalGetTimeout</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"comment\"># Set this value to &quot;cloud&quot;, if you want open message trace feature in aliyun.</span></span><br><span class=\"line\">    <span class=\"string\">canal.mq.accessChannel</span> <span class=\"string\">=</span> <span class=\"string\">local</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">canal.mq.database.hash</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"string\">canal.mq.send.thread.size</span> <span class=\"string\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">    <span class=\"string\">canal.mq.build.thread.size</span> <span class=\"string\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##################################################</span></span><br><span class=\"line\">    <span class=\"comment\">######### \t\t     Kafka \t\t     #############</span></span><br><span class=\"line\">    <span class=\"comment\">##################################################</span></span><br><span class=\"line\">    <span class=\"string\">kafka.bootstrap.servers</span> <span class=\"string\">=</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9092</span></span><br><span class=\"line\">    <span class=\"string\">kafka.acks</span> <span class=\"string\">=</span> <span class=\"string\">all</span></span><br><span class=\"line\">    <span class=\"string\">kafka.compression.type</span> <span class=\"string\">=</span> <span class=\"string\">none</span></span><br><span class=\"line\">    <span class=\"string\">kafka.batch.size</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"string\">kafka.linger.ms</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">kafka.max.request.size</span> <span class=\"string\">=</span> <span class=\"number\">1048576</span></span><br><span class=\"line\">    <span class=\"string\">kafka.buffer.memory</span> <span class=\"string\">=</span> <span class=\"number\">33554432</span></span><br><span class=\"line\">    <span class=\"string\">kafka.max.in.flight.requests.per.connection</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">kafka.retries</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">kafka.kerberos.enable</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">kafka.kerberos.krb5.file</span> <span class=\"string\">=</span> <span class=\"string\">&quot;../conf/kerberos/krb5.conf&quot;</span></span><br><span class=\"line\">    <span class=\"string\">kafka.kerberos.jaas.file</span> <span class=\"string\">=</span> <span class=\"string\">&quot;../conf/kerberos/jaas.conf&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##################################################</span></span><br><span class=\"line\">    <span class=\"comment\">######### \t\t    RocketMQ\t     #############</span></span><br><span class=\"line\">    <span class=\"comment\">##################################################</span></span><br><span class=\"line\">    <span class=\"string\">rocketmq.producer.group</span> <span class=\"string\">=</span> <span class=\"string\">test</span></span><br><span class=\"line\">    <span class=\"string\">rocketmq.enable.message.trace</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">rocketmq.customized.trace.topic</span> <span class=\"string\">=</span></span><br><span class=\"line\">    <span class=\"string\">rocketmq.namespace</span> <span class=\"string\">=</span></span><br><span class=\"line\">    <span class=\"string\">rocketmq.namesrv.addr</span> <span class=\"string\">=</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9876</span></span><br><span class=\"line\">    <span class=\"string\">rocketmq.retry.times.when.send.failed</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"string\">rocketmq.vip.channel.enabled</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">rocketmq.tag</span> <span class=\"string\">=</span> </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##################################################</span></span><br><span class=\"line\">    <span class=\"comment\">######### \t\t    RabbitMQ\t     #############</span></span><br><span class=\"line\">    <span class=\"comment\">##################################################</span></span><br><span class=\"line\">    <span class=\"string\">rabbitmq.host</span> <span class=\"string\">=</span></span><br><span class=\"line\">    <span class=\"string\">rabbitmq.virtual.host</span> <span class=\"string\">=</span></span><br><span class=\"line\">    <span class=\"string\">rabbitmq.exchange</span> <span class=\"string\">=</span></span><br><span class=\"line\">    <span class=\"string\">rabbitmq.username</span> <span class=\"string\">=</span></span><br><span class=\"line\">    <span class=\"string\">rabbitmq.password</span> <span class=\"string\">=</span></span><br><span class=\"line\">    <span class=\"string\">rabbitmq.deliveryMode</span> <span class=\"string\">=</span></span><br><span class=\"line\">  <span class=\"attr\">userdb.properties:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">    #################################################</span></span><br><span class=\"line\"><span class=\"string\">    ## mysql serverId , v1.0.26+ will autoGen</span></span><br><span class=\"line\"><span class=\"string\">    # canal.instance.mysql.slaveId=1000</span></span><br><span class=\"line\"><span class=\"string\"></span>    </span><br><span class=\"line\">    <span class=\"comment\"># enable gtid use true/false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.gtidon=false</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># position info</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.master.address=rm-xxxx.mysql.rds.aliyuncs.com:3306</span></span><br><span class=\"line\">    <span class=\"comment\">#数据库连接串</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.master.journal.name=</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.master.position=</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.master.timestamp=</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.master.gtid=</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># rds oss binlog</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.rds.accesskey=</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.rds.secretkey=</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.rds.instanceId=</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># table meta tsdb info</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.enable=false</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.dir=$&#123;canal.file.data.dir:../conf&#125;/$&#123;canal.instance.destination:&#125;</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.url=jdbc:mysql://rm-xxxx.mysql.rds.aliyuncs.com:3306/canal_tsdb</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.dbUsername=wikifx</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.tsdb.dbPassword=Wikifx123</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.standby.address =</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.standby.journal.name =</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.standby.position =</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.standby.timestamp =</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.standby.gtid=</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># username/password</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.dbUsername=wikifx</span></span><br><span class=\"line\">    <span class=\"comment\">#数据账户</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.dbPassword=Wikifx2021</span></span><br><span class=\"line\">    <span class=\"comment\">#数据库密码</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.connectionCharset</span> <span class=\"string\">=</span> <span class=\"string\">UTF-8</span></span><br><span class=\"line\">    <span class=\"comment\"># enable druid Decrypt database password</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.enableDruid=false</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># table regex</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.regex=fxskyeye\\\\..*</span></span><br><span class=\"line\">    <span class=\"comment\">#订阅的数据库名称</span></span><br><span class=\"line\">    <span class=\"comment\"># table black regex</span></span><br><span class=\"line\">    <span class=\"string\">canal.instance.filter.black.regex=</span></span><br><span class=\"line\">    <span class=\"comment\"># table field filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.filter.field=test1.t_product:id/subject/keywords,test2.t_company:id/name/contact/ch</span></span><br><span class=\"line\">    <span class=\"comment\"># table field black filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.instance.filter.black.field=test1.t_product:subject/product_image,test2.t_company:id/name/contact/ch</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># mq config</span></span><br><span class=\"line\">    <span class=\"string\">canal.mq.topic=forum</span></span><br><span class=\"line\">    <span class=\"comment\"># dynamic topic route by schema or table regex</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.mq.dynamicTopic=mytest1.user,mytest2\\\\..*,.*\\\\..*</span></span><br><span class=\"line\">    <span class=\"string\">canal.mq.partition=0</span></span><br><span class=\"line\">    <span class=\"comment\"># hash partition config</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.mq.partitionsNum=3</span></span><br><span class=\"line\">    <span class=\"comment\">#canal.mq.partitionHash=test.table:id^name,.*\\\\..*</span></span><br><span class=\"line\">    <span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">canal-userdb</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">bservices</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> <span class=\"comment\">#滚动更新改为重新构建</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Recreate</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">canal-userdb</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">canal-userdb</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logsmk</span> <span class=\"comment\">#volume名字</span></span><br><span class=\"line\">          <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/applogs</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">canalconfig</span></span><br><span class=\"line\">          <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">0444</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">canalconfig</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">canalserver-userdb</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/xxxx/base:canal-server-v1.1.5</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">1024Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">2048Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">1000m</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">11112</span></span><br><span class=\"line\">            <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">canalconfig</span> <span class=\"comment\">#通过configmp挂载canalserver主配置</span></span><br><span class=\"line\">            <span class=\"attr\">mountPath:</span> <span class=\"string\">/app/canal-server/conf/canal.properties</span></span><br><span class=\"line\">            <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">subPath:</span> <span class=\"string\">canal.properties</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">canalconfig</span> <span class=\"comment\">#通过configmp挂载canalserver子配置</span></span><br><span class=\"line\">            <span class=\"attr\">mountPath:</span> <span class=\"string\">/app/canal-server/conf/userdb/instance.properties</span></span><br><span class=\"line\">            <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">subPath:</span> <span class=\"string\">userdb.properties</span></span><br><span class=\"line\">        <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">          <span class=\"attr\">postStart:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\"><span class=\"string\">                    while [ ! -d &quot;/app/canal-server/logs/userdb&quot; ]; do sleep 5; done #阻塞启动，等canalserver完全启动，再启动下一个容器canalclient</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wikiuserdbcanal</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">$&#123;IMAGE&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;Asia/Shanghai&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ENVIRONMENT</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">environment</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">ENVIRONMENT</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">1000Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">2000m</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span> </span><br><span class=\"line\">          <span class=\"attr\">exec:</span> </span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ls</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">6</span> </span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span> </span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logsmk</span></span><br><span class=\"line\">            <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/applogs/</span></span><br></pre></td></tr></table></figure>\n<p>关键配置项都有注释，不懂的可以在下面留言。比较重要的</p>\n<ul>\n<li><code>postStart</code>配置，通过检查Canal日志目录是否存在，确定Canal是否完全启动。这个配置会干扰Canal-Client这个容器启动的时间。确保Canal-Server启动完成后再启动Canal-Client。</li>\n<li><code>Zookeeper</code>配置，通过将CanalServer位置点等信息放入Zookeeper将CanalServer变成无状态应用。zookeeper目录结构:</li>\n</ul>\n<p><img src=\"/images/pasted-158.png\" alt=\"zookeeper\"></p>\n<p>安利一个好用的zk客户端: <a href=\"https://github.com/vran-dev/PrettyZoo/releases\">PrettyZoo</a></p>\n<p>再精彩的文字解说都是枯燥的，下面看下启动效果图。</p>\n<p><img src=\"/images/pasted-153.png\" alt=\"canal startup\"></p>\n<p><img src=\"/images/pasted-154.png\" alt=\"canal startup\"></p>\n<p><img src=\"/images/pasted-155.png\" alt=\"canal startup\"></p>\n<h2 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h2><p>源文件Git地址: <a href=\"https://gitee.com/mickey122/canal-in-docker\">https://gitee.com/mickey122/canal-in-docker</a></p>\n","categories":["OPS"],"tags":["OPS","Zookeeper","Kubernetes","Canal"]},{"title":"DQL-多表联查","url":"/forward/d36764c1.html","content":"<h3 id=\"多表联查过程\"><a href=\"#多表联查过程\" class=\"headerlink\" title=\"多表联查过程\"></a>多表联查过程</h3><ol>\n<li><strong>首先找到需要的关联表</strong></li>\n<li><strong>找到关联列（不同表中有关系的列）</strong></li>\n<li><strong>join on关联起来</strong></li>\n<li><strong>where进行定位</strong></li>\n<li><strong>group_by进行站队</strong></li>\n<li><strong>order by进行排序</strong></li>\n</ol>\n<p><img src=\"/images/img-23.png\" alt=\"test table1\"><br><img src=\"/images/img-31.png\" alt=\"多表联查\"></p>\n<hr>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p><strong>环境准备：</strong><a href=\"https://lanzous.com/ib8gwkh\">school库备份</a></p>\n<h4 id=\"school库介绍\"><a href=\"#school库介绍\" class=\"headerlink\" title=\"school库介绍\"></a>school库介绍</h4><h5 id=\"course-课程\"><a href=\"#course-课程\" class=\"headerlink\" title=\"course 课程\"></a>course 课程</h5><p><img src=\"/images/img-24.png\" alt=\"course\"></p>\n<h5 id=\"sc-成绩\"><a href=\"#sc-成绩\" class=\"headerlink\" title=\"sc 成绩\"></a>sc 成绩</h5><p><img src=\"/images/img-25.png\" alt=\"sc\"></p>\n<h5 id=\"student-学生表\"><a href=\"#student-学生表\" class=\"headerlink\" title=\"student 学生表\"></a>student 学生表</h5><p><img src=\"/images/img-26.png\" alt=\"student\"></p>\n<h5 id=\"teacher-教师表\"><a href=\"#teacher-教师表\" class=\"headerlink\" title=\"teacher 教师表\"></a>teacher 教师表</h5><p><img src=\"/images/img-27.png\" alt=\"teacher\"></p>\n<hr>\n<h4 id=\"传统连接\"><a href=\"#传统连接\" class=\"headerlink\" title=\"传统连接\"></a>传统连接</h4><p>#例1:<strong><a href=\"https://cakepanit.com/2019/04/15/MySQLDQL/\">查询world库</a>中人口数小于100的城市</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT name,CountryCode FROM world.city WHERE Population&lt;100;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#<strong>人口数小于100人的城市，所在国家的国土面积（城市名，国家名，国土面积）</strong><br>多表连接查询<br> <strong>传统连接：基于WHERE条件</strong><br> <strong>1.找表之间的关系列</strong><br> <strong>2.排列查询条件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DESC world.country;</span><br><span class=\"line\">SELECT name,CountryCode FROM world.city WHERE Population&lt;100;</span><br><span class=\"line\">SELECT name,SurfaceArea FROM world.country WHERE Code=<span class=\"string\">&#x27;PCN&#x27;</span></span><br><span class=\"line\">合并</span><br><span class=\"line\">SELECT world.city.name,world.country.name,world.country.SurfaceArea,world.city.Population</span><br><span class=\"line\">FROM world.city,world.country <span class=\"comment\">#相关表</span></span><br><span class=\"line\">WHERE world.city.CountryCode = world.country.Code <span class=\"comment\">#关联条件</span></span><br><span class=\"line\">AND world.city.Population&lt;100; <span class=\"comment\">#判断条件</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"自连接-了解\"><a href=\"#自连接-了解\" class=\"headerlink\" title=\"自连接(了解)\"></a>自连接(了解)</h4><h4 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接 *****\"></a>内连接 *****</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">A   B</span><br><span class=\"line\">A.x   B.y </span><br></pre></td></tr></table></figure>\n<h5 id=\"关键字：join-on\"><a href=\"#关键字：join-on\" class=\"headerlink\" title=\"关键字：join on\"></a>关键字：join on</h5><h5 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h5><ul>\n<li>以相同的关联列将两个表进行关联，数据取交集，并形成新表。</li>\n</ul>\n<h5 id=\"语句：\"><a href=\"#语句：\" class=\"headerlink\" title=\"语句：\"></a>语句：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * </span><br><span class=\"line\">from a_table as a </span><br><span class=\"line\"><span class=\"built_in\">join</span> b_table as b </span><br><span class=\"line\">on a.a_id = b.b_id;</span><br></pre></td></tr></table></figure>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><ul>\n<li>组合两个表中的记录，返回关联字段相符的记录，也就是返回两个表的交集（阴影）部分。</li>\n</ul>\n<p><img src=\"/images/img-32.png\" alt=\"内连接\"></p>\n<hr>\n<h5 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h5><ol>\n<li>找表之间的关系列 </li>\n<li>将两表放在join左右</li>\n<li>将关联条件了放在on后面</li>\n<li>将所有的查询条件进行罗列</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">语句格式：</span><br><span class=\"line\">select A.m,B.n </span><br><span class=\"line\">from</span><br><span class=\"line\">A <span class=\"built_in\">join</span> B //两张表</span><br><span class=\"line\">on A.x=B.y  //表中的关系列</span><br><span class=\"line\"><span class=\"built_in\">where</span> </span><br><span class=\"line\">group by </span><br><span class=\"line\">order by </span><br><span class=\"line\"><span class=\"built_in\">limit</span> </span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"内连接改写例1\"><a href=\"#内连接改写例1\" class=\"headerlink\" title=\"内连接改写例1:\"></a>内连接改写例1:</h5><p>#查询人口数量小于100人的国家名，城市名，国土面积</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联的表：world.city world.country</span><br><span class=\"line\">city;</span><br><span class=\"line\">DESC world.country;</span><br><span class=\"line\">关联列：world.city.CountryCode world.country.Code</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT country.name,city.name,country.SurfaceArea,city.Population</span><br><span class=\"line\">FROM </span><br><span class=\"line\">world.city JOIN world.country</span><br><span class=\"line\">ON city.CountryCode=country.Code</span><br><span class=\"line\">WHERE world.city.Population&lt;100;</span><br><span class=\"line\">结果：</span><br><span class=\"line\">+----------+-----------+-------------+------------+</span><br><span class=\"line\">| name     | name      | SurfaceArea | Population |</span><br><span class=\"line\">+----------+-----------+-------------+------------+</span><br><span class=\"line\">| Pitcairn | Adamstown |       49.00 |         42 |</span><br><span class=\"line\">+----------+-----------+-------------+------------+</span><br></pre></td></tr></table></figure>\n<h5 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2:\"></a>例2:</h5><p>#1.查询张oldguo老师所教的课程名称。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联表：course（课程表） teacher(教师表)</span><br><span class=\"line\">DESC school.course;</span><br><span class=\"line\">DESC school.teacher;</span><br><span class=\"line\"></span><br><span class=\"line\">关联列：school.course.tno school.teacher.tno</span><br><span class=\"line\">关联后临时表：</span><br><span class=\"line\">+------+--------+-----+-----+--------+</span><br><span class=\"line\">| cno  | cname  | tno | tno | tname  |</span><br><span class=\"line\">+------+--------+-----+-----+--------+</span><br><span class=\"line\">| 1001 | linux  | 101 | 101 | oldboy |</span><br><span class=\"line\">| 1002 | python | 102 | 102 | hesw   |</span><br><span class=\"line\">| 1003 | mysql  | 103 | 103 | oldguo |</span><br><span class=\"line\">+------+--------+-----+-----+--------+</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT teacher.tname,course.cname</span><br><span class=\"line\">FROM</span><br><span class=\"line\">school.course JOIN school.teacher</span><br><span class=\"line\">ON course.tno=teacher.tno</span><br><span class=\"line\">WHERE teacher.tname=<span class=\"string\">&#x27;oldguo&#x27;</span>;</span><br><span class=\"line\">结果：</span><br><span class=\"line\">+------+-------+-----+-----+--------+</span><br><span class=\"line\">| cno  | cname | tno | tno | tname  |</span><br><span class=\"line\">+------+-------+-----+-----+--------+</span><br><span class=\"line\">| 1003 | mysql | 103 | 103 | oldguo |</span><br><span class=\"line\">+------+-------+-----+-----+--------+</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#2.统计一下每门课程的总成绩</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM school.course;</span><br><span class=\"line\">SELECT * FROM school.te;</span><br><span class=\"line\"></span><br><span class=\"line\">关联表：school.course school.sc</span><br><span class=\"line\">关联列：school.course.cno school.sc.cno</span><br><span class=\"line\">关联后临时表：</span><br><span class=\"line\">+------+--------+-----+-----+------+-------+</span><br><span class=\"line\">| cno  | cname  | tno | sno | cno  | score |</span><br><span class=\"line\">+------+--------+-----+-----+------+-------+</span><br><span class=\"line\">| 1001 | linux  | 101 |   1 | 1001 |    80 |</span><br><span class=\"line\">| 1002 | python | 102 |   1 | 1002 |    59 |</span><br><span class=\"line\">| 1002 | python | 102 |   2 | 1002 |    90 |</span><br><span class=\"line\">| 1003 | mysql  | 103 |   2 | 1003 |   100 |</span><br><span class=\"line\">| 1001 | linux  | 101 |   3 | 1001 |    99 |</span><br><span class=\"line\">| 1003 | mysql  | 103 |   3 | 1003 |    40 |</span><br><span class=\"line\">| 1001 | linux  | 101 |   4 | 1001 |    79 |</span><br><span class=\"line\">| 1002 | python | 102 |   4 | 1002 |    61 |</span><br><span class=\"line\">| 1003 | mysql  | 103 |   4 | 1003 |    99 |</span><br><span class=\"line\">| 1003 | mysql  | 103 |   5 | 1003 |    40 |</span><br><span class=\"line\">| 1001 | linux  | 101 |   6 | 1001 |    89 |</span><br><span class=\"line\">| 1003 | mysql  | 103 |   6 | 1003 |    77 |</span><br><span class=\"line\">| 1001 | linux  | 101 |   7 | 1001 |    67 |</span><br><span class=\"line\">| 1003 | mysql  | 103 |   7 | 1003 |    82 |</span><br><span class=\"line\">| 1001 | linux  | 101 |   8 | 1001 |    70 |</span><br><span class=\"line\">| 1003 | mysql  | 103 |   9 | 1003 |    80 |</span><br><span class=\"line\">| 1003 | mysql  | 103 |  10 | 1003 |    96 |</span><br><span class=\"line\">+------+--------+-----+-----+------+-------+</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SELECT course.cname,SUM(sc.score) </span><br><span class=\"line\">FROM school.course</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno=sc.cno</span><br><span class=\"line\">GROUP BY course.cname,course.cno;  //以两个条件构成分组条件，防止单科多老师出现。</span><br><span class=\"line\">结果：</span><br><span class=\"line\">+--------+---------------+</span><br><span class=\"line\">| cname  | SUM(sc.score) |</span><br><span class=\"line\">+--------+---------------+</span><br><span class=\"line\">| linux  |           484 |</span><br><span class=\"line\">| mysql  |           614 |</span><br><span class=\"line\">| python |           210 |</span><br><span class=\"line\">+--------+---------------+</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#3.统计一下每门课程的总成绩和课程代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT course.cno,course.cname,SUM(sc.score) </span><br><span class=\"line\">FROM school.course</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno=sc.cno</span><br><span class=\"line\">GROUP BY course.cname; </span><br><span class=\"line\">结果：</span><br><span class=\"line\">ERROR:sql_mode=only_full_group_by</span><br><span class=\"line\"><span class=\"comment\">#5.7版本会报错的情况，在sqlyog中一下操作没问题，但命令行会报错。</span></span><br><span class=\"line\">原因：</span><br><span class=\"line\">\t1.在select后面的列，不是分组的条件，并且没有在函数（<span class=\"built_in\">sum</span>中）中包裹。</span><br><span class=\"line\">\t2.如果GROUP BY 后是主键列或唯一列。如下 </span><br><span class=\"line\"></span><br><span class=\"line\">SELECT course.cno,course.cname,SUM(school.sc.score) </span><br><span class=\"line\">FROM school.course</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno=sc.cno</span><br><span class=\"line\">GROUP BY school.course.cno; <span class=\"comment\">#此处为主键或唯一列可避免该错误。</span></span><br><span class=\"line\">结果：</span><br><span class=\"line\">+------+--------+----------------------+</span><br><span class=\"line\">| cno  | cname  | SUM(school.sc.score) |</span><br><span class=\"line\">+------+--------+----------------------+</span><br><span class=\"line\">| 1001 | linux  |                  484 |</span><br><span class=\"line\">| 1002 | python |                  210 |</span><br><span class=\"line\">| 1003 | mysql  |                  614 |</span><br><span class=\"line\">+------+--------+----------------------+</span><br></pre></td></tr></table></figure>\n<p>#4. 查询oldguo老师教的学生姓名列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联后的临时表：</span><br><span class=\"line\">+-----+--------+------+--------+-----+-----+------+-------+-----+---------+------+------+</span><br><span class=\"line\">| tno | tname  | cno  | cname  | tno | sno | cno  | score | sno | sname   | sage | ssex |</span><br><span class=\"line\">+-----+--------+------+--------+-----+-----+------+-------+-----+---------+------+------+</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   1 | 1001 |    80 |   1 | zhang3  |   18 | m    |</span><br><span class=\"line\">| 102 | hesw   | 1002 | python | 102 |   1 | 1002 |    59 |   1 | zhang3  |   18 | m    |</span><br><span class=\"line\">| 102 | hesw   | 1002 | python | 102 |   2 | 1002 |    90 |   2 | zhang4  |   18 | m    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   2 | 1003 |   100 |   2 | zhang4  |   18 | m    |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   3 | 1001 |    99 |   3 | li4     |   18 | m    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   3 | 1003 |    40 |   3 | li4     |   18 | m    |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   4 | 1001 |    79 |   4 | wang5   |   19 | f    |</span><br><span class=\"line\">| 102 | hesw   | 1002 | python | 102 |   4 | 1002 |    61 |   4 | wang5   |   19 | f    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   4 | 1003 |    99 |   4 | wang5   |   19 | f    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   5 | 1003 |    40 |   5 | zh4     |   18 | m    |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   6 | 1001 |    89 |   6 | zhao4   |   18 | m    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   6 | 1003 |    77 |   6 | zhao4   |   18 | m    |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   7 | 1001 |    67 |   7 | ma6     |   19 | f    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   7 | 1003 |    82 |   7 | ma6     |   19 | f    |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   8 | 1001 |    70 |   8 | oldboy  |   20 | m    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   9 | 1003 |    80 |   9 | oldgirl |   20 | f    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |  10 | 1003 |    96 |  10 | oldp    |   25 | m    |</span><br><span class=\"line\">+-----+--------+------+--------+-----+-----+------+-------+-----+---------+------+------+</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT teacher.tname,group_CONCAT(school.student.sname)</span><br><span class=\"line\">FROM school.teacher</span><br><span class=\"line\">JOIN school.course</span><br><span class=\"line\">ON teacher.tno = course.tno</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno = sc.cno</span><br><span class=\"line\">JOIN school.student</span><br><span class=\"line\">ON sc.sno = student.sno</span><br><span class=\"line\">WHERE teacher.tname=<span class=\"string\">&#x27;oldguo&#x27;</span>;  //查询一个老师用<span class=\"built_in\">where</span> </span><br><span class=\"line\">结果：</span><br><span class=\"line\">+--------+---------------------------------------------+</span><br><span class=\"line\">| tname  | group_CONCAT(school.student.sname)          |</span><br><span class=\"line\">+--------+---------------------------------------------+</span><br><span class=\"line\">| oldguo | zhang4,li4,wang5,zh4,zhao4,ma6,oldgirl,oldp |</span><br><span class=\"line\">+--------+---------------------------------------------+</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#5. 查询所有老师教的学生姓名列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联后的临时表：</span><br><span class=\"line\">见4</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT teacher.tname,group_CONCAT(school.student.sname)</span><br><span class=\"line\">FROM school.teacher</span><br><span class=\"line\">JOIN school.course</span><br><span class=\"line\">ON teacher.tno = course.tno</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno = sc.cno</span><br><span class=\"line\">JOIN school.student</span><br><span class=\"line\">ON sc.sno = student.sno</span><br><span class=\"line\">GROUP BY teacher.tno   //查询所有老师需要用group by进行站队</span><br><span class=\"line\">结果：</span><br><span class=\"line\">+--------+---------------------------------------------+</span><br><span class=\"line\">| tname  | group_CONCAT(school.student.sname)          |</span><br><span class=\"line\">+--------+---------------------------------------------+</span><br><span class=\"line\">| oldboy | zhang3,li4,wang5,zhao4,ma6,oldboy           |</span><br><span class=\"line\">| hesw   | zhang3,wang5,zhang4                         |</span><br><span class=\"line\">| oldguo | zhang4,li4,zh4,zhao4,ma6,oldgirl,wang5,oldp |</span><br><span class=\"line\">+--------+---------------------------------------------+</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#6. 查询oldboy老师教的成绩大于70的学生姓名，和成绩</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联后的临时表：</span><br><span class=\"line\">见4</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT student.sname,sc.score</span><br><span class=\"line\">FROM school.teacher</span><br><span class=\"line\">JOIN school.course</span><br><span class=\"line\">ON teacher.tno = course.tno</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno = sc.cno</span><br><span class=\"line\">JOIN school.student</span><br><span class=\"line\">ON sc.sno = student.sno</span><br><span class=\"line\">WHERE teacher.tname=<span class=\"string\">&#x27;oldboy&#x27;</span> AND sc.score&gt;70;</span><br><span class=\"line\">结果：</span><br><span class=\"line\">+--------+-------+</span><br><span class=\"line\">| sname  | score |</span><br><span class=\"line\">+--------+-------+</span><br><span class=\"line\">| zhang3 |    80 |</span><br><span class=\"line\">| li4    |    99 |</span><br><span class=\"line\">| wang5  |    79 |</span><br><span class=\"line\">| zhao4  |    89 |</span><br><span class=\"line\">+--------+-------+</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#7. 统计zhang3,学习了几门课</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联后的临时表：</span><br><span class=\"line\">+-----+---------+------+------+-----+------+-------+------+--------+-----+</span><br><span class=\"line\">| sno | sname   | sage | ssex | sno | cno  | score | cno  | cname  | tno |</span><br><span class=\"line\">+-----+---------+------+------+-----+------+-------+------+--------+-----+</span><br><span class=\"line\">|   1 | zhang3  |   18 | m    |   1 | 1001 |    80 | 1001 | linux  | 101 |</span><br><span class=\"line\">|   1 | zhang3  |   18 | m    |   1 | 1002 |    59 | 1002 | python | 102 |</span><br><span class=\"line\">|   2 | zhang4  |   18 | m    |   2 | 1002 |    90 | 1002 | python | 102 |</span><br><span class=\"line\">|   2 | zhang4  |   18 | m    |   2 | 1003 |   100 | 1003 | mysql  | 103 |</span><br><span class=\"line\">|   3 | li4     |   18 | m    |   3 | 1001 |    99 | 1001 | linux  | 101 |</span><br><span class=\"line\">|   3 | li4     |   18 | m    |   3 | 1003 |    40 | 1003 | mysql  | 103 |</span><br><span class=\"line\">|   4 | wang5   |   19 | f    |   4 | 1001 |    79 | 1001 | linux  | 101 |</span><br><span class=\"line\">|   4 | wang5   |   19 | f    |   4 | 1002 |    61 | 1002 | python | 102 |</span><br><span class=\"line\">|   4 | wang5   |   19 | f    |   4 | 1003 |    99 | 1003 | mysql  | 103 |</span><br><span class=\"line\">|   5 | zh4     |   18 | m    |   5 | 1003 |    40 | 1003 | mysql  | 103 |</span><br><span class=\"line\">|   6 | zhao4   |   18 | m    |   6 | 1001 |    89 | 1001 | linux  | 101 |</span><br><span class=\"line\">|   6 | zhao4   |   18 | m    |   6 | 1003 |    77 | 1003 | mysql  | 103 |</span><br><span class=\"line\">|   7 | ma6     |   19 | f    |   7 | 1001 |    67 | 1001 | linux  | 101 |</span><br><span class=\"line\">|   7 | ma6     |   19 | f    |   7 | 1003 |    82 | 1003 | mysql  | 103 |</span><br><span class=\"line\">|   8 | oldboy  |   20 | m    |   8 | 1001 |    70 | 1001 | linux  | 101 |</span><br><span class=\"line\">|   9 | oldgirl |   20 | f    |   9 | 1003 |    80 | 1003 | mysql  | 103 |</span><br><span class=\"line\">|  10 | oldp    |   25 | m    |  10 | 1003 |    96 | 1003 | mysql  | 103 |</span><br><span class=\"line\">+-----+---------+------+------+-----+------+-------+------+--------+-----+</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT student.sname,GROUP_CONCAT(school.course.cname)</span><br><span class=\"line\">FROM school.student </span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON student.sno = sc.sno</span><br><span class=\"line\">JOIN school.course</span><br><span class=\"line\">ON sc.cno =course.cno</span><br><span class=\"line\">WHERE student.sname=<span class=\"string\">&#x27;zhang3&#x27;</span>; //由于是查单个学生，所以不需要GROUP BY进行分组</span><br><span class=\"line\"><span class=\"comment\">#GROUP BY student.sno;</span></span><br><span class=\"line\">结果：</span><br><span class=\"line\">+--------+-----------------------------------+</span><br><span class=\"line\">| sname  | GROUP_CONCAT(school.course.cname) |</span><br><span class=\"line\">+--------+-----------------------------------+</span><br><span class=\"line\">| zhang3 | linux,python                      |</span><br><span class=\"line\">+--------+-----------------------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT GROUP_CONCAT(school.course.cname)</span><br><span class=\"line\">FROM school.student </span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON student.sno = sc.sno</span><br><span class=\"line\">JOIN school.course</span><br><span class=\"line\">ON sc.cno = course.cno</span><br><span class=\"line\">WHERE school.student.sname=<span class=\"string\">&#x27;zhang3&#x27;</span></span><br><span class=\"line\">GROUP BY school.student.sno;</span><br><span class=\"line\">结果：</span><br><span class=\"line\">+-----------------------------------+</span><br><span class=\"line\">| GROUP_CONCAT(school.course.cname) |</span><br><span class=\"line\">+-----------------------------------+</span><br><span class=\"line\">| python,linux                      |</span><br><span class=\"line\">+-----------------------------------+</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#8. 查询oldguo老师教的学生名.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联后的临时表：</span><br><span class=\"line\">见7</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT teacher.tname,GROUP_CONCAT(student.sname)</span><br><span class=\"line\">FROM school.teacher</span><br><span class=\"line\">JOIN school.course</span><br><span class=\"line\">ON teacher.tno = course.tno</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno = sc.cno</span><br><span class=\"line\">JOIN school.student</span><br><span class=\"line\">ON sc.sno = student.sno</span><br><span class=\"line\">WHERE teacher.tname=<span class=\"string\">&#x27;oldguo&#x27;</span> ////由于是查单个老师，所以不需要GROUP BY进行分组</span><br><span class=\"line\"><span class=\"comment\">#GROUP BY teacher.tname;</span></span><br><span class=\"line\">结果：</span><br><span class=\"line\">+--------+---------------------------------------------+</span><br><span class=\"line\">| tname  | GROUP_CONCAT(student.sname)                 |</span><br><span class=\"line\">+--------+---------------------------------------------+</span><br><span class=\"line\">| oldguo | zhang4,li4,wang5,zh4,zhao4,ma6,oldgirl,oldp |</span><br><span class=\"line\">+--------+---------------------------------------------+</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#9. 查询oldguo所教课程的平均分数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联后的临时表：</span><br><span class=\"line\">+-----+--------+------+--------+-----+-----+------+-------+</span><br><span class=\"line\">| tno | tname  | cno  | cname  | tno | sno | cno  | score |</span><br><span class=\"line\">+-----+--------+------+--------+-----+-----+------+-------+</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   1 | 1001 |    80 |</span><br><span class=\"line\">| 102 | hesw   | 1002 | python | 102 |   1 | 1002 |    59 |</span><br><span class=\"line\">| 102 | hesw   | 1002 | python | 102 |   2 | 1002 |    90 |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   2 | 1003 |   100 |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   3 | 1001 |    99 |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   3 | 1003 |    40 |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   4 | 1001 |    79 |</span><br><span class=\"line\">| 102 | hesw   | 1002 | python | 102 |   4 | 1002 |    61 |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   4 | 1003 |    99 |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   5 | 1003 |    40 |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   6 | 1001 |    89 |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   6 | 1003 |    77 |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   7 | 1001 |    67 |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   7 | 1003 |    82 |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   8 | 1001 |    70 |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   9 | 1003 |    80 |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |  10 | 1003 |    96 |</span><br><span class=\"line\">+-----+--------+------+--------+-----+-----+------+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT teacher.tname,AVG(sc.score)</span><br><span class=\"line\">FROM school.teacher</span><br><span class=\"line\">JOIN school.course</span><br><span class=\"line\">ON teacher.tno = course.tno</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno = sc.cno</span><br><span class=\"line\">WHERE school.teacher.tname=<span class=\"string\">&#x27;oldguo&#x27;</span>  //查询单个老师所教课程的平均成绩，不需要加GROUP BY </span><br><span class=\"line\"><span class=\"comment\">#GROUP BY school.teacher.tno;</span></span><br><span class=\"line\">结果：</span><br><span class=\"line\">+--------+---------------+</span><br><span class=\"line\">| tname  | AVG(sc.score) |</span><br><span class=\"line\">+--------+---------------+</span><br><span class=\"line\">| oldguo |       76.7500 |</span><br><span class=\"line\">+--------+---------------+</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#10. 每位老师所教课程的平均分,并按平均分排序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联后的临时表：</span><br><span class=\"line\">见9</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT teacher.tname,AVG(sc.score)</span><br><span class=\"line\">FROM school.teacher</span><br><span class=\"line\">JOIN school.course</span><br><span class=\"line\">ON teacher.tno = course.tno</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno = sc.cno</span><br><span class=\"line\">GROUP BY teacher.tno</span><br><span class=\"line\">ORDER BY AVG(sc.score) DESC; //ORDER BY ... desc降序排序</span><br><span class=\"line\">结果：</span><br><span class=\"line\">+--------+---------------+</span><br><span class=\"line\">| tname  | AVG(sc.score) |</span><br><span class=\"line\">+--------+---------------+</span><br><span class=\"line\">| oldboy |       80.6667 |</span><br><span class=\"line\">| oldguo |       76.7500 |</span><br><span class=\"line\">| hesw   |       70.0000 |</span><br><span class=\"line\">+--------+---------------+</span><br></pre></td></tr></table></figure>\n<hr>\n<p>#11. 查询oldguo所教的不及格的学生姓名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联后的临时表：</span><br><span class=\"line\">+-----+--------+------+--------+-----+-----+------+-------+-----+---------+------+------+</span><br><span class=\"line\">| tno | tname  | cno  | cname  | tno | sno | cno  | score | sno | sname   | sage | ssex |</span><br><span class=\"line\">+-----+--------+------+--------+-----+-----+------+-------+-----+---------+------+------+</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   1 | 1001 |    80 |   1 | zhang3  |   18 | m    |</span><br><span class=\"line\">| 102 | hesw   | 1002 | python | 102 |   1 | 1002 |    59 |   1 | zhang3  |   18 | m    |</span><br><span class=\"line\">| 102 | hesw   | 1002 | python | 102 |   2 | 1002 |    90 |   2 | zhang4  |   18 | m    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   2 | 1003 |   100 |   2 | zhang4  |   18 | m    |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   3 | 1001 |    99 |   3 | li4     |   18 | m    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   3 | 1003 |    40 |   3 | li4     |   18 | m    |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   4 | 1001 |    79 |   4 | wang5   |   19 | f    |</span><br><span class=\"line\">| 102 | hesw   | 1002 | python | 102 |   4 | 1002 |    61 |   4 | wang5   |   19 | f    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   4 | 1003 |    99 |   4 | wang5   |   19 | f    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   5 | 1003 |    40 |   5 | zh4     |   18 | m    |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   6 | 1001 |    89 |   6 | zhao4   |   18 | m    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   6 | 1003 |    77 |   6 | zhao4   |   18 | m    |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   7 | 1001 |    67 |   7 | ma6     |   19 | f    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   7 | 1003 |    82 |   7 | ma6     |   19 | f    |</span><br><span class=\"line\">| 101 | oldboy | 1001 | linux  | 101 |   8 | 1001 |    70 |   8 | oldboy  |   20 | m    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |   9 | 1003 |    80 |   9 | oldgirl |   20 | f    |</span><br><span class=\"line\">| 103 | oldguo | 1003 | mysql  | 103 |  10 | 1003 |    96 |  10 | oldp    |   25 | m    |</span><br><span class=\"line\">+-----+--------+------+--------+-----+-----+------+-------+-----+---------+------+------+</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT student.sname,sc.score</span><br><span class=\"line\">FROM school.teacher</span><br><span class=\"line\">JOIN school.course</span><br><span class=\"line\">ON teacher.tno = course.tno</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno = sc.cno</span><br><span class=\"line\">JOIN school.student</span><br><span class=\"line\">ON sc.sno = student.sno</span><br><span class=\"line\">WHERE teacher.tname=&#x27;oldguo&#x27; AND sc.score&lt;60;</span><br><span class=\"line\">结果：</span><br><span class=\"line\">+-------+-------+</span><br><span class=\"line\">| sname | score |</span><br><span class=\"line\">+-------+-------+</span><br><span class=\"line\">| li4   |    40 |</span><br><span class=\"line\">| zh4   |    40 |</span><br><span class=\"line\">+-------+-------+</span><br></pre></td></tr></table></figure>\n\n<p>#12. 查询所有老师所教学生不及格的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">关联后的临时表：</span><br><span class=\"line\">见11</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT teacher.tname,student.sname,sc.score</span><br><span class=\"line\">FROM school.teacher</span><br><span class=\"line\">JOIN school.course</span><br><span class=\"line\">ON teacher.tno = course.tno</span><br><span class=\"line\">JOIN school.sc</span><br><span class=\"line\">ON course.cno = sc.cno</span><br><span class=\"line\">JOIN school.student</span><br><span class=\"line\">ON sc.sno = student.sno</span><br><span class=\"line\">WHERE school.sc.score&lt;60;</span><br><span class=\"line\">结果：</span><br><span class=\"line\">+--------+--------+-------+</span><br><span class=\"line\">| tname  | sname  | score |</span><br><span class=\"line\">+--------+--------+-------+</span><br><span class=\"line\">| hesw   | zhang3 |    59 |</span><br><span class=\"line\">| oldguo | li4    |    40 |</span><br><span class=\"line\">| oldguo | zh4    |    40 |</span><br><span class=\"line\">+--------+--------+-------+</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"左连接（左外连接）\"><a href=\"#左连接（左外连接）\" class=\"headerlink\" title=\"左连接（左外连接）\"></a>左连接（左外连接）</h4><h5 id=\"关键字：left-join-on-left-outer-join-on\"><a href=\"#关键字：left-join-on-left-outer-join-on\" class=\"headerlink\" title=\"关键字：left join on / left outer join on\"></a>关键字：left join on / left outer join on</h5><h5 id=\"方式：\"><a href=\"#方式：\" class=\"headerlink\" title=\"方式：\"></a>方式：</h5><p><strong>取左表所有的值，和右表里面关联的值(右表不存在的值以null填充)。形成新表。</strong><br><strong>内连接：只取满足where条件的值。</strong><br><img src=\"/images/img-33.png\" alt=\"内连接\"></p>\n<p><strong>左外连接（and换成where条件）：用于指定city为驱动表(结果集较少的表)，用于减少循环判断的次数。</strong></p>\n<p><img src=\"/images/img-34.png\" alt=\"左外连接\"></p>\n<h5 id=\"说明：-1\"><a href=\"#说明：-1\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p><strong>left join 是left outer join的简写，它的全称是左外连接，是外连接中的一种。</strong><br>左(外)连接，左表(a_table)的记录将会全部表示出来，而右表(b_table)只会显示符合搜索条件的记录。右表记录不足的地方均为NULL。<br><img src=\"/images/img-35.png\" alt=\"左外连接\"></p>\n<h4 id=\"右连接（右外连接）\"><a href=\"#右连接（右外连接）\" class=\"headerlink\" title=\"右连接（右外连接）\"></a>右连接（右外连接）</h4><h5 id=\"关键字：right-join-on-right-outer-join-on\"><a href=\"#关键字：right-join-on-right-outer-join-on\" class=\"headerlink\" title=\"关键字：right join on / right outer join on\"></a>关键字：right join on / right outer join on</h5><h5 id=\"语句：-1\"><a href=\"#语句：-1\" class=\"headerlink\" title=\"语句：\"></a>语句：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * </span><br><span class=\"line\">from a_table a </span><br><span class=\"line\">right outer <span class=\"built_in\">join</span> b_table b </span><br><span class=\"line\">on a.a_id = b.b_id;</span><br></pre></td></tr></table></figure>\n<h5 id=\"说明：-2\"><a href=\"#说明：-2\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p><strong>right join是right outer join的简写，它的全称是右外连接，是外连接中的一种。</strong><br>与左(外)连接相反，右(外)连接，左表(a_table)只会显示符合搜索条件的记录，而右表(b_table)的记录将会全部表示出来。左表记录不足的地方均为NULL。<br><img src=\"/images/img-37.png\" alt=\"右外连接\"></p>\n","categories":["DBA"],"tags":["MySQL","多表联查"]},{"title":"Apollo In Kubernetes（多数据中心）","url":"/forward/91db5a91.html","content":"<blockquote>\n<p>本文介绍分布式配置管理中心Apollo（阿波罗）多节点k8s部署</p>\n</blockquote>\n<p>参考文档:</p>\n<ul>\n<li><a href=\"https://github.com/apolloconfig/apollo\">https://github.com/apolloconfig/apollo</a></li>\n<li><a href=\"https://github.com/apolloconfig/apollo/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97\">apollo分布式部署指南</a></li>\n<li><a href=\"https://github.com/apolloconfig/apollo/tree/master/scripts/apollo-on-kubernetes\">https://github.com/apolloconfig/apollo/tree/master/scripts/apollo-on-kubernetes</a></li>\n<li><a href=\"https://www.apolloconfig.com/#/zh/design/apollo-design\">https://www.apolloconfig.com/#/zh/design/apollo-design</a></li>\n</ul>\n<h2 id=\"Apollo介绍\"><a href=\"#Apollo介绍\" class=\"headerlink\" title=\"Apollo介绍\"></a>Apollo介绍</h2><p>Apollo（阿波罗）是一款可靠的分布式配置管理中心，诞生于携程框架研发部，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p>\n<ul>\n<li>服务端基于Spring Boot和Spring Cloud开发，打包后可以直接运行，不需要额外安装Tomcat等应用容器。</li>\n<li>Java客户端不依赖任何框架，能够运行于所有Java运行时环境，同时对Spring/Spring Boot环境也有较好的支持。</li>\n<li>.Net客户端不依赖任何框架，能够运行于所有.Net运行时环境。</li>\n</ul>\n<p>这里不再赘述，详细参见官方文档。</p>\n<h3 id=\"Apollo各组件介绍\"><a href=\"#Apollo各组件介绍\" class=\"headerlink\" title=\"Apollo各组件介绍\"></a>Apollo各组件介绍</h3><ul>\n<li>apollo-portal 提供管理界面 (部署一份k8s)<ul>\n<li>提供Web界面供用户管理配置</li>\n<li>通过Meta Server获取Admin Service服务列表（IP+Port），通过IP+Port访问服务</li>\n<li>在Portal侧做load balance、错误重试</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>apollo-adminservice (部署各节点k8s)<ul>\n<li>提供配置管理接口</li>\n<li>提供配置修改、发布等接口</li>\n<li>接口服务对象为apollo-portal</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>apollo-configservice (部署各节点k8s)<ul>\n<li>提供配置获取接口</li>\n<li>提供配置更新推送接口</li>\n<li>接口服务对象为Apollo客户端</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Meta Server (随apollo-configservice部署各节点k8s)<ul>\n<li>Portal通过域名访问Meta Server获取Admin Service服务列表（IP+Port）</li>\n<li>Client通过域名访问Meta Server获取Config Service服务列表（IP+Port）</li>\n<li>Meta Server从Eureka获取Config Service和Admin Service的服务信息，相当于是一个Eureka Client</li>\n<li>增设一个Meta Server的角色主要是为了封装服务发现的细节，对Portal和Client而言，永远通过一个Http接口获取Admin Service和Config Service的服务信息，而不需要关心背后实际的服务注册和发现组件</li>\n<li>Meta Server只是一个逻辑角色，在部署时和Config Service是在一个JVM进程中的，所以IP、端口和Config Service一致</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Eureka (随apollo-configservice部署各节点k8s,多数据中心分布式部署时需要弃用)<ul>\n<li>基于Eureka和Spring Cloud Netflix提供服务注册和发现</li>\n<li>Config Service和Admin Service会向Eureka注册服务，并保持心跳</li>\n<li>目前Eureka在部署时和Config Service是在一个JVM进程中的（通过Spring Cloud Netflix）</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Client（使用服务的应用程序）<ul>\n<li>Apollo提供的客户端程序，为应用提供配置获取、实时更新等功能</li>\n<li>通过Meta Server获取Config Service服务列表（IP+Port），通过IP+Port访问服务</li>\n<li>在Client侧做load balance、错误重试</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"环境规划\"><a href=\"#环境规划\" class=\"headerlink\" title=\"环境规划\"></a>环境规划</h2><h3 id=\"各节点服务规划\"><a href=\"#各节点服务规划\" class=\"headerlink\" title=\"各节点服务规划\"></a>各节点服务规划</h3><table>\n<thead>\n<tr>\n<th align=\"center\">环境</th>\n<th align=\"center\">地址</th>\n<th align=\"center\">需要部署的服务</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SH</td>\n<td align=\"center\">service-apollo-portal-server.baseservice:8070:30001<br><a href=\"http://47.xxx.xx.39:30001/system_info.html\">http://47.xxx.xx.39:30001/system_info.html</a><br><br>service-apollo-config-server-sh.baseservice:8080:30002<br>service-apollo-admin-server-sh.baseservice:8090:30003</td>\n<td align=\"center\">apollo-portal<br><br>apollo-configservice<br>apollo-adminservice</td>\n</tr>\n<tr>\n<td align=\"center\">SG</td>\n<td align=\"center\">service-apollo-config-server-sg.baseservice:8080:30002<br>172.21.114.195:30002<br><br>service-apollo-admin-server-sg.baseservice:8090:30003<br>172.21.114.195:30003</td>\n<td align=\"center\">apollo-configservice<br><br>apollo-adminservice</td>\n</tr>\n<tr>\n<td align=\"center\">LDN(待加入)</td>\n<td align=\"center\">localhost:8080<br>localhost:8091</td>\n<td align=\"center\">apollo-configservice<br>apollo-adminservice</td>\n</tr>\n</tbody></table>\n<h3 id=\"各节点数据库规划\"><a href=\"#各节点数据库规划\" class=\"headerlink\" title=\"各节点数据库规划\"></a>各节点数据库规划</h3><table>\n<thead>\n<tr>\n<th align=\"center\">环境</th>\n<th align=\"center\">地址</th>\n<th align=\"center\">库名(字符集)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SH</td>\n<td align=\"center\">rm-uxxxxxmo7w90110.mysql.rds.aliyuncs.com:3306</td>\n<td align=\"center\">apolloportaldb(UTF8MB4)</td>\n</tr>\n<tr>\n<td align=\"center\">SH</td>\n<td align=\"center\">rm-uxxxxxmo7w90110.mysql.rds.aliyuncs.com:3306</td>\n<td align=\"center\">apolloconfigdb(UTF8MB4)</td>\n</tr>\n<tr>\n<td align=\"center\">SG</td>\n<td align=\"center\">rm-t4xxxxxx91nov.mysql.singapore.rds.aliyuncs.com:3306</td>\n<td align=\"center\">apolloconfigdb(UTF8MB4)</td>\n</tr>\n<tr>\n<td align=\"center\">LDN(待加入)</td>\n<td align=\"center\">xxxx:3306</td>\n<td align=\"center\">apolloconfigdb(UTF8MB4)</td>\n</tr>\n</tbody></table>\n<h2 id=\"上海节点部署\"><a href=\"#上海节点部署\" class=\"headerlink\" title=\"上海节点部署\"></a>上海节点部署</h2><h3 id=\"创建授权mysql库\"><a href=\"#创建授权mysql库\" class=\"headerlink\" title=\"创建授权mysql库\"></a>创建授权mysql库</h3><p><img src=\"/images/pasted-174.png\" alt=\"createdb\"><br>初始化sql: <a href=\"https://github.com/apolloconfig/apollo/blob/master/scripts/sql/apolloconfigdb.sql\">https://github.com/apolloconfig/apollo/blob/master/scripts/sql/apolloconfigdb.sql</a><br><img src=\"/images/pasted-176.png\" alt=\"initmysql\"></p>\n<h3 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为外部 mysql 服务设置 service</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-mysql-for-apollo-sh-env</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">service-mysql-for-apollo-sh-env</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ExternalName</span></span><br><span class=\"line\">  <span class=\"attr\">externalName:</span> <span class=\"string\">rm-xxxxxhmo7w90110.mysql.rds.aliyuncs.com</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-apollo-admin-server-sh</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">service-apollo-admin-server-sh</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8090</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8090</span></span><br><span class=\"line\">      <span class=\"attr\">nodePort:</span> <span class=\"number\">30003</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-admin-server-sh</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">ClientIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-apollo-meta-server-sh</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">service-apollo-meta-server-sh</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-config-server-sh</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">ClientIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-apollo-config-server-sh</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">service-apollo-config-server-sh</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">nodePort:</span> <span class=\"number\">30002</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-config-server-sh</span> </span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">ClientIP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># configmap for apollo-admin-server-sh</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">configmap-apollo-admin-server-sh</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">application-github.properties:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.url = jdbc:mysql://service-mysql-for-apollo-sh-env.baseservice:3306/apolloconfigdb?characterEncoding=utf8</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.username = wikifx</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.password = Wikifx123</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># configmap for apollo-config-server-sh</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">configmap-apollo-config-server-sh</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">application-github.properties:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.url = jdbc:mysql://service-mysql-for-apollo-sh-env.baseservice:3306/apolloconfigdb?characterEncoding=utf8</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.username = wikifx</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.password = Wikifx123</span></span><br><span class=\"line\"><span class=\"string\">    apollo.admin-service.url = http://service-apollo-admin-server-sh.baseservice:8090</span></span><br><span class=\"line\"><span class=\"string\">    apollo.config-service.url = http://service-apollo-config-server-sh.baseservice:8080</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">deployment-apollo-admin-server-sh</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">deployment-apollo-admin-server-sh</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-admin-server-sh</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-admin-server-sh</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">podAntiAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">100</span></span><br><span class=\"line\">            <span class=\"attr\">podAffinityTerm:</span></span><br><span class=\"line\">              <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">                <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app</span></span><br><span class=\"line\">                  <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                  <span class=\"attr\">values:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"string\">pod-apollo-admin-server-sh</span></span><br><span class=\"line\">              <span class=\"attr\">topologyKey:</span> <span class=\"string\">kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-admin-server-sh</span></span><br><span class=\"line\">          <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">configmap-apollo-admin-server-sh</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/base:apollo-adminservice-1.9.0-SNAPSHOT</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">container-apollo-admin-server-sh</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">              <span class=\"attr\">containerPort:</span> <span class=\"number\">8090</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-admin-server-sh</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/apollo-adminservice/config/application-github.properties</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">application-github.properties</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SPRING_PROFILES_ACTIVE</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&quot;github,kubernetes&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8090</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8090</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">120</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span>  </span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">statefulset-apollo-config-server-sh</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">statefulset-apollo-config-server-sh</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">service-apollo-meta-server-sh</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-config-server-sh</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-config-server-sh</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">podAntiAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">100</span></span><br><span class=\"line\">            <span class=\"attr\">podAffinityTerm:</span></span><br><span class=\"line\">              <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">                <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app</span></span><br><span class=\"line\">                  <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                  <span class=\"attr\">values:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"string\">pod-apollo-config-server-sh</span></span><br><span class=\"line\">              <span class=\"attr\">topologyKey:</span> <span class=\"string\">kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-config-server-sh</span></span><br><span class=\"line\">          <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">configmap-apollo-config-server-sh</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/base:apollo-configservice-1.9.0-SNAPSHOT</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">container-apollo-config-server-sh</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">              <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-config-server-sh</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/apollo-configservice/config/application-github.properties</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">application-github.properties</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SPRING_PROFILES_ACTIVE</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&quot;github,kubernetes&quot;</span></span><br><span class=\"line\">            <span class=\"comment\"># 添加环境变量禁用apollo原生Eureka</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span>  <span class=\"number\">120</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f allinone.yaml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置eureka地址（传统部署非常重要）<br>apolloconfig 在服务启动后会启动一个eureka服务注册中心，apolloadmin 和apolloconfig 都会注册其中，eurek的连接地址配置在数据库中配置或者在ConfigMap中配置：<br>格式为：<code>http://&lt;config server pod名&gt;.&lt;meta server 服务名&gt;:&lt;meta server端口号&gt;/eureka/</code></p>\n</blockquote>\n<ul>\n<li>方式一：通过Spring Boot文件 application-github.properties配置（推荐）<br>推荐此方式配置 eureka.service.url，因为可以通过ConfigMap的方式传入容器，无需再修改数据库的字段。如果该配置希望以数据库中为准，那么在 yaml 中直接删除该配置项即可。</li>\n<li>方式二：修改数据表 ApolloConfigDB.ServerConfig<br>修改数据库表 ApolloConfigDB.ServerConfig的 eureka.service.url。<br><img src=\"/images/pasted-175.png\" alt=\"install\"></li>\n</ul>\n<blockquote>\n<p>Apollo 1.7.0版本开始增加了基于Kubernetes原生服务发现的部署模式，由于不再使用内置的Eureka，所以在整体部署上有很大简化。</p>\n</blockquote>\n<blockquote>\n<p>以上配置禁用了Apollo原生的Eureka，采用了Kubernetes原生服务发现<br><img src=\"/images/pasted-177.png\" alt=\"ck\"></p>\n</blockquote>\n<h2 id=\"新加坡节点部署\"><a href=\"#新加坡节点部署\" class=\"headerlink\" title=\"新加坡节点部署\"></a>新加坡节点部署</h2><p>同上，注意修改数据库连接串，以及对应节点的数据库账号和密码。<br>初始化sql: <a href=\"https://github.com/apolloconfig/apollo/blob/master/scripts/sql/apolloconfigdb.sql\">https://github.com/apolloconfig/apollo/blob/master/scripts/sql/apolloconfigdb.sql</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-mysql-for-apollo-sg-env</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">service-mysql-for-apollo-sg-env</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ExternalName</span></span><br><span class=\"line\">  <span class=\"attr\">externalName:</span> <span class=\"string\">rm-xxxxxxov.mysql.singapore.rds.aliyuncs.com</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-apollo-admin-server-sg</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">service-apollo-admin-server-sg</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8090</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8090</span></span><br><span class=\"line\">      <span class=\"attr\">nodePort:</span> <span class=\"number\">30003</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-admin-server-sg</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">ClientIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-apollo-meta-server-sg</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">service-apollo-meta-server-sg</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-config-server-sg</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">ClientIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-apollo-config-server-sg</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">service-apollo-config-server-sg</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">nodePort:</span> <span class=\"number\">30002</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-config-server-sg</span> </span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">ClientIP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">configmap-apollo-admin-server-sg</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">application-github.properties:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.url = jdbc:mysql://service-mysql-for-apollo-sg-env.baseservice:3306/apolloconfigdb?characterEncoding=utf8</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.username = wikifx</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.password = Wikifx2022</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># configmap for apollo-config-server-sg</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">configmap-apollo-config-server-sg</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">application-github.properties:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.url = jdbc:mysql://service-mysql-for-apollo-sg-env.baseservice:3306/apolloconfigdb?characterEncoding=utf8</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.username = wikifx</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.password = Wikifx2022</span></span><br><span class=\"line\"><span class=\"string\">    apollo.admin-service.url = http://172.21.114.195:30003</span></span><br><span class=\"line\"><span class=\"string\">    apollo.config-service.url = http://172.21.114.195:30002</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">deployment-apollo-admin-server-sg</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">deployment-apollo-admin-server-sg</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-admin-server-sg</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-admin-server-sg</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">podAntiAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">100</span></span><br><span class=\"line\">            <span class=\"attr\">podAffinityTerm:</span></span><br><span class=\"line\">              <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">                <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app</span></span><br><span class=\"line\">                  <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                  <span class=\"attr\">values:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"string\">pod-apollo-admin-server-sg</span></span><br><span class=\"line\">              <span class=\"attr\">topologyKey:</span> <span class=\"string\">kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-admin-server-sg</span></span><br><span class=\"line\">          <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">configmap-apollo-admin-server-sg</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/base:apollo-adminservice-1.9.0-SNAPSHOT</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">container-apollo-admin-server-sg</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">              <span class=\"attr\">containerPort:</span> <span class=\"number\">8090</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-admin-server-sg</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/apollo-adminservice/config/application-github.properties</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">application-github.properties</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SPRING_PROFILES_ACTIVE</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&quot;github,kubernetes&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8090</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8090</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">120</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span>  </span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">statefulset-apollo-config-server-sg</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">statefulset-apollo-config-server-sg</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">service-apollo-meta-server-sg</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-config-server-sg</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-config-server-sg</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">podAntiAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">100</span></span><br><span class=\"line\">            <span class=\"attr\">podAffinityTerm:</span></span><br><span class=\"line\">              <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">                <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app</span></span><br><span class=\"line\">                  <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                  <span class=\"attr\">values:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"string\">pod-apollo-config-server-sg</span></span><br><span class=\"line\">              <span class=\"attr\">topologyKey:</span> <span class=\"string\">kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-config-server-sg</span></span><br><span class=\"line\">          <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">configmap-apollo-config-server-sg</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/base:apollo-configservice-1.9.0-SNAPSHOT</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">container-apollo-config-server-sg</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">              <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-config-server-sg</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/apollo-configservice/config/application-github.properties</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">application-github.properties</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SPRING_PROFILES_ACTIVE</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&quot;github,kubernetes&quot;</span></span><br><span class=\"line\">            <span class=\"comment\"># 添加环境变量禁用apollo原生Eureka</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span>  <span class=\"number\">120</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f allinone.yaml</span></span><br></pre></td></tr></table></figure>\n<p><strong>指定Meta Server返回的apollo-configservice和apollo-adminservice地址。(多数据中心k8s部署必要)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># configmap for apollo-config-server-sg</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">...</span><br><span class=\"line\">    apollo.admin-service.url = http://172.21.114.195:30003</span><br><span class=\"line\">    apollo.config-service.url = http://172.21.114.195:30002</span><br><span class=\"line\">#这里的地址为线上K8S集群前端的SLB地址</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上配置禁用了Apollo原生的Eureka，采用了Kubernetes原生服务发现<br><img src=\"/images/pasted-178.png\" alt=\"ck\"></p>\n</blockquote>\n<h2 id=\"ApolloPortal部署\"><a href=\"#ApolloPortal部署\" class=\"headerlink\" title=\"ApolloPortal部署\"></a>ApolloPortal部署</h2><h3 id=\"创建授权mysql库-1\"><a href=\"#创建授权mysql库-1\" class=\"headerlink\" title=\"创建授权mysql库\"></a>创建授权mysql库</h3><p><img src=\"/images/pasted-179.png\" alt=\"create\"><br>初始化sql: <a href=\"https://github.com/apolloconfig/apollo/blob/master/scripts/sql/apolloportaldb.sql\">https://github.com/apolloconfig/apollo/blob/master/scripts/sql/apolloportaldb.sql</a><br><img src=\"/images/pasted-180.png\" alt=\"init\"></p>\n<h3 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为外部 mysql 服务设置 service</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-mysql-for-portal-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">service-mysql-for-portal-server</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ExternalName</span></span><br><span class=\"line\">  <span class=\"attr\">externalName:</span> <span class=\"string\">rm-uf6xxxxxxw90110.mysql.rds.aliyuncs.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># configmap for apollo-portal-server</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">configmap-apollo-portal-server</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">application-github.properties:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.url = jdbc:mysql://service-mysql-for-portal-server.baseservice:3306/apolloportaldb?characterEncoding=utf8</span></span><br><span class=\"line\"><span class=\"string\">    # mysql username</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.username = wikifx</span></span><br><span class=\"line\"><span class=\"string\">    # mysql password</span></span><br><span class=\"line\"><span class=\"string\">    spring.datasource.password = Wikifx123</span></span><br><span class=\"line\"><span class=\"string\">    # enabled environments</span></span><br><span class=\"line\"><span class=\"string\">    apollo.portal.envs = sh,sg</span></span><br><span class=\"line\"><span class=\"string\"></span>  <span class=\"attr\">apollo-env.properties:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    sh.meta=http://service-apollo-config-server-sh.baseservice:8080</span></span><br><span class=\"line\"><span class=\"string\">    sg.meta=http://172.21.114.195:30002</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-apollo-portal-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">service-apollo-portal-server</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8070</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8070</span></span><br><span class=\"line\">      <span class=\"attr\">nodePort:</span> <span class=\"number\">30001</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-portal-server</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"comment\"># portal session 保持</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">ClientIP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">deployment-apollo-portal-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">deployment-apollo-portal-server</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"comment\"># 2 个实例</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-portal-server</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">pod-apollo-portal-server</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">podAntiAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">100</span></span><br><span class=\"line\">            <span class=\"attr\">podAffinityTerm:</span></span><br><span class=\"line\">              <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">                <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app</span></span><br><span class=\"line\">                  <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                  <span class=\"attr\">values:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"string\">pod-apollo-portal-server</span></span><br><span class=\"line\">              <span class=\"attr\">topologyKey:</span> <span class=\"string\">kubernetes.io/hostname</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-portal-server</span></span><br><span class=\"line\">          <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">configmap-apollo-portal-server</span></span><br><span class=\"line\">            <span class=\"attr\">items:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">application-github.properties</span></span><br><span class=\"line\">                <span class=\"attr\">path:</span> <span class=\"string\">application-github.properties</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">apollo-env.properties</span></span><br><span class=\"line\">                <span class=\"attr\">path:</span> <span class=\"string\">apollo-env.properties</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/base:apollo-portal-1.9.0-SNAPSHOT</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">container-apollo-portal-server</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">              <span class=\"attr\">containerPort:</span> <span class=\"number\">8070</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-portal-server</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/apollo-portal/config/application-github.properties</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">application-github.properties</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume-configmap-apollo-portal-server</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/apollo-portal/config/apollo-env.properties</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">apollo-env.properties</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">APOLLO_PORTAL_SERVICE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&quot;service-apollo-portal-server.baseservice&quot;</span>  </span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8070</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8070</span></span><br><span class=\"line\">            <span class=\"comment\"># 120s 内, server 未启动则重启 container</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">120</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f allinone.yaml</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h3><p><img src=\"/images/pasted-183.png\" alt=\"ck\"><br><img src=\"/images/pasted-181.png\" alt=\"ck\"><br><img src=\"/images/pasted-184.png\" alt=\"ck\"></p>\n","categories":["OPS"],"tags":["OPS","Kubernetes","Apollo"]},{"title":"GitLab-CI/CD","url":"/forward/852a3e1.html","content":"<h2 id=\"传统的应用开发发布模式\"><a href=\"#传统的应用开发发布模式\" class=\"headerlink\" title=\"传统的应用开发发布模式\"></a>传统的应用开发发布模式</h2><ul>\n<li><strong>开发团队</strong> 在开发环境中完成软件开发，单元测试，测试通过，提交到代码版本管理库。</li>\n<li><strong>运维团队</strong> 把应用部署到测试环境，供QA团队测试，测试通过后部署生产环境。</li>\n<li><strong>QA 团队</strong> purple 进行测试，测试通过后通知部署人员发布到生产环境。</li>\n</ul>\n<p><img src=\"/images/pasted-89.png\" alt=\"SVN\"></p>\n<h2 id=\"传统发布面临的挑战\"><a href=\"#传统发布面临的挑战\" class=\"headerlink\" title=\"传统发布面临的挑战\"></a>传统发布面临的挑战</h2><ul>\n<li><strong>错误发现不及时</strong> 很多错误在项目的早期可能就存在，到最后集成的时候才发现问题。</li>\n<li><strong>人工低级错误发生</strong> 产品和服务交付中的关键活动全都需要手动操作。</li>\n<li><strong>团队工作效率低</strong> 需要等待他人的工作完成后才能进行自己的工作。</li>\n<li><strong>开发运维对立</strong> 开发人员想要快速更新，运维人员追求稳定，各自的针对的方向不同。</li>\n</ul>\n<p>经过上述问题我们需要作出改变，如何改变?</p>\n<h2 id=\"持续集成与持续交付\"><a href=\"#持续集成与持续交付\" class=\"headerlink\" title=\"持续集成与持续交付\"></a>持续集成与持续交付</h2><p>软件开发的连续方法基于自动执行脚本，以最大程度地减少在开发应用程序时引入错误的机会。从开发新代码到部署新代码，他们几乎不需要人工干预，甚至根本不需要干预。</p>\n<p>它涉及到在每次小的迭代中就不断地构建，测试和部署代码更改，从而减少了基于错误或失败的先前版本开发新代码的机会。</p>\n<p>此方法有三种主要方法，每种方法都将根据最适合您的策略的方式进行应用。</p>\n<h3 id=\"持续集成-Continuous-Integration\"><a href=\"#持续集成-Continuous-Integration\" class=\"headerlink\" title=\"持续集成(Continuous Integration)\"></a>持续集成(Continuous Integration)</h3><ul>\n<li>持续合并开发人员正在开发编写的所有代码的一种做法。</li>\n<li>通常一天内进行多次合并和提交代码。</li>\n<li>从存储库或生产环境中进行构建和自动化测试，以确保没有集成问题并及早发现任何问题。</li>\n</ul>\n<p>开发人员提交代码的时候一般先在本地测试验证，只要开发人员提交代码到版本控制系统就会触发一条提交流水线，对本次提交进行验证。</p>\n<h3 id=\"持续交付-Continuous-Delivery\"><a href=\"#持续交付-Continuous-Delivery\" class=\"headerlink\" title=\"持续交付(Continuous Delivery)\"></a>持续交付(Continuous Delivery)</h3><p>持续交付是超越持续集成的一步。不仅会在推送到代码库的每次代码更改时都进行构建和测试，而且，作为附加步骤，即使部署是手动触发的，它也可以连续部署。此方法可确保自动检查代码，但需要人工干预才能从策略上手动触发更改的部署。</p>\n<h3 id=\"持续部署-Continuous-Deployment\"><a href=\"#持续部署-Continuous-Deployment\" class=\"headerlink\" title=\"持续部署(Continuous Deployment)\"></a>持续部署(Continuous Deployment)</h3><ul>\n<li>通常可以通过将更改自动推送到发布系统来随时将软件发布到生产环境中。</li>\n<li>持续部署会更进一步，并自动将更改推送到生产中。</li>\n</ul>\n<p>类似于持续交付，持续部署也是超越持续集成的又一步。不同之处在于，您无需将其手动部署，而是将其设置为自动部署。部署您的应用程序完全不需要人工干预。</p>\n<h3 id=\"CI-CD的价值体现\"><a href=\"#CI-CD的价值体现\" class=\"headerlink\" title=\"CI/CD的价值体现\"></a>CI/CD的价值体现</h3><blockquote>\n</blockquote>\n<ul>\n<li>尽早反馈，尽早发现错误。</li>\n<li>减少集成问题，每次发现问题当时解决，避免问题堆积。</li>\n<li>每次更改都能成功发布，降低发布风险。</li>\n<li>更加频繁的交付价值，客户反馈。</li>\n</ul>\n<h3 id=\"推荐常用的CI-CD工具\"><a href=\"#推荐常用的CI-CD工具\" class=\"headerlink\" title=\"推荐常用的CI/CD工具\"></a>推荐常用的CI/CD工具</h3><blockquote>\n<h4 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h4><p>专业的CI工具，可扩展自动化服务器、安装配置简单、丰富的插件库、分布式架构设计、支持所有的平台、可视化的管理页面。<br><img src=\"/images/pasted-91.png\" alt=\"Jenkins\"></p>\n</blockquote>\n<blockquote>\n<h4 id=\"GitLab\"><a href=\"#GitLab\" class=\"headerlink\" title=\"GitLab\"></a>GitLab</h4><p>端到端DevOps工具，常用功能：代码审查、问题跟踪、动态订阅、易于扩展、项目wiki、多角色项目管理、项目代码在线编译预览、CI工具集成。<br><img src=\"/images/pasted-92.png\" alt=\"GitLab\"></p>\n</blockquote>\n<h3 id=\"GitLab-CI-CD组件\"><a href=\"#GitLab-CI-CD组件\" class=\"headerlink\" title=\"GitLab CI/CD组件\"></a>GitLab CI/CD组件</h3><ul>\n<li>GitLab CI/CD<ul>\n<li>GitLab的一部分，GitLab是一个Web应用程序，具有将其状态存储在数据库中的API。</li>\n<li>除了GitLab的所有功能之外，它还管理项目/构建并提供一个不错的用户界面。</li>\n</ul>\n</li>\n<li>GitLab Runner<ul>\n<li>是一个处理构建的应用程序。</li>\n<li>可以单独部署，并通过API与GitLab CI / CD一起使用。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/pasted-93.png\" alt=\"GitLab CI/CD\"></p>\n<ul>\n<li><code>.gitlab-ci.yml</code> 定义流水线作业运行，位于应用项目根目录下。</li>\n</ul>\n<h3 id=\"GitLab-CI-CD工作原理\"><a href=\"#GitLab-CI-CD工作原理\" class=\"headerlink\" title=\"GitLab CI/CD工作原理\"></a>GitLab CI/CD工作原理</h3><ul>\n<li>将代码托管到Git存储库。</li>\n<li>在项目根目录创建ci文件 <code>.gitlab-ci.yml</code> ，在文件中指定构建，测试和部署脚本。</li>\n<li>GitLab将检测到它并使用名为GitLab Runner的工具运行脚本。</li>\n<li>脚本被分组为作业，它们共同组成了一个管道。</li>\n</ul>\n<h3 id=\"安装GitLabRunner\"><a href=\"#安装GitLabRunner\" class=\"headerlink\" title=\"安装GitLabRunner\"></a>安装GitLabRunner</h3><p>为什么不是 GitLab CI 来运行那些构建任务？<br>一般来说，构建任务都会占用很多的系统资源 (譬如编译代码)，而 GitLab CI 又是 GitLab 的一部分，如果由 GitLab CI 来运行构建任务的话，在执行构建任务的时候，GitLab 的性能会大幅下降。</p>\n<p>GitLab CI 最大的作用是管理各个项目的构建状态，因此，运行构建任务这种浪费资源的事情就交给 GitLab Runner 来做拉！<br>因为 GitLab Runner 可以安装到不同的机器上，所以在构建任务运行期间并不会影响到 GitLab 的性能</p>\n<p><strong>在GNU / Linux上手动安装GitLab Runner</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">如果您不能使用deb/rpm存储库安装GitLab Runner，或者您的GNU / Linux操作系统不在支持的版本中，则可以使用以下一种方法手动安装它，这是最后的选择。</span><br><span class=\"line\"></span><br><span class=\"line\">通过deb或rpm软件包</span><br><span class=\"line\">下载软件包</span><br><span class=\"line\"></span><br><span class=\"line\">在https://gitlab-runner-downloads.s3.amazonaws.com/latest/index.html上找到最新的文件名和选项 。</span><br><span class=\"line\">选择一个版本并下载二进制文件，如文档所述，该文件用于下载任何其他标记的 GitLab Runner发行版。</span><br><span class=\"line\">例如，对于Debian或Ubuntu：</span><br><span class=\"line\"></span><br><span class=\"line\">curl -LJO https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_&lt;<span class=\"built_in\">arch</span>&gt;.deb</span><br><span class=\"line\"></span><br><span class=\"line\">dpkg -i gitlab-runner_&lt;<span class=\"built_in\">arch</span>&gt;.deb</span><br><span class=\"line\"></span><br><span class=\"line\">dpkg -i gitlab-runner_&lt;<span class=\"built_in\">arch</span>&gt;.deb</span><br><span class=\"line\">例如，对于CentOS或Red Hat Enterprise Linux：</span><br><span class=\"line\"></span><br><span class=\"line\">curl -LJO https://gitlab-runner-downloads.s3.amazonaws.com/latest/rpm/gitlab-runner_&lt;<span class=\"built_in\">arch</span>&gt;.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -i gitlab-runner_&lt;<span class=\"built_in\">arch</span>&gt;.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -Uvh gitlab-runner_&lt;<span class=\"built_in\">arch</span>&gt;.rpm</span><br></pre></td></tr></table></figure>\n<p><strong>进入GitLab 管理中心 -&gt; 概述 -&gt; Runners页面，获取Gitlab 注册令牌</strong><br><img src=\"/images/pasted-96.png\" alt=\"GitLabRunner\"></p>\n<p><strong>在gitlab-runner服务器执行命令注册runner</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@gitlab ~]<span class=\"comment\"># gitlab-runner register</span></span><br><span class=\"line\">Runtime platform                                    <span class=\"built_in\">arch</span>=amd64 os=linux pid=22990 revision=e0218c92 version=14.3.2</span><br><span class=\"line\">Running <span class=\"keyword\">in</span> system-mode.                            </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">Enter the GitLab instance URL (<span class=\"keyword\">for</span> example, https://gitlab.com/):</span><br><span class=\"line\">http://192.168.1.55/</span><br><span class=\"line\">Enter the registration token:</span><br><span class=\"line\">zNSMJ61xg95zVZxKEp5A</span><br><span class=\"line\">Enter a description <span class=\"keyword\">for</span> the runner:</span><br><span class=\"line\">[gitlab]: runner001</span><br><span class=\"line\">Enter tags <span class=\"keyword\">for</span> the runner (comma-separated):</span><br><span class=\"line\">runner001</span><br><span class=\"line\">Registering runner... succeeded                     runner=zNSMJ61x</span><br><span class=\"line\">Enter an executor: parallels, ssh, docker+machine, docker-ssh+machine, kubernetes, custom, docker, docker-ssh, shell, virtualbox:</span><br><span class=\"line\">docker</span><br><span class=\"line\">Runner registered successfully. Feel free to start it, but <span class=\"keyword\">if</span> it<span class=\"string\">&#x27;s running already the config should be automatically reloaded!</span></span><br></pre></td></tr></table></figure>\n<p>runner配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@ops177 ~]<span class=\"comment\"># cat /etc/gitlab-runner/config.toml </span></span><br><span class=\"line\">concurrent = 20</span><br><span class=\"line\">check_interval = 0</span><br><span class=\"line\"></span><br><span class=\"line\">[session_server]</span><br><span class=\"line\">  session_timeout = 1800</span><br><span class=\"line\"></span><br><span class=\"line\">[[runners]]</span><br><span class=\"line\">  name = <span class=\"string\">&quot;ops177&quot;</span></span><br><span class=\"line\">  url = <span class=\"string\">&quot;http://192.168.1.55/&quot;</span></span><br><span class=\"line\">  token = <span class=\"string\">&quot;B_SUUoftkts1LxfzS8hm&quot;</span></span><br><span class=\"line\">  executor = <span class=\"string\">&quot;docker&quot;</span></span><br><span class=\"line\">  [runners.custom_build_dir]</span><br><span class=\"line\">  [runners.cache]</span><br><span class=\"line\">    [runners.cache.s3]</span><br><span class=\"line\">    [runners.cache.gcs]</span><br><span class=\"line\">    [runners.cache.azure]</span><br><span class=\"line\">  [runners.docker]</span><br><span class=\"line\">    tls_verify = <span class=\"literal\">false</span></span><br><span class=\"line\">    image = <span class=\"string\">&quot;registry.cn-shanghai.aliyuncs.com/wikifx/kong:busybox&quot;</span></span><br><span class=\"line\">    privileged = <span class=\"literal\">false</span></span><br><span class=\"line\">    disable_entrypoint_overwrite = <span class=\"literal\">false</span></span><br><span class=\"line\">    oom_kill_disable = <span class=\"literal\">false</span></span><br><span class=\"line\">    disable_cache = <span class=\"literal\">false</span></span><br><span class=\"line\">    volumes = [<span class=\"string\">&quot;/cache&quot;</span>,<span class=\"string\">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>]</span><br><span class=\"line\">    shm_size = 0</span><br><span class=\"line\"><span class=\"comment\"># 将本地docker.sock挂载到docker镜像中实现打包出来的业务镜像持久化到本地</span></span><br></pre></td></tr></table></figure>\n\n<p>刷新页面<br><img src=\"/images/pasted-97.png\" alt=\"GitLabRunner\"></p>\n<h3 id=\"持续集成相关的概念\"><a href=\"#持续集成相关的概念\" class=\"headerlink\" title=\"持续集成相关的概念\"></a>持续集成相关的概念</h3><p><strong>Pipeline</strong><br>一次 Pipeline 其实相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。<br>任何提交或者 Merge Request 的合并都可以触发 Pipeline，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">+------------------+           +----------------+</span><br><span class=\"line\">|                  |  trigger  |                |</span><br><span class=\"line\">|   Commit / MR    +----------&gt;+    Pipeline    |</span><br><span class=\"line\">+------------------+           +----------------+</span><br></pre></td></tr></table></figure>\n<p><strong>Stages</strong><br>Stages 表示构建阶段，说白了就是上面提到的流程。<br>我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p>\n<ul>\n<li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始</li>\n<li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li>\n<li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li>\n</ul>\n<p>因此，Stages 和 Pipeline 的关系就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">+--------------------------------------------------------+</span><br><span class=\"line\">|  Pipeline                                              |</span><br><span class=\"line\">|  +-----------+     +------------+      +------------+  |</span><br><span class=\"line\">|  |  Stage 1  |----&gt;|   Stage 2  |-----&gt;|   Stage 3  |  |</span><br><span class=\"line\">|  +-----------+     +------------+      +------------+  |</span><br><span class=\"line\">+--------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p><strong>Jobs</strong><br>Jobs 表示构建工作，表示某个 Stage 里面执行的工作。<br>我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p>\n<ul>\n<li>相同 Stage 中的 Jobs 会并行执行</li>\n<li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li>\n<li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败</li>\n</ul>\n<p>所以，Jobs 和 Stage 的关系就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">+------------------------------------------+</span><br><span class=\"line\">|  Stage 1                                 |</span><br><span class=\"line\">|  +---------+  +---------+  +---------+   |</span><br><span class=\"line\">|  |  Job 1  |  |  Job 2  |  |  Job 3  |   |</span><br><span class=\"line\">|  +---------+  +---------+  +---------+   |</span><br><span class=\"line\">+------------------------------------------+</span><br></pre></td></tr></table></figure>\n<h3 id=\"gitlab-ci-yml\"><a href=\"#gitlab-ci-yml\" class=\"headerlink\" title=\"gitlab-ci.yml\"></a>gitlab-ci.yml</h3><p>配置好 Runner 之后，我们要做的事情就是在项目根目录中添加 .gitlab-ci.yml 文件。当我们添加了 .gitlab-ci.yml 文件后，每次提交代码或者合并 MR 都会自动运行构建任务。</p>\n<p>Pipeline 是通过提交代码或者合并 MR 来触发的。那么 Pipeline 和 .gitlab-ci.yml 有什么关系呢？<br>其实 .gitlab-ci.yml 就是拿来在定义 Pipeline 的。</p>\n<p>使用GitLab自带的流水线，必须要定义流水线的内容，而定义内容的文件默认叫做.gitlab-ci.yml，使用yml的语法进行编写。<br>目前任务关键词有28个，全局的关键词有10个，两者重叠的有很多。掌握了这些关键词的用法，可以编写逻辑严谨，易于扩展的流水线。</p>\n<p>任务的28个关键词分别是,<br>script, after_script, allow_failure, artifacts, before_script, cache, coverage, dependencies, environment, except, extends, image, include, interruptible, only, pages, parallel, release, resource_group, retry, rules, services, stage, tags, timeout, trigger, variables, when</p>\n<p>全局的关键词<br>image，services，before_script，after_script，tags，cache，artifacts，retry，timeout，interruptible</p>\n<p>最常任务中最常用的是这七个script，artifacts，stage， when，tags，image，cache，<br>下面我先来详细介绍一下这七个关键词，知道了这个七个关键词，一般的流水线随随便便拿下，</p>\n<h4 id=\"gitlab-ci-yml常用关键词\"><a href=\"#gitlab-ci-yml常用关键词\" class=\"headerlink\" title=\"gitlab-ci.yml常用关键词\"></a>gitlab-ci.yml常用关键词</h4><ul>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#stages\">stages</a> 定义管道阶段的名称和顺序。</li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#stage\">stage</a> 将指定作业(job)分配给指定stage(阶段)</li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#script\">script</a> 由运行程序执行的 Shell 脚本。[单行/多行]</li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#tags\">tags</a> 来选择可用于该项目的runner[project &gt; settings &gt; ci_cd &gt; Runner]</li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#retry\">retry</a> 使用retry配置作业多少次失败的情况下重试。</li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#image\">image</a> 指定一个基础Docker镜像作为基础运行环境，经常用到的镜像有node java python docker</li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/index.html#only--except\">only/except</a> 限定当前任务的执行条件，如：只有在指定分区才能被看到</li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#when\">when</a> 实现再发生故障或尽管发生故障时仍能运行的作业<ul>\n<li>on_success 所有任务执行成功后</li>\n<li>on_failure 当至少一个任务失败后</li>\n<li>always 执行作业，而不考虑作业在早期阶段的状态。</li>\n<li>manual 手动执行任务</li>\n<li>delayed 延迟执行任务</li>\n<li>never<br>在rules中不排除执行的任务<br>在workflow:rules不允许的流水线</li>\n</ul>\n</li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#cache\">cache</a> 是将当前工作环境目录中的一些文件，文件夹等存储起来。用于在各个任务初始化的时候恢复</li>\n</ul>\n<h4 id=\"基本写法\"><a href=\"#基本写法\" class=\"headerlink\" title=\"基本写法\"></a>基本写法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#自定义阶段</span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - buildsoft</span><br><span class=\"line\">  - builddocker</span><br><span class=\"line\">  - deploy_dev</span><br><span class=\"line\">  - clear</span><br><span class=\"line\"></span><br><span class=\"line\">variables:</span><br><span class=\"line\">  GOPROXY: &quot;https://goproxy.cn&quot;</span><br><span class=\"line\">  IMAGENAME: &quot;ipinversion&quot;</span><br><span class=\"line\">  IMAGE: 192.168.200.177/dev_image/ipinversion:$&#123;IMAGENAME&#125;_$&#123;CI_PIPELINE_ID&#125;</span><br><span class=\"line\">  SERVICE_NAME: ipinversion</span><br><span class=\"line\">  NAMESPACE: baseservice</span><br><span class=\"line\">  NODE_ENV: development</span><br><span class=\"line\"></span><br><span class=\"line\">buildsoft:</span><br><span class=\"line\">  stage: buildsoft</span><br><span class=\"line\">  image: 192.168.200.177/base/golang:latest</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - go build -o ipinversion .</span><br><span class=\"line\">    - mkdir app/</span><br><span class=\"line\">    - cp ipinversion app/</span><br><span class=\"line\">    - cp -R conf app/</span><br><span class=\"line\">    - cp -R Dockerfile app/</span><br><span class=\"line\">    - mkdir -p app/data</span><br><span class=\"line\">  # tags:</span><br><span class=\"line\">  #   - running01</span><br><span class=\"line\">  retry: 2 #重试机制</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    paths:</span><br><span class=\"line\">      - app/</span><br><span class=\"line\"> </span><br><span class=\"line\">builddocker:</span><br><span class=\"line\">  stage: builddocker</span><br><span class=\"line\">  image: 192.168.200.177/base/dood:latest</span><br><span class=\"line\">  services:</span><br><span class=\"line\">  # - name: docker:dind</span><br><span class=\"line\">  #   command:</span><br><span class=\"line\">  #     [</span><br><span class=\"line\">  #       &#x27;--insecure-registry=192.168.200.177&#x27;,</span><br><span class=\"line\">  #     ]</span><br><span class=\"line\">  before_script:</span><br><span class=\"line\">    - echo &quot;$IMGHUBUSER&quot;</span><br><span class=\"line\">    - echo &quot;$IMGHUBPWD&quot;</span><br><span class=\"line\">    - docker login 192.168.200.177 -u &quot;$IMGHUBUSER&quot; -p &quot;$IMGHUBPWD&quot;</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - docker build -t $&#123;IMAGE&#125; -f app/Dockerfile app/</span><br><span class=\"line\">    - docker push $&#123;IMAGE&#125;</span><br><span class=\"line\">  after_script:</span><br><span class=\"line\">    - docker logout $&#123;REGISTRY_URL&#125;</span><br><span class=\"line\">  dependencies:</span><br><span class=\"line\">    - buildsoft</span><br><span class=\"line\">  # tags:</span><br><span class=\"line\">  #   - running01</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">  # when:</span><br><span class=\"line\">  #   manual</span><br><span class=\"line\"></span><br><span class=\"line\">deploy_dev:</span><br><span class=\"line\">  stage: deploy_dev</span><br><span class=\"line\">  before_script:</span><br><span class=\"line\">    - mkdir ~/.kube</span><br><span class=\"line\">    - cat $&#123;KUBE_CONFIG&#125; &gt; ~/.kube/config</span><br><span class=\"line\">  image: 192.168.200.177/base/kubectl:v1.18.12</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - cat $&#123;APPLYFILE&#125; &gt; applyfile.yaml</span><br><span class=\"line\">    - envsubst &lt; applyfile.yaml | kubectl apply -f -</span><br><span class=\"line\">  # tags:</span><br><span class=\"line\">  #   - running01</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">  </span><br><span class=\"line\">clear:</span><br><span class=\"line\">  stage: clear</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - rm -rf *</span><br><span class=\"line\">    - ls -l</span><br><span class=\"line\">  # tags:</span><br><span class=\"line\">  #   - running01</span><br></pre></td></tr></table></figure>\n<p><strong>APPLYFILE发布文件模板变量</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">$SERVICE_NAME</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">$NAMESPACE</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">$SERVICE_NAME</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">$SERVICE_NAME</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logsmk</span> <span class=\"comment\">#volume名字</span></span><br><span class=\"line\">          <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/applogs</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">database</span> <span class=\"comment\">#volume名字</span></span><br><span class=\"line\">          <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">            <span class=\"attr\">claimName:</span> <span class=\"string\">ipinversionpvc</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">$SERVICE_NAME</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">$&#123;IMAGE&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ENVIRONMENT</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">ipinversion</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">ENVIRONMENT</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8031</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">1024Mi</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">1000m</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">              <span class=\"attr\">path:</span> <span class=\"string\">/get/check</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8031</span></span><br><span class=\"line\">              <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">              <span class=\"attr\">path:</span> <span class=\"string\">/get/check</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"number\">8031</span></span><br><span class=\"line\">              <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logsmk</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/applogs/</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">database</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/app/data/</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">$SERVICE_NAME</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">$NAMESPACE</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8031</span> <span class=\"comment\">#pod对外的端口</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">$SERVICE_NAME</span> <span class=\"comment\">#匹配到此label的pod的8002端口，会加入到此k8s lb中</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">$SERVICE_NAME</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">$NAMESPACE</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-connect-timeout:</span> <span class=\"string\">&quot;300&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-read-timeout:</span> <span class=\"string\">&quot;300&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-send-timeout:</span> <span class=\"string\">&quot;300&quot;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">ipinversion.fxeyeinterface.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">$SERVICE_NAME</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p><strong>kubectl镜像Dockerfie</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node001 kubectl]<span class=\"comment\"># ls</span></span><br><span class=\"line\">Dockerfile  kubectl</span><br><span class=\"line\">[root@node001 kubectl]<span class=\"comment\"># cat Dockerfile </span></span><br><span class=\"line\">FROM registry.cn-shanghai.aliyuncs.com/wikifx/base:alpine-glibc-Shanghai</span><br><span class=\"line\"></span><br><span class=\"line\">MAINTAINER felix</span><br><span class=\"line\"></span><br><span class=\"line\">ENV TZ <span class=\"string\">&quot;Asia/Shanghai&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">COPY kubectl /usr/local/bin/</span><br><span class=\"line\">RUN <span class=\"built_in\">chmod</span> +x /usr/local/bin/kubectl &amp;&amp;\\</span><br><span class=\"line\">apk add gettext</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多语法参照:<a href=\"/forward/ff7280bd.html\">链接</a></p>\n</blockquote>\n<p><img src=\"/images/pasted-98.png\" alt=\"流水线\"></p>\n<h4 id=\"gitlab-ci-cd中变量的使用\"><a href=\"#gitlab-ci-cd中变量的使用\" class=\"headerlink\" title=\"gitlab ci/cd中变量的使用\"></a>gitlab ci/cd中变量的使用</h4><p>三种变量的使用</p>\n<ul>\n<li>在.gitlab-ci.yml中自己定义</li>\n<li>pipeline中预定义的变量</li>\n<li>设置在项目中设置变量</li>\n</ul>\n<p>变量类型</p>\n<ul>\n<li>k-v 变量</li>\n<li>文件</li>\n</ul>\n<ol>\n<li>流水线全局变量</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">FELIX:</span> <span class=\"string\">&quot;flask-test&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>设置在项目中设置变量</li>\n</ol>\n<p><img src=\"/images/pasted-99.png\" alt=\"variables\"></p>\n<ol start=\"3\">\n<li>pipeline预定义变量<a href=\"https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\">官方文档</a></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI=<span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_API_V4_URL=<span class=\"string\">&#x27;http://192.168.1.55/api/v4&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_BUILDS_DIR=<span class=\"string\">&#x27;/builds&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_BUILD_BEFORE_SHA=<span class=\"string\">&#x27;0920fb2150639324fc1a3b20639ba7b02f6e1aee&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_BUILD_ID=<span class=\"string\">&#x27;498&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_BUILD_MANUAL=<span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_BUILD_NAME=<span class=\"string\">&#x27;deploy&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_BUILD_REF=<span class=\"string\">&#x27;22ce717a8dff73b3abb24ce0e9773e7f0677dbff&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_BUILD_REF_NAME=<span class=\"string\">&#x27;master&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_BUILD_REF_SLUG=<span class=\"string\">&#x27;master&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_BUILD_STAGE=<span class=\"string\">&#x27;deploy&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_BUILD_TOKEN=<span class=\"string\">&#x27;[MASKED]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_AUTHOR=<span class=\"string\">&#x27;Administrator &lt;admin@example.com&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_BEFORE_SHA=<span class=\"string\">&#x27;0920fb2150639324fc1a3b20639ba7b02f6e1aee&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_BRANCH=<span class=\"string\">&#x27;master&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_DESCRIPTION=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_MESSAGE=<span class=\"string\">&#x27;Update .gitlab-ci.yml&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_REF_NAME=<span class=\"string\">&#x27;master&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_REF_PROTECTED=<span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_REF_SLUG=<span class=\"string\">&#x27;master&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_SHA=<span class=\"string\">&#x27;22ce717a8dff73b3abb24ce0e9773e7f0677dbff&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_SHORT_SHA=<span class=\"string\">&#x27;22ce717a&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_TIMESTAMP=<span class=\"string\">&#x27;2021-10-19T12:25:07+00:00&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_COMMIT_TITLE=<span class=\"string\">&#x27;Update .gitlab-ci.yml&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_CONCURRENT_ID=<span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_CONCURRENT_PROJECT_ID=<span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_CONFIG_PATH=<span class=\"string\">&#x27;.gitlab-ci.yml&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_DEFAULT_BRANCH=<span class=\"string\">&#x27;master&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX=<span class=\"string\">&#x27;192.168.1.55:80/public-projects/dependency_proxy/containers&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_DEPENDENCY_PROXY_PASSWORD=<span class=\"string\">&#x27;[MASKED]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_DEPENDENCY_PROXY_SERVER=<span class=\"string\">&#x27;192.168.1.55:80&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_DEPENDENCY_PROXY_USER=<span class=\"string\">&#x27;gitlab-ci-token&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_DISPOSABLE_ENVIRONMENT=<span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_JOB_ID=<span class=\"string\">&#x27;498&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_JOB_JWT=<span class=\"string\">&#x27;[MASKED]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_JOB_MANUAL=<span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_JOB_NAME=<span class=\"string\">&#x27;deploy&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_JOB_STAGE=<span class=\"string\">&#x27;deploy&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_JOB_STARTED_AT=<span class=\"string\">&#x27;2021-10-19T12:26:08Z&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_JOB_STATUS=<span class=\"string\">&#x27;running&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_JOB_TOKEN=<span class=\"string\">&#x27;[MASKED]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_JOB_URL=<span class=\"string\">&#x27;http://192.168.1.55/public-projects/back-end/ip_inversion/-/jobs/498&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_NODE_TOTAL=<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PAGES_DOMAIN=<span class=\"string\">&#x27;example.com&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PAGES_URL=<span class=\"string\">&#x27;http://public-projects.example.com/back-end/ip_inversion&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PIPELINE_CREATED_AT=<span class=\"string\">&#x27;2021-10-19T12:25:08Z&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PIPELINE_ID=<span class=\"string\">&#x27;71&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PIPELINE_IID=<span class=\"string\">&#x27;19&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PIPELINE_SOURCE=<span class=\"string\">&#x27;push&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PIPELINE_URL=<span class=\"string\">&#x27;http://192.168.1.55/public-projects/back-end/ip_inversion/-/pipelines/71&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_DIR=<span class=\"string\">&#x27;/builds/public-projects/back-end/ip_inversion&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_ID=<span class=\"string\">&#x27;9&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_NAME=<span class=\"string\">&#x27;ip_inversion&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_NAMESPACE=<span class=\"string\">&#x27;public-projects/back-end&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_PATH=<span class=\"string\">&#x27;public-projects/back-end/ip_inversion&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_PATH_SLUG=<span class=\"string\">&#x27;public-projects-back-end-ip-inversion&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_REPOSITORY_LANGUAGES=<span class=\"string\">&#x27;go,dockerfile&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_ROOT_NAMESPACE=<span class=\"string\">&#x27;public-projects&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_TITLE=<span class=\"string\">&#x27;ip反转接口&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_URL=<span class=\"string\">&#x27;http://192.168.1.55/public-projects/back-end/ip_inversion&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_PROJECT_VISIBILITY=<span class=\"string\">&#x27;private&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_REGISTRY_PASSWORD=<span class=\"string\">&#x27;[MASKED]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_REGISTRY_USER=<span class=\"string\">&#x27;gitlab-ci-token&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_REPOSITORY_URL=<span class=\"string\">&#x27;http://gitlab-ci-token:[MASKED]@192.168.1.55/public-projects/back-end/ip_inversion.git&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_RUNNER_DESCRIPTION=<span class=\"string\">&#x27;running01&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_RUNNER_EXECUTABLE_ARCH=<span class=\"string\">&#x27;linux/amd64&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_RUNNER_ID=<span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_RUNNER_REVISION=<span class=\"string\">&#x27;e0218c92&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_RUNNER_SHORT_TOKEN=<span class=\"string\">&#x27;_Q7D-qHB&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_RUNNER_TAGS=<span class=\"string\">&#x27;running01&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_RUNNER_VERSION=<span class=\"string\">&#x27;14.3.2&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER=<span class=\"string\">&#x27;yes&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER_HOST=<span class=\"string\">&#x27;192.168.1.55&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER_NAME=<span class=\"string\">&#x27;GitLab&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER_PORT=<span class=\"string\">&#x27;80&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER_PROTOCOL=<span class=\"string\">&#x27;http&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER_REVISION=<span class=\"string\">&#x27;7fd059d6f16&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER_URL=<span class=\"string\">&#x27;http://192.168.1.55&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER_VERSION=<span class=\"string\">&#x27;14.0.4&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER_VERSION_MAJOR=<span class=\"string\">&#x27;14&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER_VERSION_MINOR=<span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CI_SERVER_VERSION_PATCH=<span class=\"string\">&#x27;4&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ENV=<span class=\"string\">&#x27;/root/.bashrc&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FELIX=<span class=\"string\">&#x27;cakepanit.com&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_ENABLE_BASH_EXIT_CODE_CHECK=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_ENABLE_JOB_CLEANUP=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_GITLAB_REGISTRY_HELPER_IMAGE=<span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_NETWORK_PER_BUILD=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_SCRIPT_SECTIONS=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_SKIP_NOOP_BUILD_STAGES=<span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_USE_DIRECT_DOWNLOAD=<span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_USE_DYNAMIC_TRACE_FORCE_SEND_INTERVAL=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_USE_FASTZIP=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_USE_NEW_BASH_EVAL_STRATEGY=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_USE_NEW_SHELL_ESCAPE=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_USE_POWERSHELL_PATH_RESOLVER=<span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY=<span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GITLAB_CI=<span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GITLAB_FEATURES=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GITLAB_USER_EMAIL=<span class=\"string\">&#x27;admin@example.com&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GITLAB_USER_ID=<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GITLAB_USER_LOGIN=<span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GITLAB_USER_NAME=<span class=\"string\">&#x27;Administrator&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HOME=<span class=\"string\">&#x27;/root&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HOSTNAME=<span class=\"string\">&#x27;runner-q7d-qhb-project-9-concurrent-0&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KUBE_CONFIG=<span class=\"string\">&#x27;/builds/public-projects/back-end/ip_inversion.tmp/KUBE_CONFIG&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NAME=<span class=\"string\">&#x27;flask-test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> OLDPWD=<span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">&#x27;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PWD=<span class=\"string\">&#x27;/builds/public-projects/back-end/ip_inversion&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SHLVL=<span class=\"string\">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最终可以实现\"><a href=\"#最终可以实现\" class=\"headerlink\" title=\"最终可以实现:\"></a>最终可以实现:</h3><ol>\n<li>开发提交代码</li>\n<li>自动触发流水线构建编译程序</li>\n<li>自动打包镜像推入镜像仓库（dood实现）</li>\n<li>自动生成k8s yaml文件并自动发布到k8s集群</li>\n</ol>\n<p><img src=\"/images/pasted-100.png\" alt=\"upload successful\"><br><img src=\"/images/pasted-101.png\" alt=\"upload successful\"></p>\n<h3 id=\"单仓库多项目扩展写法\"><a href=\"#单仓库多项目扩展写法\" class=\"headerlink\" title=\"单仓库多项目扩展写法\"></a>单仓库多项目扩展写法</h3><p>如果一个git仓库中存在多个项目。每个目录中存在本项目的dockerfile时。我们应该通过<code>needs</code>定义流水线中任务的依赖关系。具体写法：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gitlab-ci.yml</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">builddocker</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy_dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">WAREHOUSE:</span> <span class=\"number\">192.168</span><span class=\"number\">.200</span><span class=\"number\">.177</span></span><br><span class=\"line\">  <span class=\"attr\">IMAGE:</span> <span class=\"string\">$&#123;WAREHOUSE&#125;/dev_image/$&#123;PROJECT&#125;:$&#123;CI_PIPELINE_ID&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">SERVICE_NAME:</span> <span class=\"string\">$&#123;PROJECT&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">NAMESPACE:</span> <span class=\"string\">bit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.deploy_k8s:</span> <span class=\"string\">&amp;deploy_k8s</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  cat $&#123;APPLYFILE&#125; &gt; applyfile.yaml</span></span><br><span class=\"line\"><span class=\"string\">  envsubst &lt; applyfile.yaml | kubectl apply -f -</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">.init_k8s:</span> <span class=\"string\">&amp;init_k8s</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  [ -d ~/.kube ] || mkdir ~/.kube</span></span><br><span class=\"line\"><span class=\"string\">  cat $&#123;KUBE_CONFIG&#125; &gt; ~/.kube/config</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">.relay:</span> <span class=\"string\">&amp;relay</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  docker logout $&#123;WAREHOUSE&#125;</span></span><br><span class=\"line\"><span class=\"string\">  echo &quot;PROJECT=$&#123;PROJECT&#125;&quot; &gt; build.env</span></span><br><span class=\"line\"><span class=\"string\">  echo &quot;DOMAIN=$&#123;DOMAIN&#125;&quot; &gt;&gt; build.env</span></span><br><span class=\"line\"><span class=\"string\">  echo &quot;EXPOSEPORT=$&#123;EXPOSEPORT&#125;&quot; &gt;&gt; build.env</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">.build:</span> <span class=\"string\">&amp;docker</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  docker build -t $&#123;IMAGE&#125; -f $&#123;DOCKER_FILE_PATH&#125; $&#123;CONTEXT_PATH&#125;</span></span><br><span class=\"line\"><span class=\"string\">  docker push $&#123;IMAGE&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">build-bit_survey_web:</span></span><br><span class=\"line\">  <span class=\"attr\">variables:</span></span><br><span class=\"line\">      <span class=\"attr\">PROJECT:</span> <span class=\"string\">bit-survey-web</span></span><br><span class=\"line\">      <span class=\"attr\">DOMAIN:</span> <span class=\"string\">survey.wikibit.com</span></span><br><span class=\"line\">      <span class=\"attr\">EXPOSEPORT:</span> <span class=\"number\">8088</span></span><br><span class=\"line\">      <span class=\"attr\">DOCKER_FILE_PATH:</span> <span class=\"string\">&quot;trunk/Wikibit.Survey.Web/Dockerfile&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">CONTEXT_PATH:</span> <span class=\"string\">&quot;trunk/&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">builddocker</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">$&#123;WAREHOUSE&#125;/base/dood:latest</span></span><br><span class=\"line\">  <span class=\"attr\">before_script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">login</span> <span class=\"string\">$&#123;WAREHOUSE&#125;</span> <span class=\"string\">-u</span> <span class=\"string\">&quot;$IMGHUBUSER&quot;</span> <span class=\"string\">-p</span> <span class=\"string\">&quot;$IMGHUBPWD&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"meta\">*docker</span></span><br><span class=\"line\">  <span class=\"attr\">after_script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"meta\">*relay</span></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">reports:</span></span><br><span class=\"line\">      <span class=\"attr\">dotenv:</span> <span class=\"string\">build.env</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span></span><br><span class=\"line\">    <span class=\"string\">manual</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">build-bit_live_web:</span></span><br><span class=\"line\">  <span class=\"attr\">variables:</span></span><br><span class=\"line\">      <span class=\"attr\">PROJECT:</span> <span class=\"string\">bit-live-web</span></span><br><span class=\"line\">      <span class=\"attr\">DOMAIN:</span> <span class=\"string\">live.wikibit.com</span></span><br><span class=\"line\">      <span class=\"attr\">EXPOSEPORT:</span> <span class=\"number\">8088</span></span><br><span class=\"line\">      <span class=\"attr\">DOCKER_FILE_PATH:</span> <span class=\"string\">&quot;trunk/WikibitLive.Web/Dockerfile&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">CONTEXT_PATH:</span> <span class=\"string\">&quot;trunk/&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">builddocker</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">$&#123;WAREHOUSE&#125;/base/dood:latest</span></span><br><span class=\"line\">  <span class=\"attr\">before_script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">login</span> <span class=\"string\">$&#123;WAREHOUSE&#125;</span> <span class=\"string\">-u</span> <span class=\"string\">&quot;$IMGHUBUSER&quot;</span> <span class=\"string\">-p</span> <span class=\"string\">&quot;$IMGHUBPWD&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"meta\">*docker</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">after_script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"meta\">*relay</span></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">reports:</span></span><br><span class=\"line\">      <span class=\"attr\">dotenv:</span> <span class=\"string\">build.env</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span></span><br><span class=\"line\">    <span class=\"string\">manual</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy-bit_survey_web:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy_dev</span></span><br><span class=\"line\">  <span class=\"attr\">before_script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"meta\">*init_k8s</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">$&#123;WAREHOUSE&#125;/base/kubectl:v1.18.12</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"meta\">*deploy_k8s</span></span><br><span class=\"line\">  <span class=\"attr\">needs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job:</span> <span class=\"string\">build-bit_survey_web</span></span><br><span class=\"line\">      <span class=\"attr\">artifacts:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy-bit_live_web:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy_dev</span></span><br><span class=\"line\">  <span class=\"attr\">before_script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"meta\">*init_k8s</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">$&#123;WAREHOUSE&#125;/base/kubectl:v1.18.12</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"meta\">*deploy_k8s</span></span><br><span class=\"line\">  <span class=\"attr\">needs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job:</span> <span class=\"string\">build-bit_live_web</span></span><br><span class=\"line\">      <span class=\"attr\">artifacts:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"comment\"># APPLYFILE(文件类型)</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">$&#123;SERVICE_NAME&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;NAMESPACE&#125;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">$&#123;SERVICE_NAME&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">$&#123;SERVICE_NAME&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logsmk</span> <span class=\"comment\">#volume名字</span></span><br><span class=\"line\">          <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/applogs</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">$&#123;SERVICE_NAME&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">$&#123;IMAGE&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ENVIRONMENT</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">environment</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">ENVIRONMENT</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"string\">$&#123;EXPOSEPORT&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">1024Mi</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">1000m</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">              <span class=\"attr\">path:</span> <span class=\"string\">/get/check</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"string\">$&#123;EXPOSEPORT&#125;</span></span><br><span class=\"line\">              <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">              <span class=\"attr\">path:</span> <span class=\"string\">/get/check</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span> <span class=\"string\">$&#123;EXPOSEPORT&#125;</span></span><br><span class=\"line\">              <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logsmk</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/applogs/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">$SERVICE_NAME</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">$NAMESPACE</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"string\">$&#123;EXPOSEPORT&#125;</span> <span class=\"comment\">#pod对外的端口</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">$&#123;SERVICE_NAME&#125;</span> <span class=\"comment\">#匹配到此label的pod的8002端口，会加入到此k8s lb中</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">$&#123;SERVICE_NAME&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;NAMESPACE&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-connect-timeout:</span> <span class=\"string\">&quot;300&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-read-timeout:</span> <span class=\"string\">&quot;300&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-send-timeout:</span> <span class=\"string\">&quot;300&quot;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">$&#123;DOMAIN&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">$&#123;SERVICE_NAME&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># KUBE_CONFIG(文件类型)</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-102.png\" alt=\"file\"></p>\n<h3 id=\"飞书机器人告警\"><a href=\"#飞书机器人告警\" class=\"headerlink\" title=\"飞书机器人告警\"></a>飞书机器人告警</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">.remind:</span> <span class=\"string\">&amp;remind</span> <span class=\"string\">|</span></span><br><span class=\"line\">  <span class=\"string\">curl</span> <span class=\"string\">-X</span> <span class=\"string\">POST</span> <span class=\"string\">-H</span> <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> <span class=\"string\">--url</span> <span class=\"string\">&#x27;https://open.feishu.cn/open-apis/bot/v2/hook/3cebab07-xxxx-42ce-b5c2-f03d1a7c41ae&#x27;</span> <span class=\"string\">-d</span> <span class=\"string\">&quot;&#123;\\&quot;msg_type\\&quot;: \\&quot;interactive\\&quot;,\\&quot;card\\&quot;: &#123;\\&quot;config\\&quot;: &#123;\\&quot;wide_screen_mode\\&quot;: true&#125;,\\&quot;header\\&quot;: &#123;\\&quot;title\\&quot;: &#123;\\&quot;tag\\&quot;: \\&quot;plain_text\\&quot;,\\&quot;content\\&quot;: \\&quot;DevOps In Testing Environment\\&quot;&#125;,\\&quot;template\\&quot;: \\&quot;blue\\&quot;&#125;,\\&quot;elements\\&quot;: [&#123;\\&quot;tag\\&quot;: \\&quot;markdown\\&quot;,\\&quot;content\\&quot;: \\&quot;**项目名称**：$&#123;CI_PROJECT_NAME&#125;/$&#123;CI_PROJECT_TITLE&#125; \\n**项目地址**：[$&#123;CI_PROJECT_URL&#125;]($&#123;CI_PROJECT_URL&#125;)\\n**提交作者**：$&#123;CI_COMMIT_AUTHOR&#125; \\n**触发作业用户**：$&#123;GITLAB_USER_NAME&#125;\\n****\\n**作业分支**：$&#123;CI_COMMIT_BRANCH&#125; \\n**CODE SHA**：$&#123;CI_COMMIT_SHA&#125;\\n**任务ID**：$&#123;CI_JOB_ID&#125;\\n**任务名称/所处阶段**：$&#123;CI_JOB_NAME&#125;/$&#123;CI_JOB_STAGE&#125;\\n**任务运行详情**：[$&#123;CI_JOB_URL&#125;]($&#123;CI_JOB_URL&#125;) \\n**流水线ID**：$&#123;CI_PIPELINE_ID&#125; \\n**流水线运行详情**: [$&#123;CI_PIPELINE_URL&#125;]($&#123;CI_PIPELINE_URL&#125;)\\&quot;&#125;]&#125; &#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-103.png\" alt=\"feishu\"></p>\n<h3 id=\"发布静态站点至aliyun-OSS\"><a href=\"#发布静态站点至aliyun-OSS\" class=\"headerlink\" title=\"发布静态站点至aliyun OSS\"></a>发布静态站点至aliyun OSS</h3><p>一些静态资源或者vue站点构建出来的h5站点，需要发布在oss上面利用oss的全球加速功能提高访问速度。基于OSS的CICD发布面临挑战。以下是我个人的解决方案 供参考<br>ossutil支持通过Windows、Linux和macOS系统以命令行方式管理OSS数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://gosspublic.alicdn.com/ossutil/1.7.7/ossutil64</span><br></pre></td></tr></table></figure>\n<p>编写Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> registry.cn-shanghai.aliyuncs.com/wikifx/base:alpine-glibc-Shanghai</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ossutil64 /bin/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +x /bin/ossutil64</span></span><br></pre></td></tr></table></figure>\n\n<p>编写.gitlab-ci.yml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#自定义阶段</span></span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - deploy_oss</span><br><span class=\"line\"></span><br><span class=\"line\">variables:</span><br><span class=\"line\">  WAREHOUSE: 192.168.200.177</span><br><span class=\"line\">  IMAGE: <span class=\"variable\">$&#123;WAREHOUSE&#125;</span>/dev_image/<span class=\"variable\">$&#123;PROJECT&#125;</span>:<span class=\"variable\">$&#123;CI_PIPELINE_ID&#125;</span></span><br><span class=\"line\">  endPoint: oss-cn-shanghai.aliyuncs.com</span><br><span class=\"line\"></span><br><span class=\"line\">.deploy_k8s: &amp;deploy_oss |</span><br><span class=\"line\">  ossutil64 config -e <span class=\"variable\">$&#123;endPoint&#125;</span> -i <span class=\"variable\">$&#123;accessKeyID&#125;</span> -k <span class=\"variable\">$&#123;accessKeySecret&#125;</span> -L CH --loglevel debug -c ~/.ossutilconfig</span><br><span class=\"line\">  ossutil64 -c ~/.ossutilconfig <span class=\"built_in\">cp</span> -r -f ./Contentgj/ oss://fxeye-head/Contentgj/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#config 创建配置文件来存储OSS访问信息</span></span><br><span class=\"line\"><span class=\"comment\">#-e endPoint 选择地域 阿里云各OSS全部地域说明：https://help.aliyun.com/document_detail/31837.htm</span></span><br><span class=\"line\"><span class=\"comment\">#-i accessKeyID/ -k accessKeySecret阿里云用户使用云产品的 OpenAPI 接口验权密钥</span></span><br><span class=\"line\"><span class=\"comment\">#-L 设置ossutil工具的语言。取值如下：</span></span><br><span class=\"line\"><span class=\"comment\">#CH（默认值）：中文。设置为CH时，请确保您的系统编码方式为UTF-8。</span></span><br><span class=\"line\"><span class=\"comment\">#EN：英文。</span></span><br><span class=\"line\"><span class=\"comment\">#--loglevel debug 日志级别</span></span><br><span class=\"line\"><span class=\"comment\">#-c ossutil工具的配置文件路径，ossutil启动时将从配置文件读取配置。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#cp -r -f 复制文件递归操作，强制操作，不进行询问提示。</span></span><br><span class=\"line\"><span class=\"comment\">#./Contentgj/ git仓库中的文件路径</span></span><br><span class=\"line\"><span class=\"comment\">#oss://fxeye-head/Contentgj/ 远程Bucket中的目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">.remind: &amp;remind |</span><br><span class=\"line\">  curl -X POST -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> --url <span class=\"string\">&#x27;https://open.feishu.cn/open-apis/bot/v2/hook/3cebab07-04f7-42ce-b5c2-f03d1a7c41ae&#x27;</span> -d <span class=\"string\">&quot;&#123;\\&quot;msg_type\\&quot;: \\&quot;interactive\\&quot;,\\&quot;card\\&quot;: &#123;\\&quot;config\\&quot;: &#123;\\&quot;wide_screen_mode\\&quot;: true&#125;,\\&quot;header\\&quot;: &#123;\\&quot;title\\&quot;: &#123;\\&quot;tag\\&quot;: \\&quot;plain_text\\&quot;,\\&quot;content\\&quot;: \\&quot;DevOps In Testing Environment\\&quot;&#125;,\\&quot;template\\&quot;: \\&quot;blue\\&quot;&#125;,\\&quot;elements\\&quot;: [&#123;\\&quot;tag\\&quot;: \\&quot;markdown\\&quot;,\\&quot;content\\&quot;: \\&quot;**项目名称**：<span class=\"variable\">$&#123;CI_PROJECT_NAME&#125;</span>/<span class=\"variable\">$&#123;CI_PROJECT_TITLE&#125;</span> \\n**项目地址**：[<span class=\"variable\">$&#123;CI_PROJECT_URL&#125;</span>](<span class=\"variable\">$&#123;CI_PROJECT_URL&#125;</span>)\\n**提交作者**：<span class=\"variable\">$&#123;CI_COMMIT_AUTHOR&#125;</span>\\n**代码版本**：<span class=\"variable\">$&#123;CI_COMMIT_SHA:0:8&#125;</span>\\n**CODE SHA**：<span class=\"variable\">$&#123;CI_COMMIT_SHA&#125;</span>\\n**版本备注**：<span class=\"variable\">$&#123;CI_COMMIT_MESSAGE&#125;</span>\\n****\\n**作业分支**：<span class=\"variable\">$&#123;CI_COMMIT_BRANCH&#125;</span> \\n**触发作业用户**：<span class=\"variable\">$&#123;GITLAB_USER_NAME&#125;</span>\\n**任务ID**：<span class=\"variable\">$&#123;CI_JOB_ID&#125;</span>\\n**任务名称/所处阶段**：<span class=\"variable\">$&#123;CI_JOB_NAME&#125;</span>/<span class=\"variable\">$&#123;CI_JOB_STAGE&#125;</span>\\n**任务运行详情**：[<span class=\"variable\">$&#123;CI_JOB_URL&#125;</span>](<span class=\"variable\">$&#123;CI_JOB_URL&#125;</span>) \\n**流水线ID**：<span class=\"variable\">$&#123;CI_PIPELINE_ID&#125;</span> \\n**流水线运行详情**: [<span class=\"variable\">$&#123;CI_PIPELINE_URL&#125;</span>](<span class=\"variable\">$&#123;CI_PIPELINE_URL&#125;</span>)\\&quot;&#125;]&#125; &#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">deploy_oss-api:</span><br><span class=\"line\">  stage: deploy_oss</span><br><span class=\"line\">  before_script:</span><br><span class=\"line\">    - *remind</span><br><span class=\"line\">  image: <span class=\"variable\">$&#123;WAREHOUSE&#125;</span>/base/ossutil64:1.7.7</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - *deploy_oss</span><br><span class=\"line\">  when:</span><br><span class=\"line\">    manual</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/images/pasted-136.png\" alt=\"uploadoss\"></p>\n","categories":["OPS"],"tags":["Git","GitLab","OPS","Kubernetes","CI/CD"]},{"title":"Golang-内置容器","url":"/forward/13c392b.html","content":"<blockquote>\n<p>变量和常量虽能存储数据，但是在编写一些逻辑稍复杂的程序中，往往需要存储更多、更复杂且不同类型的数据，这些数据一般存储在Go语言的内置容器中。</p>\n</blockquote>\n<p>Go语言的内置容器主要有数组、切片和映射。<br>下面详细介绍以上三种内置容器的特点和使用方法，学习目标：在编程中能使用恰当的容器存储数据并对其进行增加、删除和修改等操作。</p>\n<p><img src=\"/images/pasted-86.png\" alt=\"rq\"></p>\n<div class=\"tabs\" id=\"内置容器\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#内置容器-1\">数组 Array</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#内置容器-2\">切片 Slice</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#内置容器-3\">映射 Map</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"内置容器-1\"><ul>\n<li>数组是具有<strong>相同类型且长度固定</strong>的一组数据项序列，这组数据项序列对应存放在内存中的一块连续区域中。</li>\n<li>数组中存放的元素类型可以是<strong>整型、字符串或其他自定义类型</strong>。数组在<strong>使用前需先声明</strong>，声明时必须<strong>指定数组的大小且数组大小之后不可再变</strong>。</li>\n<li>数组元素可以通过数组下标来读取或修改，数组下标从0开始，第一个元素的数组下标为0，第二个元素的数组下标为1，以此类推。</li>\n</ul>\n<p><img src=\"/images/pasted-76.png\" alt=\"array\"></p>\n<div class=\"tabs\" id=\"操作数组\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#操作数组-1\">声明数组</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#操作数组-2\">初始化数组</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#操作数组-3\">数组增删</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#操作数组-4\">range关键字</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#操作数组-5\">遍历数组</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"操作数组-1\"><p>数组声明格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 数组变量名 [数组长度]元素类型</span><br></pre></td></tr></table></figure>\n<p>例如，声明数组student，长度为3，元素类型为string：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> student [<span class=\"number\">3</span>]<span class=\"type\">string</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> array [<span class=\"number\">3</span>]<span class=\"type\">string</span></span><br><span class=\"line\">\tfmt.Println(array)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [  ]</span></span><br></pre></td></tr></table></figure>\n<p>由于以上代码仅声明了数组，没有对数组进行赋值，因此打印出来的数组为空数组。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"操作数组-2\"><p>数组可在声明后进行赋值，样例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> student [<span class=\"number\">3</span>]<span class=\"type\">string</span></span><br><span class=\"line\">student = [<span class=\"number\">3</span>]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"string\">&quot;Ben&quot;</span>,<span class=\"string\">&quot;Peter&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组可在声明时进行赋值，样例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> student = [<span class=\"number\">3</span>]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"string\">&quot;Ben&quot;</span>,<span class=\"string\">&quot;Peter&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>使用这种方式初始化数组，需要保证大括号里面的元素数量和数组大小一致。</p>\n<p>如果忽略中括号内的数字，不设置数组大小，Go语言编译器在编译时也可根据元素的个数来设置数组的大小，通过用“…”代替数组大小来实现。样例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> student = [...]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"string\">&quot;Ben&quot;</span>,<span class=\"string\">&quot;Peter&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> array = [...]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;felix&quot;</span>,<span class=\"string\">&quot;xiaodongwang&quot;</span>,<span class=\"string\">&quot;mafeifei&quot;</span>&#125;</span><br><span class=\"line\">\tfmt.Println(array)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [felix xiaodongwang mafeifei]</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"操作数组-3\"><p>append切片添加: </p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">    a := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a, <span class=\"number\">1</span>)            <span class=\"comment\">// 追加1个元素</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)      <span class=\"comment\">// 追加多个元素, 手写解包方式</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a,[]<span class=\"type\">int</span>&#123;<span class=\"number\">11</span>,<span class=\"number\">11</span>,<span class=\"number\">11</span>&#125;...)    <span class=\"comment\">// 追加一个切片, 切片需要解包</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>([]<span class=\"type\">int</span>&#123;<span class=\"number\">22</span>,<span class=\"number\">22</span>,<span class=\"number\">22</span>&#125;,a...)    <span class=\"comment\">// 在开头添加1个切片</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:<span class=\"number\">0</span>], <span class=\"built_in\">append</span>([]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;, a[<span class=\"number\">0</span>:]...)...) <span class=\"comment\">// 在第0个位置插入切片</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(a);i++&#123;</span><br><span class=\"line\">        fmt.Println(a[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从开头位置删除</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">    <span class=\"comment\">//删除开头的元素可以直接移动数据指针：</span></span><br><span class=\"line\">    a := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    a = a[<span class=\"number\">1</span>:] <span class=\"comment\">// 删除开头1个元素</span></span><br><span class=\"line\">    a = a[N:] <span class=\"comment\">// 删除开头N个元素</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//也可以不移动数据指针，但是将后面的数据向开头移动，可以用 append 原地完成</span></span><br><span class=\"line\">    <span class=\"comment\">//（所谓原地完成是指在原有的切片数据对应的内存区间内完成，不会导致内存空间结构的变化）：</span></span><br><span class=\"line\">    a = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:<span class=\"number\">0</span>], a[<span class=\"number\">1</span>:]...) <span class=\"comment\">// 删除开头1个元素</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:<span class=\"number\">0</span>], a[N:]...) <span class=\"comment\">// 删除开头N个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//还可以用 copy() 函数来删除开头的元素：</span></span><br><span class=\"line\">    a = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, ...&#125;</span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:i], a[i+<span class=\"number\">1</span>:]...) <span class=\"comment\">// 删除中间1个元素</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:i], a[i+N:]...) <span class=\"comment\">// 删除中间N个元素</span></span><br><span class=\"line\">    a = a[:i+<span class=\"built_in\">copy</span>(a[i:], a[i+<span class=\"number\">1</span>:])] <span class=\"comment\">// 删除中间1个元素</span></span><br><span class=\"line\">    a = a[:i+<span class=\"built_in\">copy</span>(a[i:], a[i+N:])] <span class=\"comment\">// 删除中间N个元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从中间位置删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">    <span class=\"comment\">//对于删除中间的元素，需要对剩余的元素进行一次整体挪动，同样可以用 append 或 copy 原地完成：</span></span><br><span class=\"line\">    a = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, ...&#125;</span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:i], a[i+<span class=\"number\">1</span>:]...) <span class=\"comment\">// 删除中间1个元素</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:i], a[i+N:]...) <span class=\"comment\">// 删除中间N个元素</span></span><br><span class=\"line\">    a = a[:i+<span class=\"built_in\">copy</span>(a[i:], a[i+<span class=\"number\">1</span>:])] <span class=\"comment\">// 删除中间1个元素</span></span><br><span class=\"line\">    a = a[:i+<span class=\"built_in\">copy</span>(a[i:], a[i+N:])] <span class=\"comment\">// 删除中间N个元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从尾部删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">    a = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    a = a[:<span class=\"built_in\">len</span>(a)<span class=\"number\">-1</span>] <span class=\"comment\">// 删除尾部1个元素</span></span><br><span class=\"line\">    a = a[:<span class=\"built_in\">len</span>(a)-N] <span class=\"comment\">// 删除尾部N个元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"操作数组-4\"><p>range是Go语言中非常常用的一个关键字，其主要作用就是配合for关键字对数组以及之后会介绍到的切片和映射等数据结构进行<a href=\"https://baike.baidu.com/item/%E8%BF%AD%E4%BB%A3/8415523\">迭代</a>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> array = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> array &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;变量k&quot;</span>,k,<span class=\"string\">&quot;变量v&quot;</span>,v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//变量k 0 变量v 1</span></span><br><span class=\"line\"><span class=\"comment\">//变量k 1 变量v 2</span></span><br><span class=\"line\"><span class=\"comment\">//变量k 2 变量v 3</span></span><br><span class=\"line\"><span class=\"comment\">//变量k 3 变量v 4</span></span><br><span class=\"line\"><span class=\"comment\">//变量k 4 变量v 5</span></span><br><span class=\"line\"><span class=\"comment\">//变量k 5 变量v 6</span></span><br></pre></td></tr></table></figure>\n<p>range后接的表达式称为range表达式，本例的range表达式为数组。在迭代时，关键字range会返回两个值，分别由变量k和v接收。其中k是当前循环迭代到的索引位置，v是该位置对应元素值的一份副本。</p>\n<p>其他range表达式及其对应的返回值如下表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">range 表达式</th>\n<th align=\"center\">第一返回值</th>\n<th align=\"center\">第二返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数组</td>\n<td align=\"center\">元素下标</td>\n<td align=\"center\">元素值</td>\n</tr>\n<tr>\n<td align=\"center\">切片</td>\n<td align=\"center\">元素下标</td>\n<td align=\"center\">元素值</td>\n</tr>\n<tr>\n<td align=\"center\">映射</td>\n<td align=\"center\">键</td>\n<td align=\"center\">值</td>\n</tr>\n<tr>\n<td align=\"center\">通道</td>\n<td align=\"center\">元素</td>\n<td align=\"center\">N/A</td>\n</tr>\n</tbody></table><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"操作数组-5\"><p>数组元素可以通过数组下标来读取或修改，数组下标从0开始，第一个元素的数组下标为0，第二个元素的数组下标为1，以此类推。<br>通过遍历数组的方式（for循环）来对其进行打印。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> array = [...]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;felix&quot;</span>,<span class=\"string\">&quot;xiaodongwang&quot;</span>,<span class=\"string\">&quot;mafeifei&quot;</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> array &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;变量k&quot;</span>,k,<span class=\"string\">&quot;变量v&quot;</span>,v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//变量k 0 变量v felix</span></span><br><span class=\"line\"><span class=\"comment\">//变量k 1 变量v xiaodongwang</span></span><br><span class=\"line\"><span class=\"comment\">//变量k 2 变量v mafeifei</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"内置容器-2\"><p>相对于数组，切片（slice）是一种更方便和强大的数据结构，它同样表示多个同类型元素的连续集合，但是切片本身并不存储任何元素，而只是对现有数组的引用。<br>切片结构包括：地址、长度和容量。</p>\n<ul>\n<li>地址：切片的地址一般指切片中第一个元素所指向的内存地址，用十六进制表示。</li>\n<li>长度：切片中实际存在元素的个数。长度：切片中实际存在元素的个数。</li>\n<li>容量：从切片的起始元素开始到其底层数组中的最后一个元素的个数。</li>\n</ul>\n<p>切片的长度和容量都是不固定的，可以通过追加元素使切片的长度和容量增大。<br>切片主要有三种生成方式：</p>\n<ol>\n<li>从数组生成一个新的切片；</li>\n<li>从切片生成一个新的切片；</li>\n<li>直接生成一个新的切片。</li>\n</ol>\n<div class=\"tabs\" id=\"生成切片\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#生成切片-1\">从数组生成一个新的切片</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#生成切片-2\">从切片生成一个新的切片</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#生成切片-3\">直接生成一个新的切片</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"生成切片-1\"><p>从数组或切片生成新的切片语法格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">slice [开始位置:结束位置]</span><br></pre></td></tr></table></figure>\n<p>动手写一个长度为3的student数组，我们可以生成一个新的切片student1，使用len()函数可获得当前切片长度，cap()函数可获得当前切片容量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> student = [...]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"string\">&quot;Ben&quot;</span>,<span class=\"string\">&quot;Peter&quot;</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> student1 = student[<span class=\"number\">1</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student数组:&quot;</span>,student)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student1切片:&quot;</span>,student1)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student数组地址为:&quot;</span>,&amp;student[<span class=\"number\">1</span>]) <span class=\"comment\">//取student[1]元素的地址</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student1切片地址为:&quot;</span>,&amp;student1[<span class=\"number\">0</span>])<span class=\"comment\">//取student1[0]元素的地址</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student1切片长度为:&quot;</span>,<span class=\"built_in\">len</span>(student1))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student1切片容量为:&quot;</span>,<span class=\"built_in\">cap</span>(student1))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//student数组: [Tom Ben Peter]</span></span><br><span class=\"line\"><span class=\"comment\">//student1切片: [Ben]</span></span><br><span class=\"line\"><span class=\"comment\">//student数组地址为: 0xc0000b6340</span></span><br><span class=\"line\"><span class=\"comment\">//student1切片地址为: 0xc0000b6340</span></span><br><span class=\"line\"><span class=\"comment\">//student1切片长度为: 1</span></span><br><span class=\"line\"><span class=\"comment\">//student1切片容量为: 2</span></span><br></pre></td></tr></table></figure>\n<p>根据运行结果，我们可以归纳出从数组或切片生成新的切片有如下特性：</p>\n<ul>\n<li>新生成的切片长度：结束位置-开始位置。</li>\n<li>新生成的切片取出的元素不包括结束位置对应的元素。</li>\n<li>新生成的切片是对现有数组或切片的引用，其地址与截取的数组或切片开始位置对应的元素地址相同。</li>\n<li>新生成的切片容量指从切片的起始元素开始到其底层数组中的最后一个元素的个数。(所以为什么切片的长度显示为1，而容量却是2)</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"生成切片-2\"><p>我们重新从student数组生成student1切片，再从student1切片生成student2切片。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sudent = [...]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;wang&quot;</span>,<span class=\"string\">&quot;yao&quot;</span>,<span class=\"string\">&quot;fei&quot;</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sudent1 = sudent[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sudent2 = sudent1[<span class=\"number\">0</span>:<span class=\"number\">1</span>]</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student数组&quot;</span>,sudent[:])</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;sudent1切片&quot;</span>,sudent1[:])</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;sudent1切片&quot;</span>,sudent2[:])</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student数组地址为&quot;</span>,&amp;sudent[<span class=\"number\">1</span>])</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student1切片地址为&quot;</span>,&amp;sudent1[<span class=\"number\">0</span>])</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student2切片地址为&quot;</span>,&amp;sudent2[<span class=\"number\">0</span>])</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student1切片长度为&quot;</span>,<span class=\"built_in\">len</span>(sudent1))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student1切片容量为&quot;</span>,<span class=\"built_in\">cap</span>(sudent1))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student2切片长度为&quot;</span>,<span class=\"built_in\">len</span>(sudent2))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student2切片容量为&quot;</span>,<span class=\"built_in\">cap</span>(sudent2))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//student数组 [wang yao fei]</span></span><br><span class=\"line\"><span class=\"comment\">//sudent1切片 [yao fei]</span></span><br><span class=\"line\"><span class=\"comment\">//sudent1切片 [yao]</span></span><br><span class=\"line\"><span class=\"comment\">//student数组地址为 0xc000072190</span></span><br><span class=\"line\"><span class=\"comment\">//student1切片地址为 0xc000072190</span></span><br><span class=\"line\"><span class=\"comment\">//student2切片地址为 0xc000072190</span></span><br><span class=\"line\"><span class=\"comment\">//student1切片长度为 2</span></span><br><span class=\"line\"><span class=\"comment\">//student1切片容量为 2</span></span><br><span class=\"line\"><span class=\"comment\">//student2切片长度为 1</span></span><br><span class=\"line\"><span class=\"comment\">//student2切片容量为 2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为了将student的最后一个元素也取到，student1切片的结束位置设为了3。(包前不包后)</li>\n<li>根据结果，可以发现student2切片仍然是对底层数组student的引用。</li>\n<li>另外，也可以通过slice[:]来表示切片本身。</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"生成切片-3\"><p><strong>声明切片</strong></p>\n<p>切片的声明格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 切片变量名 []元素类型</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> student []<span class=\"type\">int</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片：&quot;</span>,student)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片长度：&quot;</span>,<span class=\"built_in\">len</span>(student))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片容量：&quot;</span>,<span class=\"built_in\">cap</span>(student))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片是否为空：&quot;</span>,student==<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//student切片： []</span></span><br><span class=\"line\"><span class=\"comment\">//student切片长度： 0</span></span><br><span class=\"line\"><span class=\"comment\">//student切片容量： 0</span></span><br><span class=\"line\"><span class=\"comment\">//student切片是否为空： true</span></span><br></pre></td></tr></table></figure>\n<p>从运行结果可以知道，切片声明后其内容为空，长度和容量均为0。</p>\n<p><strong>初始化切片</strong></p>\n<p>我们可以在声明切片的同时进行初始化赋值，示例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> student = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;yao&quot;</span>,<span class=\"string\">&quot;fei&quot;</span>,<span class=\"string\">&quot;chi&quot;</span>&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片&quot;</span>,student)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片长度&quot;</span>,<span class=\"built_in\">len</span>(student))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片容量&quot;</span>,<span class=\"built_in\">cap</span>(student))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片是否为空&quot;</span>,student==<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//student切片 [yao fei chi]</span></span><br><span class=\"line\"><span class=\"comment\">//student切片长度 3</span></span><br><span class=\"line\"><span class=\"comment\">//student切片容量 3</span></span><br><span class=\"line\"><span class=\"comment\">//student切片是否为空 false</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用make()函数初始化</strong><br>声明完切片后，可以通过内建函数make()来初始化切片，格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>([]元素类型,切片长度,切片容量)</span><br></pre></td></tr></table></figure>\n<p>注意：切片的容量值必须大于等于切片长度值，否则程序会报错。对于切片的容量应该有个大概的估值，若容量值过小，对切片的多次扩充会造成性能损耗。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> student []<span class=\"type\">int</span></span><br><span class=\"line\">\tstudent = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片&quot;</span>,student)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片长度&quot;</span>,<span class=\"built_in\">len</span>(student))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片容量&quot;</span>,<span class=\"built_in\">cap</span>(student))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;判断student切片是否为空&quot;</span>,student==<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//student切片 [0 0]</span></span><br><span class=\"line\"><span class=\"comment\">//student切片长度 2</span></span><br><span class=\"line\"><span class=\"comment\">//student切片容量 10</span></span><br><span class=\"line\"><span class=\"comment\">//判断student切片是否为空 false</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以发现student切片在初始化后，自动填充了0值且不再为空。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<div class=\"tabs\" id=\"操作切片\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#操作切片-1\">切片添加元素</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#操作切片-2\">切片删除元素</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#操作切片-3\">切片遍历</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"操作切片-1\"><p>Go语言中，可以使用append()函数来对切片进行元素的添加。当切片不能再容纳其他元素时（即当前切片长度值等于容量值），下一次使用append()函数对切片进行元素添加，容量会按2倍数进行扩充。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstudent := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;当前切片长度：&quot;</span>, <span class=\"built_in\">len</span>(student), <span class=\"string\">&quot;当前切片容量：&quot;</span>, <span class=\"built_in\">cap</span>(student))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++ &#123;</span><br><span class=\"line\">\t\tstudent = <span class=\"built_in\">append</span>(student, i)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;当前切片长度：&quot;</span>, <span class=\"built_in\">len</span>(student), <span class=\"string\">&quot;当前切片容量：&quot;</span>, <span class=\"built_in\">cap</span>(student))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当前切片长度： 1 当前切片容量： 1</span></span><br><span class=\"line\"><span class=\"comment\">//当前切片长度： 2 当前切片容量： 2</span></span><br><span class=\"line\"><span class=\"comment\">//当前切片长度： 3 当前切片容量： 4</span></span><br><span class=\"line\"><span class=\"comment\">//当前切片长度： 4 当前切片容量： 4</span></span><br><span class=\"line\"><span class=\"comment\">//当前切片长度： 5 当前切片容量： 8</span></span><br><span class=\"line\"><span class=\"comment\">//当前切片长度： 6 当前切片容量： 8</span></span><br><span class=\"line\"><span class=\"comment\">//当前切片长度： 7 当前切片容量： 8</span></span><br><span class=\"line\"><span class=\"comment\">//当前切片长度： 8 当前切片容量： 8</span></span><br><span class=\"line\"><span class=\"comment\">//当前切片长度： 9 当前切片容量： 16</span></span><br></pre></td></tr></table></figure>\n\n<p>由于切片是对底层数组的引用，所以在改变切片数据时，要考虑对其他切片或数组的数据影响：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//声明一个数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> student = [...]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;fei&quot;</span>,<span class=\"string\">&quot;chi&quot;</span>,<span class=\"string\">&quot;yao&quot;</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//从数组生成切片student1</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> student1 = student[<span class=\"number\">0</span>:<span class=\"number\">1</span>]</span><br><span class=\"line\">\t<span class=\"comment\">//打印数组和切片</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student数组：&quot;</span>,student)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student1切片：&quot;</span>,student1)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student1切片：&quot;</span>,student1,<span class=\"string\">&quot;,切片长度为：&quot;</span>,<span class=\"built_in\">len</span>(student1),<span class=\"string\">&quot;,切片容量为：&quot;</span>,<span class=\"built_in\">cap</span>(student1))</span><br><span class=\"line\">\t<span class=\"comment\">//对student1切片添加元素</span></span><br><span class=\"line\">\tstudent1 = <span class=\"built_in\">append</span>(student1,<span class=\"string\">&quot;Danny&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//查看切片长度变化</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;扩充Danny后的student1切片：&quot;</span>,student1,<span class=\"string\">&quot;,切片长度为：&quot;</span>,<span class=\"built_in\">len</span>(student1),<span class=\"string\">&quot;,切片容量为：&quot;</span>,<span class=\"built_in\">cap</span>(student1))</span><br><span class=\"line\">\t<span class=\"comment\">//查看底层数组内容变化</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;扩充Danny后的student数组：&quot;</span>,student)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//student数组： [fei chi yao]</span></span><br><span class=\"line\"><span class=\"comment\">//student1切片： [fei]</span></span><br><span class=\"line\"><span class=\"comment\">//student1切片： [fei] ,切片长度为： 1 ,切片容量为： 3</span></span><br><span class=\"line\"><span class=\"comment\">//扩充Danny后的student1切片： [fei Danny] ,切片长度为： 2 ,切片容量为： 3</span></span><br><span class=\"line\"><span class=\"comment\">//扩充Danny后的student数组： [fei Danny yao]</span></span><br></pre></td></tr></table></figure>\n<p>由于student1切片是从student数组生成（即对student数组的引用），为student1添加元素会覆盖student数组中对应的元素。所以，如果切片是从其他数组或切片生成，新切片的元素添加需要考虑对原有数组或切片中数据的影响。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"操作切片-2\"><p>由于Go语言没有为删除切片元素提供方法，所以需要手动将删除点前后的元素连接起来，从而实现对切片中元素的删除。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> student = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Ben&quot;</span>, <span class=\"string\">&quot;Peter&quot;</span>, <span class=\"string\">&quot;Danny&quot;</span>&#125;</span><br><span class=\"line\">\tstudent = <span class=\"built_in\">append</span>(student[<span class=\"number\">0</span>:<span class=\"number\">2</span>],student[<span class=\"number\">3</span>:]...)  <span class=\"comment\">//...依次取出元素</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片：&quot;</span>,student)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片长度：&quot;</span>,<span class=\"built_in\">len</span>(student))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片容量：&quot;</span>,<span class=\"built_in\">cap</span>(student))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//student切片： [Tom Ben Danny]</span></span><br><span class=\"line\"><span class=\"comment\">//student切片长度： 3</span></span><br><span class=\"line\"><span class=\"comment\">//student切片容量： 4</span></span><br></pre></td></tr></table></figure>\n<p>其中append()函数中传入的省略号代表按student切片展开，该行代码等价于：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">student = <span class=\"built_in\">append</span>(student[<span class=\"number\">0</span>:<span class=\"number\">2</span>],student[<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n\n<p>如果需要清空切片中的所有元素，可以把切片的开始下标和结束下标都设为0来实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> student = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Ben&quot;</span>, <span class=\"string\">&quot;Peter&quot;</span>, <span class=\"string\">&quot;Danny&quot;</span>&#125;</span><br><span class=\"line\">\tstudent = student[<span class=\"number\">0</span>:<span class=\"number\">0</span>]</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片：&quot;</span>,student)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片长度：&quot;</span>,<span class=\"built_in\">len</span>(student))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;student切片容量：&quot;</span>,<span class=\"built_in\">cap</span>(student))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//student切片： []</span></span><br><span class=\"line\"><span class=\"comment\">//student切片长度： 0</span></span><br><span class=\"line\"><span class=\"comment\">//student切片容量： 4</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"操作切片-3\"><p>切片的遍历和数组类似，可以通过切片下标来进行遍历。切片下标同样从0开始，第一个元素的数组下标为0，第二个元素的数组下标为1，以此类推。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> student = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Ben&quot;</span>, <span class=\"string\">&quot;Peter&quot;</span>, <span class=\"string\">&quot;Danny&quot;</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> student &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;切片下标：&quot;</span>,k,<span class=\"string\">&quot;，对应元素&quot;</span>,v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//切片下标： 0 ，对应元素 Tom</span></span><br><span class=\"line\"><span class=\"comment\">//切片下标： 1 ，对应元素 Ben</span></span><br><span class=\"line\"><span class=\"comment\">//切片下标： 2 ，对应元素 Peter</span></span><br><span class=\"line\"><span class=\"comment\">//切片下标： 3 ，对应元素 Danny</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"内置容器-3\"><p>映射（map）是一种无序的键值对的集合，map的键类似于索引，指向数据的值。当程序中需要存放有关联关系的数据时，往往就会用到map。<br>例如，将国家中文名和其英文名关联起来，生成如下映射：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">country := <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;中国&quot;</span>:<span class=\"string\">&quot;China&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;美国&quot;</span>:<span class=\"string\">&quot;America&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;日本&quot;</span>:<span class=\"string\">&quot;Japan&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tabs\" id=\"操作映射\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#操作映射-1\">声明映射</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#操作映射-2\">初始化映射</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#操作映射-3\">映射遍历</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#操作映射-4\">映射删除键值对</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#操作映射-5\">映射并发操作</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"操作映射-1\"><p>map的声明格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">map</span> [键类型]值类型</span><br></pre></td></tr></table></figure>\n<p>建立一个学生和其成绩的对应关系，样例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> studentScoreMap <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tfmt.Println(studentScoreMap)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map[]</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"操作映射-2\"><p>声明后初始化:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> studentScoreMap <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tstudentScoreMap = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Felix&quot;</span>: <span class=\"number\">99</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Tom&quot;</span>: <span class=\"number\">98</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;jackey&quot;</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(studentScoreMap)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map[Felix:99 Tom:98 jackey:9]</span></span><br></pre></td></tr></table></figure>\n\n<p>在声明的同时初始化:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> studentScoreMap = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Tom&quot;</span>:<span class=\"number\">80</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Felix&quot;</span>:<span class=\"number\">85</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Peter&quot;</span>:<span class=\"number\">90</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(studentScoreMap)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map[Felix:85 Peter:90 Tom:80]</span></span><br></pre></td></tr></table></figure>\n\n<p>使用make()函数初始化:<br>与切片的初始化类似，map也可以使用make()函数来进行初始化，格式如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[键类型]值类型,<span class=\"keyword\">map</span>容量)</span><br></pre></td></tr></table></figure>\n<p>注意：使用<code>make()</code>函数初始化map时可以不指定map容量，但是对于map的多次扩充会造成性能损耗。<br><code>cap()</code>函数只能用于获取切片的容量，无法获得map的容量，因此可以通过<code>len()</code>函数获取map的当前长度。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> studentScoreMap <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tstudentScoreMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Tom&quot;</span>]=<span class=\"number\">80</span></span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Felix&quot;</span>]=<span class=\"number\">85</span></span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Peter&quot;</span>]=<span class=\"number\">80</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;map长度为:&quot;</span>,<span class=\"built_in\">len</span>(studentScoreMap))</span><br><span class=\"line\">\tfmt.Println(studentScoreMap)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map长度为: 3</span></span><br><span class=\"line\"><span class=\"comment\">// map[Felix:85 Peter:80 Tom:80]</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"操作映射-3\"><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> studentScoreMap <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tstudentScoreMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Tom&quot;</span>]=<span class=\"number\">80</span></span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Felix&quot;</span>]=<span class=\"number\">85</span></span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Peter&quot;</span>]=<span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> studentScoreMap&#123;</span><br><span class=\"line\">\t\tfmt.Println(k,v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tom 80</span></span><br><span class=\"line\"><span class=\"comment\">// Felix 85</span></span><br><span class=\"line\"><span class=\"comment\">// Peter 80</span></span><br></pre></td></tr></table></figure>\n\n<p>只遍历键:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> studentScoreMap <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tstudentScoreMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Tom&quot;</span>]=<span class=\"number\">80</span></span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Felix&quot;</span>]=<span class=\"number\">85</span></span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Peter&quot;</span>]=<span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> studentScoreMap&#123;</span><br><span class=\"line\">\t\tfmt.Println(k)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tom</span></span><br><span class=\"line\"><span class=\"comment\">// Felix</span></span><br><span class=\"line\"><span class=\"comment\">// Peter</span></span><br></pre></td></tr></table></figure>\n<p>只遍历值:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> studentScoreMap <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tstudentScoreMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Tom&quot;</span>]=<span class=\"number\">80</span></span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Felix&quot;</span>]=<span class=\"number\">85</span></span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Peter&quot;</span>]=<span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,v := <span class=\"keyword\">range</span> studentScoreMap&#123;</span><br><span class=\"line\">\t\tfmt.Println(v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 80</span></span><br><span class=\"line\"><span class=\"comment\">// 85</span></span><br><span class=\"line\"><span class=\"comment\">// 80</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"操作映射-4\"><p>通过delete()函数来对map中的指定键值对进行删除操作，delete()函数格式如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"keyword\">map</span>,键)</span><br></pre></td></tr></table></figure>\n<p>其中map为要删除的map实例，键为map键值对中的键。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> studentScoreMap <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tstudentScoreMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Tom&quot;</span>]=<span class=\"number\">80</span></span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Felix&quot;</span>]=<span class=\"number\">85</span></span><br><span class=\"line\">\tstudentScoreMap[<span class=\"string\">&quot;Peter&quot;</span>]=<span class=\"number\">80</span></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(studentScoreMap,<span class=\"string\">&quot;Tom&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(studentScoreMap)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map[Felix:85 Peter:80]</span></span><br></pre></td></tr></table></figure>\n<p>注意: delete()函数会直接删除指定的键值对，而不是仅仅删除键或值。<br>另外，Go语言没有为map提供清空所有元素的方法，想要清空map的唯一方法就是重新定义一个新的map。</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"操作映射-5\"><p>对于map，我们可以定义一个键和值，然后从map中获取、变更和删除这个值。前面对map的操作都是在单协程的情况下完成的，这种情况下一般不会出现错误。如果是多个协程并发访问一个map，就有可能会导致程序异常退出，具体示例程序如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readMap</span><span class=\"params\">(Gomap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>,key <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Gomap[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">writeMap</span><span class=\"params\">(Gomap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>,key <span class=\"type\">int</span>,value <span class=\"type\">int</span>)</span></span>&#123;</span><br><span class=\"line\">\tGomap[key] = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tGoMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> writeMap(GoMap,i,i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> readMap(GoMap,i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//fatal error: concurrent map read and map write</span></span><br><span class=\"line\"><span class=\"comment\">//fatal error: concurrent map read and map write</span></span><br><span class=\"line\"><span class=\"comment\">//fatal error: concurrent map read and map write</span></span><br><span class=\"line\"><span class=\"comment\">//fatal error: concurrent map writes</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//goroutine 285 [running]:</span></span><br><span class=\"line\"><span class=\"comment\">//runtime.throw(0x104a70d, 0x21)</span></span><br><span class=\"line\"><span class=\"comment\">//C:/Go/src/runtime/panic.go:1116 +0x79 fp=0xc0001e7f70 sp=0xc0001e7f40 pc=0x1000f79</span></span><br><span class=\"line\"><span class=\"comment\">//runtime.mapaccess1_fast64(0x103b420, 0xc000018030, 0x8b, 0xc000092568)</span></span><br><span class=\"line\"><span class=\"comment\">//C:/Go/src/runtime/map_fast64.go:21 +0x1a7 fp=0xc0001e7f98 sp=0xc0001e7f70 pc=0xfdf027</span></span><br><span class=\"line\"><span class=\"comment\">//main.readMap(0xc000018030, 0x8b, 0x8b)</span></span><br><span class=\"line\"><span class=\"comment\">//D:/golang/src/dm2/map/binmap.go:4 +0x48 fp=0xc0001e7fc8 sp=0xc0001e7f98 pc=0x10311c8</span></span><br><span class=\"line\"><span class=\"comment\">//runtime.goexit()</span></span><br><span class=\"line\"><span class=\"comment\">//C:/Go/src/runtime/asm_amd64.s:1374 +0x1 fp=0xc0001e7fd0 sp=0xc0001e7fc8 pc=0x102b621</span></span><br><span class=\"line\"><span class=\"comment\">//created by main.main</span></span><br><span class=\"line\"><span class=\"comment\">//D:/golang/src/dm2/map/binmap.go:15 +0x92fatal error: concurrent map read and map write</span></span><br><span class=\"line\"><span class=\"comment\">//fatal error: concurrent map read and map write</span></span><br><span class=\"line\"><span class=\"comment\">//fatal error: concurrent map read and map write</span></span><br><span class=\"line\"><span class=\"comment\">//fatal error: concurrent map writes</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//goroutine 285 [running]:</span></span><br><span class=\"line\"><span class=\"comment\">//runtime.throw(0x104a70d, 0x21)</span></span><br><span class=\"line\"><span class=\"comment\">//C:/Go/src/runtime/panic.go:1116 +0x79 fp=0xc0001e7f70 sp=0xc0001e7f40 pc=0x1000f79</span></span><br><span class=\"line\"><span class=\"comment\">//runtime.mapaccess1_fast64(0x103b420, 0xc000018030, 0x8b, 0xc000092568)</span></span><br><span class=\"line\"><span class=\"comment\">//C:/Go/src/runtime/map_fast64.go:21 +0x1a7 fp=0xc0001e7f98 sp=0xc0001e7f70 pc=0xfdf027</span></span><br><span class=\"line\"><span class=\"comment\">//main.readMap(0xc000018030, 0x8b, 0x8b)</span></span><br><span class=\"line\"><span class=\"comment\">//D:/golang/src/dm2/map/binmap.go:4 +0x48 fp=0xc0001e7fc8 sp=0xc0001e7f98 pc=0x10311c8</span></span><br><span class=\"line\"><span class=\"comment\">//runtime.goexit()</span></span><br><span class=\"line\"><span class=\"comment\">//C:/Go/src/runtime/asm_amd64.s:1374 +0x1 fp=0xc0001e7fd0 sp=0xc0001e7fc8 pc=0x102b621</span></span><br><span class=\"line\"><span class=\"comment\">//created by main.main</span></span><br><span class=\"line\"><span class=\"comment\">//D:/golang/src/dm2/map/binmap.go:15 +0x92</span></span><br></pre></td></tr></table></figure>\n<p>从运行结果可以发现，程序异常终止，原因是出现了严重错误：多个协程在尝试对map进行同时写入。<br>由于map不是协程安全的，同一时刻只能有一个协程对map进行操作。最常见的解决方案就是使用sync包对map加锁或直接使用Go在1.9版本中提供的线程安全map。</p>\n<p>加锁的本质其实就是当前协程在对map操作前需先加上锁，加锁后其他任何协程无法对map进行任何操作，直至当前协程解锁。样例如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lock sync.RWMutex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readMap</span><span class=\"params\">(Gomap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>,key <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tlock.Lock() <span class=\"comment\">//读map操作前先加锁</span></span><br><span class=\"line\">\tm := Gomap[key]</span><br><span class=\"line\">\tlock.Unlock() <span class=\"comment\">//读完map后解锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">writeMap</span><span class=\"params\">(Gomap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>,key <span class=\"type\">int</span>,value <span class=\"type\">int</span>)</span></span>&#123;</span><br><span class=\"line\">\tlock.Lock() <span class=\"comment\">//写map操作前先加锁</span></span><br><span class=\"line\">\tGomap[key] = value</span><br><span class=\"line\">\tlock.Unlock() <span class=\"comment\">//写完map后解锁</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tGoMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> writeMap(GoMap,i,i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> readMap(GoMap,i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Done</span></span><br></pre></td></tr></table></figure>\n\n<p>由于加锁对程序性能会有一定影响，因此，如果需要在多协程情况下对map进行操作，我们推荐使用Go在1.9版本中提供的一种效率较高的并发安全的map–sync.Map。</p>\n<p>sync.Map有以下特点：</p>\n<ul>\n<li>内部通过冗余的数据结构降低加锁对性能的影响。</li>\n<li>使用前无须初始化，直接声明即可。</li>\n<li>sync.Map不使用map中的方式来进行读取和赋值等操作。</li>\n</ul>\n<p>使用sync.Map进行替换：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lock sync.RWMutex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readMap</span><span class=\"params\">(Gomap sync.Map,key <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tres ,ok := Gomap.Load(key) <span class=\"comment\">//线程安全读取</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok == <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res.(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">writeMap</span><span class=\"params\">(Gomap sync.Map,key <span class=\"type\">int</span>,value <span class=\"type\">int</span>)</span></span>&#123;</span><br><span class=\"line\">\tGomap.Store(key,value) <span class=\"comment\">//线程安全设置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> GoMap sync.Map</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> writeMap(GoMap,i,i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> readMap(GoMap,i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Done</span></span><br></pre></td></tr></table></figure>\n\n<p>sync.Map无须使用make创建。</p>\n<ul>\n<li>Load()方法的第一个返回值是接口类型，需要将其转换为map值的类型。</li>\n<li>目前sync.Map没有提供获取map数量的方法，解决方案是通过循环遍历map。</li>\n<li>与较普通的map相比，sync.Map为了保证并发安全，会有性能上的损失，因此在非并发情况下，推荐使用map。</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<p>总结:</p>\n<ul>\n<li>数组是具有相同类型且长度固定的一组数据项序列，这组数据项序列对应存放在内存中的一块连续区域中，数组大小之后不可再变。</li>\n<li>切片表示多个同类型元素的连续集合，但是切片本身并不存储任何元素，而只是对现有数组的引用。</li>\n<li>如果切片是从其他数组或切片生成，新切片的元素添加需要考虑对原有数组或切片中数据的影响。</li>\n<li>Go语言没有为删除切片元素提供方法，所以需要我们手动将删除点前后的元素连接起来，从而实现对切片中元素的删除。</li>\n<li>映射是一种无序的键值对的集合，当程序中需要存放有关联关系的数据时，往往就会用到map。</li>\n<li>Go语言没有为map提供清空所有元素的方法，想要清空map的唯一方法就是重新定义一个新的map。</li>\n</ul>\n","categories":["DEV"],"tags":["Golang"]},{"title":"Golang-面向“对象”：面向接口","url":"/forward/e94e48aa.html","content":"<h1 id=\"面向对象初探\"><a href=\"#面向对象初探\" class=\"headerlink\" title=\"面向对象初探\"></a>面向对象初探</h1><blockquote>\n<p>在软件开发领域，你应该听到过过程式编程、面向对象编程、甚至函数式编程等软件开发方式。而面向对象编程更是在现今大行其道，JAVA就是面向对象语言的代表，在JAVA中一切皆对象，它让编程中的一切元素、甚至设计方式都标准化，这更有利于大型应用的编写。</p>\n</blockquote>\n<h2 id=\"什么是面向对象编程？\"><a href=\"#什么是面向对象编程？\" class=\"headerlink\" title=\"什么是面向对象编程？\"></a>什么是面向对象编程？</h2><p>面向对象编程，简称OOP。在OOP的理念下，任何事物无论简单还是复杂都可以用对象表示，每个对象都包含属性和方法，属性表示对象是什么？有什么特征？方法表示对象能做什么？有什么能力？任何应用的构建都转化成对象关系的设计，这演化成一套标准化的面向对象设计模式。</p>\n<p><strong>类和对象</strong><br>要理解OOP，首先要理解类和对象的关系，类是设计层面的概念，而对象则是程序运行时的概念，OOP程序设计基于类的设计，类在程序运行时实例化为对象实现真正的业务逻辑。简而言之，所谓类可以理解成对象的模板，你编写一个类，在运行时需要实例化才能在程序调用栈中传递。</p>\n<p><strong>属性和方法</strong><br>在过程式编程中，我们熟悉变量和函数，使用这些基本元素我们实现业务逻辑。而属性和方法是对象内部的特征，咋一看他们很像，其实本质上是将实现特定功能的函数和变量封装成一个整体，即对象。一个对象包含一系列的属性和方法专注于实现某种特定功能。</p>\n<p><strong>接口</strong><br>接口是一系列方法的声明，是一些方法特征的集合，一个接口只有方法的特征没有方法的实现，因此这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为（功能），接口是多态实现的基础。</p>\n<h2 id=\"面向对象三大特性\"><a href=\"#面向对象三大特性\" class=\"headerlink\" title=\"面向对象三大特性\"></a>面向对象三大特性</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>将实现特定功能的属性和方法抽象封装成类，提供<code>public/private/protected</code>访问修饰符，控制外部访问的可见性。</p>\n<ul>\n<li>对业务相近的变量和函数封装在类/结构体中</li>\n<li>变量=&gt;类/结构体的属性</li>\n<li>函数=&gt;类/结构体的方法</li>\n</ul>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>对已经实现的类或接口提供重用或扩展的能力，子类可完全继承父类的所有能力。继承的过程，就是从一般到特殊的过程，其过程可以通过继承和组合来实现。</p>\n<ul>\n<li>继承的类拥有父类/父结构体的全部属性和方法</li>\n<li>接口继承则是一行代码拥有父类接口的全部抽象方法</li>\n<li>继承可以节约大量重复代码</li>\n<li>继承的目的:<ul>\n<li>提高代码的复用度</li>\n<li>拓展出新的属性和方法</li>\n<li>改进父类/结构体的方法</li>\n<li>以覆写父类/结构体的方法类实现</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>多态是指一个父类/接口可以拥有多种具体的子类实现形态;多态的好处是可以根据业务需要去方便地调度子类们的共性和个性</p>\n<h2 id=\"面向对象编程的优缺点\"><a href=\"#面向对象编程的优缺点\" class=\"headerlink\" title=\"面向对象编程的优缺点\"></a>面向对象编程的优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>高效：面向对象设计结构、模块清晰的应用，有利于大型应用的开发，团队成员各自维护局部模块，降低了成员开发的复杂性。<br>易维护：由于高内聚低耦合，各个模块的维护都是局部的，这非常方便定位问题。<br>易扩展：继承、封装、多态的特性，以及标准化的设计模式设计出高内聚、低耦合的系统结构，使得系统更灵活、更容易扩展，而且成本较低。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>俗话说，“如果你手上只有锤子，那么你看什么都是钉子”，OOP把一切都当成对象，但现实世界是复杂的，虽然设计模式就是解决应用中抽象的设计问题的。这把编码阶段的复杂性提到设计阶段。</p>\n<p>相对过程式编程，面向对象编程的程序结构性能有所下降；<br>提高系统设计的复杂度；</p>\n<h1 id=\"Go的面向“对象”\"><a href=\"#Go的面向“对象”\" class=\"headerlink\" title=\"Go的面向“对象”\"></a>Go的面向“对象”</h1><p>了解了面向对象编程的思想，我们再来看Go的面向对象，严格来说，Go并非面向对象编程语言，Go有自己的设计理念，面向对象只是一种软件开发方法，Go有自己的支持方式。</p>\n<h2 id=\"没有类和对象，只有类型和值\"><a href=\"#没有类和对象，只有类型和值\" class=\"headerlink\" title=\"没有类和对象，只有类型和值\"></a>没有类和对象，只有类型和值</h2><p>传统的JAVA类和对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类定义</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">//构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">( String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//公开方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span> <span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类实例化成对象</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//调用并打印公开方法</span></span><br><span class=\"line\">System.out.print(p.getName())</span><br></pre></td></tr></table></figure>\n<p>Go的类型和值：</p>\n<ul>\n<li>通过定义结构体类型的方式实现类似类的结构</li>\n<li>没有构造方法，直接使用NewXXX()工厂方法</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类型定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Preson <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//类型方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span></span> SetName(name <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">    p.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类型方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span></span> GetName() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//工厂方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPerson</span><span class=\"params\">(name <span class=\"type\">string</span>)</span></span> *Person&#123;</span><br><span class=\"line\">    p := <span class=\"built_in\">new</span>(Person)</span><br><span class=\"line\">    p.SetName(name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取person类型的值指针</span></span><br><span class=\"line\">p := NewPerson(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">fmt.Println(p.GetName())</span><br></pre></td></tr></table></figure>\n<h2 id=\"聚合和嵌入优于继承\"><a href=\"#聚合和嵌入优于继承\" class=\"headerlink\" title=\"聚合和嵌入优于继承\"></a>聚合和嵌入优于继承</h2><p>传统的JAVA继承：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> extend Person&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String school</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>() <span class=\"comment\">//直接使用父类的构造方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//block</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Go的聚合和嵌入：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Preson <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span></span> SetAge(age <span class=\"type\">int</span>)&#123;</span><br><span class=\"line\">    p.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//嵌入</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Person <span class=\"comment\">//匿名字段为嵌入类型</span></span><br><span class=\"line\">    School <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//聚合</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Ps     Person <span class=\"comment\">//命名字段为聚合类型</span></span><br><span class=\"line\">    School <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">OOPDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    s1 := <span class=\"built_in\">new</span>(Student1)</span><br><span class=\"line\">    s1.Name = <span class=\"string\">&quot;fun1&quot;</span> <span class=\"comment\">//嵌入的类型可直接使用其内部属性，更像继承</span></span><br><span class=\"line\">    s1.School = <span class=\"string\">&quot;Social University1&quot;</span></span><br><span class=\"line\">    s1.SetAge(<span class=\"number\">18</span>) <span class=\"comment\">//可以直接使用Person的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    s2 := <span class=\"built_in\">new</span>(Student2)</span><br><span class=\"line\">    s2.Ps.Name = <span class=\"string\">&quot;fun2&quot;</span> <span class=\"comment\">//聚合的类型需要先访问属性值名，在访问属性值内部的属性</span></span><br><span class=\"line\">    s2.School = <span class=\"string\">&quot;Social University2&quot;</span></span><br><span class=\"line\">    s1.Ps.SetAge(<span class=\"number\">18</span>) <span class=\"comment\">//可以间接使用Person的方法</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//OUTPUT:</span></span><br><span class=\"line\">    <span class=\"comment\">//s1: &amp;&#123;&#123;fun1&#125; Social University1&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//s2: &amp;&#123;&#123;fun2&#125; Social University2&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自由的结构体属性类型\"><a href=\"#自由的结构体属性类型\" class=\"headerlink\" title=\"自由的结构体属性类型\"></a>自由的结构体属性类型</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPerson <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    SetName(<span class=\"type\">string</span>)</span><br><span class=\"line\">    GetName() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//自定义函数</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyFuncType <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//大杂烩结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Something <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    a   <span class=\"type\">int</span>         <span class=\"comment\">//基本数据类型</span></span><br><span class=\"line\">    b   []<span class=\"type\">byte</span>      <span class=\"comment\">//切片</span></span><br><span class=\"line\">    p   Person      <span class=\"comment\">//结构体</span></span><br><span class=\"line\">    s   *Student    <span class=\"comment\">//指针</span></span><br><span class=\"line\">    i   IPerson     <span class=\"comment\">//接口</span></span><br><span class=\"line\">    f   MyFuncType  <span class=\"comment\">//自定义函数类型</span></span><br><span class=\"line\">    any <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"comment\">//任意类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"独立的方法定义更灵活\"><a href=\"#独立的方法定义更灵活\" class=\"headerlink\" title=\"独立的方法定义更灵活\"></a>独立的方法定义更灵活</h2><p>Go的类型方法在外部任意地方，只要定义的方法接收者为该类型，那定义的方法就是该类型的方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类型定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Preson <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//类型方法，接收者为该类型的指针</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span></span> SetName(name <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">    p.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//类型方法，接收者为该类型的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span></span> GetName() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用示例</span></span><br><span class=\"line\">p := <span class=\"built_in\">new</span>(Person)</span><br><span class=\"line\"><span class=\"comment\">//SetName()方法接收者为指针，使用指针类型或值类型去调用都可以</span></span><br><span class=\"line\">p.SetName(<span class=\"string\">&quot;fun&quot;</span>) <span class=\"comment\">//可以</span></span><br><span class=\"line\">*p.SetName(<span class=\"string\">&quot;func&quot;</span>) <span class=\"comment\">//指针取值后再去调用也可以。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//GetName()方法接收者为值类型，所以调用该方法只能为值</span></span><br><span class=\"line\">p.GetName() <span class=\"comment\">//不可以</span></span><br><span class=\"line\">*p.GetName() <span class=\"comment\">//可以</span></span><br></pre></td></tr></table></figure>\n<p><strong>方法接收者一般有两种情况：</strong></p>\n<ul>\n<li>接收者为指针：允许该类型的指针和值调用该方法；</li>\n<li>接收者为值：只允许该类型的值调用该方法。</li>\n</ul>\n<p>一般无特殊需要，建议把接收者直接设置为指针类型</p>\n<h2 id=\"没有显式public-private-protected，只有隐式大小写控制\"><a href=\"#没有显式public-private-protected，只有隐式大小写控制\" class=\"headerlink\" title=\"没有显式public/private/protected，只有隐式大小写控制\"></a>没有显式public/private/protected，只有隐式大小写控制</h2><p>Go的访问控制基于包，包内的成员变量、常量、类型、函数基于命名首字母的大小写控制。<br>其结构体类型的属性方法也类似，基于命名首字母的大小写控制。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Preson <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"type\">string</span>  <span class=\"comment\">//外部可见并可修改</span></span><br><span class=\"line\">    age <span class=\"type\">int</span> <span class=\"comment\">//仅内部可见内部方法修改</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类型方法，外部可见</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span></span> SetAge(age <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用内部方法</span></span><br><span class=\"line\">    p.setage(name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//类型方法，内部可见</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span></span> setage(age <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    p.age = age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Go面向接口编程\"><a href=\"#Go面向接口编程\" class=\"headerlink\" title=\"Go面向接口编程\"></a>Go面向接口编程</h1><p>严格意义讲，Go因没有对象概念，所以并非面向对象编程语言，但因其对OOP的深刻理解，使其设计理念更切合“面向接口”，接口的多态特性使其在设计高内聚低耦合的系统发挥更重要的作用。面向接口概念是面向对象的衍生，在多年的开发积累中，人们发现针对接口设计系统可以让系统扩展性和维护性更好。因此，Go的OOP针对接口设计，可以说接口是头等的类型也不为过。</p>\n<p>在Go语言中，接口拥有举足轻重的地位，而面向接口编程也是Go语言核心的设计理念。接口是高度抽象的概念，它是一种类型可由type关键字声明，接口内部声明一个或多个方法签名，因此不能实例化，一般创建一个类型为接口的变量，它可以被赋值为任何满足该接口声明的实际类型的值，作为类型传递。</p>\n<h2 id=\"接口-——-实现鸭子类型\"><a href=\"#接口-——-实现鸭子类型\" class=\"headerlink\" title=\"接口 —— 实现鸭子类型\"></a>接口 —— 实现鸭子类型</h2><blockquote>\n<p>当它走起来像鸭子，叫起来也像鸭子，那它就是鸭子。</p>\n</blockquote>\n<p>接口本身是类型，但它却不关心类型，它只关心行为，如果类型T的行为（实现的方法）和定义的接口I声明的方法签名符合，那么类型T就实现了I的接口。在方法参数传递或各种类型校验中，T就是I的实现。</p>\n<p>一个Go接口也是类型定义，其内部声明了其规定的方法签名：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//任何实现了IAnimal签名方法的类型都属于IAnimal类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IAnimal <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Live()</span><br><span class=\"line\">    Dead()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Humen结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Monkey <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Monkey)</span></span> Live() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;猴子活着吃香蕉！！！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Monkey)</span></span> Dead() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;香蕉有毒，猴子死了！！！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Cat结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cat)</span></span> Live() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;猫活着吃鱼！！！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cat)</span></span> Dead() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;猫吃了河豚死翘翘！！！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//演示：</span></span><br><span class=\"line\"><span class=\"comment\">//声明一个IAnimal的切片</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> zoo []IAnimal </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addAnimal</span><span class=\"params\">(animal IAnimal)</span></span> &#123;</span><br><span class=\"line\">    zoo = <span class=\"built_in\">append</span>(zoo,animal)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">OOPDemo02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    m := <span class=\"built_in\">new</span>(Monkey)</span><br><span class=\"line\">    c := <span class=\"built_in\">new</span>(Cat)</span><br><span class=\"line\">    addAnimal(m)</span><br><span class=\"line\">    addAnimal(c)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _,animal := <span class=\"keyword\">range</span> zoo &#123;</span><br><span class=\"line\">        animal.Live()</span><br><span class=\"line\">        animal.Dead()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//OUTPUT:</span></span><br><span class=\"line\"><span class=\"comment\">//猴子活着吃香蕉！！！</span></span><br><span class=\"line\"><span class=\"comment\">//香蕉有毒，猴子死了！！！</span></span><br><span class=\"line\"><span class=\"comment\">//猫活着吃鱼！！！</span></span><br><span class=\"line\"><span class=\"comment\">//猫吃了河豚死翘翘！！！</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"接口类型限定赋值\"><a href=\"#接口类型限定赋值\" class=\"headerlink\" title=\"接口类型限定赋值\"></a>接口类型限定赋值</h2><p>类型值赋值给接口类型</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> IPerson <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    GetName()</span><br><span class=\"line\">    SetName()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//任何实现GetName()、SetName()方法的类型都可赋值给person</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person IPerson</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">接口类型赋值给另一接口类型</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span>&#123;    <span class=\"comment\">//父接口</span></span><br><span class=\"line\">    Write(buf []<span class=\"type\">byte</span>) (n <span class=\"type\">int</span>,err <span class=\"type\">error</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> ReadWriter <span class=\"keyword\">interface</span>&#123;    <span class=\"comment\">//子接口</span></span><br><span class=\"line\">    Read(buf []<span class=\"type\">byte</span>) (n <span class=\"type\">int</span>,err <span class=\"type\">error</span>)</span><br><span class=\"line\">    Write(buf []<span class=\"type\">byte</span>) (n <span class=\"type\">int</span>,err <span class=\"type\">error</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> file1 ReadWriter=<span class=\"built_in\">new</span>(File)   <span class=\"comment\">//子接口实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> file2 Writer=file1           <span class=\"comment\">//子接口实例赋值给父接口</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"非侵入式接口\"><a href=\"#非侵入式接口\" class=\"headerlink\" title=\"非侵入式接口\"></a>非侵入式接口</h2><p>上面演示我们看到，接口的运用在编码中是非侵入式的，在经典的OOP语言中，实现接口需要类显式实现，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//block</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而Go并不需要显式实现，类型只需实现特定接口的方法签名即可。当然这种极度宽松的实现方式有可能让你定义的类型“不小心”就实现了某些接口能力，一旦你的类型方法和某些接口方法签名一致时就会如此。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该类型实现了标准包的io.Writer接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> F <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *F)</span></span> Write(p []<span class=\"type\">byte</span>) (n <span class=\"type\">int</span>, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//block</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口嵌入\"><a href=\"#接口嵌入\" class=\"headerlink\" title=\"接口嵌入\"></a>接口嵌入</h2><p>和结构体类型类似，接口也可以嵌入其他接口，接口只能嵌入不能聚合！</p>\n<p>以下演示接口嵌入的示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生物接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IBeing <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Live()</span><br><span class=\"line\">    Dead()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//动物接口嵌入生物接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IAnimal <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    IBeing</span><br><span class=\"line\">    Hunting()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//植物接口嵌入生物接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPlant <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    IBeing</span><br><span class=\"line\">    Growing()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Tiger <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Tiger)</span></span> Live() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;老虎活着称大王！！！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Tiger)</span></span> Dead() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;老虎战斗死了！！！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Tiger)</span></span> Hunting() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;老虎捕猎！！！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Flower <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Flower)</span></span> Live() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;花儿享受阳光！！！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Flower)</span></span> Dead() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;花儿落下死了！！！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Flower)</span></span> Growing() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;花儿茁壮成长！！！&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明一个interface&#123;&#125;的切片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> earth []<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addBeing</span><span class=\"params\">(b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">    earth = <span class=\"built_in\">append</span>(earth, b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">OOPDemo03</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    tiger := <span class=\"built_in\">new</span>(Tiger)</span><br><span class=\"line\">    flower := <span class=\"built_in\">new</span>(Flower)</span><br><span class=\"line\">    addBeing(tiger)</span><br><span class=\"line\">    addBeing(flower)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, being := <span class=\"keyword\">range</span> earth &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> animal, ok := being.(IAnimal); ok &#123;</span><br><span class=\"line\">            animal.Live()</span><br><span class=\"line\">            <span class=\"comment\">//如果是动物则捕猎</span></span><br><span class=\"line\">            animal.Hunting()</span><br><span class=\"line\">            animal.Dead()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> plant, ok := being.(IPlant); ok &#123; </span><br><span class=\"line\">            plant.Live()</span><br><span class=\"line\">            <span class=\"comment\">//如果是植物则成长</span></span><br><span class=\"line\">            plant.Growing()</span><br><span class=\"line\">            plant.Dead()</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//OUTPUT:</span></span><br><span class=\"line\"><span class=\"comment\">//老虎活着称大王！！！</span></span><br><span class=\"line\"><span class=\"comment\">//老虎捕猎！！！</span></span><br><span class=\"line\"><span class=\"comment\">//老虎战斗死了！！！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//花儿享受阳光！！！</span></span><br><span class=\"line\"><span class=\"comment\">//花儿茁壮成长！！！</span></span><br><span class=\"line\"><span class=\"comment\">//花儿落下死了！！！</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>类型断言，由于接口是一般类型，不知道具体类型，如果要转成具体类型，就需要使用类型断言</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//试着转一下类型,不成功也不会报错</span></span><br><span class=\"line\">plant, ok := being.(IPlant)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转一下类型,不成功就会panic</span></span><br><span class=\"line\">plant := being.(IPlant)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-311.png\" alt=\"OOP\"></p>\n<h2 id=\"面向接口编程和简单的依赖注入\"><a href=\"#面向接口编程和简单的依赖注入\" class=\"headerlink\" title=\"面向接口编程和简单的依赖注入\"></a>面向接口编程和简单的依赖注入</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">fei@feideMacBook-Pro faceinter % tree ./</span><br><span class=\"line\">./</span><br><span class=\"line\">├── app</span><br><span class=\"line\">│   └── app.<span class=\"keyword\">go</span></span><br><span class=\"line\">├── data</span><br><span class=\"line\">│   └── data.<span class=\"keyword\">go</span></span><br><span class=\"line\">└── main.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//data层</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sql <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tOpen() <span class=\"type\">error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> mysql <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\turl <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Newmysql</span><span class=\"params\">(url <span class=\"type\">string</span>)</span></span> *mysql &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;mysql&#123;url: url&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sql *mysql)</span></span> Open() <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;打开了&quot;</span>, sql.url)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> mgdb <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\turl <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Newmgdb</span><span class=\"params\">(url <span class=\"type\">string</span>)</span></span> *mgdb &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;mgdb&#123;url: url&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sql *mgdb)</span></span> Open() <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;打开了&quot;</span>, sql.url)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app层</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;faceinter/data&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> App <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSum(<span class=\"type\">int</span>, <span class=\"type\">int</span>) <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> app <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tmydesql data.Sql <span class=\"comment\">//依赖interface类型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewAppIns</span><span class=\"params\">(mydesql data.Sql)</span></span> App &#123; <span class=\"comment\">//不依赖具体实现将mydesql字段当作依赖传递进来</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;app&#123;</span><br><span class=\"line\">\t\tmydesql: mydesql,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(app1 *app)</span></span> Sum(a, b <span class=\"type\">int</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\terr := app1.mydesql.Open()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%v + %v = %v\\n&quot;</span>, a, b, a+b)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;faceinter/app&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;faceinter/data&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 依赖定义的接口而不依赖实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">callAppFunc</span><span class=\"params\">(ap app.App)</span></span> &#123;</span><br><span class=\"line\">\tap.Sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnewsql := data.Newmgdb(<span class=\"string\">&quot;127.0.0.1:27017&quot;</span>)</span><br><span class=\"line\">\tappins := app.NewAppIns(newsql) <span class=\"comment\">//app层依赖data层，通过data层私有构造函数做依赖注入</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//将实现传递进去</span></span><br><span class=\"line\">\tcallAppFunc(appins)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">OUTPUT：</span><br><span class=\"line\">打开了 <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span> = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>依赖倒置原则</strong><br>app中使用了接口data.Sql来定义数据库的连接，连接数据库依赖Sql的接口，而不依赖具体哪一种数据库的实现。<br>这样可以自由选择数据库，而不用动app层代码。只需要相关数据库实现了该接口，并通过db的私有构造函数传递给app的构造函数中的dbinterface。<br>好处：可扩展性好，以后添加其他数据库不影响app层的业务逻辑，即抽象不依赖细节。</p>\n<h3 id=\"电商推荐引擎（面向接口编程demo）\"><a href=\"#电商推荐引擎（面向接口编程demo）\" class=\"headerlink\" title=\"电商推荐引擎（面向接口编程demo）\"></a>电商推荐引擎（面向接口编程demo）</h3><p><img src=\"/images/pasted-333.png\" alt=\"rec\"></p>\n<p>电商推荐引擎（面向接口编程demo）:<a href=\"https://github.com/bingdang/go-interface\">https://github.com/bingdang/go-interface</a></p>\n<p><strong>实现过程</strong></p>\n<ol>\n<li>对召回、排序、过滤分别定义接口<ul>\n<li>召回接口：<code>recall/recaller.go</code></li>\n<li>排序接口：<code>sort/sorter.go</code></li>\n<li>过滤接口：<code>filter/filter.go</code></li>\n</ul>\n</li>\n<li>将三个步骤的接口封装到推荐引擎结构体中<ul>\n<li><code>rec.go/Recommender 结构体</code></li>\n</ul>\n</li>\n<li>实现纯接口的推荐框架<ul>\n<li><code>rec.go/Rec() Recommender的方法</code></li>\n</ul>\n</li>\n<li>对召回、排序、过滤进行具体的实现<ul>\n<li>召回实现：<ul>\n<li>按照热度召回：<code>recall/hot_recall.go</code></li>\n<li>按照size召回：<code>recall/size_recall.go</code></li>\n</ul>\n</li>\n<li>排序实现：<ul>\n<li>按照好评率排序：<code>sort/ratio_sort.go</code></li>\n<li>按照size排序：<code>sort/szie_sort.go</code></li>\n</ul>\n</li>\n<li>过滤的具体实现：<ul>\n<li>按照评价进行过滤：<code>filter/ratio_filter.go</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用具体的实现，将具体的实现赋值给Recommender结构体<ul>\n<li><code>rec.go/main()</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/<span class=\"keyword\">go</span>/src/<span class=\"keyword\">go</span>-<span class=\"keyword\">interface</span> main !<span class=\"number\">1</span> ?<span class=\"number\">1</span> ❯ <span class=\"keyword\">go</span> run ./</span><br><span class=\"line\"><span class=\"number\">2024</span>/<span class=\"number\">06</span>/<span class=\"number\">28</span> <span class=\"number\">18</span>:<span class=\"number\">03</span>:<span class=\"number\">05</span> 召回hot耗时<span class=\"number\">0</span>ms，召回了<span class=\"number\">5</span>个商品</span><br><span class=\"line\"><span class=\"number\">2024</span>/<span class=\"number\">06</span>/<span class=\"number\">28</span> <span class=\"number\">18</span>:<span class=\"number\">03</span>:<span class=\"number\">05</span> 召回szie耗时<span class=\"number\">0</span>ms，召回了<span class=\"number\">8</span>个商品</span><br><span class=\"line\"><span class=\"number\">2024</span>/<span class=\"number\">06</span>/<span class=\"number\">28</span> <span class=\"number\">18</span>:<span class=\"number\">03</span>:<span class=\"number\">05</span> 去重之后一共召回了<span class=\"number\">8</span>个商品</span><br><span class=\"line\"><span class=\"number\">2024</span>/<span class=\"number\">06</span>/<span class=\"number\">28</span> <span class=\"number\">18</span>:<span class=\"number\">03</span>:<span class=\"number\">05</span> 排序耗时<span class=\"number\">0</span>ms</span><br><span class=\"line\"><span class=\"number\">2024</span>/<span class=\"number\">06</span>/<span class=\"number\">28</span> <span class=\"number\">18</span>:<span class=\"number\">03</span>:<span class=\"number\">05</span> 过滤规则ratio耗时<span class=\"number\">0</span>ms，过滤掉了<span class=\"number\">4</span>个商品</span><br><span class=\"line\">No<span class=\"number\">.0</span>,Id:<span class=\"number\">7</span>,Name:p7</span><br><span class=\"line\">No<span class=\"number\">.1</span>,Id:<span class=\"number\">1</span>,Name:p1</span><br><span class=\"line\">No<span class=\"number\">.2</span>,Id:<span class=\"number\">2</span>,Name:p2</span><br><span class=\"line\">No<span class=\"number\">.3</span>,Id:<span class=\"number\">3</span>,Name:p3</span><br></pre></td></tr></table></figure>\n","categories":["DEV"],"tags":["Golang","面向对象"]},{"title":"MongoDB-CRUD&运维工具介绍以及授权认证","url":"/forward/40c70ce.html","content":"<p>MongoDB-CRUD</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><ul>\n<li><strong>1.1</strong> <code>CRUD</code> 操作是 <code>create(创建)， read(读取)， update(更新)和 delete(删除)</code> 文档。</li>\n<li><strong>1.2</strong> MongoDB 不支持多文档事务(<code>mongodb4.0</code> 开始支持 ACID)。但是 MongoDB 确实在一个文档上提供了原子操作。尽管集合中的文档通常都是相同的，但是 MongoDB 中的集合不需要指定 schema。</li>\n<li><strong>1.3</strong> MongoDB 不支持 SQL 但是支持自己的丰富的查询语言。</li>\n<li><strong>1.4</strong> 在 MongoDB 中，存储在集合中的每个文档都需要一个唯一的 _id 字段，作为主键。如果插入的文档省略了该_id 字段，则 MongoDB 驱动程序将自动为该字段生成一个 <code>ObjectId_id</code>。也用于通过更新操作插入的文档<code>upsert: true</code>.如果文档包含一个_id 字段，该_id 值在集合中必须是唯一的，以避免重复键错误。</li>\n<li><strong>1.5</strong> 在 MongoDB 中，插入操作针对单个集合。 MongoDB 中的所有写操作都是在单个文档的级别上进行的</li>\n</ul>\n<h1 id=\"显示命令\"><a href=\"#显示命令\" class=\"headerlink\" title=\"显示命令\"></a>显示命令</h1><p><code>Help</code>: 显示帮助。<br><code>db.help()</code> 显示数据库方法的帮助。<br><code>db.&lt;collection&gt;.help()</code> 显示收集方法的帮助， <collection>可以是现有的集合或不存在的集合的名称。<br><code>show dbs</code> 打印服务器上所有数据库的列表。<br><code>use &lt;db&gt;</code>将当前数据库切换到<db>。该 mongoshell 变量 db 被设置为当前数据库。<br><code>show collections</code> 打印当前数据库的所有集合的列表<br><code>show users</code> 打印当前数据库的用户列表。<br><code>show roles</code> 打印用于当前数据库的用户定义和内置的所有角色的列表。<br><code>show profile</code> 打印需要 1 毫秒或更多的五个最近的操作。有关详细信息，请参阅数据库分析器上的文档。<br><code>show databases</code> 打印所有可用数据库的列表。<br><code>load()</code> 执行一个 JavaScript 文件。</p>\n<h1 id=\"CRUD\"><a href=\"#CRUD\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h1><h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><h3 id=\"单行插入\"><a href=\"#单行插入\" class=\"headerlink\" title=\"单行插入\"></a>单行插入</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; use dba</span><br><span class=\"line\">db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;zhangya&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:27,<span class=\"string\">&quot;ad&quot;</span>:<span class=\"string\">&quot;北京市朝阳区&quot;</span>&#125;)</span><br><span class=\"line\">db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;zhangya&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:27,<span class=\"string\">&quot;ad&quot;</span>:<span class=\"string\">&quot;北京市朝阳区&quot;</span>&#125;)</span><br><span class=\"line\">db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;yazhang&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:28,<span class=\"string\">&quot;ad&quot;</span>:<span class=\"string\">&quot;北京市朝阳区&quot;</span>&#125;)</span><br><span class=\"line\">db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;xiaozhang&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:28,<span class=\"string\">&quot;ad&quot;</span>:<span class=\"string\">&quot;北京市朝阳区&quot;</span>&#125;)</span><br><span class=\"line\">db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;xiaozhang&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:28,<span class=\"string\">&quot;ad&quot;</span>:<span class=\"string\">&quot;北京市朝阳区&quot;</span>,<span class=\"string\">&quot;sex&quot;</span>:<span class=\"string\">&quot;boy&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"多行插入\"><a href=\"#多行插入\" class=\"headerlink\" title=\"多行插入\"></a>多行插入</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.inventory.insertMany([</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span>: <span class=\"string\">&quot;journal&quot;</span>, <span class=\"string\">&quot;qty&quot;</span>: 25, <span class=\"string\">&quot;size&quot;</span>: &#123; <span class=\"string\">&quot;h&quot;</span>: 14, <span class=\"string\">&quot;w&quot;</span>: 21, <span class=\"string\">&quot;uom&quot;</span>: <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;A&quot;</span> &#125;,</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span>: <span class=\"string\">&quot;notebook&quot;</span>, <span class=\"string\">&quot;qty&quot;</span>: 50, <span class=\"string\">&quot;size&quot;</span>: &#123; <span class=\"string\">&quot;h&quot;</span>: 8.5, <span class=\"string\">&quot;w&quot;</span>: 11, <span class=\"string\">&quot;uom&quot;</span>: <span class=\"string\">&quot;in&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;A&quot;</span> &#125;,</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span>: <span class=\"string\">&quot;paper&quot;</span>, <span class=\"string\">&quot;qty&quot;</span>: 100, <span class=\"string\">&quot;size&quot;</span>: &#123; <span class=\"string\">&quot;h&quot;</span>: 8.5, <span class=\"string\">&quot;w&quot;</span>: 11, <span class=\"string\">&quot;uom&quot;</span>: <span class=\"string\">&quot;in&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;D&quot;</span> &#125;,</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span>: <span class=\"string\">&quot;planner&quot;</span>, <span class=\"string\">&quot;qty&quot;</span>: 75, <span class=\"string\">&quot;size&quot;</span>: &#123; <span class=\"string\">&quot;h&quot;</span>: 22.85, <span class=\"string\">&quot;w&quot;</span>: 30, <span class=\"string\">&quot;uom&quot;</span>: <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;D&quot;</span> &#125;,</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span>: <span class=\"string\">&quot;postcard&quot;</span>, <span class=\"string\">&quot;qty&quot;</span>: 45, <span class=\"string\">&quot;size&quot;</span>: &#123; <span class=\"string\">&quot;h&quot;</span>: 10, <span class=\"string\">&quot;w&quot;</span>: 15.25, <span class=\"string\">&quot;uom&quot;</span>: <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;A&quot;</span> &#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><h3 id=\"查询单条\"><a href=\"#查询单条\" class=\"headerlink\" title=\"查询单条\"></a>查询单条</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.inventory.<span class=\"function\"><span class=\"title\">findOne</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64893&quot;</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;journal&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;qty&quot;</span> : 25,</span><br><span class=\"line\">        <span class=\"string\">&quot;size&quot;</span> : &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;h&quot;</span> : 14,</span><br><span class=\"line\">                <span class=\"string\">&quot;w&quot;</span> : 21,</span><br><span class=\"line\">                <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; </span><br></pre></td></tr></table></figure>\n<h3 id=\"查询所有\"><a href=\"#查询所有\" class=\"headerlink\" title=\"查询所有\"></a>查询所有</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.inventory.<span class=\"function\"><span class=\"title\">find</span></span>()</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64893&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;journal&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 25, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 14, <span class=\"string\">&quot;w&quot;</span> : 21, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64894&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;notebook&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 50, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 8.5, <span class=\"string\">&quot;w&quot;</span> : 11, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;in&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64895&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;paper&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 100, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 8.5, <span class=\"string\">&quot;w&quot;</span> : 11, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;in&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;D&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64896&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;planner&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 75, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 22.85, <span class=\"string\">&quot;w&quot;</span> : 30, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;D&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64897&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;postcard&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 45, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 10, <span class=\"string\">&quot;w&quot;</span> : 15.25, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h3><h4 id=\"等值：\"><a href=\"#等值：\" class=\"headerlink\" title=\"等值：\"></a>等值：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.inventory.find(&#123;<span class=\"string\">&quot;status&quot;</span>:<span class=\"string\">&quot;D&quot;</span>&#125;)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64895&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;paper&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 100, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 8.5, <span class=\"string\">&quot;w&quot;</span> : 11, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;in&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;D&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64896&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;planner&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 75, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 22.85, <span class=\"string\">&quot;w&quot;</span> : 30, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;D&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db.inventory.find(&#123;<span class=\"string\">&quot;size.uom&quot;</span>:<span class=\"string\">&quot;cm&quot;</span>&#125;)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64893&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;journal&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 25, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 14, <span class=\"string\">&quot;w&quot;</span> : 21, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64896&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;planner&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 75, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 22.85, <span class=\"string\">&quot;w&quot;</span> : 30, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;D&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64897&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;postcard&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 45, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 10, <span class=\"string\">&quot;w&quot;</span> : 15.25, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"and\"><a href=\"#and\" class=\"headerlink\" title=\"and\"></a>and</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.inventory.find(&#123;<span class=\"string\">&quot;size.h&quot;</span>:&#123;<span class=\"variable\">$gt</span>:10&#125;,status:<span class=\"string\">&quot;D&quot;</span>&#125;)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64896&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;planner&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 75, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 22.85, <span class=\"string\">&quot;w&quot;</span> : 30, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;D&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"or\"><a href=\"#or\" class=\"headerlink\" title=\"or\"></a>or</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.inventory.find(&#123;<span class=\"variable\">$or</span>:[&#123;qty:&#123;<span class=\"variable\">$lt</span>:50&#125;&#125;,&#123;<span class=\"string\">&quot;size.uom&quot;</span>:<span class=\"string\">&quot;in&quot;</span>&#125;]&#125;)</span><br><span class=\"line\">qty &lt; 50 或者 size.uom == <span class=\"keyword\">in</span>的记录</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"正则\"><a href=\"#正则\" class=\"headerlink\" title=\"正则\"></a>正则</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.inventory.find( &#123;status: <span class=\"string\">&quot;A&quot;</span>,<span class=\"variable\">$or</span>: [ &#123; qty: &#123; <span class=\"variable\">$lt</span>: 30 &#125; &#125;, &#123; item: /^p/ &#125; ]&#125; )</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64893&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;journal&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 25, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 14, <span class=\"string\">&quot;w&quot;</span> : 21, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64897&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;postcard&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 45, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 10, <span class=\"string\">&quot;w&quot;</span> : 15.25, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">myCursor = db.inventory.find( &#123;</span><br><span class=\"line\"> status: <span class=\"string\">&quot;A&quot;</span>,</span><br><span class=\"line\"> <span class=\"variable\">$or</span>: [ &#123; qty: &#123; <span class=\"variable\">$lt</span>: 30 &#125; &#125;, &#123; item: /^p/ &#125; ]</span><br><span class=\"line\">&#125; )</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据库查看\"><a href=\"#数据库查看\" class=\"headerlink\" title=\"数据库查看\"></a>数据库查看</h3><p>查看数据库命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\">dba     0.000GB</span><br><span class=\"line\"><span class=\"built_in\">local</span>   0.000GB</span><br><span class=\"line\">&gt; use dba</span><br><span class=\"line\">switched to db dba</span><br><span class=\"line\">&gt; db</span><br><span class=\"line\">dba</span><br><span class=\"line\">&gt;  show collections</span><br><span class=\"line\">inventory</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h2><h3 id=\"更新单个文档\"><a href=\"#更新单个文档\" class=\"headerlink\" title=\"更新单个文档:\"></a>更新单个文档:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.inventory.find(&#123; <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;paper&quot;</span> &#125;)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64895&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;paper&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 100, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 8.5, <span class=\"string\">&quot;w&quot;</span> : 11, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;in&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;D&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.inventory.updateOne(</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;paper&quot;</span> &#125;, // specifies the document to update</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> <span class=\"variable\">$set</span>: &#123; <span class=\"string\">&quot;size.uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span>, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;P&quot;</span> &#125;,</span><br><span class=\"line\"> <span class=\"variable\">$currentDate</span>: &#123; <span class=\"string\">&quot;lastModified&quot;</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db.inventory.find(&#123; <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;paper&quot;</span> &#125;)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64895&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;paper&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 100, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 8.5, <span class=\"string\">&quot;w&quot;</span> : 11, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;P&quot;</span>, <span class=\"string\">&quot;lastModified&quot;</span> : ISODate(<span class=\"string\">&quot;2020-05-17T15:43:16.994Z&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新多条数据\"><a href=\"#更新多条数据\" class=\"headerlink\" title=\"更新多条数据:\"></a>更新多条数据:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.inventory.find(&#123; <span class=\"string\">&quot;qty&quot;</span> : &#123; <span class=\"variable\">$lt</span>: 50 &#125; &#125;)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64893&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;journal&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 25, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 14, <span class=\"string\">&quot;w&quot;</span> : 21, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64897&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;postcard&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 45, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 10, <span class=\"string\">&quot;w&quot;</span> : 15.25, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;A&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.inventory.updateMany(</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;qty&quot;</span> : &#123; <span class=\"variable\">$lt</span>: 50 &#125; &#125;, // specifies the documents to update</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> <span class=\"variable\">$set</span>: &#123; <span class=\"string\">&quot;size.uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span>, <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;P&quot;</span> &#125;,</span><br><span class=\"line\"> <span class=\"variable\">$currentDate</span> : &#123; <span class=\"string\">&quot;lastModified&quot;</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db.inventory.find(&#123; <span class=\"string\">&quot;qty&quot;</span> : &#123; <span class=\"variable\">$lt</span>: 50 &#125; &#125;)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64893&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;journal&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 25, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 14, <span class=\"string\">&quot;w&quot;</span> : 21, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;P&quot;</span>, <span class=\"string\">&quot;lastModified&quot;</span> : ISODate(<span class=\"string\">&quot;2020-05-17T16:02:19.749Z&quot;</span>) &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64897&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;postcard&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 45, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 10, <span class=\"string\">&quot;w&quot;</span> : 15.25, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;P&quot;</span>, <span class=\"string\">&quot;lastModified&quot;</span> : ISODate(<span class=\"string\">&quot;2020-05-17T16:02:19.749Z&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h2><h3 id=\"单行删除\"><a href=\"#单行删除\" class=\"headerlink\" title=\"单行删除\"></a>单行删除</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.inventory.find( &#123; <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;D&quot;</span> &#125; )</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64896&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;planner&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 75, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 22.85, <span class=\"string\">&quot;w&quot;</span> : 30, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;D&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.inventory.deleteOne(</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;D&quot;</span> &#125; // specifies the document to delete</span><br><span class=\"line\">)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;acknowledged&quot;</span> : <span class=\"literal\">true</span>, <span class=\"string\">&quot;deletedCount&quot;</span> : 1 &#125; //回显</span><br></pre></td></tr></table></figure>\n<h3 id=\"多行删除\"><a href=\"#多行删除\" class=\"headerlink\" title=\"多行删除\"></a>多行删除</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">myCursor = db.inventory.find( &#123; <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;P&quot;</span> &#125; )</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64893&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;journal&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 25, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 14, <span class=\"string\">&quot;w&quot;</span> : 21, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;P&quot;</span>, <span class=\"string\">&quot;lastModified&quot;</span> : ISODate(<span class=\"string\">&quot;2020-05-17T16:02:19.749Z&quot;</span>) &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64895&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;paper&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 100, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 8.5, <span class=\"string\">&quot;w&quot;</span> : 11, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;P&quot;</span>, <span class=\"string\">&quot;lastModified&quot;</span> : ISODate(<span class=\"string\">&quot;2020-05-17T15:43:16.994Z&quot;</span>) &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ebfe049e4265d343ff64897&quot;</span>), <span class=\"string\">&quot;item&quot;</span> : <span class=\"string\">&quot;postcard&quot;</span>, <span class=\"string\">&quot;qty&quot;</span> : 45, <span class=\"string\">&quot;size&quot;</span> : &#123; <span class=\"string\">&quot;h&quot;</span> : 10, <span class=\"string\">&quot;w&quot;</span> : 15.25, <span class=\"string\">&quot;uom&quot;</span> : <span class=\"string\">&quot;cm&quot;</span> &#125;, <span class=\"string\">&quot;status&quot;</span> : <span class=\"string\">&quot;P&quot;</span>, <span class=\"string\">&quot;lastModified&quot;</span> : ISODate(<span class=\"string\">&quot;2020-05-17T16:02:19.749Z&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.inventory.deleteMany(</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;P&quot;</span> &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;acknowledged&quot;</span> : <span class=\"literal\">true</span>, <span class=\"string\">&quot;deletedCount&quot;</span> : 3 &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h1><h2 id=\"mongodb关闭\"><a href=\"#mongodb关闭\" class=\"headerlink\" title=\"mongodb关闭\"></a>mongodb关闭</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod -f mongo.conf  --shutdown</span><br></pre></td></tr></table></figure>\n<h2 id=\"mongodb常用基本操作\"><a href=\"#mongodb常用基本操作\" class=\"headerlink\" title=\"mongodb常用基本操作\"></a>mongodb常用基本操作</h2><h3 id=\"库相关\"><a href=\"#库相关\" class=\"headerlink\" title=\"库相关\"></a>库相关</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">test</span>:登录时默认存在的库</span><br><span class=\"line\"></span><br><span class=\"line\">管理MongoDB有关的系统库</span><br><span class=\"line\">admin库:系统预留库,MongoDB系统管理库</span><br><span class=\"line\"><span class=\"built_in\">local</span>库:本地预留库,存储关键日志</span><br><span class=\"line\">config库:MongoDB配置信息库</span><br><span class=\"line\"></span><br><span class=\"line\">show databases/show dbs        ----&gt; <span class=\"built_in\">ls</span></span><br><span class=\"line\">show tables/show collections   </span><br><span class=\"line\"></span><br><span class=\"line\">use admin                      ----&gt;<span class=\"built_in\">cd</span>/mkdir <span class=\"comment\">#如果数据库不存在，则创建数据库，否则切换到指定数据库。</span></span><br><span class=\"line\">db/select database()           ----&gt;<span class=\"built_in\">pwd</span></span><br><span class=\"line\">db.dropDatabase()              ----&gt;<span class=\"built_in\">rm</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"集合相关\"><a href=\"#集合相关\" class=\"headerlink\" title=\"集合相关\"></a>集合相关</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use db1 //进入db1库</span><br><span class=\"line\">创建集合：</span><br><span class=\"line\"> - db.createCollection(<span class=\"string\">&quot;oldboy&quot;</span>)</span><br><span class=\"line\"> - 插入文档时自动创建 如：db.oldboy.insert(&#123;name:<span class=\"string\">&quot;zhangsan&quot;</span>&#125;)</span><br><span class=\"line\">删除集合：</span><br><span class=\"line\"> - db.oldboy.drop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"文档相关\"><a href=\"#文档相关\" class=\"headerlink\" title=\"文档相关\"></a>文档相关</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">批量录入：</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=0;i&lt;10000;i++)&#123;db.log.insert(&#123;<span class=\"string\">&quot;uid&quot;</span>:i,<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;mongodb&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:6,<span class=\"string\">&quot;date&quot;</span>:new Date()&#125;)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">行数查询：</span><br><span class=\"line\">&gt; db.log.count()</span><br><span class=\"line\"></span><br><span class=\"line\">全表查询：</span><br><span class=\"line\">&gt; db.log.find()</span><br><span class=\"line\"></span><br><span class=\"line\">每页显示50条记录：</span><br><span class=\"line\">&gt;DBQuery.shellBatchSize=50;</span><br><span class=\"line\"></span><br><span class=\"line\">按照条件查询</span><br><span class=\"line\">&gt;db.log.find(&#123;uid:999&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">json格式化输出</span><br><span class=\"line\">&gt; db.log.find(&#123;uid:999&#125;).<span class=\"function\"><span class=\"title\">pretty</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ec16d66dc542b0cf6ec2a47&quot;</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;uid&quot;</span> : 999,</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;mongodb&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;age&quot;</span> : 6,</span><br><span class=\"line\">        <span class=\"string\">&quot;date&quot;</span> : ISODate(<span class=\"string\">&quot;2020-05-17T16:59:18.148Z&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">删除集合中所有记录</span><br><span class=\"line\">&gt; db.log.remove(&#123;&#125;)</span><br><span class=\"line\">WriteResult(&#123; <span class=\"string\">&quot;nRemoved&quot;</span> : 10000 &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h1><p>官方文档：<a href=\"https://docs.mongodb.com/manual/reference/program/\">https://docs.mongodb.com/manual/reference/program/</a></p>\n<ul>\n<li><p><code>mongod</code><br>Mongod 是 Mongodb 系统的主要守护进程，它处理数据请求，管理数据访问，并执行后台<br>管理操作。启动进程指定配置文件，控制数据库的行为</p>\n</li>\n<li><p><code>mongos</code><br>mongos 对于”MongoDB Shard”，是用于处理来自应用层的查询的 MongoDB 分片配置的路由服务，并确定<br>此数据在分片集群中的位置， 以完成这些操作。从应用程序的角度来看，一个 mongos 实例与任何其他<br>MongoDB 实例的行为相同。</p>\n</li>\n<li><p><code>Mongostat</code><br>Mongostat 实用程序可以快速概览当前正在运行的 mongod 或 mongos 实例的状态。mongostat 在功能上类<br>似于 UNIX / Linux 文件系统实用程序 vmstat，但提供有关的数据 mongod 和 mongos 实例</p>\n</li>\n<li><p><code>Mongotop</code><br>Mongotop 提供了一种跟踪 MongoDB 实例读取和写入数据的时间量的方法。 mongotop 提供每个收集级别<br>的统计信息。默认情况下，mongotop 每秒返回一次值</p>\n</li>\n<li><p><code>Mongooplog</code><br>Mongooplog 是一个简单的工具，可以从远程服务器的复制 oplog 轮询操作，并将其应用于本地服务器。此功<br>能支持某些类型的实时迁移，这些迁移要求源服务器保持联机并在整个迁移过程中运行。通常，此命令将采用以<br>下形式:<br>mongooplog - from mongodb0.example.net –host mongodb1.example.net</p>\n</li>\n<li><p><code>Mongoperf</code><br>Mongoperf 是一种独立于 MongoDB 检查磁盘 I / O 性能的实用程序。它是随机磁盘 I / O 的测试并呈现结果。<br>例如：<br>echo “{nThreads:16, fileSizeMB:10000, r:true, w:true}”| mongoperf<br>在这个操作中：<br>mongoperf 测试直接物理随机读写 io 的，使用 16 个并发阅读器线程。<br>mongoperf 使用 10 GB 的测试文件。<br>或者参数写入文件里 mongoperf &lt; config</p>\n</li>\n</ul>\n<h1 id=\"授权认证\"><a href=\"#授权认证\" class=\"headerlink\" title=\"授权认证\"></a>授权认证</h1><h2 id=\"授权认证-1\"><a href=\"#授权认证-1\" class=\"headerlink\" title=\"授权认证\"></a>授权认证</h2><p>官方文档：<br><a href=\"https://docs.mongodb.com/manual/reference/configuration-options/#security-options\">https://docs.mongodb.com/manual/reference/configuration-options/#security-options</a><br><a href=\"https://docs.mongodb.com/manual/reference/configuration-options/#security-options\">https://docs.mongodb.com/manual/tutorial/enable-authentication/</a></p>\n<h2 id=\"授权介绍\"><a href=\"#授权介绍\" class=\"headerlink\" title=\"授权介绍\"></a>授权介绍</h2><p>用户管理界面<br>要添加用户， MongoDB 提供了该 db.createUser()方法。添加用户时，您可以为用户分配色以授予权限。<br>注意：</p>\n<ul>\n<li>在数据库中创建的第一个用户应该是具有管理其他用户的权限的用户管理员。</li>\n<li>您还可以更新现有用户，例如更改密码并授予或撤销角色。</li>\n</ul>\n<p>超级用户管理：<br>验证库：建立用户时use到的库，在使用用户时，要加上验证库才能登陆</p>\n<h2 id=\"角色分类：\"><a href=\"#角色分类：\" class=\"headerlink\" title=\"角色分类：\"></a>角色分类：</h2><ul>\n<li>read：允许用户读取指定数据库；</li>\n<li>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限；</li>\n<li>readWrite：允许用户读写指定数据库；</li>\n<li>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限；</li>\n<li>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile；</li>\n<li>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限；</li>\n<li>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限；</li>\n<li>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户；</li>\n<li>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限；</li>\n<li>root：只在admin数据库中可用。超级账号，超级权限；</li>\n</ul>\n<h2 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.auth()                 将用户验证到数据库。</span><br><span class=\"line\">db.changeUserPassword()   更改现有用户的密码。</span><br><span class=\"line\">db.createUser()           创建一个新用户。</span><br><span class=\"line\">db.dropUser()             删除单个用户。</span><br><span class=\"line\">db.dropAllUsers()         删除与数据库关联的所有用户。</span><br><span class=\"line\">db.getUser()              返回有关指定用户的信息。</span><br><span class=\"line\">db.getUsers()             返回有关与数据库关联的所有用户的信息。</span><br><span class=\"line\">db.grantRolesToUser()     授予用户角色及其特权。</span><br><span class=\"line\">db.removeUser()           已过时。从数据库中删除用户。</span><br><span class=\"line\">db.revokeRolesFromUser()  从用户中删除角色。</span><br><span class=\"line\">db.updateUser()           更新用户数据。</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">配置文件中，加入以下配置</span><br><span class=\"line\">vim /application/mongo_cluster/mongo_27017/conf/mongodb.conf </span><br><span class=\"line\">security:</span><br><span class=\"line\">  authorization: enabled <span class=\"comment\">#启用或者禁用基于角色的访问控制来管理每个用户对数据库资源和操作的访问</span></span><br><span class=\"line\"><span class=\"comment\">#enabled 或者 disables</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建用户和角色\"><a href=\"#创建用户和角色\" class=\"headerlink\" title=\"创建用户和角色\"></a>创建用户和角色</h2><h2 id=\"超级用户创建：\"><a href=\"#超级用户创建：\" class=\"headerlink\" title=\"超级用户创建：\"></a>超级用户创建：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo db01:27017</span></span><br><span class=\"line\">&gt; use admin</span><br><span class=\"line\">&gt; db.createUser(&#123;user: <span class=\"string\">&quot;admin&quot;</span>,<span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;123456&quot;</span>,roles:[ &#123; role: <span class=\"string\">&quot;root&quot;</span>, db:<span class=\"string\">&quot;admin&quot;</span>&#125;]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\">use admin</span><br><span class=\"line\">db.createUser(&#123;</span><br><span class=\"line\">\tuser: <span class=\"string\">&quot;admin&quot;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;123456&quot;</span>,</span><br><span class=\"line\">\troles: [&#123;</span><br><span class=\"line\">\t\trole: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">\t\tdb: <span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\">\t&#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">超级用户登陆：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart mongodb27017.service </span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo -uadmin -p123456 db01:27017/admin</span></span><br><span class=\"line\">MongoDB shell version v4.0.18</span><br><span class=\"line\">connecting to: mongodb://db01:27017/test?gssapiServiceName=mongodb</span><br><span class=\"line\">Implicit session: session &#123; <span class=\"string\">&quot;id&quot;</span> : UUID(<span class=\"string\">&quot;414ee606-a01d-4173-87d0-34c6a3b8ac16&quot;</span>) &#125;</span><br><span class=\"line\">MongoDB server version: 4.0.18</span><br><span class=\"line\">&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">超级用户查看：</span><br><span class=\"line\"><span class=\"comment\">#查看超级用户信息前要进入admin库，系统把超级用户信息存放在admin库</span></span><br><span class=\"line\">use admin</span><br><span class=\"line\">db.system.users.find()</span><br><span class=\"line\">或</span><br><span class=\"line\">db.system.users.find().pretty()</span><br><span class=\"line\"></span><br><span class=\"line\">验证用户：</span><br><span class=\"line\">&gt; db.auth(<span class=\"string\">&#x27;admin&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>)</span><br><span class=\"line\">1 <span class=\"comment\">#返回 1 为可用</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建库管理员用户：\"><a href=\"#创建库管理员用户：\" class=\"headerlink\" title=\"创建库管理员用户：\"></a>创建库管理员用户：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#建议创建用户之前先use到准备创建的库操作用户（只能操作pincheng库）</span></span><br><span class=\"line\">&gt; use pincheng</span><br><span class=\"line\">db.createUser(</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    user: <span class=\"string\">&quot;pcadmin&quot;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;123&quot;</span>,</span><br><span class=\"line\">    roles: [ &#123; role: <span class=\"string\">&quot;dbAdmin&quot;</span>, db: <span class=\"string\">&quot;pincheng&quot;</span> &#125; ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">验证库管理员用户：</span><br><span class=\"line\">&gt; db.auth(<span class=\"string\">&#x27;pcadmin&#x27;</span>,<span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">连接MongoDB</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo -upcadmin -p123 db01:27017/pincheng</span></span><br><span class=\"line\">MongoDB shell version v4.0.18</span><br><span class=\"line\">connecting to: mongodb://db01:27017/pincheng?gssapiServiceName=mongodb</span><br><span class=\"line\">Implicit session: session &#123; <span class=\"string\">&quot;id&quot;</span> : UUID(<span class=\"string\">&quot;689a0c2d-2dec-4cc5-8464-eda655ae1f7e&quot;</span>) &#125;</span><br><span class=\"line\">MongoDB server version: 4.0.18</span><br><span class=\"line\">&gt; db</span><br><span class=\"line\">pincheng</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建对pincheng库可读写的普通用户：\"><a href=\"#创建对pincheng库可读写的普通用户：\" class=\"headerlink\" title=\"创建对pincheng库可读写的普通用户：\"></a>创建对pincheng库可读写的普通用户：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo -uadmin -p123456 db01:27017/admin</span></span><br><span class=\"line\"><span class=\"comment\">#创建普通用户也要添加验证库</span></span><br><span class=\"line\">use pincheng</span><br><span class=\"line\">db.createUser(&#123;user: <span class=\"string\">&quot;user&quot;</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">&quot;user&quot;</span>,roles:[&#123;role: <span class=\"string\">&quot;readWrite&quot;</span>, db: <span class=\"string\">&quot;pincheng&quot;</span>&#125;]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">db.createUser(</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    user: <span class=\"string\">&quot;user&quot;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;user&quot;</span>,</span><br><span class=\"line\">    roles: [ &#123; role: <span class=\"string\">&quot;readWrite&quot;</span>, db: <span class=\"string\">&quot;pincheng&quot;</span> &#125; ]</span><br><span class=\"line\">&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">连接测试：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo -uuser -puser db01:27017/pincheng</span></span><br><span class=\"line\">MongoDB shell version v4.0.18</span><br><span class=\"line\">connecting to: mongodb://db01:27017/pincheng?gssapiServiceName=mongodb</span><br><span class=\"line\">Implicit session: session &#123; <span class=\"string\">&quot;id&quot;</span> : UUID(<span class=\"string\">&quot;c5285cdb-41b1-439c-aae0-a16090fb2aa4&quot;</span>) &#125;</span><br><span class=\"line\">MongoDB server version: 4.0.18</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建同一账号不同库不同权限\"><a href=\"#创建同一账号不同库不同权限\" class=\"headerlink\" title=\"创建同一账号不同库不同权限\"></a>创建同一账号不同库不同权限</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo -uadmin -p123456 db01:27017/admin</span></span><br><span class=\"line\">use <span class=\"built_in\">test</span></span><br><span class=\"line\">db.createUser(</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">    user: <span class=\"string\">&quot;myTester&quot;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;xyz123&quot;</span>,</span><br><span class=\"line\">    roles: [ &#123; role: <span class=\"string\">&quot;readWrite&quot;</span>, db: <span class=\"string\">&quot;test&quot;</span> &#125;,&#123; role: <span class=\"string\">&quot;read&quot;</span>, db: <span class=\"string\">&quot;test2&quot;</span> &#125; ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;zhangya&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:27,<span class=\"string\">&quot;ad&quot;</span>:<span class=\"string\">&quot;北京市朝阳区&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">use test2 //创建test2库</span><br><span class=\"line\">db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;zhangyaya&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:27,<span class=\"string\">&quot;ad&quot;</span>:<span class=\"string\">&quot;北京市朝阳区&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">用户名：myTester</span><br><span class=\"line\">密码：xyz123</span><br><span class=\"line\">针对<span class=\"built_in\">test</span>库</span><br><span class=\"line\">  角色：readWrite（读写）</span><br><span class=\"line\">针对test2库</span><br><span class=\"line\">  角色：<span class=\"built_in\">read</span>（只读）</span><br><span class=\"line\">登陆：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo -umyTester -pxyz123 db01:27017/test</span></span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\"><span class=\"built_in\">test</span>   0.000GB</span><br><span class=\"line\">test2  0.000GB</span><br><span class=\"line\"></span><br><span class=\"line\">use <span class=\"built_in\">test</span></span><br><span class=\"line\">尝试插入：</span><br><span class=\"line\">db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;zhangyafei&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:27,<span class=\"string\">&quot;ad&quot;</span>:<span class=\"string\">&quot;上海市浦东新区&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">尝试更新：</span><br><span class=\"line\">db.test.updateOne(</span><br><span class=\"line\"> &#123; <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;zhangya&quot;</span> &#125;,</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> <span class=\"variable\">$set</span>: &#123; ad : <span class=\"string\">&quot;上海市浦东新区张江&quot;</span> &#125;,</span><br><span class=\"line\"> <span class=\"variable\">$currentDate</span>: &#123; <span class=\"string\">&quot;lastModified&quot;</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;acknowledged&quot;</span> : <span class=\"literal\">true</span>, <span class=\"string\">&quot;matchedCount&quot;</span> : 1, <span class=\"string\">&quot;modifiedCount&quot;</span> : 1 &#125;</span><br><span class=\"line\">结果：</span><br><span class=\"line\">&gt; db.test.<span class=\"function\"><span class=\"title\">find</span></span>()</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ec18899ffd66f207bd53e86&quot;</span>), <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;zhangya&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : 27, <span class=\"string\">&quot;ad&quot;</span> : <span class=\"string\">&quot;上海市浦东新区张江&quot;</span>, <span class=\"string\">&quot;lastModified&quot;</span> : ISODate(<span class=\"string\">&quot;2020-05-17T19:08:02.279Z&quot;</span>) &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ec189e274cbe9dc5321b315&quot;</span>), <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;zhangyafei&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : 27, <span class=\"string\">&quot;ad&quot;</span> : <span class=\"string\">&quot;上海市浦东新区&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">use test2</span><br><span class=\"line\">&gt; db.test.<span class=\"function\"><span class=\"title\">find</span></span>()</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;5ec188a5ffd66f207bd53e87&quot;</span>), <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;zhangyaya&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : 27, <span class=\"string\">&quot;ad&quot;</span> : <span class=\"string\">&quot;北京市朝阳区&quot;</span> &#125;</span><br><span class=\"line\">&gt; db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;zhangyafei&quot;</span>,<span class=\"string\">&quot;age&quot;</span>:27,<span class=\"string\">&quot;ad&quot;</span>:<span class=\"string\">&quot;上海市浦东新区&quot;</span>&#125;)</span><br><span class=\"line\">WriteCommandError</span><br></pre></td></tr></table></figure>\n<h2 id=\"用户信息查看\"><a href=\"#用户信息查看\" class=\"headerlink\" title=\"用户信息查看\"></a>用户信息查看</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mongo -uadmin -p123456 db01:27017/admin</span></span><br><span class=\"line\">MongoDB shell version v4.0.18</span><br><span class=\"line\">connecting to: mongodb://db01:27017/admin?gssapiServiceName=mongodb</span><br><span class=\"line\">Implicit session: session &#123; <span class=\"string\">&quot;id&quot;</span> : UUID(<span class=\"string\">&quot;33cae6b1-0190-4727-a5f1-34b38ea3b5e4&quot;</span>) &#125;</span><br><span class=\"line\">MongoDB server version: 4.0.18</span><br><span class=\"line\">&gt; <span class=\"comment\">#进入超级管理员验证库</span></span><br><span class=\"line\">&gt; use admin</span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; show tables</span><br><span class=\"line\">system.users</span><br><span class=\"line\">system.version</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db.system.users.find().<span class=\"function\"><span class=\"title\">pretty</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;_id&quot;</span> : <span class=\"string\">&quot;admin.admin&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;userId&quot;</span> : UUID(<span class=\"string\">&quot;f4e51f24-80da-4019-aa50-49d734129d84&quot;</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;user&quot;</span> : <span class=\"string\">&quot;admin&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;db&quot;</span> : <span class=\"string\">&quot;admin&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;credentials&quot;</span> : &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;SCRAM-SHA-1&quot;</span> : &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;iterationCount&quot;</span> : 10000,</span><br><span class=\"line\">                        <span class=\"string\">&quot;salt&quot;</span> : <span class=\"string\">&quot;SkrunLAeUsCnfXukvxNN3A==&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;storedKey&quot;</span> : <span class=\"string\">&quot;oGsqoaSvZd0Vp1Nn0j/nrSji+io=&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;serverKey&quot;</span> : <span class=\"string\">&quot;V6oIEmIsHRK089Q2sJVBZLNfN4A=&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;SCRAM-SHA-256&quot;</span> : &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;iterationCount&quot;</span> : 15000,</span><br><span class=\"line\">                        <span class=\"string\">&quot;salt&quot;</span> : <span class=\"string\">&quot;N4SD+uXm6QxAWrxRAhOq91GZ1uFVqMWxJylq3w==&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;storedKey&quot;</span> : <span class=\"string\">&quot;frPnGOZT7OGyLtmiaVFUn6bT6wTIvjsjbCdLJ26ViW0=&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;serverKey&quot;</span> : <span class=\"string\">&quot;OdPEqSsOp0gsrfumtJifo8MHqzQoztVpyRvmuyi9Mhk=&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;roles&quot;</span> : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;role&quot;</span> : <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;db&quot;</span> : <span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;_id&quot;</span> : <span class=\"string\">&quot;pincheng.pcadmin&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;userId&quot;</span> : UUID(<span class=\"string\">&quot;8a6820f5-3f7c-433e-9063-d749640b1182&quot;</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;user&quot;</span> : <span class=\"string\">&quot;pcadmin&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;db&quot;</span> : <span class=\"string\">&quot;pincheng&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;credentials&quot;</span> : &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;SCRAM-SHA-1&quot;</span> : &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;iterationCount&quot;</span> : 10000,</span><br><span class=\"line\">                        <span class=\"string\">&quot;salt&quot;</span> : <span class=\"string\">&quot;Aufl+IvD/jlZ/dUMxtRSYQ==&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;storedKey&quot;</span> : <span class=\"string\">&quot;6sUX37TBhtpzDUFKm38aiAomE1o=&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;serverKey&quot;</span> : <span class=\"string\">&quot;nvu/Oe4PeKRoo2JlYBjqREC6K2Y=&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;SCRAM-SHA-256&quot;</span> : &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;iterationCount&quot;</span> : 15000,</span><br><span class=\"line\">                        <span class=\"string\">&quot;salt&quot;</span> : <span class=\"string\">&quot;a4qolXg2fL2vFQ5ZY7ysRhEC4KeJgzmSacGfDQ==&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;storedKey&quot;</span> : <span class=\"string\">&quot;dAuTfKe3EwachRPrGTi+uIJ2p/N4JpwOns94/z7P/ZA=&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;serverKey&quot;</span> : <span class=\"string\">&quot;s2L1ykMsbc/bVH9ghUXhwVva+lr7TrVqvsku2tbsHx8=&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;roles&quot;</span> : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;role&quot;</span> : <span class=\"string\">&quot;dbAdmin&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;db&quot;</span> : <span class=\"string\">&quot;pincheng&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;_id&quot;</span> : <span class=\"string\">&quot;pincheng.user&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;userId&quot;</span> : UUID(<span class=\"string\">&quot;32f1de87-4f56-420b-8de4-2f9f0aa810b8&quot;</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;user&quot;</span> : <span class=\"string\">&quot;user&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;db&quot;</span> : <span class=\"string\">&quot;pincheng&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;credentials&quot;</span> : &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;SCRAM-SHA-1&quot;</span> : &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;iterationCount&quot;</span> : 10000,</span><br><span class=\"line\">                        <span class=\"string\">&quot;salt&quot;</span> : <span class=\"string\">&quot;02ZrtW4H6EyAPXa+cJhWSg==&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;storedKey&quot;</span> : <span class=\"string\">&quot;e/Sz5iQ/gHrrZi9Zw+OgIMBCz/s=&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;serverKey&quot;</span> : <span class=\"string\">&quot;ijrwnfWpNSHeKi8Xaz7PU+JDIKU=&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;SCRAM-SHA-256&quot;</span> : &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;iterationCount&quot;</span> : 15000,</span><br><span class=\"line\">                        <span class=\"string\">&quot;salt&quot;</span> : <span class=\"string\">&quot;3r97fhSufXHdFlZ34Y8jDFggxGUartgIb93Tsw==&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;storedKey&quot;</span> : <span class=\"string\">&quot;yZaquoT2uYERp2nuTyXoM55oJYbIiHmDTEogF/nwWXM=&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;serverKey&quot;</span> : <span class=\"string\">&quot;U8mb8FfqMqMZQXeviAopXFwNl/8AwPeRmlWJw7S2YFY=&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;roles&quot;</span> : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;role&quot;</span> : <span class=\"string\">&quot;readWrite&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;db&quot;</span> : <span class=\"string\">&quot;pincheng&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;_id&quot;</span> : <span class=\"string\">&quot;test.myTester&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;userId&quot;</span> : UUID(<span class=\"string\">&quot;209bcfec-90b2-4ad1-b999-4387f944bc18&quot;</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;user&quot;</span> : <span class=\"string\">&quot;myTester&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;db&quot;</span> : <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;credentials&quot;</span> : &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;SCRAM-SHA-1&quot;</span> : &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;iterationCount&quot;</span> : 10000,</span><br><span class=\"line\">                        <span class=\"string\">&quot;salt&quot;</span> : <span class=\"string\">&quot;nxFoDJR+9AIJodm/JmT7ww==&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;storedKey&quot;</span> : <span class=\"string\">&quot;42iXAR7M5xxnoOUP/z2pz3kL090=&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;serverKey&quot;</span> : <span class=\"string\">&quot;FsQdmNKGjDJ8QAkop1yP1ERy54I=&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;SCRAM-SHA-256&quot;</span> : &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;iterationCount&quot;</span> : 15000,</span><br><span class=\"line\">                        <span class=\"string\">&quot;salt&quot;</span> : <span class=\"string\">&quot;4gcUf9gCwwSgS8JAEpq2Dmm+XEbVeLUTH61aPA==&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;storedKey&quot;</span> : <span class=\"string\">&quot;Qz2hBVdZV/zQ8V4lqv5gPVyJinhtDCKE0PARe9KSrdc=&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;serverKey&quot;</span> : <span class=\"string\">&quot;KH9KD3DZtCSE8DlO44eNpTAIm/m/4hflLjBNfNZ+dLM=&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;roles&quot;</span> : [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;role&quot;</span> : <span class=\"string\">&quot;readWrite&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;db&quot;</span> : <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;role&quot;</span> : <span class=\"string\">&quot;read&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;db&quot;</span> : <span class=\"string\">&quot;test2&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除用户：\"><a href=\"#删除用户：\" class=\"headerlink\" title=\"删除用户：\"></a>删除用户：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除用户只能用root超级管理员才可以操作（要进入被删除的用户的验证库）</span></span><br><span class=\"line\">mongo -uadmin -p123456 10.0.0.51/admin</span><br><span class=\"line\">use pincheng</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除duouser这个用户</span></span><br><span class=\"line\">db.dropUser(<span class=\"string\">&quot;pcadmin&quot;</span>)</span><br><span class=\"line\">db.dropUser(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">use <span class=\"built_in\">test</span></span><br><span class=\"line\">db.dropUser(<span class=\"string\">&quot;myTester&quot;</span>)</span><br></pre></td></tr></table></figure>","categories":["DBA"],"tags":["MongoDB","NoSQL"]},{"title":"Golang-网络编程","url":"/forward/82cd681d.html","content":"<h1 id=\"网络三要素\"><a href=\"#网络三要素\" class=\"headerlink\" title=\"网络三要素\"></a>网络三要素</h1><p>网络编程三要素：</p>\n<ul>\n<li><strong>IP地址</strong>：网络中每一台计算机的唯一标识，通过IP地址找到指定的计算机。</li>\n<li><strong>端口</strong>：用于标识进程的逻辑地址，通过端口找到指定进程。</li>\n<li><strong>协议</strong>：定义通信规则，符合协议则可以通信，不符合不能通信。一般有TCP协议和UDP协议。</li>\n</ul>\n<h2 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h2><p>计算机分布在世界各地，要想和它们通信，必须要知道确切的位置。确定计算机位置的方式有多种，<strong>IP</strong> 地址是最常用的，例如，<code>114.114.114.114</code> 是国内第一个、全球第三个开放的 DNS 服务地址，<code>127.0.0.1</code> 是本机地址。</p>\n<p>其实，我们的计算机并不知道 IP 地址对应的地理位置，当要通信时，只是将 IP 地址封装到要发送的数据包中，交给路由器去处理。路由器有非常智能和高效的算法，很快就会找到目标计算机，并将数据包传递给它，完成一次单向通信。</p>\n<p>目前大部分软件使用 <code>IPv4</code> 地址，但 <code>IPv6</code> 也正在被人们接受，尤其是在教育网中，已经大量使用。</p>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><p>有了 IP 地址，虽然可以找到目标计算机，但仍然不能进行通信。一台计算机可以同时提供多种网络服务，例如Web服务、FTP服务（文件传输服务）、SMTP服务（邮箱服务）等，仅有 IP 地址，计算机虽然可以正确接收到数据包，但是却不知道要将数据包交给哪个网络程序来处理，所以通信失败。</p>\n<p>为了区分不同的网络程序，计算机会为每个网络程序分配一个独一无二的端口号（Port Number），例如，Web服务的端口号是 80，FTP 服务的端口号是 21，SMTP 服务的端口号是 25。</p>\n<p><strong>端口（Port）</strong>是一个虚拟的、逻辑上的概念。可以将端口理解为一道门，数据通过这道门流入流出，每道门有不同的编号，就是端口号。如下图所示：</p>\n<p><img src=\"/images/pasted-312.png\" alt=\"networkcodeing\"></p>\n<h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><p><strong>协议（Protocol）</strong>就是网络通信的约定，通信的双方必须都遵守才能正常收发数据。协议有很多种，例如 TCP、UDP、IP 等，通信的双方必须使用同一协议才能通信。协议是一种规范，由计算机组织制定，规定了很多细节，例如，如何建立连接，如何相互识别等。</p>\n<p>协议仅仅是一种规范，必须由计算机软件来实现。例如 IP 协议规定了如何找到目标计算机，那么各个开发商在开发自己的软件时就必须遵守该协议，不能另起炉灶。</p>\n<p>所谓<strong>协议族（Protocol Family）</strong>，就是一组协议（多个协议）的统称。最常用的是 TCP/IP 协议族，它包含了 TCP、IP、UDP、Telnet、FTP、SMTP 等上百个互为关联的协议，由于 TCP、IP 是两种常用的底层协议，所以把它们统称为 TCP/IP 协议族。</p>\n<h2 id=\"数据传输方式\"><a href=\"#数据传输方式\" class=\"headerlink\" title=\"数据传输方式\"></a>数据传输方式</h2><p>计算机之间有很多数据传输方式，各有优缺点，常用的有两种：<strong>SOCK_STREAM</strong> 和 <strong>SOCK_DGRAM</strong>。</p>\n<p><strong>SOCK_STREAM</strong> 表示面向连接的数据传输方式。数据可以准确无误地到达另一台计算机，如果损坏或丢失，可以重新发送，但效率相对较慢。常见的 http 协议就使用 SOCK_STREAM 传输数据，因为要确保数据的正确性，否则网页不能正常解析。</p>\n<p><strong>SOCK_DGRAM</strong> 表示无连接的数据传输方式。计算机只管传输数据，不作数据校验，如果数据在传输中损坏，或者没有到达另一台计算机，是没有办法补救的。也就是说，数据错了就错了，无法重传。因为 SOCK_DGRAM 所做的校验工作少，所以效率比 SOCK_STREAM 高。</p>\n<p>QQ 视频聊天和语音聊天就使用 SOCK_DGRAM 传输数据，因为首先要保证通信的效率，尽量减小延迟，而数据的正确性是次要的，即使丢失很小的一部分数据，视频和音频也可以正常解析，最多出现噪点或杂音，不会对通信质量有实质的影响。</p>\n<p>注意：<strong>SOCK_DGRAM</strong> 没有想象中的糟糕，不会频繁的丢失数据，数据错误只是小概率事件。</p>\n<p>有可能多种协议使用同一种数据传输方式，所以在 socket 编程中，需要同时指明数据传输方式和协议。</p>\n<p>综上所述：IP地址和端口能够在广袤的互联网中定位到要通信的程序，协议和数据传输方式规定了如何传输数据，有了这些，两台计算机就可以通信了。</p>\n<h1 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h1><h2 id=\"OSI模型\"><a href=\"#OSI模型\" class=\"headerlink\" title=\"OSI模型\"></a>OSI模型</h2><p>如果你读过计算机专业，或者学习过网络通信，那你一定听说过 <strong>OSI</strong> 参考模型，它曾无数次让你头大。<strong>OSI</strong> 是 Open System Interconnection 的缩写，译为“开放式系统互联”。 OSI 模型把网络通信的工作分为 7 层，从下到上分别是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</p>\n<p>这个网络模型究竟是干什么呢？简而言之就是进行数据封装的。</p>\n<p>当另一台计算机接收到数据包时，会从网络接口层再一层一层往上传输，每传输一层就拆开一层包装，直到最后的应用层，就得到了最原始的数据，这才是程序要使用的数据。</p>\n<p><img src=\"/images/pasted-313.png\" alt=\"OSI\"></p>\n<p><strong>TCP报文格式</strong><br><strong>TCP（Transmission Control Protocol，传输控制协议）</strong>是一种面向连接的、可靠的、基于字节流的通信协议，数据在传输前要建立连接，传输完毕后还要断开连接。</p>\n<p>客户端在收发数据前要使用 <code>connect()</code> 函数和服务器建立连接。建立连接的目的是保证IP地址、端口、物理链路等正确无误，为数据的传输开辟通道。</p>\n<p>TCP建立连接时要传输三个数据包，俗称三次握手（Three-way Handshaking）。可以形象的比喻为下面的对话：</p>\n<blockquote>\n<p>[Shake 1] 套接字A：“你好，套接字B，我这里有数据要传送给你，建立连接吧。”<br>[Shake 2] 套接字B：“好的，我这边已准备就绪。”<br>[Shake 3] 套接字A：“谢谢你受理我的请求。”</p>\n</blockquote>\n<p><img src=\"/images/pasted-314.png\" alt=\"tcp\"></p>\n<blockquote>\n<p>序号：Seq（Sequence Number）序号占32位，用来标识从计算机A发送到计算机B的数据包的序号，计算机发送数据时对此进行标记。<br>确认号：Ack（Acknowledge Number）确认号占32位，客户端和服务器端都可以发送，Ack = Seq + 1。<br>标志位：每个标志位占用1Bit，共有6个，分别为 URG、ACK、PSH、RST、SYN、FIN，具体含义如下：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// URG：紧急指针（urgent pointer）有效。</span><br><span class=\"line\">// ACK：确认序号有效。</span><br><span class=\"line\">// PSH：接收方应该尽快将这个报文交给应用层。</span><br><span class=\"line\">// RST：重置连接。</span><br><span class=\"line\">// SYN：建立一个新连接。</span><br><span class=\"line\">// FIN：断开一个连接。</span><br></pre></td></tr></table></figure>\n<h2 id=\"TCP-IP三次握手\"><a href=\"#TCP-IP三次握手\" class=\"headerlink\" title=\"TCP/IP三次握手\"></a>TCP/IP三次握手</h2><p>使用 <code>connect()</code> 建立连接时，客户端和服务器端会相互发送三个数据包，请看下图：<br><img src=\"/images/pasted-315.png\" alt=\"tcp3\"><br>客户端调用 <code>socket()</code> 创建套接字后，因为没有建立连接，所以套接字处于CLOSED状态；服务器端调用 <code>listen()</code> 函数后，套接字进入LISTEN状态，开始监听客户端请求。这个时候，客户端开始发起请求：</p>\n<blockquote>\n<p>[Shake 1]当客户端调用 <code>connect()</code> 函数后，TCP协议会组建一个数据包，并设置 SYN 标志位，表示该数据包是用来建立同步连接的。同时生成一个随机数字 1000，填充“序号（Seq）”字段，表示该数据包的序号。完成这些工作，开始向服务器端发送数据包，客户端就进入了SYN-SEND状态。</p>\n</blockquote>\n<blockquote>\n<p>[Shake 2]服务器端收到数据包，检测到已经设置了 SYN 标志位，就知道这是客户端发来的建立连接的“请求包”。服务器端也会组建一个数据包，并设置 SYN 和 ACK 标志位，SYN 表示该数据包用来建立连接，ACK 用来确认收到了刚才客户端发送的数据包。 服务器生成一个随机数 2000，填充“序号（Seq）”字段。2000 和客户端数据包没有关系。服务器将客户端数据包序号（1000）加1，得到1001，并用这个数字填充“确认号（Ack）”字段。服务器将数据包发出，进入SYN-RECV状态。</p>\n</blockquote>\n<blockquote>\n<p>[Shake 3]客户端收到数据包，检测到已经设置了 SYN 和 ACK 标志位，就知道这是服务器发来的“确认包”。客户端会检测“确认号（Ack）”字段，看它的值是否为 1000+1，如果是就说明连接建立成功。接下来，客户端会继续组建数据包，并设置 ACK 标志位，表示客户端正确接收了服务器发来的“确认包”。同时，将刚才服务器发来的数据包序号（2000）加1，得到 2001，并用这个数字来填充“确认（Ack）”字段。客户端将数据包发出，进入ESTABLISED状态，表示连接已经成功建立。</p>\n</blockquote>\n<blockquote>\n<p>[Shake 4]服务器端收到数据包，检测到已经设置了 ACK 标志位，就知道这是客户端发来的“确认包”。服务器会检测“确认号（Ack）”字段，看它的值是否为 2000+1，如果是就说明连接建立成功，服务器进入ESTABLISED状态。至此，客户端和服务器都进入了ESTABLISED状态，连接建立成功，接下来就可以收发数据了。</p>\n</blockquote>\n<p><strong>注意</strong>：三次握手的关键是要确认对方收到了自己的数据包，这个目标就是通过“确认号（Ack）”字段实现的。计算机会记录下自己发送的数据包序号 Seq，待收到对方的数据包后，检测“确认号（Ack）”字段，看Ack = Seq + 1是否成立，如果成立说明对方正确收到了自己的数据包</p>\n<h2 id=\"TCP-IP四次挥手\"><a href=\"#TCP-IP四次挥手\" class=\"headerlink\" title=\"TCP/IP四次挥手\"></a>TCP/IP四次挥手</h2><p>建立连接非常重要，它是数据正确传输的前提；断开连接同样重要，它让计算机释放不再使用的资源。如果连接不能正常断开，不仅会造成数据传输错误，还会导致套接字不能关闭，持续占用资源，如果并发量高，服务器压力堪忧。</p>\n<p>建立连接需要三次握手，断开连接需要四次握手，可以形象的比喻为下面的对话：</p>\n<blockquote>\n<p>[Shake 1] 套接字A：“任务处理完毕，我希望断开连接。”<br>[Shake 2] 套接字B：“哦，是吗？请稍等，我准备一下。”<br>等待片刻后……<br>[Shake 3] 套接字B：“我准备好了，可以断开连接了。”<br>[Shake 4] 套接字A：“好的，谢谢合作。”</p>\n</blockquote>\n<p>下图演示了客户端主动断开连接的场景：<br><img src=\"/images/pasted-316.png\" alt=\"tcp4\"><br>建立连接后，客户端和服务器都处于ESTABLISED状态。这时，客户端发起断开连接的请求：</p>\n<blockquote>\n<p>[Shake 1]客户端调用 <code>close()</code> 函数后，向服务器发送 FIN 数据包，进入FIN_WAIT_1状态。FIN 是 Finish 的缩写，表示完成任务需要断开连接。</p>\n</blockquote>\n<blockquote>\n<p>[Shake 2]服务器收到数据包后，检测到设置了 FIN 标志位，知道要断开连接，于是向客户端发送“确认包”，进入CLOSE_WAIT状态。注意：服务器收到请求后并不是立即断开连接，而是先向客户端发送“确认包”，告诉它我知道了，我需要准备一下才能断开连接。</p>\n</blockquote>\n<blockquote>\n<p>[Shake 3]客户端收到“确认包”后进入FIN_WAIT_2状态，等待服务器准备完毕后再次发送数据包。</p>\n</blockquote>\n<blockquote>\n<p>[Shake 4]等待片刻后，服务器准备完毕，可以断开连接，于是再主动向客户端发送 FIN 包，告诉它我准备好了，断开连接吧。然后进入LAST_ACK状态。</p>\n</blockquote>\n<blockquote>\n<p>[Shake 5]客户端收到服务器的 FIN 包后，再向服务器发送 ACK 包，告诉它你断开连接吧。然后进入TIME_WAIT状态。</p>\n</blockquote>\n<blockquote>\n<p>[Shake 6]服务器收到客户端的 ACK 包后，就断开连接，关闭套接字，进入CLOSED状态。</p>\n</blockquote>\n<p><strong>注意</strong>：关于 TIME_WAIT 状态的说明<br>客户端最后一次发送 ACK包后进入 TIME_WAIT 状态，而不是直接进入 CLOSED 状态关闭连接，这是为什么呢？</p>\n<blockquote>\n<p>/*<br>TCP 是面向连接的传输方式，必须保证数据能够正确到达目标机器，不能丢失或出错，而网络是不稳定的，随时可能会毁坏数据，所以机器A每次向机器B发送数据包后，都要求机器B“确认”，回传ACK包，告诉机器A我收到了，这样机器A才能知道数据传送成功了。<br>如果机器B没有回传ACK包，机器A会重新发送，直到机器B回传ACK包。<br>客户端最后一次向服务器回传ACK包时，有可能会因为网络问题导致服务器收不到，服务器会再次发送 FIN 包，如果这时客户端完全关闭了连接，那么服务器无论如何也收不到ACK包了，所以客户端需要等待片刻、确认对方收到ACK包后才能进入CLOSED状态。<br>那么，要等待多久呢？数据包在网络中是有生存时间的，超过这个时间还未到达目标主机就会被丢弃，并通知源主机。<br>这称为报文最大生存时间（MSL，Maximum Segment Lifetime）。<br>TIME_WAIT 要等待 2MSL 才会进入 CLOSED 状态。ACK 包到达服务器需要 MSL 时间，服务器重传 FIN 包也需要 MSL 时间，2MSL 是数据包往返的最大时间，如果 2MSL 后还未收到服务器重传的 FIN 包，就说明服务器已经收到了 ACK 包。<br>*/</p>\n</blockquote>\n<h1 id=\"比特和字节\"><a href=\"#比特和字节\" class=\"headerlink\" title=\"比特和字节\"></a>比特和字节</h1><p><img src=\"/images/pasted-325.png\" alt=\"bit/byte\"></p>\n<h1 id=\"socket介绍\"><a href=\"#socket介绍\" class=\"headerlink\" title=\"socket介绍\"></a>socket介绍</h1><h2 id=\"什么是-socket？\"><a href=\"#什么是-socket？\" class=\"headerlink\" title=\"什么是 socket？\"></a>什么是 socket？</h2><p><strong>socket</strong> 的原意是“插座”，在计算机通信领域，socket 被翻译为“套接字”，它是计算机之间进行通信的一种约定或一种方式。通过 socket 这种约定，一台计算机可以接收其他计算机的数据，也可以向其他计算机发送数据。 我们把插头插到插座上就能从电网获得电力供应，同样，为了与远程计算机进行数据传输，需要连接到因特网，而 socket 就是用来连接到因特网的工具。<br><img src=\"/images/pasted-317.png\" alt=\"socket介绍\"></p>\n<h2 id=\"socket缓冲区与阻塞\"><a href=\"#socket缓冲区与阻塞\" class=\"headerlink\" title=\"socket缓冲区与阻塞\"></a>socket缓冲区与阻塞</h2><p><strong>socket缓冲区</strong><br>每个 socket 被创建后，都会分配两个缓冲区，输入缓冲区和输出缓冲区。<code>write()/send()</code> 并不立即向网络中传输数据，而是先将数据写入缓冲区中，再由TCP协议将数据从缓冲区发送到目标机器。一旦将数据写入到缓冲区，函数就可以成功返回，不管它们有没有到达目标机器，也不管它们何时被发送到网络，这些都是TCP协议负责的事情。</p>\n<p>TCP协议独立于 <code>write()/send()</code> 函数，数据有可能刚被写入缓冲区就发送到网络，也可能在缓冲区中不断积压，多次写入的数据被一次性发送到网络，这取决于当时的网络情况、当前线程是否空闲等诸多因素，不由程序员控制。<code>read()/recv()</code> 函数也是如此，也从输入缓冲区中读取数据，而不是直接从网络中读取。<br><img src=\"/images/pasted-318.png\" alt=\"socket\"></p>\n<p>这些I/O缓冲区特性可整理如下：</p>\n<ul>\n<li>I/O缓冲区在每个TCP套接字中单独存在；</li>\n<li>I/O缓冲区在创建套接字时自动生成；</li>\n<li>即使关闭套接字也会继续传送输出缓冲区中遗留的数据；</li>\n<li>关闭套接字将丢失输入缓冲区中的数据。</li>\n<li>输入输出缓冲区的默认大小一般都是 8K！</li>\n</ul>\n<p><strong>阻塞模式</strong><br>对于TCP套接字（默认情况下），当使用<code>send()</code> 发送数据时：</p>\n<blockquote>\n<p>（1) 首先会检查缓冲区，如果缓冲区的可用空间长度小于要发送的数据，那么 <code>send()</code> 会被阻塞（暂停执行），直到缓冲区中的数据被发 送到目标机器，腾出足够的空间，才唤醒 <code>send()</code> 函数继续写入数据。<br>（2) 如果TCP协议正在向网络发送数据，那么输出缓冲区会被锁定，不允许写入，<code>send()</code> 也会被阻塞，直到数据发送完毕缓冲区解锁， <code>send()</code> 才会被唤醒。<br>（3) 如果要写入的数据大于缓冲区的最大长度，那么将分批写入。<br>（4) 直到所有数据被写入缓冲区 <code>send()</code> 才能返回。</p>\n</blockquote>\n<p>当使用<code>recv()</code> 读取数据时：</p>\n<blockquote>\n<p>（1) 首先会检查缓冲区，如果缓冲区中有数据，那么就读取，否则函数会被阻塞，直到网络上有数据到来。<br>（2) 如果要读取的数据长度小于缓冲区中的数据长度，那么就不能一次性将缓冲区中的所有数据读出，剩余数据将不断积压，直到有 <code>recv()</code> 函数再次读取。<br>（3) 直到读取到数据后 <code>recv()</code> 函数才会返回，否则就一直被阻塞。</p>\n</blockquote>\n<p>TCP套接字默认情况下是阻塞模式，也是最常用的。当然你也可以更改为非阻塞模式，后续会讲解。</p>\n<p><strong>TCP的粘包问题</strong><br>上面讲到了socket缓冲区和数据的传递过程，可以看到数据的接收和发送是无关的，<code>read()/recv()</code> 函数不管数据发送了多少次，都会尽可能多的接收数据。也就是说，<code>read()/recv()</code> 和 <code>write()/send()</code> 的执行次数可能不同。</p>\n<p>例如，<code>write()/send()</code> 重复执行三次，每次都发送字符串”abc”，那么目标机器上的 <code>read()/recv()</code> 可能分三次接收，每次都接收”abc”；也可能分两次接收，第一次接收”abcab”，第二次接收”cabc”；也可能一次就接收到字符串”abcabcabc”。</p>\n<p>这就是数据的“粘包”问题，客户端发送的多个数据包被当做一个数据包接收。也称数据的无边界性，<code>read()/recv()</code> 函数不知道数据包的开始或结束标志（实际上也没有任何开始或结束标志），只把它们当做连续的数据流来处理。</p>\n<h2 id=\"tcpdemo1-简单通信\"><a href=\"#tcpdemo1-简单通信\" class=\"headerlink\" title=\"tcpdemo1 简单通信\"></a>tcpdemo1 简单通信</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Server</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1.创建套接字对象</span></span><br><span class=\"line\">\tlistener, err := net.Listen(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;127.0.0.1:5001&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//2.关闭套接字</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> listener.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3.操作套接字对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;等待链接&quot;</span>)</span><br><span class=\"line\">\t\tconn, err := listener.Accept() <span class=\"comment\">//等待客户端连接，接收到来自客户端的套接字对象conn。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//4.&lt;1-发&gt; 发送欢迎语</span></span><br><span class=\"line\">\t\tconn.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;welcom to maxbit!&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//5.&lt;2-收&gt; 接收英文转大写</span></span><br><span class=\"line\">\t\t\tname := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\t\t\tn, err := conn.Read(name) <span class=\"comment\">//如果没有数据过来，那么会一直等待</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"type\">string</span>(name[:n]) == <span class=\"string\">&quot;q&quot;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span> <span class=\"comment\">//跳出这一层循环，继续等待其他客户端连接</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tupperName := bytes.ToUpper(name[:n])</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//6.&lt;3-发&gt; 将转换后的结果发送回去</span></span><br><span class=\"line\">\t\t\t_, err = conn.Write(upperName)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//client</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1.拨号获取客户端的套接字对象，建立连接（会进行tcp三次握手）</span></span><br><span class=\"line\">\tconn, err := net.Dial(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;127.0.0.1:5001&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.&lt;1-收&gt;接收打印欢迎语</span></span><br><span class=\"line\">\tdata := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>) <span class=\"comment\">//1k</span></span><br><span class=\"line\">\tn, err := conn.Read(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(n, <span class=\"type\">string</span>(data[:n]), <span class=\"built_in\">len</span>(data))</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t17 welcom to maxbit! 1024</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.&lt;2-发&gt;发送英文</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;请输入英文[q:退出]&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> name <span class=\"type\">string</span></span><br><span class=\"line\">\t\tfmt.Scan(&amp;name)</span><br><span class=\"line\">\t\t_, err = conn.Write([]<span class=\"type\">byte</span>(name))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t请输入英文[q:退出]</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> name == <span class=\"string\">&quot;q&quot;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//4.&lt;3-收&gt;接收服务端返回结果</span></span><br><span class=\"line\">\t\tdata = <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\t\tn, err = conn.Read(data)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"type\">string</span>(data[:n]))</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tfeichi666 //输入</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tFEICHI666 //返回</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tcpdemo02-上传文件\"><a href=\"#tcpdemo02-上传文件\" class=\"headerlink\" title=\"tcpdemo02 上传文件\"></a>tcpdemo02 上传文件</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">mode/mode.<span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> mode</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端像服务端传递的文件信息，用于server端结束写入</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> FiledInfo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tMethod <span class=\"type\">string</span></span><br><span class=\"line\">\tName   <span class=\"type\">string</span></span><br><span class=\"line\">\tSize   <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//server</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;awesomeProject1/mode&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">put</span><span class=\"params\">(conn net.Conn, fileInfo mode.FiledInfo)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fileSize <span class=\"type\">int64</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\tfile, err := os.OpenFile(<span class=\"string\">&quot;put_&quot;</span>+fileInfo.Name, os.O_WRONLY|os.O_APPEND|os.O_CREATE|os.O_TRUNC, <span class=\"number\">0666</span>) <span class=\"comment\">//打开文件句柄，如果没有则创建，有则追加</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;openfile&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(fileInfo)           <span class=\"comment\">//查看获取到的远端文件属性</span></span><br><span class=\"line\">\twriter := bufio.NewWriter(file) <span class=\"comment\">//缓存写入</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> fileSize &lt; fileInfo.Size &#123;  <span class=\"comment\">//如果接收到的字节数小于远端文件字节数，那么继续读取</span></span><br><span class=\"line\">\t\tdata := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\t\tn, err := conn.Read(data)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;readconn&quot;</span>, err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfileSize += <span class=\"type\">int64</span>(n)</span><br><span class=\"line\">\t\twriter.Write(data[:n])</span><br><span class=\"line\">\t\twriter.Flush()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;写入成功&quot;</span>, fileSize)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1.创建套接字对象</span></span><br><span class=\"line\">\tlistener, err := net.Listen(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;127.0.0.1:5001&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//2.关闭套接字</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> listener.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3.操作套接字对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;等待链接&quot;</span>)</span><br><span class=\"line\">\t\tconn, err := listener.Accept() <span class=\"comment\">//等待客户端连接，接收到来自客户端的套接字对象conn。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//4.&lt;1-文件属性接收&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> data = <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\t\t\tn, err := conn.Read(data)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;文件属性&quot;</span>, err)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"type\">string</span>(data[:n]))</span><br><span class=\"line\">\t\t\tfileInfo := &amp;mode.FiledInfo&#123;&#125;</span><br><span class=\"line\">\t\t\terr = json.Unmarshal(data[:n], fileInfo)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;解码&quot;</span>, err)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (*fileInfo).Method &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;put&quot;</span>:</span><br><span class=\"line\">\t\t\t\tput(conn, *fileInfo)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;q&quot;</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//client</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;awesomeProject1/mode&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">put</span><span class=\"params\">(conn net.Conn, path <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1.读取文件属性</span></span><br><span class=\"line\">\tfileInfo, err := os.Stat(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfiledInfo := &amp;mode.FiledInfo&#123;</span><br><span class=\"line\">\t\tMethod: <span class=\"string\">&quot;put&quot;</span>,</span><br><span class=\"line\">\t\tName:   fileInfo.Name(),</span><br><span class=\"line\">\t\tSize:   fileInfo.Size(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmarshal, err := json.Marshal(filedInfo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.&lt;1-发送文件属性给服务端&gt;</span></span><br><span class=\"line\">\t_, err = conn.Write(marshal)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(time.Second) <span class=\"comment\">//防止粘包</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfile, err := os.OpenFile(path, os.O_RDONLY, <span class=\"number\">0666</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\">\tbytesize := <span class=\"number\">0</span></span><br><span class=\"line\">\treader := bufio.NewReader(file) <span class=\"comment\">//获取带有缓冲区的读取器</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tbytes, err := reader.ReadBytes(<span class=\"string\">&#x27;\\n&#x27;</span>) <span class=\"comment\">//按行读取并发送文件，换行结束</span></span><br><span class=\"line\">\t\tn, _ := conn.Write(bytes)</span><br><span class=\"line\">\t\tbytesize += n</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;文件上传成功！&quot;</span>, bytesize)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">download</span><span class=\"params\">(path <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(path)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1.拨号获取客户端的套接字对象，建立连接（会进行tcp三次握手）</span></span><br><span class=\"line\">\tconn, err := net.Dial(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;127.0.0.1:5001&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2.&lt;1-文件上传&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//fmt.Scan(&amp;xxx) //默认已空格分割，这里不适合</span></span><br><span class=\"line\">\t\treader := bufio.NewReader(os.Stdin)        <span class=\"comment\">//直接读标准输入</span></span><br><span class=\"line\">\t\tfmt.Print(<span class=\"string\">&quot;# &quot;</span>)                            <span class=\"comment\">//虚拟终端提示符</span></span><br><span class=\"line\">\t\treadString, _ := reader.ReadString(<span class=\"string\">&#x27;\\n&#x27;</span>)   <span class=\"comment\">//换行结束</span></span><br><span class=\"line\">\t\treadString = strings.TrimSpace(readString) <span class=\"comment\">//去除首尾空格</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> readString == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> cmd, path <span class=\"type\">string</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(strings.Split(readString, <span class=\"string\">&quot; &quot;</span>)) &gt;= <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\tcmd = strings.Split(readString, <span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\tpath = strings.Split(readString, <span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> cmd &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;put&quot;</span>:</span><br><span class=\"line\">\t\t\tput(conn, path)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;download&quot;</span>:</span><br><span class=\"line\">\t\t\tdownload(path)</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;input put xxxx&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"web开发\"><a href=\"#web开发\" class=\"headerlink\" title=\"web开发\"></a>web开发</h1><h2 id=\"http协议\"><a href=\"#http协议\" class=\"headerlink\" title=\"http协议\"></a>http协议</h2><p><strong>简介</strong>：HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于万维网（WWW:World Wide Web ）服务器与本地浏览器之间传输超文本的传送协议。HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。<br><img src=\"/images/pasted-319.png\" alt=\"http\"></p>\n<h2 id=\"http协议特性\"><a href=\"#http协议特性\" class=\"headerlink\" title=\"http协议特性\"></a>http协议特性</h2><p><strong>基于TCP/IP协议</strong><br>http协议是基于TCP/IP协议之上的应用层协议。</p>\n<p><strong>基于请求－响应模式</strong><br>HTTP协议规定,请求从客户端发出,最后服务器端响应该请求并 返回。换句话说,肯定是先从客户端开始建立通信的,服务器端在没有 接收到请求之前不会发送响应</p>\n<p><img src=\"/images/pasted-320.png\" alt=\"request\"><br><strong>无状态保存</strong><br>HTTP是一种不保存状态,即无状态(stateless)协议。HTTP协议 自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个 级别,协议对于发送过的请求或响应都不做持久化处理。</p>\n<p>使用HTTP协议,每当有新的请求发送时,就会有对应的新响应产 生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务,确保协议的可伸缩性,而特意把HTTP协议设计成 如此简单的。</p>\n<p>可是,随着Web的不断发展,因无状态而导致业务处理变得棘手 的情况增多了。比如,用户登录到一家购物网站,即使他跳转到该站的 其他页面后,也需要能继续保持登录状态。针对这个实例,网站为了能 够掌握是谁送出的请求,需要保存用户的状态。HTTP/1.1虽然是无状态协议,但为了实现期望的保持状态功能, 于是引入了Cookie技术。有了Cookie再用HTTP协议通信,就可以管 理状态了。有关Cookie的详细内容稍后讲解。<br><img src=\"/images/pasted-321.png\" alt=\"none\"></p>\n<p><strong>无连接</strong><br>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>\n<h2 id=\"http请求协议与响应协议\"><a href=\"#http请求协议与响应协议\" class=\"headerlink\" title=\"http请求协议与响应协议\"></a>http请求协议与响应协议</h2><p>http协议包含由浏览器发送数据到服务器需要遵循的请求协议与服务器发送数据到浏览器需要遵循的请求协议。用于HTTP协议交互的信被为HTTP报文。请求端(客户端)的HTTP报文 做请求报文,响应端(服务器端)的 做响应报文。HTTP报文本身是由多行数据构成的字文本。</p>\n<p><strong>请求协议</strong><br><img src=\"/images/pasted-322.png\" alt=\"request_protocol\"></p>\n<p><strong>请求方式</strong><br>get与post请求：GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditBook?name=test1&amp;id=123456. POST方法是把提交的数据放在HTTP包的请求体中；GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。</p>\n<p><strong>响应协议</strong><br><img src=\"/images/pasted-323.png\" alt=\"response_protocol\"><br>响应状态码：状态码的职责是当客户端向服务器端发送请求时, 返回的请求的结果。借助状态码,用户可以知道服务器端是正常处理了请求,还是出现了错误。状态码如200 OK,以3位数字和原因成功。数字中的第一位指定了响应,后两位无分。响应有以下5种。<br><img src=\"/images/pasted-324.png\" alt=\"code\"></p>\n<h2 id=\"基于net库的web应用\"><a href=\"#基于net库的web应用\" class=\"headerlink\" title=\"基于net库的web应用\"></a>基于net库的web应用</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    listenner, err := net.Listen(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;0.0.0.0:8888&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> listenner.Close()</span><br><span class=\"line\">    <span class=\"comment\">// 2.服务端不断等待请求处理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 阻塞等待客户端连接</span></span><br><span class=\"line\">        conn, err := listenner.Accept()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            fmt.Println(err)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        buf := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">        n, err := conn.Read(buf)</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;n&quot;</span>,n)</span><br><span class=\"line\">        conn.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;HTTP/1.1 200 OK\\r\\n\\r\\n&lt;h1&gt;Welcome to Web World!&lt;/h1&gt;&quot;</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于http库的web应用\"><a href=\"#基于http库的web应用\" class=\"headerlink\" title=\"基于http库的web应用\"></a>基于http库的web应用</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo</span> <span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprintf(w, <span class=\"string\">&quot;Hello Yuan&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">&quot;/hi&quot;</span>, foo)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">&quot;:8090&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["DEV"],"tags":["Golang","网络编程"]},{"title":"MySQL-MyCAT多主多从环境下实现表的水平拆分","url":"/forward/c3e55136.html","content":"<h2 id=\"水平拆分算法\"><a href=\"#水平拆分算法\" class=\"headerlink\" title=\"水平拆分算法\"></a>水平拆分算法</h2><p><strong>范围分片：</strong>数据进行范围分割，分布到不同的节点上<br><img src=\"/images/img-94.png\" alt=\"范围分片\"><br><strong>取模分片：</strong>通过将数据行的id值和节点数量进行取模得到的余数=节点编号（从0开始），从而实现将数据行平均分布到各个节点<br><img src=\"/images/img-95.png\" alt=\"取模分片\"><br><strong>枚举分片：</strong>数据通过省市等等范围进行枚举分片。不同地区或者不同条件的数据归类到一个节点<br><img src=\"/images/img-96.png\" alt=\"枚举分片\"><br><strong>时间分片：</strong>对数据按照时间进行归纳，分布到不同的节点上<br><img src=\"/images/img-97.png\" alt=\"时间分片\"></p>\n<h2 id=\"范围分片：\"><a href=\"#范围分片：\" class=\"headerlink\" title=\"范围分片：\"></a>范围分片：</h2><h3 id=\"适用情况\"><a href=\"#适用情况\" class=\"headerlink\" title=\"适用情况\"></a>适用情况</h3><ul>\n<li>(1)行数非常多，2000w（1-1000w:sh1   1000w01-2000w:sh2）</li>\n<li>(2)访问非常频繁，用户访问较离散</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//定义哪张表要被分片</span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># cat &gt;schema.xml &lt;&lt;&#x27;EOF&#x27;</span></span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mycat:schema SYSTEM <span class=\"string\">&quot;schema.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;mycat:schema xmlns:mycat=<span class=\"string\">&quot;http://io.mycat/&quot;</span>&gt;</span><br><span class=\"line\">&lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt;</span><br><span class=\"line\">        &lt;table name=<span class=\"string\">&quot;t3&quot;</span> dataNode=<span class=\"string\">&quot;sh1,sh2&quot;</span> rule=<span class=\"string\">&quot;auto-sharding-long&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/schema&gt;</span><br><span class=\"line\">    &lt;dataNode name=<span class=\"string\">&quot;sh1&quot;</span> dataHost=<span class=\"string\">&quot;oldguo1&quot;</span> database= <span class=\"string\">&quot;taobao&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;dataNode name=<span class=\"string\">&quot;sh2&quot;</span> dataHost=<span class=\"string\">&quot;oldguo2&quot;</span> database= <span class=\"string\">&quot;taobao&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;dataHost name=<span class=\"string\">&quot;oldguo1&quot;</span> maxCon=<span class=\"string\">&quot;1000&quot;</span> minCon=<span class=\"string\">&quot;10&quot;</span> balance=<span class=\"string\">&quot;1&quot;</span>  writeType=<span class=\"string\">&quot;0&quot;</span> dbType=<span class=\"string\">&quot;mysql&quot;</span>  dbDriver=<span class=\"string\">&quot;native&quot;</span> switchType=<span class=\"string\">&quot;1&quot;</span>&gt;</span><br><span class=\"line\">        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class=\"line\">    &lt;writeHost host=<span class=\"string\">&quot;db1&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3307&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt;</span><br><span class=\"line\">            &lt;readHost host=<span class=\"string\">&quot;db2&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3309&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/writeHost&gt;</span><br><span class=\"line\">    &lt;writeHost host=<span class=\"string\">&quot;db3&quot;</span> url=<span class=\"string\">&quot;10.0.0.52:3307&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt;</span><br><span class=\"line\">            &lt;readHost host=<span class=\"string\">&quot;db4&quot;</span> url=<span class=\"string\">&quot;10.0.0.52:3309&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/writeHost&gt;</span><br><span class=\"line\">    &lt;/dataHost&gt;</span><br><span class=\"line\">    &lt;dataHost name=<span class=\"string\">&quot;oldguo2&quot;</span> maxCon=<span class=\"string\">&quot;1000&quot;</span> minCon=<span class=\"string\">&quot;10&quot;</span> balance=<span class=\"string\">&quot;1&quot;</span>  writeType=<span class=\"string\">&quot;0&quot;</span> dbType=<span class=\"string\">&quot;mysql&quot;</span>  dbDriver=<span class=\"string\">&quot;native&quot;</span> switchType=<span class=\"string\">&quot;1&quot;</span>&gt;</span><br><span class=\"line\">        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class=\"line\">    &lt;writeHost host=<span class=\"string\">&quot;db1&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3308&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt;</span><br><span class=\"line\">            &lt;readHost host=<span class=\"string\">&quot;db2&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3310&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/writeHost&gt;</span><br><span class=\"line\">    &lt;writeHost host=<span class=\"string\">&quot;db3&quot;</span> url=<span class=\"string\">&quot;10.0.0.52:3308&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt;</span><br><span class=\"line\">            &lt;readHost host=<span class=\"string\">&quot;db4&quot;</span> url=<span class=\"string\">&quot;10.0.0.52:3310&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/writeHost&gt;</span><br><span class=\"line\">    &lt;/dataHost&gt;</span><br><span class=\"line\">&lt;/mycat:schema&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">//配置文件第六行添加：</span><br><span class=\"line\">name=<span class=\"string\">&quot;t3&quot;</span> //表名</span><br><span class=\"line\">dataNode=<span class=\"string\">&quot;sh1,sh2&quot;</span> //节点名</span><br><span class=\"line\">rule=<span class=\"string\">&quot;auto-sharding-long&quot;</span> //范围分片调用规则</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># vim rule.xml </span></span><br><span class=\"line\"> 32     &lt;tableRule name=<span class=\"string\">&quot;auto-sharding-long&quot;</span>&gt;</span><br><span class=\"line\"> 33         &lt;rule&gt;</span><br><span class=\"line\"> 34             &lt;columns&gt;<span class=\"built_in\">id</span>&lt;/columns&gt;  //根据哪个列进行范围分片</span><br><span class=\"line\"> 35             &lt;algorithm&gt;rang-long&lt;/algorithm&gt; //所调用的函数，找到地100行</span><br><span class=\"line\"> 36         &lt;/rule&gt;</span><br><span class=\"line\"> 37     &lt;/tableRule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">100     &lt;<span class=\"keyword\">function</span> name=<span class=\"string\">&quot;rang-long&quot;</span></span><br><span class=\"line\">101         class=<span class=\"string\">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span><br><span class=\"line\">102         &lt;property name=<span class=\"string\">&quot;mapFile&quot;</span>&gt;autopartition-long.txt&lt;/property&gt; //控制范围分片的步长</span><br><span class=\"line\">103     &lt;/function&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># vim autopartition-long.txt</span></span><br><span class=\"line\">1 <span class=\"comment\"># range start-end ,data node index                                                                               </span></span><br><span class=\"line\">2 <span class=\"comment\"># K=1000,M=10000.</span></span><br><span class=\"line\">3 0-500M=0</span><br><span class=\"line\">4 500M-1000M=1</span><br><span class=\"line\">5 1000M-1500M=2</span><br><span class=\"line\">  开始-结束=分片编号</span><br><span class=\"line\">例：1000w行-1500w行放在了第三个数据节点（编号为2）上了</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># vim autopartition-long.txt</span></span><br><span class=\"line\">0-10=0</span><br><span class=\"line\">11-20=1</span><br><span class=\"line\">//这里我门设定步长为10进行范围分片</span><br><span class=\"line\"></span><br><span class=\"line\">创建测试表（任意机器执行db1或db2）：</span><br><span class=\"line\">mysql -S /data/3307/mysql.sock -e <span class=\"string\">&quot;use taobao;create table t3 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br><span class=\"line\">mysql -S /data/3308/mysql.sock  -e <span class=\"string\">&quot;use taobao;create table t3 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启mycat\"><a href=\"#重启mycat\" class=\"headerlink\" title=\"重启mycat\"></a>重启mycat</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02]<span class=\"comment\"># mycat restart</span></span><br><span class=\"line\">Stopping Mycat-server...</span><br><span class=\"line\">Stopped Mycat-server.</span><br><span class=\"line\">Starting Mycat-server...</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入测试数据\"><a href=\"#插入测试数据\" class=\"headerlink\" title=\"插入测试数据\"></a>插入测试数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p123456 -h10.0.0.52 -P8066</span><br><span class=\"line\">mysql&gt; use TESTDB;</span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_taobao |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| t3               |</span><br><span class=\"line\">| user             |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">insert into t3(<span class=\"built_in\">id</span>,name) values(1,<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">insert into t3(<span class=\"built_in\">id</span>,name) values(2,<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">insert into t3(<span class=\"built_in\">id</span>,name) values(3,<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">insert into t3(<span class=\"built_in\">id</span>,name) values(4,<span class=\"string\">&#x27;d&#x27;</span>);</span><br><span class=\"line\">insert into t3(<span class=\"built_in\">id</span>,name) values(11,<span class=\"string\">&#x27;aa&#x27;</span>);</span><br><span class=\"line\">insert into t3(<span class=\"built_in\">id</span>,name) values(12,<span class=\"string\">&#x27;bb&#x27;</span>);</span><br><span class=\"line\">insert into t3(<span class=\"built_in\">id</span>,name) values(13,<span class=\"string\">&#x27;cc&#x27;</span>);</span><br><span class=\"line\">insert into t3(<span class=\"built_in\">id</span>,name) values(14,<span class=\"string\">&#x27;dd&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查物理节点\"><a href=\"#检查物理节点\" class=\"headerlink\" title=\"检查物理节点\"></a>检查物理节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3307/mysql.sock -e &quot;use taobao;show tables;select * from t3;&quot;</span></span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_taobao |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| t3               |</span><br><span class=\"line\">| user             |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | name |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">|  1 | a    |</span><br><span class=\"line\">|  2 | b    |</span><br><span class=\"line\">|  3 | c    |</span><br><span class=\"line\">|  4 | d    |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock -e &quot;use taobao;show tables;select * from t3;&quot;</span></span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_taobao |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| order_t          |</span><br><span class=\"line\">| t3               |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | name |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">| 11 | aa   |</span><br><span class=\"line\">| 12 | bb   |</span><br><span class=\"line\">| 13 | cc   |</span><br><span class=\"line\">| 14 | <span class=\"built_in\">dd</span>   |</span><br><span class=\"line\">+----+------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取模分片\"><a href=\"#取模分片\" class=\"headerlink\" title=\"取模分片\"></a>取模分片</h2><h3 id=\"适用情况-1\"><a href=\"#适用情况-1\" class=\"headerlink\" title=\"适用情况\"></a>适用情况</h3><ul>\n<li>(1)适用于访问不离散的表</li>\n<li>(2)分片键（一个列）与节点数量进行取余，得到余数，将数据写入对应节点</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># vim schema.xml</span></span><br><span class=\"line\">  4 &lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt;</span><br><span class=\"line\">  5         &lt;table name=<span class=\"string\">&quot;t4&quot;</span> dataNode=<span class=\"string\">&quot;sh1,sh2&quot;</span> rule=<span class=\"string\">&quot;mod-long&quot;</span> /&gt;</span><br><span class=\"line\">  6 &lt;/schema&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table name=<span class=\"string\">&quot;t4&quot;</span> //表名</span><br><span class=\"line\">dataNode=<span class=\"string\">&quot;sh1,sh2&quot;</span> //节点名</span><br><span class=\"line\">rule=<span class=\"string\">&quot;mod-long&quot;</span> //取模分片调用的规则</span><br><span class=\"line\"></span><br><span class=\"line\"> 38     &lt;tableRule name=<span class=\"string\">&quot;mod-long&quot;</span>&gt;                                                                                  </span><br><span class=\"line\"> 39         &lt;rule&gt;</span><br><span class=\"line\"> 40             &lt;columns&gt;<span class=\"built_in\">id</span>&lt;/columns&gt; //分片列，负责与节点数进行取模运算</span><br><span class=\"line\"> 41             &lt;algorithm&gt;mod-long&lt;/algorithm&gt; //取模分片所所调用的函数，找到104行</span><br><span class=\"line\"> 42         &lt;/rule&gt;</span><br><span class=\"line\"> 43     &lt;/tableRule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">104     &lt;<span class=\"keyword\">function</span> name=<span class=\"string\">&quot;mod-long&quot;</span> class=<span class=\"string\">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span><br><span class=\"line\">105         &lt;!-- how many data nodes --&gt;</span><br><span class=\"line\">106         &lt;property name=<span class=\"string\">&quot;count&quot;</span>&gt;2&lt;/property&gt; //节点数量                                                      </span><br><span class=\"line\">107     &lt;/function&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">创建测试表（任意机器执行db1或db2）：</span><br><span class=\"line\">mysql -S /data/3307/mysql.sock -e <span class=\"string\">&quot;use taobao;create table t4 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br><span class=\"line\">mysql -S /data/3308/mysql.sock -e <span class=\"string\">&quot;use taobao;create table t4 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启mycat-db02\"><a href=\"#重启mycat-db02\" class=\"headerlink\" title=\"重启mycat (db02)\"></a>重启mycat (db02)</h3><p><code>mycat restart </code></p>\n<h3 id=\"db02上添加测试数据\"><a href=\"#db02上添加测试数据\" class=\"headerlink\" title=\"db02上添加测试数据\"></a>db02上添加测试数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p123456 -h10.0.0.52 -P8066</span><br><span class=\"line\">use TESTDB</span><br><span class=\"line\">insert into t4(<span class=\"built_in\">id</span>,name) values(1,<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">insert into t4(<span class=\"built_in\">id</span>,name) values(2,<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">insert into t4(<span class=\"built_in\">id</span>,name) values(3,<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">insert into t4(<span class=\"built_in\">id</span>,name) values(4,<span class=\"string\">&#x27;d&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">3307位sh1，应当为0号节点</span><br><span class=\"line\">3308为sh2，应当是1号节点</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">id</span>值%节点数量=落在哪个节点上</span><br><span class=\"line\">1%2=1 //3308</span><br><span class=\"line\">2%2=0 //3307</span><br><span class=\"line\">3%2=1 //3308</span><br><span class=\"line\">4%2=0 //3307</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查后端数据节点\"><a href=\"#检查后端数据节点\" class=\"headerlink\" title=\"检查后端数据节点\"></a>检查后端数据节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">验证：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock -e &quot;use taobao;show tables;select * from t4;&quot;</span></span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_taobao |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| order_t          |</span><br><span class=\"line\">| t3               |</span><br><span class=\"line\">| t4               |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | name |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">|  1 | a    |</span><br><span class=\"line\">|  3 | c    |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3307/mysql.sock -e &quot;use taobao;show tables;select * from t4;&quot;</span></span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_taobao |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| t3               |</span><br><span class=\"line\">| t4               |</span><br><span class=\"line\">| user             |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | name |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">|  2 | b    |</span><br><span class=\"line\">|  4 | d    |</span><br><span class=\"line\">+----+------+</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举分片\"><a href=\"#枚举分片\" class=\"headerlink\" title=\"枚举分片\"></a>枚举分片</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li>适用于以地区或特定条件进行分类的数据表<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">t5 表</span><br><span class=\"line\"><span class=\"built_in\">id</span> name telnum</span><br><span class=\"line\">1   bj   1212</span><br><span class=\"line\">2   sh   22222</span><br><span class=\"line\">3   bj   3333</span><br><span class=\"line\">4   sh   44444</span><br><span class=\"line\">5   bj   5555</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"配置文件：\"><a href=\"#配置文件：\" class=\"headerlink\" title=\"配置文件：\"></a>配置文件：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># vim schema.xml</span></span><br><span class=\"line\">  4 &lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt;</span><br><span class=\"line\">  5         &lt;table name=<span class=\"string\">&quot;t5&quot;</span> dataNode=<span class=\"string\">&quot;sh1,sh2&quot;</span> rule=<span class=\"string\">&quot;sharding-by-intfile&quot;</span> /&gt;    //调用的规则                                    </span><br><span class=\"line\">  6 &lt;/schema&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># vim rule.xml</span></span><br><span class=\"line\"> 26     &lt;tableRule name=<span class=\"string\">&quot;sharding-by-intfile&quot;</span>&gt;</span><br><span class=\"line\"> 27         &lt;rule&gt;</span><br><span class=\"line\"> 28             &lt;columns&gt;name&lt;/columns&gt; //定义参与枚举的列</span><br><span class=\"line\"> 29             &lt;algorithm&gt;hash-int&lt;/algorithm&gt; //调用的函数</span><br><span class=\"line\"> 30         &lt;/rule&gt;</span><br><span class=\"line\"> 31     &lt;/tableRule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> 96     &lt;<span class=\"keyword\">function</span> name=<span class=\"string\">&quot;hash-int&quot;</span></span><br><span class=\"line\"> 97         class=<span class=\"string\">&quot;io.mycat.route.function.PartitionByFileMap&quot;</span>&gt;</span><br><span class=\"line\"> 98         &lt;property name=<span class=\"string\">&quot;mapFile&quot;</span>&gt;partition-hash-int.txt&lt;/property&gt;</span><br><span class=\"line\"> 99         &lt;property name=<span class=\"string\">&quot;type&quot;</span>&gt;1&lt;/property&gt; //让枚举列支持中英文，默认只支持数字</span><br><span class=\"line\">100                          &lt;property name=<span class=\"string\">&quot;defaultNode&quot;</span>&gt;1&lt;/property&gt;      //未定义的枚举列默认放到1节点                                         </span><br><span class=\"line\">101     &lt;/function&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">按照schema.xml中的先后排序，</span><br><span class=\"line\">columns 标识将要分片的表字段，</span><br><span class=\"line\">algorithm 分片函数， </span><br><span class=\"line\">其中分片函数配置中，mapFile标识配置文件名称</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># vim partition-hash-int.txt</span></span><br><span class=\"line\">  1 bj=0</span><br><span class=\"line\">  2 sh=1   </span><br><span class=\"line\">  3 <span class=\"comment\">#DEFAULT_NODE=1 //未定义的枚举列默认放到1节点,rule.xml中已经定义，这里不需要重复定义</span></span><br><span class=\"line\">name=bj 放到0节点</span><br><span class=\"line\">name=sh 放入1节点</span><br><span class=\"line\"></span><br><span class=\"line\">创建测试表（任意机器执行db1或db2）：</span><br><span class=\"line\">mysql -S /data/3307/mysql.sock -e <span class=\"string\">&quot;use taobao;create table t5 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br><span class=\"line\">mysql -S /data/3308/mysql.sock -e <span class=\"string\">&quot;use taobao;create table t5 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">重启mycat </span><br><span class=\"line\">mycat restart </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"db02上添加测试数据-1\"><a href=\"#db02上添加测试数据-1\" class=\"headerlink\" title=\"db02上添加测试数据\"></a>db02上添加测试数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p123456 -h10.0.0.52 -P8066</span><br><span class=\"line\">use TESTDB</span><br><span class=\"line\">insert into t5(<span class=\"built_in\">id</span>,name) values(1,<span class=\"string\">&#x27;bj&#x27;</span>);</span><br><span class=\"line\">insert into t5(<span class=\"built_in\">id</span>,name) values(2,<span class=\"string\">&#x27;sh&#x27;</span>);</span><br><span class=\"line\">insert into t5(<span class=\"built_in\">id</span>,name) values(3,<span class=\"string\">&#x27;bj&#x27;</span>);</span><br><span class=\"line\">insert into t5(<span class=\"built_in\">id</span>,name) values(4,<span class=\"string\">&#x27;sh&#x27;</span>);</span><br><span class=\"line\">insert into t5(<span class=\"built_in\">id</span>,name) values(5,<span class=\"string\">&#x27;tj&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查后端数据节点-1\"><a href=\"#检查后端数据节点-1\" class=\"headerlink\" title=\"检查后端数据节点\"></a>检查后端数据节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3307/mysql.sock -e &quot;use taobao;show tables;select * from t5;&quot;</span></span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_taobao |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| t3               |</span><br><span class=\"line\">| t4               |</span><br><span class=\"line\">| t5               |</span><br><span class=\"line\">| user             |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | name |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">|  1 | bj   |</span><br><span class=\"line\">|  3 | bj   |</span><br><span class=\"line\">|  5 | tj   | //未定义的枚举列，默认放到了0节点中</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock -e &quot;use taobao;show tables;select * from t5;&quot;</span></span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_taobao |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| order_t          |</span><br><span class=\"line\">| t3               |</span><br><span class=\"line\">| t4               |</span><br><span class=\"line\">| t5               |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | name |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">|  2 | sh   |</span><br><span class=\"line\">|  4 | sh   |</span><br><span class=\"line\">+----+------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mycat全局表\"><a href=\"#Mycat全局表\" class=\"headerlink\" title=\"Mycat全局表\"></a>Mycat全局表</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ta   tb   tc  td   </span><br><span class=\"line\"><span class=\"built_in\">join</span> </span><br><span class=\"line\">tx</span><br><span class=\"line\"></span><br><span class=\"line\">select  t1.name   ,t.x  from  t1 </span><br><span class=\"line\"><span class=\"built_in\">join</span> tx </span><br><span class=\"line\">select  t2.name   ,t.x  from  t2 </span><br><span class=\"line\"><span class=\"built_in\">join</span> tx</span><br><span class=\"line\">select  t3.name   ,t.x  from  t3 </span><br><span class=\"line\"><span class=\"built_in\">join</span> tx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用场景：\"><a href=\"#使用场景：\" class=\"headerlink\" title=\"使用场景：\"></a>使用场景：</h3><ul>\n<li><p>如果你的业务中有些数据类似于数据字典，比如配置文件的配置，常用业务的配置或者数据量不大很少变动的表，这些表往往不是特别大，而且大部分的业务场景都会用到，那么这种表适合于Mycat全局表，无须对数据进行切分。要在所有的分片上保存一份数据即可。</p>\n</li>\n<li><p>Mycat 在Join操作中，业务表与全局表进行Join聚合会优先选择相同分片内的全局表join，避免跨库Join，在进行数据插入操作时，mycat将把数据分发到全局表对应的所有分片执行，在进行数据读取时候将会随机获取一个节点读取数据。</p>\n</li>\n</ul>\n<h3 id=\"全局表配置：\"><a href=\"#全局表配置：\" class=\"headerlink\" title=\"全局表配置：\"></a>全局表配置：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># vim schema.xml</span></span><br><span class=\"line\"> 4 &lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt;      </span><br><span class=\"line\"> 5         &lt;table name=<span class=\"string\">&quot;t_area&quot;</span> primaryKey=<span class=\"string\">&quot;id&quot;</span>  <span class=\"built_in\">type</span>=<span class=\"string\">&quot;global&quot;</span> dataNode=<span class=\"string\">&quot;sh1,sh2&quot;</span> /&gt;                                </span><br><span class=\"line\"> 6 &lt;/schema&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">测试表准备：</span><br><span class=\"line\">mysql -S /data/3307/mysql.sock -e <span class=\"string\">&quot;use taobao;create table t_area (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br><span class=\"line\">mysql -S /data/3308/mysql.sock -e <span class=\"string\">&quot;use taobao;create table t_area  (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启mycat-db02-1\"><a href=\"#重启mycat-db02-1\" class=\"headerlink\" title=\"重启mycat (db02)\"></a>重启mycat (db02)</h3><p><code>mycat restart</code></p>\n<h3 id=\"插入测试数据-1\"><a href=\"#插入测试数据-1\" class=\"headerlink\" title=\"插入测试数据\"></a>插入测试数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p123456 -h10.0.0.52 -P8066</span><br><span class=\"line\">use TESTDB</span><br><span class=\"line\">insert into t_area(<span class=\"built_in\">id</span>,name) values(1,<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">insert into t_area(<span class=\"built_in\">id</span>,name) values(2,<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">insert into t_area(<span class=\"built_in\">id</span>,name) values(3,<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">insert into t_area(<span class=\"built_in\">id</span>,name) values(4,<span class=\"string\">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查后端数据\"><a href=\"#检查后端数据\" class=\"headerlink\" title=\"检查后端数据\"></a>检查后端数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//所以节点上都存在相同的全局表，而且数据一致</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3307/mysql.sock -e &quot;use taobao;select * from t_area;&quot;+----+------+</span></span><br><span class=\"line\">| <span class=\"built_in\">id</span> | name |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">|  1 | a    |</span><br><span class=\"line\">|  2 | b    |</span><br><span class=\"line\">|  3 | c    |</span><br><span class=\"line\">|  4 | d    |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock -e &quot;use taobao;select * from t_area;&quot;</span></span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | name |</span><br><span class=\"line\">+----+------+</span><br><span class=\"line\">|  1 | a    |</span><br><span class=\"line\">|  2 | b    |</span><br><span class=\"line\">|  3 | c    |</span><br><span class=\"line\">|  4 | d    |</span><br><span class=\"line\">+----+------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"E-R分片\"><a href=\"#E-R分片\" class=\"headerlink\" title=\"E-R分片\"></a>E-R分片</h2><p>说明：类似于全局表，但比全局表性能高。<br>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">A <span class=\"built_in\">join</span> B  </span><br><span class=\"line\">//将A 表和B表中相关连的条件，同时分片放入同一个节点中</span><br><span class=\"line\">为了防止跨分片<span class=\"built_in\">join</span>，可以使用E-R模式</span><br><span class=\"line\">A   <span class=\"built_in\">join</span>   B</span><br><span class=\"line\">on  a.xx=b.yy</span><br><span class=\"line\"><span class=\"built_in\">join</span> C</span><br><span class=\"line\">on A.<span class=\"built_in\">id</span>=C.<span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#分片策略 schema.xml</span></span><br><span class=\"line\">&lt;table name=<span class=\"string\">&quot;A&quot;</span> dataNode=<span class=\"string\">&quot;sh1,sh2&quot;</span> rule=<span class=\"string\">&quot;mod-long&quot;</span>&gt;   //比如说A表作为驱动表设定了取模分片</span><br><span class=\"line\">       &lt;childTable name=<span class=\"string\">&quot;B&quot;</span> joinKey=<span class=\"string\">&quot;yy&quot;</span> parentKey=<span class=\"string\">&quot;xx&quot;</span> /&gt; //将子表B同时也进行分片</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">joinKey=<span class=\"string\">&quot;yy&quot;</span>  //B表自己的关联条件</span><br><span class=\"line\">parentKey=<span class=\"string\">&quot;xx&quot;</span> //驱动表A表的关联条件</span><br><span class=\"line\"></span><br><span class=\"line\">将相关连的数据同时分片放到同一个节点</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"逻辑库操作\"><a href=\"#逻辑库操作\" class=\"headerlink\" title=\"逻辑库操作\"></a>逻辑库操作</h2><h3 id=\"更改逻辑库默认名\"><a href=\"#更改逻辑库默认名\" class=\"headerlink\" title=\"更改逻辑库默认名\"></a>更改逻辑库默认名</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.schema.xml</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mycat:schema SYSTEM <span class=\"string\">&quot;schema.dtd&quot;</span>&gt;  </span><br><span class=\"line\">&lt;mycat:schema xmlns:mycat=<span class=\"string\">&quot;http://io.mycat/&quot;</span>&gt;</span><br><span class=\"line\">&lt;schema name=<span class=\"string\">&quot;pincheng&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt; //更改逻辑库名</span><br><span class=\"line\">&lt;/schema&gt;  </span><br><span class=\"line\">        &lt;dataNode name=<span class=\"string\">&quot;sh1&quot;</span> dataHost=<span class=\"string\">&quot;oldguo1&quot;</span> database= <span class=\"string\">&quot;world&quot;</span> /&gt;         </span><br><span class=\"line\">        &lt;dataHost name=<span class=\"string\">&quot;oldguo1&quot;</span> maxCon=<span class=\"string\">&quot;1000&quot;</span> minCon=<span class=\"string\">&quot;10&quot;</span> balance=<span class=\"string\">&quot;1&quot;</span>  writeType=<span class=\"string\">&quot;0&quot;</span> dbType=<span class=\"string\">&quot;mysql&quot;</span>  dbDriver=<span class=\"string\">&quot;native&quot;</span> switchType=<span class=\"string\">&quot;1&quot;</span>&gt;    </span><br><span class=\"line\">                &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;  </span><br><span class=\"line\">        &lt;writeHost host=<span class=\"string\">&quot;db1&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3307&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt; </span><br><span class=\"line\">                        &lt;readHost host=<span class=\"string\">&quot;db2&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3309&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt; </span><br><span class=\"line\">        &lt;/writeHost&gt; </span><br><span class=\"line\">        &lt;/dataHost&gt;  </span><br><span class=\"line\">&lt;/mycat:schema&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">2.server.xml </span><br><span class=\"line\">101     &lt;user name=<span class=\"string\">&quot;root&quot;</span> defaultAccount=<span class=\"string\">&quot;true&quot;</span>&gt;                                                                     </span><br><span class=\"line\">102         &lt;property name=<span class=\"string\">&quot;password&quot;</span>&gt;123456&lt;/property&gt;</span><br><span class=\"line\">103         &lt;property name=<span class=\"string\">&quot;schemas&quot;</span>&gt;pincheng&lt;/property&gt; //这里</span><br><span class=\"line\">104         </span><br><span class=\"line\">105         &lt;!-- 表级 DML 权限设置 --&gt;</span><br><span class=\"line\">106         &lt;!--        </span><br><span class=\"line\">107         &lt;privileges check=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">108             &lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> dml=<span class=\"string\">&quot;0110&quot;</span> &gt;</span><br><span class=\"line\">109                 &lt;table name=<span class=\"string\">&quot;tb01&quot;</span> dml=<span class=\"string\">&quot;0000&quot;</span>&gt;&lt;/table&gt;</span><br><span class=\"line\">110                 &lt;table name=<span class=\"string\">&quot;tb02&quot;</span> dml=<span class=\"string\">&quot;1111&quot;</span>&gt;&lt;/table&gt;</span><br><span class=\"line\">111             &lt;/schema&gt;</span><br><span class=\"line\">112         &lt;/privileges&gt;       </span><br><span class=\"line\">113          --&gt;</span><br><span class=\"line\">114     &lt;/user&gt;</span><br><span class=\"line\">115     </span><br><span class=\"line\">116     &lt;user name=<span class=\"string\">&quot;user&quot;</span>&gt;</span><br><span class=\"line\">117         &lt;property name=<span class=\"string\">&quot;password&quot;</span>&gt;user&lt;/property&gt;</span><br><span class=\"line\">118         &lt;property name=<span class=\"string\">&quot;schemas&quot;</span>&gt;pincheng&lt;/property&gt; //这里</span><br><span class=\"line\">119         &lt;property name=<span class=\"string\">&quot;readOnly&quot;</span>&gt;<span class=\"literal\">true</span>&lt;/property&gt;</span><br><span class=\"line\">120     &lt;/user&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">重启mycat</span><br><span class=\"line\">mycat restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加逻辑库\"><a href=\"#添加逻辑库\" class=\"headerlink\" title=\"添加逻辑库\"></a>添加逻辑库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.schema.xml</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mycat:schema SYSTEM <span class=\"string\">&quot;schema.dtd&quot;</span>&gt;  </span><br><span class=\"line\">&lt;mycat:schema xmlns:mycat=<span class=\"string\">&quot;http://io.mycat/&quot;</span>&gt;</span><br><span class=\"line\">&lt;schema name=<span class=\"string\">&quot;pincheng&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt; </span><br><span class=\"line\">&lt;/schema&gt;  </span><br><span class=\"line\">&lt;schema name=<span class=\"string\">&quot;felix&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt; </span><br><span class=\"line\">&lt;/schema&gt;</span><br><span class=\"line\">        &lt;dataNode name=<span class=\"string\">&quot;sh1&quot;</span> dataHost=<span class=\"string\">&quot;oldguo1&quot;</span> database= <span class=\"string\">&quot;world&quot;</span> /&gt;         </span><br><span class=\"line\">        &lt;dataHost name=<span class=\"string\">&quot;oldguo1&quot;</span> maxCon=<span class=\"string\">&quot;1000&quot;</span> minCon=<span class=\"string\">&quot;10&quot;</span> balance=<span class=\"string\">&quot;1&quot;</span>  writeType=<span class=\"string\">&quot;0&quot;</span> dbType=<span class=\"string\">&quot;mysql&quot;</span>  dbDriver=<span class=\"string\">&quot;native&quot;</span> switchType=<span class=\"string\">&quot;1&quot;</span>&gt;    </span><br><span class=\"line\">                &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;  </span><br><span class=\"line\">        &lt;writeHost host=<span class=\"string\">&quot;db1&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3307&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt; </span><br><span class=\"line\">                        &lt;readHost host=<span class=\"string\">&quot;db2&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3309&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt; </span><br><span class=\"line\">        &lt;/writeHost&gt; </span><br><span class=\"line\">        &lt;/dataHost&gt;  </span><br><span class=\"line\">&lt;/mycat:schema&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">2.server.xml </span><br><span class=\"line\">101     &lt;user name=<span class=\"string\">&quot;root&quot;</span> defaultAccount=<span class=\"string\">&quot;true&quot;</span>&gt;                                                                     </span><br><span class=\"line\">102         &lt;property name=<span class=\"string\">&quot;password&quot;</span>&gt;123456&lt;/property&gt;</span><br><span class=\"line\">103         &lt;property name=<span class=\"string\">&quot;schemas&quot;</span>&gt;pincheng,felix&lt;/property&gt; //这里</span><br><span class=\"line\">104         </span><br><span class=\"line\">105         &lt;!-- 表级 DML 权限设置 --&gt;</span><br><span class=\"line\">106         &lt;!--        </span><br><span class=\"line\">107         &lt;privileges check=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">108             &lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> dml=<span class=\"string\">&quot;0110&quot;</span> &gt;</span><br><span class=\"line\">109                 &lt;table name=<span class=\"string\">&quot;tb01&quot;</span> dml=<span class=\"string\">&quot;0000&quot;</span>&gt;&lt;/table&gt;</span><br><span class=\"line\">110                 &lt;table name=<span class=\"string\">&quot;tb02&quot;</span> dml=<span class=\"string\">&quot;1111&quot;</span>&gt;&lt;/table&gt;</span><br><span class=\"line\">111             &lt;/schema&gt;</span><br><span class=\"line\">112         &lt;/privileges&gt;       </span><br><span class=\"line\">113          --&gt;</span><br><span class=\"line\">114     &lt;/user&gt;</span><br><span class=\"line\">115     </span><br><span class=\"line\">116     &lt;user name=<span class=\"string\">&quot;user&quot;</span>&gt;</span><br><span class=\"line\">117         &lt;property name=<span class=\"string\">&quot;password&quot;</span>&gt;user&lt;/property&gt;</span><br><span class=\"line\">118         &lt;property name=<span class=\"string\">&quot;schemas&quot;</span>&gt;pincheng,felix&lt;/property&gt; //这里</span><br><span class=\"line\">119         &lt;property name=<span class=\"string\">&quot;readOnly&quot;</span>&gt;<span class=\"literal\">true</span>&lt;/property&gt;</span><br><span class=\"line\">120     &lt;/user&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.server.xml </span><br><span class=\"line\">101     &lt;user name=<span class=\"string\">&quot;root&quot;</span> defaultAccount=<span class=\"string\">&quot;true&quot;</span>&gt;                                                                     </span><br><span class=\"line\">102         &lt;property name=<span class=\"string\">&quot;password&quot;</span>&gt;123456&lt;/property&gt;</span><br><span class=\"line\">103         &lt;property name=<span class=\"string\">&quot;schemas&quot;</span>&gt;pincheng&lt;/property&gt;</span><br><span class=\"line\">104         </span><br><span class=\"line\">105         &lt;!-- 表级 DML 权限设置 --&gt;</span><br><span class=\"line\">106         &lt;!--        </span><br><span class=\"line\">107         &lt;privileges check=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">108             &lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> dml=<span class=\"string\">&quot;0110&quot;</span> &gt;</span><br><span class=\"line\">109                 &lt;table name=<span class=\"string\">&quot;tb01&quot;</span> dml=<span class=\"string\">&quot;0000&quot;</span>&gt;&lt;/table&gt;</span><br><span class=\"line\">110                 &lt;table name=<span class=\"string\">&quot;tb02&quot;</span> dml=<span class=\"string\">&quot;1111&quot;</span>&gt;&lt;/table&gt;</span><br><span class=\"line\">111             &lt;/schema&gt;</span><br><span class=\"line\">112         &lt;/privileges&gt;       </span><br><span class=\"line\">113          --&gt;</span><br><span class=\"line\">114     &lt;/user&gt;</span><br><span class=\"line\">115     </span><br><span class=\"line\">116     &lt;user name=<span class=\"string\">&quot;user&quot;</span>&gt;</span><br><span class=\"line\">117         &lt;property name=<span class=\"string\">&quot;password&quot;</span>&gt;user&lt;/property&gt;</span><br><span class=\"line\">118         &lt;property name=<span class=\"string\">&quot;schemas&quot;</span>&gt;pincheng&lt;/property&gt;</span><br><span class=\"line\">119         &lt;property name=<span class=\"string\">&quot;readOnly&quot;</span>&gt;<span class=\"literal\">true</span>&lt;/property&gt;</span><br><span class=\"line\">120     &lt;/user&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//添加5行</span><br><span class=\"line\">121     &lt;user name=<span class=\"string\">&quot;felix&quot;</span>&gt;//账号</span><br><span class=\"line\">122         &lt;property name=<span class=\"string\">&quot;password&quot;</span>&gt;felix&lt;/property&gt;//密码</span><br><span class=\"line\">123         &lt;property name=<span class=\"string\">&quot;schemas&quot;</span>&gt;felix&lt;/property&gt;                                                                </span><br><span class=\"line\">124         &lt;property name=<span class=\"string\">&quot;readOnly&quot;</span>&gt;<span class=\"literal\">true</span>&lt;/property&gt;//只读</span><br><span class=\"line\">125     &lt;/user&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># mycat restart</span></span><br><span class=\"line\">Stopping Mycat-server...</span><br><span class=\"line\">Stopped Mycat-server.</span><br><span class=\"line\">Starting Mycat-server...</span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># mysql -ufelix -pfelix -h10.0.0.52 -P8066</span></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| DATABASE |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| felix    |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>\n","categories":["DBA"],"tags":["主从复制","MySQL","读写分离","高可用","分布式","MyCAT","水平拆分"]},{"title":"MySQL-MyCAT基础架构&实现高可用和读写分离","url":"/forward/84c0fcc7.html","content":"<h2 id=\"环境准备：\"><a href=\"#环境准备：\" class=\"headerlink\" title=\"环境准备：\"></a>环境准备：</h2><p>两台虚拟机 db01 db02<br>创建四个mysql实例：3307 3308 3309 3310<br>架构图：<br><img src=\"/images/img-91.png\" alt=\"基础架构\"></p>\n<h2 id=\"删除历史环境\"><a href=\"#删除历史环境\" class=\"headerlink\" title=\"删除历史环境\"></a>删除历史环境</h2><p>pkill mysqld<br>rm -rf /data/*<br>mv /etc/my.cnf /etc/my.cnf.bak</p>\n<h2 id=\"创建数据目录，并初始化数据\"><a href=\"#创建数据目录，并初始化数据\" class=\"headerlink\" title=\"创建数据目录，并初始化数据\"></a>创建数据目录，并初始化数据</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /data/33&#123;07..10&#125;/data -p</span><br><span class=\"line\">mysqld --initialize-insecure  --user=mysql --datadir=/data/3307/data --basedir=/application/mysql</span><br><span class=\"line\">mysqld --initialize-insecure  --user=mysql --datadir=/data/3308/data --basedir=/application/mysql</span><br><span class=\"line\">mysqld --initialize-insecure  --user=mysql --datadir=/data/3309/data --basedir=/application/mysql</span><br><span class=\"line\">mysqld --initialize-insecure  --user=mysql --datadir=/data/3310/data --basedir=/application/mysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"准备配置文件和启动脚本\"><a href=\"#准备配置文件和启动脚本\" class=\"headerlink\" title=\"准备配置文件和启动脚本\"></a>准备配置文件和启动脚本</h2><h3 id=\"db01\"><a href=\"#db01\" class=\"headerlink\" title=\"-db01:\"></a>-db01:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/data/3307/my.cnf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3307/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3307/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">port=3307</span></span><br><span class=\"line\"><span class=\"string\">log-error=/data/3307/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3307/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row</span></span><br><span class=\"line\"><span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\"><span class=\"string\">server-id=7</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/data/3308/my.cnf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3308/data</span></span><br><span class=\"line\"><span class=\"string\">port=3308</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3308/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">log-error=/data/3308/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3308/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row</span></span><br><span class=\"line\"><span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\"><span class=\"string\">server-id=8</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/data/3309/my.cnf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3309/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3309/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">port=3309</span></span><br><span class=\"line\"><span class=\"string\">log-error=/data/3309/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3309/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row</span></span><br><span class=\"line\"><span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\"><span class=\"string\">server-id=9</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/data/3310/my.cnf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3310/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3310/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">port=3310</span></span><br><span class=\"line\"><span class=\"string\">log-error=/data/3310/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3310/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row</span></span><br><span class=\"line\"><span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\"><span class=\"string\">server-id=10</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/systemd/system/mysqld3307.service&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=MySQL Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=man:mysqld(8)</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">User=mysql</span></span><br><span class=\"line\"><span class=\"string\">Group=mysql</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3307/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE = 5000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/systemd/system/mysqld3308.service&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=MySQL Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=man:mysqld(8)</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">User=mysql</span></span><br><span class=\"line\"><span class=\"string\">Group=mysql</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3308/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE = 5000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/systemd/system/mysqld3309.service&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=MySQL Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=man:mysqld(8)</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">User=mysql</span></span><br><span class=\"line\"><span class=\"string\">Group=mysql</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3309/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE = 5000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/systemd/system/mysqld3310.service&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=MySQL Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=man:mysqld(8)</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">User=mysql</span></span><br><span class=\"line\"><span class=\"string\">Group=mysql</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3310/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE = 5000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"db02\"><a href=\"#db02\" class=\"headerlink\" title=\"-db02\"></a>-db02</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/data/3307/my.cnf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3307/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3307/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">port=3307</span></span><br><span class=\"line\"><span class=\"string\">log-error=/data/3307/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3307/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row</span></span><br><span class=\"line\"><span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\"><span class=\"string\">server-id=17</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/data/3308/my.cnf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3308/data</span></span><br><span class=\"line\"><span class=\"string\">port=3308</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3308/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">log-error=/data/3308/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3308/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row</span></span><br><span class=\"line\"><span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\"><span class=\"string\">server-id=18</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/data/3309/my.cnf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3309/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3309/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">port=3309</span></span><br><span class=\"line\"><span class=\"string\">log-error=/data/3309/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3309/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row</span></span><br><span class=\"line\"><span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\"><span class=\"string\">server-id=19</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/data/3310/my.cnf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">basedir=/application/mysql</span></span><br><span class=\"line\"><span class=\"string\">datadir=/data/3310/data</span></span><br><span class=\"line\"><span class=\"string\">socket=/data/3310/mysql.sock</span></span><br><span class=\"line\"><span class=\"string\">port=3310</span></span><br><span class=\"line\"><span class=\"string\">log-error=/data/3310/mysql.log</span></span><br><span class=\"line\"><span class=\"string\">log_bin=/data/3310/mysql-bin</span></span><br><span class=\"line\"><span class=\"string\">binlog_format=row</span></span><br><span class=\"line\"><span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\"><span class=\"string\">server-id=20</span></span><br><span class=\"line\"><span class=\"string\">gtid-mode=on</span></span><br><span class=\"line\"><span class=\"string\">enforce-gtid-consistency=true</span></span><br><span class=\"line\"><span class=\"string\">log-slave-updates=1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/systemd/system/mysqld3307.service&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=MySQL Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=man:mysqld(8)</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">User=mysql</span></span><br><span class=\"line\"><span class=\"string\">Group=mysql</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3307/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE = 5000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/systemd/system/mysqld3308.service&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=MySQL Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=man:mysqld(8)</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">User=mysql</span></span><br><span class=\"line\"><span class=\"string\">Group=mysql</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3308/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE = 5000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/systemd/system/mysqld3309.service&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=MySQL Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=man:mysqld(8)</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">User=mysql</span></span><br><span class=\"line\"><span class=\"string\">Group=mysql</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3309/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE = 5000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/etc/systemd/system/mysqld3310.service&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=MySQL Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=man:mysqld(8)</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">User=mysql</span></span><br><span class=\"line\"><span class=\"string\">Group=mysql</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3310/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE = 5000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改权限，启动多实例\"><a href=\"#修改权限，启动多实例\" class=\"headerlink\" title=\"修改权限，启动多实例\"></a>修改权限，启动多实例</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> -R mysql.mysql /data/*</span><br><span class=\"line\">systemctl start mysqld3307</span><br><span class=\"line\">systemctl start mysqld3308</span><br><span class=\"line\">systemctl start mysqld3309</span><br><span class=\"line\">systemctl start mysqld3310</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -S /data/3307/mysql.sock -e <span class=\"string\">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class=\"line\">mysql -S /data/3308/mysql.sock -e <span class=\"string\">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class=\"line\">mysql -S /data/3309/mysql.sock -e <span class=\"string\">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class=\"line\">mysql -S /data/3310/mysql.sock -e <span class=\"string\">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps -ef | grep mysqld</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节点主从规划\"><a href=\"#节点主从规划\" class=\"headerlink\" title=\"节点主从规划\"></a>节点主从规划</h2><p><strong>箭头指向谁是主库：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    10.0.0.51:3307    &lt;-----&gt;  10.0.0.52:3307</span><br><span class=\"line\">    10.0.0.51:3309    ------&gt;  10.0.0.51:3307</span><br><span class=\"line\">    10.0.0.52:3309    ------&gt;  10.0.0.52:3307</span><br><span class=\"line\"></span><br><span class=\"line\">    10.0.0.52:3308    &lt;-----&gt;  10.0.0.51:3308</span><br><span class=\"line\">    10.0.0.52:3310    ------&gt;  10.0.0.52:3308</span><br><span class=\"line\">    10.0.0.51:3310    ------&gt;  10.0.0.51:3308</span><br><span class=\"line\">2.6 分片规划</span><br><span class=\"line\">shard1：</span><br><span class=\"line\">    Master：10.0.0.51:3307</span><br><span class=\"line\">    slave1：10.0.0.51:3309</span><br><span class=\"line\">    Standby Master：10.0.0.52:3307</span><br><span class=\"line\">    slave2：10.0.0.52:3309</span><br><span class=\"line\">shard2：</span><br><span class=\"line\">    Master：10.0.0.52:3308</span><br><span class=\"line\">    slave1：10.0.0.52:3310</span><br><span class=\"line\">    Standby Master：10.0.0.51:3308</span><br><span class=\"line\">    slave2：10.0.0.51:3310</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开始配置\"><a href=\"#开始配置\" class=\"headerlink\" title=\"开始配置\"></a>开始配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">shard1</span><br><span class=\"line\">10.0.0.51:3307    &lt;-----&gt;  10.0.0.52:3307</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#db02</span></span><br><span class=\"line\">mysql  -S /data/3307/mysql.sock -e <span class=\"string\">&quot;grant replication slave on *.* to repl@&#x27;10.0.0.%&#x27; identified by &#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3307/mysql.sock -e <span class=\"string\">&quot;grant all  on *.* to root@&#x27;10.0.0.%&#x27; identified by &#x27;123&#x27;  with grant option;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mysql  -S /data/3307/mysql.sock -e &quot;select host,user,authentication_string from mysql.user;&quot;</span></span><br><span class=\"line\">+-----------+---------------+-------------------------------------------+</span><br><span class=\"line\">| host      | user          | authentication_string                     |</span><br><span class=\"line\">+-----------+---------------+-------------------------------------------+</span><br><span class=\"line\">| 10.0.0.%  | repl          | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |</span><br><span class=\"line\">| 10.0.0.%  | root          | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#db01</span></span><br><span class=\"line\">mysql  -S /data/3307/mysql.sock -e <span class=\"string\">&quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.52&#x27;, MASTER_PORT=3307, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3307/mysql.sock -e <span class=\"string\">&quot;start slave;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3307/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span> | grep Running:</span><br><span class=\"line\"></span><br><span class=\"line\">ps：构建了 从库db01，主库db02的主从关系</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#db02</span></span><br><span class=\"line\">mysql  -S /data/3307/mysql.sock -e <span class=\"string\">&quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.51&#x27;, MASTER_PORT=3307, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3307/mysql.sock -e <span class=\"string\">&quot;start slave;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3307/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span>  | grep Running:</span><br><span class=\"line\"></span><br><span class=\"line\">ps：构建了 从库db02，主库db01的主从关系</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">10.0.0.51:3309    ------&gt;  10.0.0.51:3307</span><br><span class=\"line\"><span class=\"comment\">#db01</span></span><br><span class=\"line\">mysql  -S /data/3309/mysql.sock  -e <span class=\"string\">&quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.51&#x27;, MASTER_PORT=3307, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3309/mysql.sock  -e <span class=\"string\">&quot;start slave;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3309/mysql.sock  -e <span class=\"string\">&quot;show slave status\\G&quot;</span>  | grep Running:</span><br><span class=\"line\"></span><br><span class=\"line\">10.0.0.52:3309    ------&gt;  10.0.0.52:3307</span><br><span class=\"line\">db02</span><br><span class=\"line\">mysql  -S /data/3309/mysql.sock -e <span class=\"string\">&quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.52&#x27;, MASTER_PORT=3307, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3309/mysql.sock -e <span class=\"string\">&quot;start slave;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3309/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span>  | grep Running:</span><br><span class=\"line\"></span><br><span class=\"line\">shard2</span><br><span class=\"line\">10.0.0.52:3308    &lt;-----&gt;  10.0.0.51:3308</span><br><span class=\"line\">db01</span><br><span class=\"line\">mysql  -S /data/3308/mysql.sock -e <span class=\"string\">&quot;grant replication slave on *.* to repl@&#x27;10.0.0.%&#x27; identified by &#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3308/mysql.sock -e <span class=\"string\">&quot;grant all  on *.* to root@&#x27;10.0.0.%&#x27; identified by &#x27;123&#x27;  with grant option;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db02</span><br><span class=\"line\">mysql  -S /data/3308/mysql.sock -e <span class=\"string\">&quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.51&#x27;, MASTER_PORT=3308, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3308/mysql.sock -e <span class=\"string\">&quot;start slave;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3308/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span>  | grep Running:</span><br><span class=\"line\"></span><br><span class=\"line\">db01</span><br><span class=\"line\">mysql  -S /data/3308/mysql.sock -e <span class=\"string\">&quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.52&#x27;, MASTER_PORT=3308, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3308/mysql.sock -e <span class=\"string\">&quot;start slave;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3308/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span>  | grep Running:</span><br><span class=\"line\"></span><br><span class=\"line\">10.0.0.52:3310    -----&gt;       10.0.0.52:3308</span><br><span class=\"line\"></span><br><span class=\"line\">db02</span><br><span class=\"line\">mysql  -S /data/3310/mysql.sock -e <span class=\"string\">&quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.52&#x27;, MASTER_PORT=3308, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3310/mysql.sock -e <span class=\"string\">&quot;start slave;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3310/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span>  | grep Running:</span><br><span class=\"line\"></span><br><span class=\"line\">10.0.0.51:3310  -----&gt;     10.0.0.51:3308</span><br><span class=\"line\"></span><br><span class=\"line\">db01</span><br><span class=\"line\">mysql  -S /data/3310/mysql.sock -e <span class=\"string\">&quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.51&#x27;, MASTER_PORT=3308, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3310/mysql.sock -e <span class=\"string\">&quot;start slave;&quot;</span></span><br><span class=\"line\">mysql  -S /data/3310/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span>  | grep Running:</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">检测主从状态</span><br><span class=\"line\">mysql -S /data/3307/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span>|grep Running:</span><br><span class=\"line\">mysql -S /data/3308/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span>|grep Running:</span><br><span class=\"line\">mysql -S /data/3309/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span>|grep Running:</span><br><span class=\"line\">mysql -S /data/3310/mysql.sock -e <span class=\"string\">&quot;show slave status\\G&quot;</span>|grep Running:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mycat介绍\"><a href=\"#Mycat介绍\" class=\"headerlink\" title=\"Mycat介绍\"></a>Mycat介绍</h2><ul>\n<li>Mycat主要是做数据分布式存储，也有Atlas普通版的读写分离功能，其最重要还是分布式</li>\n<li>Mycat是java开发的</li>\n</ul>\n<blockquote>\n<p>mycat管理端口：9066<br>mycat数据端口：8066</p>\n</blockquote>\n<h3 id=\"安装Mycat\"><a href=\"#安装Mycat\" class=\"headerlink\" title=\"安装Mycat\"></a>安装Mycat</h3><p>mycat下载地址：<a href=\"http://dl.mycat.org.cn/1.6.7.3/20190828135747/Mycat-server-1.6.7.3-release-20190828135747-linux.tar.gz\">http://dl.mycat.org.cn/1.6.7.3/20190828135747/Mycat-server-1.6.7.3-release-20190828135747-linux.tar.gz</a><br>jdk下载地址：<a href=\"https://download.oracle.com/otn/java/jdk/8u60-b27/jdk-8u60-linux-x64.tar.gz\">https://download.oracle.com/otn/java/jdk/8u60-b27/jdk-8u60-linux-x64.tar.gz</a></p>\n<h3 id=\"安装java\"><a href=\"#安装java\" class=\"headerlink\" title=\"安装java\"></a>安装java</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]# tar -xf  jdk-8u60-linux-x64.tar.gz -C /application/</span><br><span class=\"line\">[root@db02 ~]# ln -s /application/jdk1.8.0_60/ /application/jdk</span><br><span class=\"line\">[root@db02 ~]# ll /application/</span><br><span class=\"line\">lrwxrwxrwx 1 root root  25 5月   4 20:20 jdk -&gt; /application/jdk1.8.0_60/</span><br><span class=\"line\">drwxr-xr-x 8   10  143 255 8月   5 2015 jdk1.8.0_60</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装mycat\"><a href=\"#安装mycat\" class=\"headerlink\" title=\"安装mycat\"></a>安装mycat</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># tar -xf Mycat-server-1.6.7.3-release-20190828135747-linux.tar.gz -C /application/</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># cd /application/</span></span><br><span class=\"line\">[root@db02 /application]<span class=\"comment\"># ls</span></span><br><span class=\"line\">jdk  jdk1.8.0_60  mycat  mysql  mysql-5.7.26-linux-glibc2.12-x86_64</span><br><span class=\"line\">[root@db02 /application]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root  25 5月   4 20:20 jdk -&gt; /application/jdk1.8.0_60/</span><br><span class=\"line\">drwxr-xr-x 8   10  143 255 8月   5 2015 jdk1.8.0_60</span><br><span class=\"line\">drwxr-xr-x 7 root root  85 5月   4 20:26 mycat</span><br><span class=\"line\">lrwxrwxrwx 1 root root  36 3月  18 02:19 mysql -&gt; mysql-5.7.26-linux-glibc2.12-x86_64/</span><br><span class=\"line\">drwxr-xr-x 9 root root 129 3月  18 02:13 mysql-5.7.26-linux-glibc2.12-x86_64</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">日志文件说明：</span><br><span class=\"line\"><span class=\"comment\">#&#x27;/usr/local/mycat/logs目录</span></span><br><span class=\"line\">mycat.log     Mycat工作日志</span><br><span class=\"line\">mycat.pid     pid文件</span><br><span class=\"line\">switch.log</span><br><span class=\"line\">wrapper.log   Mycat启动相关日志</span><br><span class=\"line\">配置文件说明：</span><br><span class=\"line\"><span class=\"comment\">#&#x27;/usr/local/mycat/conf目录</span></span><br><span class=\"line\">schema.xml    主配置文件（读写分离、高可用、分表、节点控制）</span><br><span class=\"line\">server.xml    mycat软件本身相关的配置</span><br><span class=\"line\">rule.xml      分片规则配置文件（分片规则列表、使用方法）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加jdk和mycat到环境变量\"><a href=\"#添加jdk和mycat到环境变量\" class=\"headerlink\" title=\"添加jdk和mycat到环境变量\"></a>添加jdk和mycat到环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#man bash</span></span><br><span class=\"line\"><span class=\"comment\">#PATH 存放命令的路径</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt;/etc/bashrc &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/application/jdk </span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$JAVA_HOME</span>/jre/bin:<span class=\"variable\">$PATH</span> </span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib:<span class=\"variable\">$JAVA_HOME</span>/jre/lib:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/application/mycat/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">. /etc/bashrc </span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># java -version</span></span><br><span class=\"line\">java version <span class=\"string\">&quot;1.8.0_60&quot;</span></span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</span><br><span class=\"line\"></span><br><span class=\"line\">安装javajdk也可直接执行</span><br><span class=\"line\">yum install java-openjdk -y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动mycat\"><a href=\"#启动mycat\" class=\"headerlink\" title=\"启动mycat\"></a>启动mycat</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mycat start</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># netstat -lntup | grep 8066</span></span><br><span class=\"line\">tcp6       0      0 :::8066                 :::*                    LISTEN      2644/java</span><br></pre></td></tr></table></figure>\n<p>进入Mycat程序：（默认用户root、密码123456）<br><code>mysql -uroot -p123456 -h127.0.0.1 -P8066</code></p>\n<h3 id=\"日志文件说明：\"><a href=\"#日志文件说明：\" class=\"headerlink\" title=\"日志文件说明：\"></a>日志文件说明：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/application/mycat/logs目录</span></span><br><span class=\"line\">mycat.log     Mycat工作日志</span><br><span class=\"line\">mycat.pid     pid文件</span><br><span class=\"line\">switch.log</span><br><span class=\"line\">wrapper.log   Mycat启动相关日志</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置文件说明：\"><a href=\"#配置文件说明：\" class=\"headerlink\" title=\"配置文件说明：\"></a>配置文件说明：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/application/mycat/conf目录</span></span><br><span class=\"line\">schema.xml    主配置文件（读写分离、高可用、分表、节点控制）</span><br><span class=\"line\">server.xml    mycat软件本身相关的配置</span><br><span class=\"line\">rule.xml      分片规则配置文件（分片规则列表、使用方法）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试数据准备\"><a href=\"#测试数据准备\" class=\"headerlink\" title=\"测试数据准备\"></a>测试数据准备</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db01:</span><br><span class=\"line\">mysql -S /data/3307/mysql.sock </span><br><span class=\"line\">grant all on *.* to root@<span class=\"string\">&#x27;10.0.0.%&#x27;</span> identified by <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">source</span> /root/world.sql</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -S /data/3308/mysql.sock </span><br><span class=\"line\">grant all on *.* to root@<span class=\"string\">&#x27;10.0.0.%&#x27;</span> identified by <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">source</span> /root/world.sql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"核心配置文件使用介绍\"><a href=\"#核心配置文件使用介绍\" class=\"headerlink\" title=\"核心配置文件使用介绍\"></a>核心配置文件使用介绍</h2><h3 id=\"schema-xml\"><a href=\"#schema-xml\" class=\"headerlink\" title=\"schema.xml\"></a>schema.xml</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># pwd</span></span><br><span class=\"line\">/application/mycat/conf</span><br><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># cat &gt;schema.xml &lt;&lt;&#x27;EOF&#x27;</span></span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mycat:schema SYSTEM <span class=\"string\">&quot;schema.dtd&quot;</span>&gt;  </span><br><span class=\"line\">&lt;mycat:schema xmlns:mycat=<span class=\"string\">&quot;http://io.mycat/&quot;</span>&gt;</span><br><span class=\"line\">&lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt; </span><br><span class=\"line\">&lt;/schema&gt;  </span><br><span class=\"line\">        &lt;dataNode name=<span class=\"string\">&quot;sh1&quot;</span> dataHost=<span class=\"string\">&quot;oldguo1&quot;</span> database= <span class=\"string\">&quot;world&quot;</span> /&gt;         </span><br><span class=\"line\">        &lt;dataHost name=<span class=\"string\">&quot;oldguo1&quot;</span> maxCon=<span class=\"string\">&quot;1000&quot;</span> minCon=<span class=\"string\">&quot;10&quot;</span> balance=<span class=\"string\">&quot;1&quot;</span>  writeType=<span class=\"string\">&quot;0&quot;</span> dbType=<span class=\"string\">&quot;mysql&quot;</span>  dbDriver=<span class=\"string\">&quot;native&quot;</span> switchType=<span class=\"string\">&quot;1&quot;</span>&gt;    </span><br><span class=\"line\">                &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;  </span><br><span class=\"line\">        &lt;writeHost host=<span class=\"string\">&quot;db1&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3307&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt; </span><br><span class=\"line\">                        &lt;readHost host=<span class=\"string\">&quot;db2&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3309&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt; </span><br><span class=\"line\">        &lt;/writeHost&gt; </span><br><span class=\"line\">        &lt;/dataHost&gt;  </span><br><span class=\"line\">&lt;/mycat:schema&gt;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.逻辑库定义</span><br><span class=\"line\">&lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt; </span><br><span class=\"line\">&lt;/schema&gt;  //mycat级别的逻辑对象                                 //对应的数据节点</span><br><span class=\"line\"></span><br><span class=\"line\">2.数据节点定义</span><br><span class=\"line\">        &lt;dataNode name=<span class=\"string\">&quot;sh1&quot;</span> dataHost=<span class=\"string\">&quot;oldguo1&quot;</span> database= <span class=\"string\">&quot;world&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">3.数据主机定义         </span><br><span class=\"line\">        &lt;dataHost name=<span class=\"string\">&quot;oldguo1&quot;</span> maxCon=<span class=\"string\">&quot;1000&quot;</span> minCon=<span class=\"string\">&quot;10&quot;</span> balance=<span class=\"string\">&quot;1&quot;</span>  writeType=<span class=\"string\">&quot;0&quot;</span> dbType=<span class=\"string\">&quot;mysql&quot;</span>  dbDriver=<span class=\"string\">&quot;native&quot;</span> switchType=<span class=\"string\">&quot;1&quot;</span>&gt;    </span><br><span class=\"line\">                &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;  </span><br><span class=\"line\">        &lt;writeHost host=<span class=\"string\">&quot;db1&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3307&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt; //写节点</span><br><span class=\"line\">                        &lt;readHost host=<span class=\"string\">&quot;db2&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3309&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt; //读节点</span><br><span class=\"line\">        &lt;/writeHost&gt; </span><br><span class=\"line\">        &lt;/dataHost&gt;  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现简单的读写分离\"><a href=\"#实现简单的读写分离\" class=\"headerlink\" title=\"实现简单的读写分离\"></a>实现简单的读写分离</h3><p><img src=\"/images/img-91.png\" alt=\"基础架构\"><br>定义完成后，使用上面的配置文件重启mycat。<br>涉及节点：机构图中左侧（10.0.0.51）红色节点【1主1从】</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">根据先前配置，此次读写分离的结果应当涉及到两个节点：</span><br><span class=\"line\">10.0.0.52:3307 /主节点 serverid=7 负责写入</span><br><span class=\"line\">10.0.0.52:3309 /从节点 serverid=9 负责读取</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -uroot -p123456 -h10.0.0.52 -P8066</span><br><span class=\"line\">mysql&gt; begin;select @@server_id;commit;  //模拟写</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|           7 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@server_id;  //模拟读</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|           9 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"读写分离-高可用实现：\"><a href=\"#读写分离-高可用实现：\" class=\"headerlink\" title=\"读写分离+高可用实现：\"></a>读写分离+高可用实现：</h3><p>涉及节点：<br>架构图中所有红色部分【2主2从】</p>\n<p>配置示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 /application/mycat/conf]<span class=\"comment\"># cat &gt;schema.xml &lt;&lt;&#x27;EOF&#x27;</span></span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;  </span><br><span class=\"line\">&lt;!DOCTYPE mycat:schema SYSTEM <span class=\"string\">&quot;schema.dtd&quot;</span>&gt;  </span><br><span class=\"line\">&lt;mycat:schema xmlns:mycat=<span class=\"string\">&quot;http://io.mycat/&quot;</span>&gt;</span><br><span class=\"line\">&lt;schema name=<span class=\"string\">&quot;TESTDB&quot;</span> checkSQLschema=<span class=\"string\">&quot;false&quot;</span> sqlMaxLimit=<span class=\"string\">&quot;100&quot;</span> dataNode=<span class=\"string\">&quot;sh1&quot;</span>&gt; </span><br><span class=\"line\">&lt;/schema&gt;  </span><br><span class=\"line\">    &lt;dataNode name=<span class=\"string\">&quot;sh1&quot;</span> dataHost=<span class=\"string\">&quot;oldguo1&quot;</span> database= <span class=\"string\">&quot;world&quot;</span> /&gt;  </span><br><span class=\"line\">    &lt;dataHost name=<span class=\"string\">&quot;oldguo1&quot;</span> maxCon=<span class=\"string\">&quot;1000&quot;</span> minCon=<span class=\"string\">&quot;10&quot;</span> balance=<span class=\"string\">&quot;1&quot;</span>  writeType=<span class=\"string\">&quot;0&quot;</span> dbType=<span class=\"string\">&quot;mysql&quot;</span>  dbDriver=<span class=\"string\">&quot;native&quot;</span> switchType=<span class=\"string\">&quot;1&quot;</span>&gt; </span><br><span class=\"line\">        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; </span><br><span class=\"line\">    &lt;writeHost host=<span class=\"string\">&quot;db1&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3307&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt; </span><br><span class=\"line\">            &lt;readHost host=<span class=\"string\">&quot;db2&quot;</span> url=<span class=\"string\">&quot;10.0.0.51:3309&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt; </span><br><span class=\"line\">    &lt;/writeHost&gt; </span><br><span class=\"line\">    &lt;writeHost host=<span class=\"string\">&quot;db3&quot;</span> url=<span class=\"string\">&quot;10.0.0.52:3307&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span>&gt; </span><br><span class=\"line\">            &lt;readHost host=<span class=\"string\">&quot;db4&quot;</span> url=<span class=\"string\">&quot;10.0.0.52:3309&quot;</span> user=<span class=\"string\">&quot;root&quot;</span> password=<span class=\"string\">&quot;123&quot;</span> /&gt; </span><br><span class=\"line\">    &lt;/writeHost&gt;    </span><br><span class=\"line\">    &lt;/dataHost&gt;  </span><br><span class=\"line\">&lt;/mycat:schema&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">mycat restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"工作过程：\"><a href=\"#工作过程：\" class=\"headerlink\" title=\"工作过程：\"></a>工作过程：</h3><ul>\n<li>1.数据主机定义下，添加了4个真实的物理节点。</li>\n<li>2.正常情况下的读写状态为<ul>\n<li>2.1写操作，由主库db1（10.0.0.51:3307）承担，处于Real状态</li>\n<li>2.2读操作，由db2、db3、db4做负载分担，默认为轮询</li>\n<li>2.2其中db3同时作为备份主库处于Standby状态。当db1作为主库宕机时，立刻进行接管</li>\n</ul>\n</li>\n<li>3.主库db1宕机情况下的读写状态为<ul>\n<li>3.1 db3直接成为新的主库，承担写操作</li>\n<li>3.2 主库db1宕机时，其下面挂的从库db2也被置为不可用状态。</li>\n<li>3.3 读操作，只被分配给db4</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">根据先前配置，此次读写分离的结果应当涉及到两个节点：</span><br><span class=\"line\">10.0.0.52:3307 /主节点 serverid=7 负责写入</span><br><span class=\"line\">10.0.0.52:3309 /从节点 serverid=9 负责读取</span><br><span class=\"line\">10.0.0.52:3307 /主节点 serverid=17 负责读取，宕机时接替主库</span><br><span class=\"line\">10.0.0.52:3309 /从节点 serverid=19 负责读取</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -uroot -p123456 -h10.0.0.52 -P8066</span><br><span class=\"line\">模拟读：</span><br><span class=\"line\">mysql&gt; select @@server_id;</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|           9 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.04 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@server_id;</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          19 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@server_id;</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          17 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">模拟写：</span><br><span class=\"line\">mysql&gt; begin;select @@server_id;commit;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|           7 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">模拟主库db01上的3307宕机：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl stop mysqld3307</span></span><br><span class=\"line\"></span><br><span class=\"line\">再次连接测试：</span><br><span class=\"line\">读操作：</span><br><span class=\"line\">mysql&gt; select @@server_id;</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          19 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">写操作：</span><br><span class=\"line\">mysql&gt; begin;select @@server_id;commit;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@server_id |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|          17 |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">//由于serverid为9的从库是挂在了7上，所以当7宕机时。9也一并被置为了不可用状态</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置中的属性介绍\"><a href=\"#配置中的属性介绍\" class=\"headerlink\" title=\"配置中的属性介绍:\"></a>配置中的属性介绍:</h2><h3 id=\"balance属性\"><a href=\"#balance属性\" class=\"headerlink\" title=\"balance属性\"></a><code>balance</code>属性</h3><p>负载均衡类型，目前的取值有3种： </p>\n<ol>\n<li><code>balance=&quot;0&quot;</code>, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost上。 [其他三个节点就白瞎了]</li>\n<li><code>balance=&quot;1&quot;</code>，全部的readHost与standby writeHost参与select语句的负载均衡，简单的说，<br>当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与 M2互为主备)，正常情况下，M2,S1,S2都参与select语句的负载均衡。 </li>\n<li>balance=”2”，所有读操作都随机的在writeHost、readhost上分发。即写节点也要负责一些读操作。</li>\n</ol>\n<h3 id=\"writeType属性\"><a href=\"#writeType属性\" class=\"headerlink\" title=\"writeType属性\"></a>writeType属性</h3><p>负载均衡类型，目前的取值有2种： </p>\n<ol>\n<li><code>writeType=&quot;0&quot;</code>, 所有写操作发送到配置的第一个writeHost，<br>第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为主，切换记录在配置文件中:dnindex.properties . </li>\n<li><code>writeType=&quot;1&quot;</code>，所有写操作都随机的发送到配置的writeHost，但不推荐使用(mycat处理分布式事务效果不理想。锁相关问题)</li>\n</ol>\n<h3 id=\"switchType属性\"><a href=\"#switchType属性\" class=\"headerlink\" title=\"switchType属性\"></a>switchType属性</h3><ul>\n<li><code>-1</code> 表示不自动接管 </li>\n<li><code>1</code> 默认值，自动接管</li>\n<li><code>2</code> 基于MySQL主从同步的状态决定是否切换 ，心跳语句为 show slave status </li>\n</ul>\n<h3 id=\"datahost其他配置\"><a href=\"#datahost其他配置\" class=\"headerlink\" title=\"datahost其他配置\"></a>datahost其他配置</h3><p><code>&lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot;  dbDriver=&quot;native&quot; switchType=&quot;1&quot;&gt; </code></p>\n<p><code>maxCon=&quot;1000&quot;</code>：最大的并发连接数<br><code>minCon=&quot;10&quot; </code>：mycat在启动之后，会在后端节点上自动开启的连接线程<br><code>tempReadHostAvailable=&quot;1&quot;</code>：临时允许已经宕机的主库下面的从库进行读操作。没必要，原因：主库宕机从库数据已经落后了。让从库继续读没意义<br>这个一主一从时（1个writehost，1个readhost时），可以开启这个参数，如果2个writehost，2个readhost时<br><code>&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</code>  监测心跳</p>\n","categories":["DBA"],"tags":["主从复制","MySQL","读写分离","高可用","分布式","MyCAT"]},{"title":"MySQL-主从复制基础&故障分析","url":"/forward/69e1266e.html","content":"<h1 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>依赖于二进制日志的，“实时”备份的一个多节点架构 </p>\n<h2 id=\"主从复制的前提（搭建主从复制）\"><a href=\"#主从复制的前提（搭建主从复制）\" class=\"headerlink\" title=\"主从复制的前提（搭建主从复制）\"></a>主从复制的前提（搭建主从复制）</h2><ul>\n<li>2.1至少两个实例</li>\n<li>2.2不同的server_id</li>\n<li>2.3主库开启二进制日志</li>\n<li>2.4主库需要授权一个专用复制用户</li>\n<li>2.5主库数据备份（插班生补课）</li>\n<li>2.6开启专用复制线程</li>\n</ul>\n<h2 id=\"主从复制环境准备\"><a href=\"#主从复制环境准备\" class=\"headerlink\" title=\"主从复制环境准备\"></a>主从复制环境准备</h2><h3 id=\"准备多实例\"><a href=\"#准备多实例\" class=\"headerlink\" title=\"准备多实例\"></a>准备多实例</h3><p>略[参见：<a href=\"/forward/4f3d60c1.html\">链接</a>]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mv /etc/my.cnf&#123;,.bak&#125;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /etc/systemd/system/mysqld3309.service </span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=MySQL Server</span><br><span class=\"line\">Documentation=man:mysqld(8)</span><br><span class=\"line\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">After=syslog.target</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=mysql</span><br><span class=\"line\">Group=mysql</span><br><span class=\"line\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3309/my.cnf</span><br><span class=\"line\">LimitNOFILE = 5000</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /etc/systemd/system/mysqld3308.service </span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=MySQL Server</span><br><span class=\"line\">Documentation=man:mysqld(8)</span><br><span class=\"line\">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">After=syslog.target</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=mysql</span><br><span class=\"line\">Group=mysql</span><br><span class=\"line\">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3308/my.cnf</span><br><span class=\"line\">LimitNOFILE = 5000</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查server-id\"><a href=\"#检查server-id\" class=\"headerlink\" title=\"检查server-id\"></a>检查server-id</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -ef m|grep mysqld</span></span><br><span class=\"line\">m //在进程后显示线程</span><br><span class=\"line\">mysql     4098     1  0 10:15 ?        -      0:06 /application/mysql/bin/mysqld --defaults-file=/data/3307/my.cnf</span><br><span class=\"line\">mysql     5152     1  0 15:22 ?        -      0:00 /application/mysql/bin/mysqld --defaults-file=/data/3308/my.cnf</span><br><span class=\"line\">mysql     5188     1  0 15:22 ?        -      0:00 /application/mysql/bin/mysqld --defaults-file=/data/3309/my.cnf</span><br><span class=\"line\">root      5238  5026  0 15:28 pts/0    -      0:00 grep --color=auto mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -S /data/3307/mysql.sock -e <span class=\"string\">&quot;select @@server_id&quot;</span>。//主库</span><br><span class=\"line\">mysql -S /data/3308/mysql.sock -e <span class=\"string\">&quot;select @@server_id&quot;</span></span><br><span class=\"line\">mysql -S /data/3309/mysql.sock -e <span class=\"string\">&quot;select @@server_id&quot;</span></span><br><span class=\"line\">要求：从库server-id 一般比主库的大</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/img-82.png\" alt=\"server-id\"></p>\n<h3 id=\"检查主库二进制日志是否开启\"><a href=\"#检查主库二进制日志是否开启\" class=\"headerlink\" title=\"检查主库二进制日志是否开启\"></a>检查主库二进制日志是否开启</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3307/mysql.sock -e &quot;show variables like &#x27;%log_bin%&#x27;&quot; -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">+---------------------------------+----------------------------+</span><br><span class=\"line\">| Variable_name                   | Value                      |</span><br><span class=\"line\">+---------------------------------+----------------------------+</span><br><span class=\"line\">| log_bin                         | ON                         |</span><br><span class=\"line\">| log_bin_basename                | /data/3307/mysql-bin       |</span><br><span class=\"line\">| log_bin_index                   | /data/3307/mysql-bin.index |</span><br><span class=\"line\">| log_bin_trust_function_creators | OFF                        |</span><br><span class=\"line\">| log_bin_use_v1_row_events       | OFF                        |</span><br><span class=\"line\">| sql_log_bin                     | ON                         |</span><br><span class=\"line\">+---------------------------------+----------------------------+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建授权复制用户\"><a href=\"#创建授权复制用户\" class=\"headerlink\" title=\"创建授权复制用户\"></a>创建授权复制用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3307/mysql.sock  -p. //主库</span></span><br><span class=\"line\">mysql&gt; grant replication slave on *.* to repl@<span class=\"string\">&#x27;10.0.2.%&#x27;</span> identified by <span class=\"string\">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进行主库数据备份（生产环境下）\"><a href=\"#进行主库数据备份（生产环境下）\" class=\"headerlink\" title=\"进行主库数据备份（生产环境下）\"></a>进行主库数据备份（生产环境下）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqldump -uroot -p123 -S /data/3307/mysql.sock -A -R -E -F --triggers --master-data=2  --max-allowed-packet=128M --single-transaction |gzip &gt;/tmp/alL_$(date +%F).sql.gz</span></span><br><span class=\"line\">mysqldump: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\">alL_2020-04-24.sql.gz</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># gzip -d /tmp/alL_2020-04-24.sql.gz </span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># head /tmp/alL_2020-04-24.sql</span></span><br><span class=\"line\">-- MySQL dump 10.13  Distrib 5.7.26, <span class=\"keyword\">for</span> linux-glibc2.12 (x86_64)</span><br><span class=\"line\">--</span><br><span class=\"line\">-- Host: localhost    Database: </span><br><span class=\"line\">-- ------------------------------------------------------</span><br><span class=\"line\">-- Server version       5.7.26-<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;</span><br><span class=\"line\">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;</span><br><span class=\"line\">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;</span><br><span class=\"line\">/*!40101 SET NAMES utf8 */;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"恢复数据到从库（3308）\"><a href=\"#恢复数据到从库（3308）\" class=\"headerlink\" title=\"恢复数据到从库（3308）\"></a>恢复数据到从库（3308）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> sql_log_bin=0;</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /tmp/alL_2020-04-24.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"告知从库复制的信息\"><a href=\"#告知从库复制的信息\" class=\"headerlink\" title=\"告知从库复制的信息\"></a>告知从库复制的信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /tmp/alL_2020-04-24.sql</span></span><br><span class=\"line\">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class=\"string\">&#x27;mysql-bin.000031&#x27;</span>, MASTER_LOG_POS=314;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">help</span> change master to</span><br><span class=\"line\">CHANGE MASTER TO</span><br><span class=\"line\">  MASTER_HOST=<span class=\"string\">&#x27;10.0.2.4&#x27;</span>,  <span class=\"comment\">#主库的ip地址</span></span><br><span class=\"line\">  MASTER_USER=<span class=\"string\">&#x27;repl&#x27;</span>,  <span class=\"comment\">#用户名</span></span><br><span class=\"line\">  MASTER_PASSWORD=<span class=\"string\">&#x27;123&#x27;</span>,  <span class=\"comment\">#密码</span></span><br><span class=\"line\">  MASTER_PORT=3307,  <span class=\"comment\">#主库端口</span></span><br><span class=\"line\">  MASTER_LOG_FILE=<span class=\"string\">&#x27;mysql-bin.000031&#x27;</span>,  <span class=\"comment\">#需要追加的binlog日志</span></span><br><span class=\"line\">  MASTER_LOG_POS=314, <span class=\"comment\">#binlog起点，查看全备中的终点</span></span><br><span class=\"line\">  MASTER_CONNECT_RETRY=10;  <span class=\"comment\">#在主服务器宕机或连接丢失的情况下，从服务器线程重新尝试连接主服务器之前睡眠的秒数。如果主服务器.info文件中的值可以读取则优先使用。如果未设置， 默认值为60。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"如果-change-master-to-信息输入错误，咋办？\"><a href=\"#如果-change-master-to-信息输入错误，咋办？\" class=\"headerlink\" title=\"如果 change master to 信息输入错误，咋办？\"></a>如果 change master to 信息输入错误，咋办？</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; stop slave;  //停止主从</span><br><span class=\"line\">mysql&gt; reset slave all;   //清空CHANGE MASTER TO 信息</span><br><span class=\"line\">CHANGE MASTER TO</span><br><span class=\"line\">  MASTER_HOST=<span class=\"string\">&#x27;10.0.0.51&#x27;</span>,</span><br><span class=\"line\">  MASTER_USER=<span class=\"string\">&#x27;repl&#x27;</span>,</span><br><span class=\"line\">  MASTER_PASSWORD=<span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">  MASTER_PORT=3307,</span><br><span class=\"line\">  MASTER_LOG_FILE=<span class=\"string\">&#x27;mysql-bin.000001&#x27;</span>,</span><br><span class=\"line\">  MASTER_LOG_POS=444,</span><br><span class=\"line\">  MASTER_CONNECT_RETRY=10;</span><br><span class=\"line\">mysql&gt; start slave;  //重启线程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动复制线程\"><a href=\"#启动复制线程\" class=\"headerlink\" title=\"启动复制线程\"></a>启动复制线程</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; start slave;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看主从状态【针对从库】\"><a href=\"#查看主从状态【针对从库】\" class=\"headerlink\" title=\"查看主从状态【针对从库】\"></a>查看主从状态【针对从库】</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\">             Slave_IO_Running: No  //失败</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主从复制工作过程\"><a href=\"#主从复制工作过程\" class=\"headerlink\" title=\"主从复制工作过程\"></a>主从复制工作过程</h2><p><img src=\"/images/img-83.png\" alt=\"主从复制\"></p>\n<h3 id=\"名词\"><a href=\"#名词\" class=\"headerlink\" title=\"名词\"></a>名词</h3><h4 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h4><ul>\n<li>主库：binlog</li>\n<li>从库：<ul>\n<li>relay-log  中继日志</li>\n<li>master.info  主库信息文件</li>\n<li>relay-log.info    中继日志应用信息</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><ul>\n<li>主库：binlog_dump_thread 二进制日志投递线程 <code>mysql -S /data/3307/mysql.sock -e &quot;show processlist&quot;</code></li>\n<li>从库：<ul>\n<li>IO_Thread：从库IO线程【请求和接收binlog】</li>\n<li>SQL_Thread：从库的SQL线程【回放日志】</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>（1）从库执行<code>change master to</code> 语句，会将主库信息记录到<code>master.info</code>中</p>\n<ul>\n<li>[存放主从接头暗号，和binlog信息等]</li>\n</ul>\n<p>（2）从库执行<code>stat slave</code>语句，会立即派生IO_T和SQL_T，两个线程</p>\n<ul>\n<li>[分配两位特工代号为IO、SQL]</li>\n</ul>\n<p>（3）<code>IO_T</code>读取<code>master.info</code>文件，获取到主库信息</p>\n<ul>\n<li>[从库 代号IO的特工拿到接头暗号]</li>\n</ul>\n<p>（4）<code>IO_T</code>连接主库，主库验证没问题后会立即分配一个<code>DUMP_T</code>，进行交互</p>\n<ul>\n<li>[主库 安插一个间谍代号DUMP，负责传递情报（binlog）]</li>\n</ul>\n<p>（5）<code>IO_T</code> 根据<code>master.info</code> <code>binlog</code>信息，向<code>DUMP_T</code>请求最新的<code>binlog</code></p>\n<ul>\n<li>[特工IO根据接头暗号成功联络上间谍DUMP，以获取最新的情报（binlog）]</li>\n</ul>\n<p>（6）主库<code>DUMP_T</code>,经过查询，如果发现有新的，截取并反回给从库<code>IO_T</code></p>\n<ul>\n<li>[间谍DUMP，利用职务便利查看主库是否存在更新操作，如果有则将最新的binlog投递给IO]</li>\n</ul>\n<p>（7）从库<code>IO_T</code>会收到<code>binlog</code>，存储在<code>TCP/IP</code>缓存中,在网络底层返回<code>ACK</code></p>\n<ul>\n<li>[特工IO拿到情报后，未将情报立即整理入库（尚未落地到磁盘），回复ACK确认，到这里间谍DUMP工作完成。]</li>\n</ul>\n<p>（8）从库<code>IO_T</code>会更新<code>master.info</code> ,重置<code>binlog</code>位置点信息</p>\n<ul>\n<li>[特工IO根据情报末尾的编号（position）等信息，更新binlog的位置点信息。以便对下次传递情报时进行位置点进行确认]</li>\n</ul>\n<p>（9）从库<code>IO_T</code>会将<code>binlog</code>，写入到<code>relay-log</code>中</p>\n<ul>\n<li>[情报入库工作完成（落地到磁盘）]</li>\n</ul>\n<p>（10）从库<code>SQL_T</code>读取<code>Relay-log.info</code> 文件，获取上次执行过的位置点</p>\n<ul>\n<li>[特工SQL，负责情报分析和整理，对特工IO整理好并已经入库的binlog进行分析。并且对新的binlog进行执行]</li>\n</ul>\n<p>（11）<code>SQL_T</code>按照旧的位置点往下执行<code>relaylog</code>日志</p>\n<ul>\n<li>[从上一次的位置点开始，往下执行binlog]</li>\n</ul>\n<p>（12）<code>SQL_T</code>执行完成后，重新更新<code>relay-log.info</code></p>\n<ul>\n<li>[新的binlog执行完成后，将位置点进行更新，以便于下次执行新的binlog。到这里一次主从复制的过程就已经完成]</li>\n</ul>\n<p>（13）<code>relaylog</code>定期自动清理的功能。</p>\n<p><strong>细节</strong>：<br>主库发生了信息的修改，更新二进制日志完成后，会发送一个“信号”给Dump_T,Dump_T通知给IO_T线程</p>\n<p><img src=\"/images/img-84.png\" alt=\"主从复制\"></p>\n<h2 id=\"主从监控\"><a href=\"#主从监控\" class=\"headerlink\" title=\"主从监控\"></a>主从监控</h2><h3 id=\"主库相关参数\"><a href=\"#主库相关参数\" class=\"headerlink\" title=\"主库相关参数\"></a>主库相关参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show processlist; </span><br><span class=\"line\">+----+------+------------+------+-------------+------+---------------------------------------------------------------+------------------+</span><br><span class=\"line\">| Id | User | Host       | db   | Command     | Time | State                                                         | Info             |</span><br><span class=\"line\">+----+------+------------+------+-------------+------+---------------------------------------------------------------+------------------+</span><br><span class=\"line\">| 18 | repl | db01:16526 | NULL | Binlog Dump |  343 | Master has sent all binlog to slave; waiting <span class=\"keyword\">for</span> more updates | NULL             |</span><br><span class=\"line\">正常状态下：                        投递线程              主服务器已将所有binlog发送到从服务器；等待更多更新</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从库相关参数\"><a href=\"#从库相关参数\" class=\"headerlink\" title=\"从库相关参数\"></a>从库相关参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G   </span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">//master.info</span><br><span class=\"line\">lave_IO_State: </span><br><span class=\"line\">Master_Host: 10.0.2.4 //主库ip</span><br><span class=\"line\">Master_User: repl //复制的用户</span><br><span class=\"line\">Master_Port: 3307 //主库端口</span><br><span class=\"line\">Connect_Retry: 10  //断联之后重试的次数</span><br><span class=\"line\">Master_Log_File: mysql-bin.000031。//已经获取到的binlog的文件名</span><br><span class=\"line\">Read_Master_Log_Pos: 314 //已经获取到的binlog的位置号</span><br><span class=\"line\"></span><br><span class=\"line\">//relay-log.info</span><br><span class=\"line\">Relay_Log_File: db01-relay-bin.000001 </span><br><span class=\"line\">Relay_Log_Pos: 4</span><br><span class=\"line\"></span><br><span class=\"line\">//从库线程状态</span><br><span class=\"line\">Slave_IO_Running: No</span><br><span class=\"line\">Slave_SQL_Running: Yes</span><br><span class=\"line\"></span><br><span class=\"line\">//过滤复制</span><br><span class=\"line\">Replicate_Do_DB: </span><br><span class=\"line\">Replicate_Ignore_DB: </span><br><span class=\"line\">Replicate_Do_Table: </span><br><span class=\"line\">Replicate_Ignore_Table: </span><br><span class=\"line\">Replicate_Wild_Do_Table: </span><br><span class=\"line\">Replicate_Wild_Ignore_Table:</span><br><span class=\"line\"></span><br><span class=\"line\">//从库延时主库的时间</span><br><span class=\"line\">Seconds_Behind_Master: NULL  从库延时主库的时间/s</span><br><span class=\"line\"></span><br><span class=\"line\">//从库线程报错详细信息</span><br><span class=\"line\">Last_IO_Errno: 1593  //io报错的错误号</span><br><span class=\"line\">Last_IO_Error: The replication receiver thread cannot start because the master has GTID_MODE = ON and this server has GTID_MODE = OFF.</span><br><span class=\"line\">//IO报错的具体信息</span><br><span class=\"line\"></span><br><span class=\"line\">ast_SQL_Errno: 0 //SQL报错的号码</span><br><span class=\"line\">Last_SQL_Error:  //SQL线程报错的具体原因</span><br><span class=\"line\"></span><br><span class=\"line\">延时从库：</span><br><span class=\"line\">SQL_Delay: 0 //延时从库设定的时间</span><br><span class=\"line\">SQL_Remaining_Delay: NULL  //延时操作的剩余时间</span><br><span class=\"line\"></span><br><span class=\"line\">GTID的复制信息：</span><br><span class=\"line\">Retrieved_Gtid_Set:   //接收到的GTID个数</span><br><span class=\"line\">Executed_Gtid_Set: 976ebf28-851a-11ea-8cc4-0800273e0795:1-3,  //执行的GTID的个数</span><br><span class=\"line\">bd623560-8476-11ea-ba73-0800273e0795:1-5,</span><br><span class=\"line\">cca7bb3f-687e-11ea-b0d9-0800273e0795:1-19,</span><br><span class=\"line\">dd4ce0c3-8463-11ea-9af9-0800273e0795:1-8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主从故障分析\"><a href=\"#主从故障分析\" class=\"headerlink\" title=\"主从故障分析\"></a>主从故障分析</h3><h3 id=\"（1）连接主库连接不上\"><a href=\"#（1）连接主库连接不上\" class=\"headerlink\" title=\"（1）连接主库连接不上\"></a>（1）连接主库连接不上</h3><h4 id=\"故障1-GTID相关\"><a href=\"#故障1-GTID相关\" class=\"headerlink\" title=\"故障1:GTID相关\"></a>故障1:GTID相关</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//从库线程状态</span><br><span class=\"line\">Slave_IO_Running: No</span><br><span class=\"line\">Slave_SQL_Running: Yes</span><br><span class=\"line\"></span><br><span class=\"line\">//从库线程报错详细信息</span><br><span class=\"line\">Last_IO_Errno: 1593  //io报错的号码</span><br><span class=\"line\">Last_IO_Error: The replication receiver thread cannot start because the master has GTID_MODE = ON and this server has GTID_MODE = OFF.</span><br><span class=\"line\">//IO报错的具体信息</span><br><span class=\"line\"></span><br><span class=\"line\">ast_SQL_Errno: 0 //SQL报错的号码</span><br><span class=\"line\">Last_SQL_Error:  //SQL线程报错的具体原因</span><br></pre></td></tr></table></figure>\n\n<p>原因：这里，我主库开启了<a href=\"https://cakepanit.com/forward/93ea067.html\">GTID</a>，从库未开启。所以从库的io连接进程报错<br>解决办法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># vim /data/3307/my.cnf </span></span><br><span class=\"line\"><span class=\"comment\">#gtid-mode=on</span></span><br><span class=\"line\"><span class=\"comment\">#enforce-gtid-consistency=true </span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart mysqld3307</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\"> Slave_IO_Running: Yes</span><br><span class=\"line\"> Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"故障2-CHANGE-MASTER信息错误\"><a href=\"#故障2-CHANGE-MASTER信息错误\" class=\"headerlink\" title=\"故障2:CHANGE MASTER信息错误\"></a>故障2:CHANGE MASTER信息错误</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Slave_IO_Running: Connecting； </span><br><span class=\"line\">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>\n<p>原因:</p>\n<ul>\n<li>网络不通</li>\n<li>防火墙</li>\n<li>IP 不对</li>\n<li>port 不对 </li>\n<li>用户，密码不对</li>\n<li>skip_name_resolve(旧版本)</li>\n<li>链接数上限</li>\n</ul>\n<p>处理思路：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.根据从库CHANGE MASTER TO信息手动连接主库，测试是否正常。</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -urepl -p123 -h 10.0.0.51 -P 3308   ---&gt;端口问题</span></span><br><span class=\"line\">mysql: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\">ERROR 1130 (HY000): Host <span class=\"string\">&#x27;db01&#x27;</span> is not allowed to connect to this MySQL server</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -urepl -p123 -h 10.0.0.52 -P 3307   ---&gt;ip问题</span></span><br><span class=\"line\">mysql: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\">ERROR 2003 (HY000): Can<span class=\"string\">&#x27;t connect to MySQL server on &#x27;</span>10.0.0.52<span class=\"string\">&#x27; (110)</span></span><br><span class=\"line\"><span class=\"string\">[root@db01 ~]# mysql -urepl -p1234 -h 10.0.0.51 -P 3307   ---&gt;密码问题</span></span><br><span class=\"line\"><span class=\"string\">mysql: [Warning] Using a password on the command line interface can be insecure.</span></span><br><span class=\"line\"><span class=\"string\">ERROR 1045 (28000): Access denied for user &#x27;</span>repl<span class=\"string\">&#x27;@&#x27;</span>db01<span class=\"string\">&#x27; (using password: YES)</span></span><br><span class=\"line\"><span class=\"string\">[root@db01 ~]# mysql -urepl1 -p123 -h 10.0.0.51 -P 3307   ---&gt;用户名问题</span></span><br><span class=\"line\"><span class=\"string\">mysql: [Warning] Using a password on the command line interface can be insecure.</span></span><br><span class=\"line\"><span class=\"string\">ERROR 1045 (28000): Access denied for user &#x27;</span>repl1<span class=\"string\">&#x27;@&#x27;</span>db01<span class=\"string\">&#x27; (using password: YES)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2.在从库下</span></span><br><span class=\"line\"><span class=\"string\">stop slave; //停掉主从</span></span><br><span class=\"line\"><span class=\"string\">reset slave all; //清空主库信息</span></span><br><span class=\"line\"><span class=\"string\">change master to //重新调整主库参数</span></span><br><span class=\"line\"><span class=\"string\">start slave;  //重新启动线程</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（2）请求新的binlog\"><a href=\"#（2）请求新的binlog\" class=\"headerlink\" title=\"（2）请求新的binlog\"></a>（2）请求新的binlog</h3><p>IO线程No的状态分析：</p>\n<h4 id=\"故障1：-日志名不对\"><a href=\"#故障1：-日志名不对\" class=\"headerlink\" title=\"故障1： 日志名不对\"></a>故障1： 日志名不对</h4><p>从库信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">Read_Master_Log_Pos: 444</span><br></pre></td></tr></table></figure>\n<p>对比之前全备份的位置号，和<code>binlog</code>日志名称。参见【3.7配置】</p>\n<h4 id=\"故障2：日志损坏，日志不连续\"><a href=\"#故障2：日志损坏，日志不连续\" class=\"headerlink\" title=\"故障2：日志损坏，日志不连续\"></a>故障2：日志损坏，日志不连续</h4><p>原因：主库与从库binlog不一致，导致从库IO线程无法请求新的binlog。导致主从失败<br>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">主库：</span><br><span class=\"line\">mysql&gt; show master status;  //查看正在使用的二进制日志</span><br><span class=\"line\">  mysql-bin.000031</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush logs;  //手动前滚</span><br><span class=\"line\">对比从库：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock -e &quot;show slave status \\G &quot; -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000032</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\"></span><br><span class=\"line\">此时，在主库中清空重置binlog日志：</span><br><span class=\"line\">mysql&gt; reset master;</span><br><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\"> mysql-bin.000001</span><br><span class=\"line\">mysql&gt; create database dd1;</span><br><span class=\"line\"></span><br><span class=\"line\">从库状态：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3308/mysql.sock -e &quot;show slave status \\G &quot; -p</span></span><br><span class=\"line\">             Slave_IO_Running: No  //断开</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">                Last_IO_Error: Got fatal error 1236 from master when reading data from binary <span class=\"built_in\">log</span>: <span class=\"string\">&#x27;could not find next log; the first event &#x27;</span>mysql-bin.000031<span class=\"string\">&#x27; at 314, the last event read from &#x27;</span>/data/3307/mysql-bin.000032<span class=\"string\">&#x27; at 314, the last byte read from &#x27;</span>/data/3307/mysql-bin.000032<span class=\"string\">&#x27; at 314.&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -S /data/3308/mysql.sock -p</span><br><span class=\"line\">stop slave;</span><br><span class=\"line\">reset slave all;</span><br><span class=\"line\">CHANGE MASTER TO</span><br><span class=\"line\">  MASTER_HOST=<span class=\"string\">&#x27;10.0.2.4&#x27;</span>,</span><br><span class=\"line\">  MASTER_USER=<span class=\"string\">&#x27;repl&#x27;</span>,</span><br><span class=\"line\">  MASTER_PASSWORD=<span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">  MASTER_PORT=3307,</span><br><span class=\"line\">  MASTER_LOG_FILE=<span class=\"string\">&#x27;mysql-bin.000001&#x27;</span>,  //重置一下binlog号</span><br><span class=\"line\">  MASTER_LOG_POS=154,  //并从最开始的位置进行binlog追加，防止主从数据不一致。</span><br><span class=\"line\">  MASTER_CONNECT_RETRY=10;</span><br><span class=\"line\">start slave;  //重新启动复制线程</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show slave status \\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting <span class=\"keyword\">for</span> master to send event</span><br><span class=\"line\">                  Master_Host: 10.0.2.4</span><br><span class=\"line\">                  Master_User: repl</span><br><span class=\"line\">                  Master_Port: 3307</span><br><span class=\"line\">                Connect_Retry: 10</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 310</span><br><span class=\"line\">               Relay_Log_File: db01-relay-bin.000002</span><br><span class=\"line\">                Relay_Log_Pos: 476</span><br><span class=\"line\">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">| dd1                |</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"（3）SQL线程故障\"><a href=\"#（3）SQL线程故障\" class=\"headerlink\" title=\"（3）SQL线程故障\"></a>（3）SQL线程故障</h3><h4 id=\"原因一：相关文件物理损坏\"><a href=\"#原因一：相关文件物理损坏\" class=\"headerlink\" title=\"原因一：相关文件物理损坏\"></a>原因一：相关文件物理损坏</h4><p> 读relay-log.info<br> 读relay-log ，并执行日志<br> 更新relay-log.info<br>//以上文件损坏，最好是重新构建主从(从全备开始)</p>\n<h4 id=\"原因二：从库误写入\"><a href=\"#原因二：从库误写入\" class=\"headerlink\" title=\"原因二：从库误写入\"></a>原因二：从库误写入</h4><p>为什么一条SQL语句执行不成功？</p>\n<ol>\n<li>主从数据库版本差异较大</li>\n<li>主从数据库配置参数不一致（例如：sql_mode等）</li>\n<li>想要创建的对象已经存在</li>\n<li>想要删除或修改的对象不存在</li>\n<li>主键冲突</li>\n<li>DML语句不符合表定义及约束时<br>归根结底是从库写入了，导致主从数据不一致。</li>\n</ol>\n<h4 id=\"方法一：删除或跳过从库中不一致的对象\"><a href=\"#方法一：删除或跳过从库中不一致的对象\" class=\"headerlink\" title=\"方法一：删除或跳过从库中不一致的对象\"></a>方法一：删除或跳过从库中不一致的对象</h4><p>1.<code>stop slave; </code><br>2.<code>set global sql_slave_skip_counter = 1;</code> //跳过上一个报错。<br>3.<code>start slave;</code></p>\n<p>或<code>stop slave;</code><br>在从库中删除该对象 <code>drop database xxx;</code><br><code>start slave;</code></p>\n<p><code>vim /etc/my.cnf</code><br><code>slave-skip-errors = 1032,1062,1007;</code>//自动跳过指定错误码的错误。不合理不推荐</p>\n<h4 id=\"方法二：读写分离，read-only\"><a href=\"#方法二：读写分离，read-only\" class=\"headerlink\" title=\"方法二：读写分离，read_only\"></a>方法二：读写分离，read_only</h4><ul>\n<li>设置从库只读，防止写入<code>set global read_only=1;``read_only=1</code><ul>\n<li>注意：read_only参数对root权限的账号不起作用。</li>\n</ul>\n</li>\n<li>使用中间件做成读写分离的架构</li>\n</ul>\n<h2 id=\"主从延时-原因分析\"><a href=\"#主从延时-原因分析\" class=\"headerlink\" title=\"主从延时-原因分析\"></a>主从延时-原因分析</h2><p>Seconds_Behind_Master: 0  从库延时主库的时间/s</p>\n<h3 id=\"主库方面：\"><a href=\"#主库方面：\" class=\"headerlink\" title=\"主库方面：\"></a>主库方面：</h3><ol>\n<li>日志写入不及时</li>\n</ol>\n<ul>\n<li>sync_binlog=1; //双1标准的第二个1 ``select @@sync_binlog;</li>\n</ul>\n<ol start=\"2\">\n<li>主库并发业务较高</li>\n</ol>\n<ul>\n<li>“分布式”架构</li>\n</ul>\n<ol start=\"3\">\n<li>从库太多</li>\n</ol>\n<ul>\n<li>级联主从(级联时，我们的主服务器，只需要将自己的数据同步给级联即可，其余的从服务器由级联服务器去同步)</li>\n</ul>\n<p><strong>对于Classic Replication(传统CR复制模式) ：</strong><br>主库是有能力并发运行事务的，但是在Dump_T在传输日志的时候，是以事件为单元传输日志的。所以导致事务的传输工作是串行方式的，这时在主库TPS很高时，会产生比较大的主从延时。</p>\n<p><strong>详细说明</strong>：Dump_T在传输数据时以<a href=\"https://cakepanit.com/forward/663d93c2.html#1-2-4-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E4%BA%8B%E4%BB%B6%EF%BC%88event%EF%BC%89\">event</a>为单位，而一个事务从<code>begin;</code>到<code>commit;</code>至少是三个事件组成。<br>这时并发了上千个事务而Dump_T在传输时必须保证一个事务投递的完整性。及从头到尾完整的传输完毕。再传递下一个事务，这就导致了并行的事务在传输到从库时变成了串行的方式。（100个人跑来过河，而船一次只能载一个人。）</p>\n<p><strong>怎么处理</strong>：group commit<br>从5.6开始加入了GTID[同一个事务的时间GTID是一样的]，在复制时，可以将原来串行的传输模式变成并行的 [事务为级别进行复制]。<br><strong>前提</strong>：除了GTID支持，还需要双一保证。<br><strong>原理</strong>：在传输日志时可以同时发送多个并发事务的事件，在从库中通过相同GTID进行站队组合。</p>\n<h3 id=\"从库方面：\"><a href=\"#从库方面：\" class=\"headerlink\" title=\"从库方面：\"></a>从库方面：</h3><p>Classic Replication<br>问题：SQL线程只有一个，所以只能穿行执行relay的事务。<br>解决：多加几个SQL线程</p>\n<ul>\n<li>5.6中出现了database级别的多线程SQL，但是只能针对不同库下的事务，才能并发</li>\n<li>5.7 版本开始GTID之后,在SQL方面,提供了基于逻辑时钟(logical_clock),binlog加入了seq_no机制,<br>真正实现了基于事务级别的并发回放,这种技术我们把它称之为MTS(enhanced multi-threaded slave).</li>\n<li>大事务拆成多个小事务,可以有效的减少主从延时.<br><a href=\"https://dev.mysql.com/worklog/task/?id=6314\">https://dev.mysql.com/worklog/task/?id=6314</a></li>\n</ul>\n","categories":["DBA"],"tags":["主从复制","MySQL"]},{"title":"MySQL-日志管理[bin_log原理&恢复案例]","url":"/forward/663d93c2.html","content":"<h2 id=\"日志管理：\"><a href=\"#日志管理：\" class=\"headerlink\" title=\"日志管理：\"></a>日志管理：</h2><h3 id=\"排错\"><a href=\"#排错\" class=\"headerlink\" title=\"排错\"></a>排错</h3><h4 id=\"1-1-1-错误日志\"><a href=\"#1-1-1-错误日志\" class=\"headerlink\" title=\"1.1.1 错误日志\"></a>1.1.1 错误日志</h4><p>查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@log_error;</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">| @@log_error          |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">| /data/3307/mysql.log |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\"><span class=\"comment\">#默认日志路径 ：DATADIR/hostname.err</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-2配置方式\"><a href=\"#1-1-2配置方式\" class=\"headerlink\" title=\"1.1.2配置方式\"></a>1.1.2配置方式</h4><p>修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /data/3307/my.cnf</span><br><span class=\"line\">log_error=/data/3307/mysql.log //多实例下日志路径</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据恢复\"><a href=\"#数据恢复\" class=\"headerlink\" title=\"数据恢复\"></a>数据恢复</h3><h4 id=\"binlog（二进制日志）\"><a href=\"#binlog（二进制日志）\" class=\"headerlink\" title=\"binlog（二进制日志）\"></a>binlog（二进制日志）</h4><p>作用：数据恢复、主从复制</p>\n<h4 id=\"如何配置\"><a href=\"#如何配置\" class=\"headerlink\" title=\"如何配置\"></a>如何配置</h4><ul>\n<li>log_bin //开关、设定存放位置</li>\n<li>server_id（5.6不需要添加此参数，5.7以上必须加）</li>\n<li>*生产要求：**日志和数据分开存放</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mkdir /data/binlog -p</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># vim /data/3307/my.cnf </span></span><br><span class=\"line\">server_id=7                  </span><br><span class=\"line\">log_bin=/data/3307/mysql-bin</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># chmod -R mysql. /data</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart mysqld3307</span></span><br><span class=\"line\">系统下查看：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ls /data/3307/mysql-bin.* </span></span><br><span class=\"line\">/data/3307/mysql-bin.000001  /data/3307/mysql-bin.000002   //自动向前滚动</span><br><span class=\"line\">/data/3307/mysql-bin.index //多个二进制日志的索引</span><br><span class=\"line\"></span><br><span class=\"line\">mysql中查看：</span><br><span class=\"line\">mysql&gt; show variables like <span class=\"string\">&#x27;%log_bin%&#x27;</span>;</span><br><span class=\"line\">+---------------------------------+----------------------------+</span><br><span class=\"line\">| Variable_name                   | Value                      |</span><br><span class=\"line\">+---------------------------------+----------------------------+</span><br><span class=\"line\">| log_bin                         | ON                         |</span><br><span class=\"line\">| log_bin_basename                | /data/3307/mysql-bin       | <span class=\"comment\">#控制bin日志前缀的参数</span></span><br><span class=\"line\">| log_bin_index                   | /data/3307/mysql-bin.index |</span><br><span class=\"line\">| log_bin_trust_function_creators | OFF                        |</span><br><span class=\"line\">| log_bin_use_v1_row_events       | OFF                        |</span><br><span class=\"line\">| sql_log_bin                     | ON                         |<span class=\"comment\">#临时关闭开关</span></span><br><span class=\"line\">+---------------------------------+----------------------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"binlog记录了？\"><a href=\"#binlog记录了？\" class=\"headerlink\" title=\"binlog记录了？\"></a>binlog记录了？</h4><ul>\n<li><ol>\n<li>记录了数据库中所有变更类的操作</li>\n</ol>\n<ul>\n<li>DDL</li>\n<li>DCL</li>\n<li>DML</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>对于DDL和DCL，记录发生过的语句。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>DML（IUD）</li>\n</ol>\n<ul>\n<li>前提：记录提交的事物IUD<br>关于记录格式：</li>\n<li>ROW：RBR    行记录模式，记录的是行的变化</li>\n<li>STATEMENT：SBR    语句记录模式，记录操作语句本身 //对于函数方面的操作(如当前时间)，可能会造成数据不严谨</li>\n<li>MIXED：MBR    混合记录模式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete from city <span class=\"built_in\">where</span> <span class=\"built_in\">id</span>&gt;1000;</span><br><span class=\"line\">RBR,逐行记录日志，日志量很大，但是足够严谨，不会出现记录错误。//5.7版本默认是RBR模式，是企业建议模式</span><br><span class=\"line\">SBR,只记录语句本身，日志量很少，可读性较强。对于函数类的操作，将来恢复会造成错误</span><br></pre></td></tr></table></figure>\n<p>查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@binlog_format;</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| @@binlog_format |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| ROW             |</span><br><span class=\"line\">+-----------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二进制日志事件（event）\"><a href=\"#二进制日志事件（event）\" class=\"headerlink\" title=\"二进制日志事件（event）\"></a>二进制日志事件（event）</h4><h5 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h5><p>二进制日志的最小记录单元<br>对于DDL,DCL,一个语句就是一个event<br>对于DML语句来讲:只记录已提交的事务。<br>例如以下列子,就被分为了4个event</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">         position号码(字节偏移量)</span><br><span class=\"line\">begin;      120  - 340</span><br><span class=\"line\">DML1        340  - 460</span><br><span class=\"line\">DML2        460  - 550</span><br><span class=\"line\">commit;     550  - 760</span><br><span class=\"line\">作用：方便对日志进行截取，指定部分日志进行数据恢复</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"event的组成\"><a href=\"#event的组成\" class=\"headerlink\" title=\"event的组成\"></a>event的组成</h5><p>三部分构成:</p>\n<ul>\n<li>(1) 事件的开始标识</li>\n<li>(2) 事件内容</li>\n<li>(3) 事件的结束标识</li>\n</ul>\n<p>Position:<br>开始标识: at 194<br>结束标识: end_log_pos 254<br>194? 254?<br>某个事件在binlog中的相对位置号</p>\n<h4 id=\"二进制日志的查看\"><a href=\"#二进制日志的查看\" class=\"headerlink\" title=\"二进制日志的查看\"></a>二进制日志的查看</h4><h5 id=\"查看二进制日志所在位置\"><a href=\"#查看二进制日志所在位置\" class=\"headerlink\" title=\"查看二进制日志所在位置\"></a>查看二进制日志所在位置</h5><p><code>mysql&gt; show variables like &#39;%log_bin%&#39;;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ll /data/3307/mysql-bin.*</span></span><br><span class=\"line\">-rw-r----- 1 mysql mysql   1010 4月   1 17:09 /data/3307/mysql-bin.000001</span><br><span class=\"line\">-rw-r----- 1 mysql mysql 690963 4月   2 23:44 /data/3307/mysql-bin.000002</span><br><span class=\"line\">-rw-r----- 1 mysql mysql    196 4月  15 11:09 /data/3307/mysql-bin.index</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-5查看正在使用的二进制日志\"><a href=\"#1-2-5查看正在使用的二进制日志\" class=\"headerlink\" title=\"1.2.5查看正在使用的二进制日志\"></a>1.2.5查看正在使用的二进制日志</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show binary logs;  //所有二进制日志</span><br><span class=\"line\">+------------------+-----------+</span><br><span class=\"line\">| Log_name         | File_size |</span><br><span class=\"line\">+------------------+-----------+</span><br><span class=\"line\">| mysql-bin.000001 |      1010 |</span><br><span class=\"line\">| mysql-bin.000002 |      6909 |</span><br><span class=\"line\">+------------------+-----------+</span><br><span class=\"line\">Log_name :目前MySQL存在的二进制日志名字</span><br><span class=\"line\">File_size ：目前MySQL用到了哪个position号</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show master status; //确认正在使用的二进制日志</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| mysql-bin.000007 |     6909 |              |                  |                   |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看二进制日志内容\"><a href=\"#查看二进制日志内容\" class=\"headerlink\" title=\"查看二进制日志内容\"></a>查看二进制日志内容</h5><p>横向查看：查看二进制日志事件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.000007&#x27;</span>;</span><br><span class=\"line\">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class=\"line\">| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                  |</span><br><span class=\"line\">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class=\"line\">| mysql-bin.000007 |   4 | Format_desc    |         7 |         123 | Server ver: 5.7.26-<span class=\"built_in\">log</span>, Binlog ver: 4 |</span><br><span class=\"line\">| mysql-bin.000007 | 123 | Previous_gtids |         7 |         154 |                                       |                         </span><br><span class=\"line\">+------------------+------+-----------------+---------+-----------+---------------------------------------+</span><br><span class=\"line\">bin_log头部标记：</span><br><span class=\"line\">    5.6 前123个Position号</span><br><span class=\"line\">    5.7 为前154个Position号</span><br><span class=\"line\">注释：以上输出中每一行为一个事件</span><br><span class=\"line\">Log_name：日志名</span><br><span class=\"line\">Pos：事件开始的Position *****</span><br><span class=\"line\">Event_type：事件类型</span><br><span class=\"line\">Server_id：发生在哪台机器的事件 //主从时区分机器</span><br><span class=\"line\">End_log_pos：事件结束的位置号 *****</span><br><span class=\"line\">Info：事件内容</span><br></pre></td></tr></table></figure>\n<p>RBR模式下记录已提交的事务：</p>\n<p><img src=\"/images/img-79.png\" alt=\"事务语句\"><br>纵向查看：查看二进制日志内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database test1;</span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br><span class=\"line\">mysql&gt; begin;</span><br><span class=\"line\">mysql&gt; update city SET Name=<span class=\"string\">&#x27;Tilburo&#x27;</span> <span class=\"built_in\">where</span> <span class=\"built_in\">id</span>=10;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class=\"line\">mysql&gt; select * from city <span class=\"built_in\">where</span> <span class=\"built_in\">id</span>=10;</span><br><span class=\"line\">+----+---------+-------------+---------------+------------+</span><br><span class=\"line\">| ID | Name    | CountryCode | District      | Population |</span><br><span class=\"line\">+----+---------+-------------+---------------+------------+</span><br><span class=\"line\">| 10 | Tilburo | NLD         | Noord-Brabant |     193238 |</span><br><span class=\"line\">+----+---------+-------------+---------------+------------+</span><br><span class=\"line\">mysql&gt; commit;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 /data/binlog]<span class=\"comment\"># mysqlbinlog mysql-bin.000007 |grep -v &quot;SET&quot; &gt;/tmp/aa.txt</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqlbinlog /data/3307/mysql-bin.000007 |grep -v &quot;SET&quot;</span></span><br><span class=\"line\">DELIMITER /*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 4</span></span><br><span class=\"line\"><span class=\"comment\">#200415 11:09:01 server id 7  end_log_pos 123 CRC32 0x529742df  Start: binlog v 4, server v 5.7.26-log created 200415 11:09:01 at startup</span></span><br><span class=\"line\"><span class=\"comment\"># Warning: this binlog is either in use or was not closed properly.</span></span><br><span class=\"line\">ROLLBACK/*!*/;</span><br><span class=\"line\">BINLOG <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">zXqWXg8HAAAAdwAAAHsAAAABAAQANS43LjI2LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class=\"line\"><span class=\"string\">AAAAAAAAAAAAAAAAAADNepZeEzgNAAgAEgAEBAQEEgAAXwAEGggAAAAICAgCAAAACgoKKioAEjQA</span></span><br><span class=\"line\"><span class=\"string\">Ad9Cl1I=</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 123</span></span><br><span class=\"line\"><span class=\"comment\">#200415 11:09:01 server id 7  end_log_pos 154 CRC32 0xf70987e6  Previous-GTIDs</span></span><br><span class=\"line\"><span class=\"comment\"># [empty]</span></span><br><span class=\"line\"></span><br><span class=\"line\">//从154字节开始看</span><br><span class=\"line\"><span class=\"comment\"># at 154</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 219 CRC32 0x5c02f208  Anonymous_GTID  last_committed=0        sequence_number=1   rbr_only=no</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># at 219</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 316 CRC32 0x1e0dd89b  Query   thread_id=5     exec_time=0     error_code=0</span></span><br><span class=\"line\">/*!\\C utf8 *//*!*/;</span><br><span class=\"line\">create database test1</span><br><span class=\"line\">/*!*/;</span><br><span class=\"line\">//创建了一个库，DDL语句直接记录语句本事。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># at 316</span></span><br><span class=\"line\"><span class=\"comment\">#200415 15:04:23 server id 7  end_log_pos 381 CRC32 0x7c43eb07  Anonymous_GTID  last_committed=1        sequence_number=2   rbr_only=yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># at 381</span></span><br><span class=\"line\"><span class=\"comment\">#200415 15:03:46 server id 7  end_log_pos 454 CRC32 0x6f398c9d  Query   thread_id=5     exec_time=0     error_code=0</span></span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 454</span></span><br><span class=\"line\">//事务开始</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#200415 15:03:46 server id 7  end_log_pos 512 CRC32 0x223247ee  Table_map: `world`.`city` mapped to number 112</span></span><br><span class=\"line\"><span class=\"comment\"># at 512</span></span><br><span class=\"line\"><span class=\"comment\">#200415 15:03:46 server id 7  end_log_pos 618 CRC32 0xdac21634  Update_rows: table id 112 flags: STMT_END_F</span></span><br><span class=\"line\"></span><br><span class=\"line\">BINLOG <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">0rGWXhMHAAAAOgAAAAACAAAAAHAAAAAAAAEABXdvcmxkAARjaXR5AAUD/v7+Awb+I/4D/hQA7kcy</span></span><br><span class=\"line\"><span class=\"string\">Ig==</span></span><br><span class=\"line\"><span class=\"string\">0rGWXh8HAAAAagAAAGoCAAAAAHAAAAAAAAEAAgAF///gCgAAAAdUaWxidXJnA05MRA1Ob29yZC1C</span></span><br><span class=\"line\"><span class=\"string\">cmFiYW501vICAOAKAAAAB1RpbGJ1cm8DTkxEDU5vb3JkLUJyYWJhbnTW8gIANBbC2g==</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>/*!*/;</span><br><span class=\"line\">//RBR模式下，针对DML语句binlog中记录每行数据的变化过程</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># at 618</span></span><br><span class=\"line\"><span class=\"comment\">#200415 15:04:23 server id 7  end_log_pos 649 CRC32 0xba219dfb  Xid = 42</span></span><br><span class=\"line\">COMMIT/*!*/;</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"><span class=\"comment\"># End of log file</span></span><br><span class=\"line\">//事务结束</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 /data/binlog]<span class=\"comment\"># mysqlbinlog --base64-output=decode-rows -vvv mysql-bin.000002 //解码查看</span></span><br><span class=\"line\"><span class=\"comment\"># at 381</span></span><br><span class=\"line\"><span class=\"comment\">#200415 15:03:46 server id 7  end_log_pos 454 CRC32 0x6f398c9d  Query   thread_id=5     exec_time=0     error_code=0</span></span><br><span class=\"line\">SET TIMESTAMP=1586934226/*!*/;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 454</span></span><br><span class=\"line\"><span class=\"comment\">#200415 15:03:46 server id 7  end_log_pos 512 CRC32 0x223247ee  Table_map: `world`.`city` mapped to number 112</span></span><br><span class=\"line\"><span class=\"comment\"># at 512</span></span><br><span class=\"line\"><span class=\"comment\">#200415 15:03:46 server id 7  end_log_pos 618 CRC32 0xdac21634  Update_rows: table id 112 flags: STMT_END_F</span></span><br><span class=\"line\"><span class=\"comment\">### UPDATE `world`.`city`</span></span><br><span class=\"line\"><span class=\"comment\">### WHERE</span></span><br><span class=\"line\"><span class=\"comment\">###   @1=10 /* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class=\"line\"><span class=\"comment\">###   @2=&#x27;Tilburg&#x27; /* STRING(35) meta=65059 nullable=0 is_null=0 */</span></span><br><span class=\"line\"><span class=\"comment\">###   @3=&#x27;NLD&#x27; /* STRING(3) meta=65027 nullable=0 is_null=0 */</span></span><br><span class=\"line\"><span class=\"comment\">###   @4=&#x27;Noord-Brabant&#x27; /* STRING(20) meta=65044 nullable=0 is_null=0 */</span></span><br><span class=\"line\"><span class=\"comment\">###   @5=193238 /* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class=\"line\"><span class=\"comment\">### SET</span></span><br><span class=\"line\"><span class=\"comment\">###   @1=10 /* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class=\"line\"><span class=\"comment\">###   @2=&#x27;Tilburo&#x27; /* STRING(35) meta=65059 nullable=0 is_null=0 */</span></span><br><span class=\"line\"><span class=\"comment\">###   @3=&#x27;NLD&#x27; /* STRING(3) meta=65027 nullable=0 is_null=0 */</span></span><br><span class=\"line\"><span class=\"comment\">###   @4=&#x27;Noord-Brabant&#x27; /* STRING(20) meta=65044 nullable=0 is_null=0 */</span></span><br><span class=\"line\"><span class=\"comment\">###   @5=193238 /* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class=\"line\"><span class=\"comment\"># at 618</span></span><br><span class=\"line\"><span class=\"comment\">#200415 15:04:23 server id 7  end_log_pos 649 CRC32 0xba219dfb  Xid = 42</span></span><br><span class=\"line\">COMMIT/*!*/;</span><br><span class=\"line\">SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;AUTOMATIC&#x27;</span> /* added by mysqlbinlog */ /*!*/;</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-6-基于二进制日志数据恢复案例\"><a href=\"#1-2-6-基于二进制日志数据恢复案例\" class=\"headerlink\" title=\"1.2.6 基于二进制日志数据恢复案例\"></a>1.2.6 基于二进制日志数据恢复案例</h4><h5 id=\"按需截取日志\"><a href=\"#按需截取日志\" class=\"headerlink\" title=\"按需截取日志\"></a>按需截取日志</h5><ul>\n<li>基于position号的截取 *****<ul>\n<li>--start-position=###</li>\n<li>--stop-position=###<br>截取二进制日志核心在于，找起点和终点</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">备份：</span><br><span class=\"line\">mysql&gt; show binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.000007&#x27;</span>;</span><br><span class=\"line\">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class=\"line\">| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                  |</span><br><span class=\"line\">+------------------+-----+----------------+-----------+-------------+---------------------------------------+</span><br><span class=\"line\">| mysql-bin.000007 | 219 | Query          |         7 |         316 | create database test1                 |</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqlbinlog --start-position=219 --stop-position=316 /data/3307/mysql-bin.000007 &gt;/tmp/bin.sql</span></span><br><span class=\"line\"></span><br><span class=\"line\">恢复：</span><br><span class=\"line\">mysql&gt; drop database test1; //为了恢复而恢复</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> sql_log_bin=0;  //临时关闭当前会话二进制日志记录</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /tmp/bin.sql  //开始恢复</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>基于时间点截取（了解）</li>\n<li>基于时间点的截取(了解)<ul>\n<li>--start-datetime</li>\n<li>--stop-datetime<br>for example: 2004-12-25 11:25:56 </li>\n</ul>\n</li>\n</ul>\n<h5 id=\"案例恢复详解\"><a href=\"#案例恢复详解\" class=\"headerlink\" title=\"案例恢复详解\"></a>案例恢复详解</h5><p>案例: 使用binlog日志进行数据恢复<br>模拟:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1. </span></span><br><span class=\"line\">create database binlog charset utf8mb4;</span><br><span class=\"line\"><span class=\"comment\">#2. </span></span><br><span class=\"line\">use binlog;</span><br><span class=\"line\">create table t1(<span class=\"built_in\">id</span> int);</span><br><span class=\"line\"><span class=\"comment\">#3. </span></span><br><span class=\"line\">insert into t1 values(1);</span><br><span class=\"line\">commit;</span><br><span class=\"line\">insert into t1 values(2);</span><br><span class=\"line\">commit;</span><br><span class=\"line\">insert into t1 values(3);</span><br><span class=\"line\">commit;</span><br><span class=\"line\"><span class=\"comment\">#4. </span></span><br><span class=\"line\">drop database binlog;</span><br></pre></td></tr></table></figure>\n<p>恢复：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看当前mysql使用的binlog</span></span><br><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| mysql-bin.000007 |     3016 |              |                  |                   |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#根据binlog找到对应的字节偏移号</span></span><br><span class=\"line\">mysql&gt; show binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.000007&#x27;</span>;</span><br><span class=\"line\">+------------------+------+----------------+-----------+-------------+----------------------------------------+</span><br><span class=\"line\">| Log_name         | Pos  | Event_type     | Server_id | End_log_pos | Info                                   |</span><br><span class=\"line\">+------------------+------+----------------+-----------+-------------+----------------------------------------+</span><br><span class=\"line\">| mysql-bin.000007 | 1800 | Query          |         7 |        1916 | create database binlog charset utf8mb4 | //开始1800</span><br><span class=\"line\">| mysql-bin.000007 | 1916 | Anonymous_Gtid |         7 |        1981 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>   |</span><br><span class=\"line\">| mysql-bin.000007 | 1981 | Query          |         7 |        2082 | use `binlog`; create table t1(<span class=\"built_in\">id</span> int)  |</span><br><span class=\"line\">| mysql-bin.000007 | 2082 | Anonymous_Gtid |         7 |        2147 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>   |</span><br><span class=\"line\">| mysql-bin.000007 | 2147 | Query          |         7 |        2221 | BEGIN                                  |</span><br><span class=\"line\">| mysql-bin.000007 | 2221 | Table_map      |         7 |        2268 | table_id: 117 (binlog.t1)              |</span><br><span class=\"line\">| mysql-bin.000007 | 2268 | Write_rows     |         7 |        2308 | table_id: 117 flags: STMT_END_F        |</span><br><span class=\"line\">| mysql-bin.000007 | 2308 | Xid            |         7 |        2339 | COMMIT /* xid=105 */                   |</span><br><span class=\"line\">| mysql-bin.000007 | 2339 | Anonymous_Gtid |         7 |        2404 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>   |</span><br><span class=\"line\">| mysql-bin.000007 | 2404 | Query          |         7 |        2478 | BEGIN                                  |</span><br><span class=\"line\">| mysql-bin.000007 | 2478 | Table_map      |         7 |        2525 | table_id: 117 (binlog.t1)              |</span><br><span class=\"line\">| mysql-bin.000007 | 2525 | Write_rows     |         7 |        2565 | table_id: 117 flags: STMT_END_F        |</span><br><span class=\"line\">| mysql-bin.000007 | 2565 | Xid            |         7 |        2596 | COMMIT /* xid=107 */                   |</span><br><span class=\"line\">| mysql-bin.000007 | 2596 | Anonymous_Gtid |         7 |        2661 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>   |</span><br><span class=\"line\">| mysql-bin.000007 | 2661 | Query          |         7 |        2735 | BEGIN                                  |</span><br><span class=\"line\">| mysql-bin.000007 | 2735 | Table_map      |         7 |        2782 | table_id: 117 (binlog.t1)              |</span><br><span class=\"line\">| mysql-bin.000007 | 2782 | Write_rows     |         7 |        2822 | table_id: 117 flags: STMT_END_F        |</span><br><span class=\"line\">| mysql-bin.000007 | 2822 | Xid            |         7 |        2853 | COMMIT /* xid=109 */                   | //结束2853</span><br><span class=\"line\">| mysql-bin.000007 | 2853 | Anonymous_Gtid |         7 |        2918 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>   |</span><br><span class=\"line\">| mysql-bin.000007 | 2918 | Query          |         7 |        3016 | drop database binlog                   |</span><br><span class=\"line\">+------------------+------+----------------+-----------+-------------+----------------------------------------+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqlbinlog --start-position=1800 --stop-position=2822 /data/3307/mysql-bin.000007 &gt;/tmp/bin2.sql;  //截取需要的日志</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /tmp/bin2.sql </span></span><br><span class=\"line\">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;</span><br><span class=\"line\">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;</span><br><span class=\"line\">DELIMITER /*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 4</span></span><br><span class=\"line\"><span class=\"comment\">#200415 11:09:01 server id 7  end_log_pos 123 CRC32 0x529742df  Start: binlog v 4, server v 5.7.26-log created 200415 11:09:01 at startup</span></span><br><span class=\"line\"><span class=\"comment\"># Warning: this binlog is either in use or was not closed properly.</span></span><br><span class=\"line\">ROLLBACK/*!*/;</span><br><span class=\"line\">BINLOG <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">zXqWXg8HAAAAdwAAAHsAAAABAAQANS43LjI2LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class=\"line\"><span class=\"string\">AAAAAAAAAAAAAAAAAADNepZeEzgNAAgAEgAEBAQEEgAAXwAEGggAAAAICAgCAAAACgoKKioAEjQA</span></span><br><span class=\"line\"><span class=\"string\">Ad9Cl1I=</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 1800</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 1916 CRC32 0x7d0a9649         Query   thread_id=5     exec_time=3793  error_code=0</span></span><br><span class=\"line\">SET TIMESTAMP=1586933740/*!*/;</span><br><span class=\"line\">SET @@session.pseudo_thread_id=5/*!*/;</span><br><span class=\"line\">SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;</span><br><span class=\"line\">SET @@session.sql_mode=1436549152/*!*/;</span><br><span class=\"line\">SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;</span><br><span class=\"line\">/*!\\C utf8 *//*!*/;</span><br><span class=\"line\">SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;</span><br><span class=\"line\">SET @@session.lc_time_names=0/*!*/;</span><br><span class=\"line\">SET @@session.collation_database=DEFAULT/*!*/;</span><br><span class=\"line\">create database binlog charset utf8mb4</span><br><span class=\"line\">/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 1916</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 1981 CRC32 0x0335ab8d         Anonymous_GTID  last_committed=8        sequence_number=9       rbr_only=no</span></span><br><span class=\"line\">SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 1981</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2082 CRC32 0xe4331fa1         Query   thread_id=5     exec_time=3793  error_code=0</span></span><br><span class=\"line\">use `binlog`/*!*/;</span><br><span class=\"line\">SET TIMESTAMP=1586933740/*!*/;</span><br><span class=\"line\">create table t1(<span class=\"built_in\">id</span> int)</span><br><span class=\"line\">/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2082</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2147 CRC32 0xd9ff1631         Anonymous_GTID  last_committed=9        sequence_number=10      rbr_only=yes</span></span><br><span class=\"line\">/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;</span><br><span class=\"line\">SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2147</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2221 CRC32 0x1b004ae2         Query   thread_id=5     exec_time=3793  error_code=0</span></span><br><span class=\"line\">SET TIMESTAMP=1586933740/*!*/;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2221</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2268 CRC32 0x9d41f6ed         Table_map: `binlog`.`t1` mapped to number 117</span></span><br><span class=\"line\"><span class=\"comment\"># at 2268</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2308 CRC32 0xcc11e52b         Write_rows: table id 117 flags: STMT_END_F</span></span><br><span class=\"line\"></span><br><span class=\"line\">BINLOG <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">7K+WXhMHAAAALwAAANwIAAAAAHUAAAAAAAEABmJpbmxvZwACdDEAAQMAAe32QZ0=</span></span><br><span class=\"line\"><span class=\"string\">7K+WXh4HAAAAKAAAAAQJAAAAAHUAAAAAAAEAAgAB//4BAAAAK+URzA==</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2308</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2339 CRC32 0x891d519e         Xid = 105</span></span><br><span class=\"line\">COMMIT/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2339</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2404 CRC32 0xe5f12f2c         Anonymous_GTID  last_committed=10       sequence_number=11      rbr_only=yes</span></span><br><span class=\"line\">/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;</span><br><span class=\"line\">SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2404</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2478 CRC32 0x2f6a2f99         Query   thread_id=5     exec_time=3793  error_code=0</span></span><br><span class=\"line\">SET TIMESTAMP=1586933740/*!*/;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2478</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2525 CRC32 0xc226ccc1         Table_map: `binlog`.`t1` mapped to number 117</span></span><br><span class=\"line\"><span class=\"comment\"># at 2525</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2565 CRC32 0x7caf0d51         Write_rows: table id 117 flags: STMT_END_F</span></span><br><span class=\"line\"></span><br><span class=\"line\">BINLOG <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">7K+WXhMHAAAALwAAAN0JAAAAAHUAAAAAAAEABmJpbmxvZwACdDEAAQMAAcHMJsI=</span></span><br><span class=\"line\"><span class=\"string\">7K+WXh4HAAAAKAAAAAUKAAAAAHUAAAAAAAEAAgAB//4CAAAAUQ2vfA==</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2565</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2596 CRC32 0x133f90ed         Xid = 107</span></span><br><span class=\"line\">COMMIT/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2596</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2661 CRC32 0xc76646d7         Anonymous_GTID  last_committed=11       sequence_number=12      rbr_only=yes</span></span><br><span class=\"line\">/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;</span><br><span class=\"line\">SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;ANONYMOUS&#x27;</span>/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2661</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2735 CRC32 0x117fc984         Query   thread_id=5     exec_time=3793  error_code=0</span></span><br><span class=\"line\">SET TIMESTAMP=1586933740/*!*/;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 2735</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2782 CRC32 0x238f82b5         Table_map: `binlog`.`t1` mapped to number 117</span></span><br><span class=\"line\"><span class=\"comment\"># at 2782</span></span><br><span class=\"line\"><span class=\"comment\">#200415 14:55:40 server id 7  end_log_pos 2822 CRC32 0xa5de37c9         Write_rows: table id 117 flags: STMT_END_F</span></span><br><span class=\"line\"></span><br><span class=\"line\">BINLOG <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">7K+WXhMHAAAALwAAAN4KAAAAAHUAAAAAAAEABmJpbmxvZwACdDEAAQMAAbWCjyM=</span></span><br><span class=\"line\"><span class=\"string\">7K+WXh4HAAAAKAAAAAYLAAAAAHUAAAAAAAEAAgAB//4DAAAAyTfepQ==</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>/*!*/;</span><br><span class=\"line\">ROLLBACK /* added by mysqlbinlog */ /*!*/;</span><br><span class=\"line\">SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;AUTOMATIC&#x27;</span> /* added by mysqlbinlog */ /*!*/;</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"><span class=\"comment\"># End of log file</span></span><br><span class=\"line\">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;</span><br><span class=\"line\">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> sql_log_bin=0; <span class=\"comment\">#关闭当前回话的binlog记录</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /tmp/bin2.sql</span><br></pre></td></tr></table></figure>\n<p>验证数据是否恢复：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select <span class=\"built_in\">id</span> from t1;</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>   |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">|    1 |</span><br><span class=\"line\">|    2 |</span><br><span class=\"line\">|    3 |</span><br><span class=\"line\">+------+</span><br></pre></td></tr></table></figure>\n","categories":["DBA"],"tags":["MySQL","日志管理"]},{"title":"MySQL索引&执行计划分析","url":"/forward/68023dec.html","content":"<h3 id=\"索引的作用\"><a href=\"#索引的作用\" class=\"headerlink\" title=\"索引的作用\"></a>索引的作用</h3><p>提供了类似于书中目录的作用,目的是为了优化查询</p>\n<p><img src=\"/images/img-38.png\" alt=\"索引分类\"></p>\n<h3 id=\"索引的种类-算法\"><a href=\"#索引的种类-算法\" class=\"headerlink\" title=\"索引的种类(算法)\"></a>索引的种类(算法)</h3><ul>\n<li>B树索引</li>\n<li>Hash索引</li>\n<li>R树</li>\n<li>Full text</li>\n<li>GIS</li>\n</ul>\n<h3 id=\"B树-基于不同的查找算法分类介绍\"><a href=\"#B树-基于不同的查找算法分类介绍\" class=\"headerlink\" title=\"B树 基于不同的查找算法分类介绍\"></a>B树 基于不同的查找算法分类介绍</h3><p><img src=\"/images/img-0.png\" alt=\"B+TREE 索引\"></p>\n<h4 id=\"B-tree生成过程：\"><a href=\"#B-tree生成过程：\" class=\"headerlink\" title=\"B tree生成过程：\"></a>B tree生成过程：</h4><ol>\n<li><p><strong>leaf节点：每个page为16kb，其中均匀的存放“盒子”，盒子中存放数据。每个盒子都有自己的编号。被称为叶子节点。</strong></p>\n</li>\n<li><p><strong>internal节点：枝节点会将每个叶子节点所存放的最小值提取出来集中存放，存放的位置被称为枝节点。</strong></p>\n</li>\n<li><p><strong>root节点：提取枝节点的最小值，落到根节点上。</strong></p>\n</li>\n</ol>\n<h4 id=\"B-tree工作过程：\"><a href=\"#B-tree工作过程：\" class=\"headerlink\" title=\"B tree工作过程：\"></a>B tree工作过程：</h4><p>例如读取数据x：</p>\n<ol>\n<li>遍历根节点，找到符合条件的数据索引</li>\n<li>根据索引提供的对应的指向枝节点的指针找到对应的枝结点page</li>\n<li>在枝节点page中再进行比对，找到对应叶结点所在page在page中存放着数据的页码</li>\n<li>根据页码找到对应的存放数据的page</li>\n</ol>\n<h4 id=\"b-tree：\"><a href=\"#b-tree：\" class=\"headerlink\" title=\"b+tree：\"></a>b+tree：</h4><ul>\n<li>相邻的叶结点直接互相存在指针，减少遍历根节点和枝节点的重复劳动。相当于章节结尾的导读，优化范围查找</li>\n</ul>\n<h4 id=\"b-tree：-1\"><a href=\"#b-tree：-1\" class=\"headerlink\" title=\"b*tree：\"></a>b*tree：</h4><ul>\n<li>相邻枝节点也存在相互的指针，优化范围查找</li>\n</ul>\n<p><img src=\"/images/img-3.png\" alt=\"Btree\"></p>\n<h3 id=\"功能上的分类\"><a href=\"#功能上的分类\" class=\"headerlink\" title=\"功能上的分类\"></a>功能上的分类</h3><h4 id=\"辅助索引-S-怎么构建B树结构的\"><a href=\"#辅助索引-S-怎么构建B树结构的\" class=\"headerlink\" title=\"辅助索引(S)怎么构建B树结构的?\"></a>辅助索引(S)怎么构建B树结构的?</h4><p>（1）辅助索引是基于表的<strong>任意列</strong>进行生成的【任意列】<br>（2）取出索引列的所有值【取出列的所有键值】<br>（3）进行所有键值的排序<br>（4）将所有的键值按顺序落到BTree索引的叶子节点上【排序后落到叶子节点上】<br>（5）进而生成枝节点和根节点【生成BTree索引】<br>（6）叶子节点除了存储键值之外，还存储了相邻叶子节点的指针，另外还会保存原表数据的指针<br>（辅助索引的叶子节点直接存在指针(优化范围查找)；还会保存原表数据的指针，用于查找记录）</p>\n<h4 id=\"聚集索引-C-怎么构建B树结构的\"><a href=\"#聚集索引-C-怎么构建B树结构的\" class=\"headerlink\" title=\"聚集索引(C)怎么构建B树结构的?\"></a>聚集索引(C)怎么构建B树结构的?</h4><p>（1）建表时有主键列（如ID）【保证数据在数据页上的<strong>有序</strong>存储】<br>（2）表中进行数据存储，会按照ID列的顺序，有序的存储一行一行的数据到数据页(page)上(这个动作叫做聚集索引组织表：有序的使用段区页)【将有序的数据页(page)落到叶子节点上】<br>（3）表的数据页被作为聚集索引的叶子节点(有聚集索引的原表数据页，就是聚集索引的叶子节点)<br>（4）把叶子节点的主键值生成上层枝节点和根节点。<br>主键：（值不可重复，也不可为空（NULL），主键值不能被重用）</p>\n<h4 id=\"既有辅助索引又有聚集索引\"><a href=\"#既有辅助索引又有聚集索引\" class=\"headerlink\" title=\"既有辅助索引又有聚集索引\"></a>既有辅助索引又有聚集索引</h4><p><strong>辅助索引叶子节点的指针指向聚集索引–&gt;找到对应的记录</strong></p>\n<h4 id=\"只有辅助索引\"><a href=\"#只有辅助索引\" class=\"headerlink\" title=\"只有辅助索引\"></a>只有辅助索引</h4><p><strong>如果没有聚集索引，只有辅助索引，那么查找记录将是无序的。(相当于书有页码，但是页码是乱的你说气不气)</strong></p>\n<h4 id=\"聚集索引和辅助索引构成区别总结\"><a href=\"#聚集索引和辅助索引构成区别总结\" class=\"headerlink\" title=\"聚集索引和辅助索引构成区别总结\"></a>聚集索引和辅助索引构成区别总结</h4><ol>\n<li>聚集索引只能有一个,非空唯一,一般是主键      (聚集引索，唯一非空主键)</li>\n<li>辅助索引,可以有多个,是配合聚集索引使用的    (辅助引索，可多个，配合聚集引索)</li>\n<li>聚集索引叶子节点,就是磁盘的数据行有序存储的数据页</li>\n<li>MySQL是根据聚集索引,组织存储数据,数据存储时就是按照聚集索引的顺序进行存储数据</li>\n<li>辅助索引,只会提取索引键值,进行自动排序生成B树结构</li>\n</ol>\n<h4 id=\"辅助索引的细分\"><a href=\"#辅助索引的细分\" class=\"headerlink\" title=\"辅助索引的细分\"></a>辅助索引的细分</h4><p><img src=\"/images/img-39.png\" alt=\"辅助索引\"></p>\n<ol>\n<li>单列的辅助索引</li>\n</ol>\n<p><strong>理想化：</strong><br>2. 联合多列辅助索引（覆盖引索）//要查的值就是索引的值<br>    SQL只需要通过索引就可以返回查询所需要的数据，而不必通过二级索引查到主键之后再去查询数据。<br>3. 唯一索引  //唯一值多的索引列可减少索引树的遍历次数 </p>\n<h4 id=\"辅助索引建立原则\"><a href=\"#辅助索引建立原则\" class=\"headerlink\" title=\"辅助索引建立原则\"></a>辅助索引建立原则</h4><ol>\n<li>经常拿来做where条件的列 可作为辅助索引</li>\n<li>尽量拿唯一值多的列做辅助索引（减少索引树遍历的次数）</li>\n</ol>\n<h4 id=\"索引树的高度\"><a href=\"#索引树的高度\" class=\"headerlink\" title=\"索引树的高度\"></a>索引树的高度</h4><p>（1）数据行多， 分表<br>（2）索引列字符长度 ，前缀索引<br>（3）char &gt; varchar  ，表设计<br>（4）enum 优化索引高度，能用则用</p>\n<hr>\n<h3 id=\"索引管理\"><a href=\"#索引管理\" class=\"headerlink\" title=\"索引管理\"></a>索引管理</h3><p><img src=\"/images/img-40.png\" alt=\"索引管理\"></p>\n<hr>\n<h4 id=\"辅助索引建立\"><a href=\"#辅助索引建立\" class=\"headerlink\" title=\"辅助索引建立\"></a>辅助索引建立</h4><h5 id=\"在k2列中建立索引\"><a href=\"#在k2列中建立索引\" class=\"headerlink\" title=\"在k2列中建立索引\"></a>在k2列中建立索引</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; use;</span><br><span class=\"line\">mysql&gt; alter table t100w add index idx_k2(k2);</span><br><span class=\"line\">\t\t      表名                    索引名 列名  </span><br></pre></td></tr></table></figure>\n<h5 id=\"索引的查看：\"><a href=\"#索引的查看：\" class=\"headerlink\" title=\"索引的查看：\"></a>索引的查看：</h5><p><code>desc t100w;</code><br><img src=\"/images/img-41.png\" alt=\"desc\"><br><img src=\"/images/img-42.png\" alt=\"show\"></p>\n<h5 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h5><ol>\n<li>PRI ：主键引索</li>\n<li>MUL：非唯一辅助索引</li>\n<li>UNI：唯一性索引</li>\n</ol>\n<hr>\n<h4 id=\"唯一索引建立\"><a href=\"#唯一索引建立\" class=\"headerlink\" title=\"唯一索引建立\"></a>唯一索引建立</h4><p><strong>判断指定列是否可以建立唯一索引</strong></p>\n<h5 id=\"方法一：去重判断\"><a href=\"#方法一：去重判断\" class=\"headerlink\" title=\"方法一：去重判断\"></a>方法一：去重判断</h5><p><img src=\"/images/img-43.png\" alt=\"UNI\"></p>\n<h5 id=\"方法二：查看是否存在重复列\"><a href=\"#方法二：查看是否存在重复列\" class=\"headerlink\" title=\"方法二：查看是否存在重复列\"></a>方法二：查看是否存在重复列</h5><p><img src=\"/images/img-44.png\" alt=\"UNI\"></p>\n<h5 id=\"方法三：直接建立\"><a href=\"#方法三：直接建立\" class=\"headerlink\" title=\"方法三：直接建立\"></a>方法三：直接建立</h5><p><img src=\"/images/img-45.png\" alt=\"UNI\"></p>\n<h4 id=\"前缀索引（只能应用于字符串列）\"><a href=\"#前缀索引（只能应用于字符串列）\" class=\"headerlink\" title=\"前缀索引（只能应用于字符串列）\"></a>前缀索引（只能应用于字符串列）</h4><p><code>alter table city add index idx_name(name(5));</code>  &lt;==取前五个字符串</p>\n<hr>\n<h4 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h4><h5 id=\"建立联合索引：\"><a href=\"#建立联合索引：\" class=\"headerlink\" title=\"建立联合索引：\"></a>建立联合索引：</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table city add index idx_co_po(countrycode,population);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/img-46.png\" alt=\"1\"></p>\n<h5 id=\"删除联合索引：\"><a href=\"#删除联合索引：\" class=\"headerlink\" title=\"删除联合索引：\"></a>删除联合索引：</h5><p><code>mysql&gt; alter table city drop index idx_co_po;</code><br><img src=\"/images/img-47.png\" alt=\"2\"></p>\n<hr>\n<h3 id=\"执行计划分析-type分析\"><a href=\"#执行计划分析-type分析\" class=\"headerlink\" title=\"执行计划分析-type分析\"></a>执行计划分析-type分析</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p> <strong>上线新的查询语句之前，进行提前预估语句的性能<br> 在出现性能问题时，找到合理的解决思路</strong></p>\n<hr>\n<h4 id=\"执行计划获取\"><a href=\"#执行计划获取\" class=\"headerlink\" title=\"执行计划获取\"></a>执行计划获取</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc  select * from oldboy.t100w <span class=\"built_in\">where</span> k2=<span class=\"string\">&#x27;EF12&#x27;</span>\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">           <span class=\"built_in\">id</span>: 1</span><br><span class=\"line\">  select_type: SIMPLE</span><br><span class=\"line\">        table: t100w</span><br><span class=\"line\">   partitions: NULL</span><br><span class=\"line\">         <span class=\"built_in\">type</span>: ref</span><br><span class=\"line\">possible_keys: idx_k2</span><br><span class=\"line\">          key: idx_k2</span><br><span class=\"line\">      key_len: 17</span><br><span class=\"line\">          ref: const</span><br><span class=\"line\">         rows: 293</span><br><span class=\"line\">     filtered: 100.00</span><br><span class=\"line\">        Extra: NULL</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h5 id=\"重点关注\"><a href=\"#重点关注\" class=\"headerlink\" title=\"重点关注\"></a>重点关注</h5><p><code>able: t100w</code> |表信息<br><code>type: ref</code> |索引的应用级别<br><code>possible_keys: idx_k2</code> |可能会使用到的索引<br><code>key: idx_k2</code> |实际上使用的索引<br><code>key_len: 17</code> |联合索引覆盖长度<br><code>rows: 293</code> |查询的行数（越少越好）<br><code>Extra: NULL</code> |额外的信息</p>\n<hr>\n<h4 id=\"type：索引\"><a href=\"#type：索引\" class=\"headerlink\" title=\"type：索引\"></a>type：索引</h4><h5 id=\"执行计划的分析\"><a href=\"#执行计划的分析\" class=\"headerlink\" title=\"执行计划的分析\"></a>执行计划的分析</h5><p>type              索引的应用级别</p>\n<h5 id=\"ALL-全表扫描，不走索引\"><a href=\"#ALL-全表扫描，不走索引\" class=\"headerlink\" title=\"ALL :全表扫描，不走索引\"></a>ALL :全表扫描，不走索引</h5><p><strong>原因：</strong>没建立索引<br>     建立索引不走的<br><strong>以下情况可能会出现ALL的情况（查询条件不是确定值的话都可能出现ALL的情况）</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc select * from t100w;   //查全表</span><br><span class=\"line\">mysql&gt; desc select * from t100w <span class=\"built_in\">where</span> k1=<span class=\"string\">&#x27;aa&#x27;</span>;   //查询没有建立的索引列</span><br><span class=\"line\">（对于辅助索引）</span><br><span class=\"line\">mysql&gt; desc select * from t100w <span class=\"built_in\">where</span> k2 != <span class=\"string\">&#x27;aaaa&#x27;</span>;   //不等于 模糊查询</span><br><span class=\"line\">mysql&gt; desc select * from t100w <span class=\"built_in\">where</span> k2 like <span class=\"string\">&#x27;%xt%&#x27;</span>;    //%模糊查询</span><br><span class=\"line\">NOT IN //不走索引</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Index-全索引扫描\"><a href=\"#Index-全索引扫描\" class=\"headerlink\" title=\"Index :全索引扫描\"></a>Index :全索引扫描</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc select k2 from t100w; //这里查询的k2 就是辅助索引列</span><br></pre></td></tr></table></figure>\n<h5 id=\"range-索引范围扫描\"><a href=\"#range-索引范围扫描\" class=\"headerlink\" title=\"range :索引范围扫描\"></a>range :索引范围扫描</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">辅助索引 : &gt; &lt; &gt;= &lt;= like(开头不带%)受双向指针优化,<span class=\"keyword\">in</span> or（避免出现）</span><br><span class=\"line\">主键： != </span><br><span class=\"line\">mysql&gt; desc select * from world.city <span class=\"built_in\">where</span> countrycode like <span class=\"string\">&#x27;C%&#x27;</span></span><br><span class=\"line\">mysql&gt; desc select * from world.city <span class=\"built_in\">where</span> <span class=\"built_in\">id</span>!=3000;</span><br><span class=\"line\">mysql&gt; desc select * from world.city <span class=\"built_in\">where</span> <span class=\"built_in\">id</span>&gt;3000;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; desc select * from world.city <span class=\"built_in\">where</span> countrycode <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;CHN&#x27;</span>,<span class=\"string\">&#x27;USA&#x27;</span>); //不推荐，双向指针优化对<span class=\"keyword\">in</span>不生效</span><br><span class=\"line\">改写：</span><br><span class=\"line\">desc</span><br><span class=\"line\">select * from world.city <span class=\"built_in\">where</span> countrycode=<span class=\"string\">&#x27;CHN&#x27;</span></span><br><span class=\"line\">union all </span><br><span class=\"line\">select * from world.city <span class=\"built_in\">where</span> countrycode=<span class=\"string\">&#x27;USA&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"ref-辅助索引等值查询\"><a href=\"#ref-辅助索引等值查询\" class=\"headerlink\" title=\"ref : 辅助索引等值查询\"></a>ref : 辅助索引等值查询</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; desc select * from city <span class=\"built_in\">where</span> countrycode=<span class=\"string\">&#x27;CHN&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">eq_ref ：\t在多表连接查询是on的条件列是唯一索引或主键</span><br><span class=\"line\">mysql&gt; desc select a.name,b.name ,b.surfacearea </span><br><span class=\"line\">from city as a </span><br><span class=\"line\"><span class=\"built_in\">join</span> country as b </span><br><span class=\"line\">on a.countrycode=b.code </span><br><span class=\"line\"><span class=\"built_in\">where</span> a.population &lt;100;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/img-48.png\" alt=\"3\"></p>\n<h5 id=\"const-system-主键或唯一键等值查询\"><a href=\"#const-system-主键或唯一键等值查询\" class=\"headerlink\" title=\"const,system : 主键或唯一键等值查询\"></a>const,system : 主键或唯一键等值查询</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; DESC select * from city <span class=\"built_in\">where</span> <span class=\"built_in\">id</span>=10;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Extra\"><a href=\"#Extra\" class=\"headerlink\" title=\"Extra\"></a>Extra</h4><p><code>using filesort</code>：只要出现此提示，一般是where条件和order by条件没有一起建立联合索引导致的<br>where走了索引 但是后面的order by条件数据库要给他重新排序，比较消耗计算机资源<br><strong>//首先考虑建立联合索引</strong></p>\n<h5 id=\"联合索引建立前：\"><a href=\"#联合索引建立前：\" class=\"headerlink\" title=\"联合索引建立前：\"></a>联合索引建立前：</h5><p><img src=\"/images/img-49.png\" alt=\"4\"></p>\n<h5 id=\"联合索引建立后：\"><a href=\"#联合索引建立后：\" class=\"headerlink\" title=\"联合索引建立后：\"></a>联合索引建立后：</h5><p><img src=\"/images/img-50.png\" alt=\"5\"></p>\n<hr>\n<h4 id=\"key-len-lt-针对字符\"><a href=\"#key-len-lt-针对字符\" class=\"headerlink\" title=\"key_len: &lt;==针对字符\"></a>key_len: &lt;==针对字符</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">desc </span><br><span class=\"line\">         字符长度\t\tkey_len（有设置not null）         key_len（没设置设置not null）</span><br><span class=\"line\">latin1     1          char(10)*1 + not null    =10       char(10)*1  =10+1</span><br><span class=\"line\">utf8       3\t      char(10)*3 + not null    =30\t   char(10)*3  =30+1</span><br><span class=\"line\">gbk        2          char(10)*2 + not null    =20</span><br><span class=\"line\">utf8mb4    4\t      char(10)*4 + not null    =40\t</span><br></pre></td></tr></table></figure>\n<h5 id=\"扩展：\"><a href=\"#扩展：\" class=\"headerlink\" title=\"扩展：\"></a>扩展：</h5><p><strong>key_len 到底长好  还是短好？</strong></p>\n<ul>\n<li><p>维度一： 索引列的列值长度来看<br>越短越好，一般针对前缀索引（前缀索引好处：1.参差不齐的列均匀都规整起来。2.列值长度限制在一定范围）</p>\n</li>\n<li><p>维度二： 从联合索引覆盖长度来看<br>覆盖长度越长越好</p>\n</li>\n</ul>\n<h4 id=\"explain-desc-使用场景（面试题）\"><a href=\"#explain-desc-使用场景（面试题）\" class=\"headerlink\" title=\"explain(desc)使用场景（面试题）\"></a>explain(desc)使用场景（面试题）</h4><p><strong>题目意思:  我们公司业务慢,请你从数据库的角度分析原因</strong></p>\n<ol>\n<li>mysql出现性能问题,我总结有两种情况:<br>（1）应急性的慢：突然夯住</li>\n</ol>\n<p><strong>应急情况:数据库hang(卡了,资源耗尽)</strong><br>处理过程:</p>\n<ol>\n<li>show processlist;  获取到导致数据库hang的语句</li>\n<li>explain 分析SQL的执行计划,有没有走索引,索引的类型情况</li>\n<li>建索引,改语句</li>\n</ol>\n<hr>\n<h3 id=\"索引应用规范\"><a href=\"#索引应用规范\" class=\"headerlink\" title=\"索引应用规范\"></a>索引应用规范</h3><p>业务</p>\n<ol>\n<li>产品的功能</li>\n<li>用户的行为<br>“热”查询语句 —&gt;较慢—&gt;slowlog<br>“热”数据</li>\n</ol>\n<h4 id=\"建立索引的原则（DBA运维规范）\"><a href=\"#建立索引的原则（DBA运维规范）\" class=\"headerlink\" title=\"建立索引的原则（DBA运维规范）\"></a>建立索引的原则（DBA运维规范）</h4><h5 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h5><p>为了使索引的使用效率更高，在创建索引时，必须考虑在哪些字段上创建索引和创建什么类型的索引。<br>那么索引设计原则又是怎样的?</p>\n<h5 id=\"必须的-建表时一定要有主键-一般是个无关列\"><a href=\"#必须的-建表时一定要有主键-一般是个无关列\" class=\"headerlink\" title=\"(必须的) 建表时一定要有主键,一般是个无关列\"></a>(必须的) 建表时一定要有主键,一般是个无关列</h5><p>略.回顾一下,聚集索引结构.</p>\n<h5 id=\"选择唯一性索引\"><a href=\"#选择唯一性索引\" class=\"headerlink\" title=\"选择唯一性索引\"></a>选择唯一性索引</h5><ul>\n<li>唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。<br>例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。<br>如果使用姓名的话，可能存在同名现象，从而降低查询速度。</li>\n</ul>\n<p>优化方案:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(1) 如果非得使用重复值较多的列作为查询条件(例如:男女),可以将表逻辑拆分</span><br><span class=\"line\">(2) 可以将此列和其他的查询类,做联和索引</span><br><span class=\"line\">select count(*) from world.city;</span><br><span class=\"line\">select count(distinct countrycode) from world.city;</span><br><span class=\"line\">select count(distinct countrycode,population ) from world.city;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"必须的-为经常需要where-、ORDER-BY、GROUP-BY-join-on等操作的字段，排序操作会浪费很多时间。\"><a href=\"#必须的-为经常需要where-、ORDER-BY、GROUP-BY-join-on等操作的字段，排序操作会浪费很多时间。\" class=\"headerlink\" title=\"(必须的) 为经常需要where 、ORDER BY、GROUP BY,join on等操作的字段，排序操作会浪费很多时间。\"></a>(必须的) 为经常需要where 、ORDER BY、GROUP BY,join on等操作的字段，排序操作会浪费很多时间。</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">where</span>  A B C      ----》 A  B  C</span><br><span class=\"line\"><span class=\"keyword\">in</span> </span><br><span class=\"line\"><span class=\"built_in\">where</span> A   group by B  order by C</span><br><span class=\"line\">A,B，C</span><br><span class=\"line\"></span><br><span class=\"line\">WHERE A、GROUP BY B、ORDER BY C</span><br><span class=\"line\"> 1. 建立联合索引 </span><br><span class=\"line\"> 2. (A,B,C) //严格按照子句的执行顺序建立，不等值的情况尽量避免</span><br></pre></td></tr></table></figure>\n<p>如果为其建立索引，优化查询</p>\n<ul>\n<li><strong>注：如果经常作为条件的列，重复值特别多，可以建立联合索引。</strong></li>\n</ul>\n<h5 id=\"尽量使用前缀来索引\"><a href=\"#尽量使用前缀来索引\" class=\"headerlink\" title=\"尽量使用前缀来索引\"></a>尽量使用前缀来索引</h5><ul>\n<li><strong>如果索引字段的值很长，最好使用值的前缀来索引。</strong></li>\n</ul>\n<h5 id=\"限制索引的数目\"><a href=\"#限制索引的数目\" class=\"headerlink\" title=\"限制索引的数目\"></a>限制索引的数目</h5><p><strong>索引的数目不是越多越好。</strong><br>可能会产生的问题:</p>\n<ul>\n<li>1）每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。</li>\n<li>2）修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。（增删改索引会涉及到短时间的锁表）</li>\n<li>3）优化器的负担会很重,有可能会影响到优化器的选择.<br>percona-toolkit中有个工具,专门分析索引是否有用</li>\n</ul>\n<h5 id=\"删除不再使用或者很少使用的索引-percona-toolkit\"><a href=\"#删除不再使用或者很少使用的索引-percona-toolkit\" class=\"headerlink\" title=\"删除不再使用或者很少使用的索引(percona toolkit)\"></a>删除不再使用或者很少使用的索引(percona toolkit)</h5><p>pt-duplicate-key-checker</p>\n<p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理<br>员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p>\n<h5 id=\"大表加索引-要在业务不繁忙期间操作（涉及到锁表和排序）\"><a href=\"#大表加索引-要在业务不繁忙期间操作（涉及到锁表和排序）\" class=\"headerlink\" title=\"大表加索引,要在业务不繁忙期间操作（涉及到锁表和排序）\"></a>大表加索引,要在业务不繁忙期间操作（涉及到锁表和排序）</h5><h5 id=\"尽量少在经常更新值的列上建索引，10万行以下的表不需要建索引\"><a href=\"#尽量少在经常更新值的列上建索引，10万行以下的表不需要建索引\" class=\"headerlink\" title=\"尽量少在经常更新值的列上建索引，10万行以下的表不需要建索引\"></a>尽量少在经常更新值的列上建索引，10万行以下的表不需要建索引</h5><h5 id=\"建索引原则\"><a href=\"#建索引原则\" class=\"headerlink\" title=\"建索引原则\"></a>建索引原则</h5><ul>\n<li>(1) 必须要有主键,如果没有可以做为主键条件的列,创建无关列</li>\n<li>(2) 经常做为where条件列  order by  group by  join on, distinct 的条件(业务:产品功能+用户行为)</li>\n<li>(3) 最好使用唯一值多的列作为索引,如果索引列重复值较多,可以考虑使用联合索引</li>\n<li>(4) 列值长度较长的索引列,我们建议使用前缀索引.</li>\n<li>(5) 降低索引条目,一方面不要创建没用索引,不常使用的索引清理,percona toolkit(xxxxx)</li>\n<li>(6) 索引维护要避开业务繁忙期</li>\n</ul>\n<h5 id=\"关于联合索引\"><a href=\"#关于联合索引\" class=\"headerlink\" title=\"关于联合索引 *****\"></a>关于联合索引 *****</h5><ul>\n<li>(1) where A、GROUP BY B、ORDER BY C   —&gt; (A,B,C)//联合索引顺序</li>\n<li>(2) where  A B C  <ul>\n<li>(2.1) 都是等值 ,在5.5 以后无关索引顺序，把控一个原则唯一值多的列放在联合索引的最左侧</li>\n<li>(2.2) 如果有不等值，例如以下情况<pre><code>select where  A= and  B&gt; and  C=\n索引顺序，ACB ，语句改写为 ACB\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"不走索引情况\"><a href=\"#不走索引情况\" class=\"headerlink\" title=\"不走索引情况\"></a>不走索引情况</h3><h4 id=\"没有查询条件，或者查询条件没有建立索引\"><a href=\"#没有查询条件，或者查询条件没有建立索引\" class=\"headerlink\" title=\"没有查询条件，或者查询条件没有建立索引\"></a>没有查询条件，或者查询条件没有建立索引</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from tab;       全表扫描。</span><br><span class=\"line\">select  * from tab <span class=\"built_in\">where</span> 1=1;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1、对用户查看是非常痛苦的。</li>\n<li>2、对服务器来讲毁灭性的。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL改写成以下语句：</span><br><span class=\"line\">select  * from  tab  order by  price  <span class=\"built_in\">limit</span> 10 ;         需要在price列上建立索引</span><br><span class=\"line\">select  * from  tab <span class=\"built_in\">where</span> name=<span class=\"string\">&#x27;zhangsan&#x27;</span>          name列没有索引</span><br></pre></td></tr></table></figure>\n<p>改：</p>\n<ul>\n<li>1、换成有索引的列作为查询条件</li>\n<li>2、将name列建立索引</li>\n</ul>\n<h4 id=\"查询结果集是原表中的大部分数据，应该是25％以上。\"><a href=\"#查询结果集是原表中的大部分数据，应该是25％以上。\" class=\"headerlink\" title=\"查询结果集是原表中的大部分数据，应该是25％以上。\"></a>查询结果集是原表中的大部分数据，应该是25％以上。</h4><p><strong>查询的结果集，超过了总数行数25%，优化器觉得就没有必要走索引了。</strong><br>假如：tab表 <code>id，name</code>    id:1-100w  ，id列有(辅助)索引<br><code>select * from tab  where id&gt;500000;</code><br><strong>解决方案：</strong></p>\n<ul>\n<li>如果业务允许，可以使用limit控制。<br>怎么改写 ？</li>\n<li>结合业务判断，有没有更好的方式。如果没有更好的改写方案</li>\n<li>尽量不要在mysql存放这个数据了。放到redis里面。</li>\n</ul>\n<h4 id=\"索引本身失效，统计数据不真实\"><a href=\"#索引本身失效，统计数据不真实\" class=\"headerlink\" title=\"索引本身失效，统计数据不真实\"></a>索引本身失效，统计数据不真实</h4><ul>\n<li>1.索引有自我维护的能力。</li>\n<li>2.对于表内容变化比较频繁的情况下，有可能会出现索引失效（来不及更新索引信息，优化器选择一次后发现不行以后就不会选择该索引）。</li>\n</ul>\n<p><strong>解决方案：</strong>一般是删除重建<br><strong>现象：</strong>有一条select语句平常查询时很快,突然有一天很慢,会是什么原因<br>select?  —&gt;索引失效，统计数据不真实<br>DML ?   —&gt;锁冲突，资源耗尽</p>\n<h4 id=\"查询条件使用函数在索引列上，或者对索引列进行运算，运算包括-，-，-，-，-等\"><a href=\"#查询条件使用函数在索引列上，或者对索引列进行运算，运算包括-，-，-，-，-等\" class=\"headerlink\" title=\"查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，*，/，! 等)\"></a>查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，*，/，! 等)</h4><p><strong>造成原因：</strong>条件列中出现运算则会不走索引<br>例子：<br>错误的例子：<code>select * from test where id-1=9;</code><br>正确的例子：<code>select * from test where id=10;</code></p>\n<h4 id=\"隐式转换导致索引失效-这一点应当引起重视-也是开发中经常会犯的错误\"><a href=\"#隐式转换导致索引失效-这一点应当引起重视-也是开发中经常会犯的错误\" class=\"headerlink\" title=\"隐式转换导致索引失效.这一点应当引起重视.也是开发中经常会犯的错误.\"></a>隐式转换导致索引失效.这一点应当引起重视.也是开发中经常会犯的错误.</h4><p>这样会导致索引失效. 错误的例子：<br><strong>造成原因：</strong>查询的列中带有函数操作，直接全表扫描</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table tab add index inx_tel(telnum);   //在电话号码创建辅助索引</span><br><span class=\"line\">Query OK, 0 rows affected (0.03 sec)</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class=\"line\">mysql&gt; desc tab;</span><br><span class=\"line\">+--------+-----------------+--------+-------+----------+-------+</span><br><span class=\"line\">| Field   | Type             | Null   | Key  | Default | Extra |</span><br><span class=\"line\">+--------+-----------------+--------+-------+----------+-------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>         | int(11)          | YES  |          | NULL   |           |</span><br><span class=\"line\">| name   | varchar(20) | YES  |         | NULL   |           |</span><br><span class=\"line\">| telnum | varchar(20) | YES  | MUL | NULL   |           |  //此页为字符串类型</span><br><span class=\"line\">+--------+-----------------+--------+-------+----------+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from tab <span class=\"built_in\">where</span> telnum=<span class=\"string\">&#x27;1333333&#x27;</span>;   //带引号的查询，走索引</span><br><span class=\"line\">+------+------+---------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>  | name | telnum  |</span><br><span class=\"line\">+------+------+---------+</span><br><span class=\"line\">|    1 | a    | 1333333 |</span><br><span class=\"line\">+------+------+---------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\">mysql&gt; select * from tab <span class=\"built_in\">where</span> telnum=1333333;  //不带引号的查询，mysql将数字类型的查询转为了字符串类型，造成了查询列中带有函数操作，所以不走索引</span><br><span class=\"line\">+------+------+---------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>  | name | telnum  |</span><br><span class=\"line\">+------+------+---------+</span><br><span class=\"line\">|    1 | a    | 1333333 |</span><br><span class=\"line\">+------+------+---------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; explain  select * from tab <span class=\"built_in\">where</span> telnum=<span class=\"string\">&#x27;1333333&#x27;</span>;</span><br><span class=\"line\">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | select_type | table | <span class=\"built_in\">type</span> | possible_keys | key    | key_len | ref  | rows | Extra                |</span><br><span class=\"line\">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">|  1 | SIMPLE      | tab  | ref  | inx_tel      | inx_tel | 63      | const |    1 | Using index condition |</span><br><span class=\"line\">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\">mysql&gt; explain  select * from tab <span class=\"built_in\">where</span> telnum=1333333;</span><br><span class=\"line\">+----+-------------+-------+------+---------------+------+---------+------+-----+-------------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span> | select_type | table | <span class=\"built_in\">type</span> | possible_keys | key  | key_len | ref  | rows | Extra      |</span><br><span class=\"line\">+----+-------------+-------+------+---------------+------+---------+------+-----+-------------+</span><br><span class=\"line\">|  1 | SIMPLE      | tab  | ALL  | inx_tel      | NULL | NULL    | NULL |    2 | Using <span class=\"built_in\">where</span> |</span><br><span class=\"line\">+----+-------------+-------+------+---------------+------+---------+------+-----+-------------+</span><br></pre></td></tr></table></figure>\n<h4 id=\"单独的-gt-lt-防止出现结果集大于全表25-in-有可能走，也有可能不走，和结果集有关，尽量结合业务添加limit\"><a href=\"#单独的-gt-lt-防止出现结果集大于全表25-in-有可能走，也有可能不走，和结果集有关，尽量结合业务添加limit\" class=\"headerlink\" title=\"单独的&gt;,&lt;(防止出现结果集大于全表25%)   ,in 有可能走，也有可能不走，和结果集有关，尽量结合业务添加limit\"></a>单独的&gt;,&lt;(防止出现结果集大于全表25%)   ,in 有可能走，也有可能不走，和结果集有关，尽量结合业务添加limit</h4><p><code>or</code>或<code>in</code>尽量改成<code>union</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">EXPLAIN  SELECT * FROM teltab WHERE telnum  IN (<span class=\"string\">&#x27;110&#x27;</span>,<span class=\"string\">&#x27;119&#x27;</span>);</span><br><span class=\"line\">改写成：</span><br><span class=\"line\">EXPLAIN SELECT * FROM teltab WHERE telnum=<span class=\"string\">&#x27;110&#x27;</span></span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT * FROM teltab WHERE telnum=<span class=\"string\">&#x27;119&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>原因：改写后索引的应用级别高</strong></p>\n<h4 id=\"like-“-”-百分号在最前面不走（针对字符串列）\"><a href=\"#like-“-”-百分号在最前面不走（针对字符串列）\" class=\"headerlink\" title=\"like “%_” 百分号在最前面不走（针对字符串列）\"></a>like “%_” 百分号在最前面不走（针对字符串列）</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM teltab WHERE telnum LIKE <span class=\"string\">&#x27;31%&#x27;</span>  走range索引扫描</span><br><span class=\"line\">EXPLAIN SELECT * FROM teltab WHERE telnum LIKE <span class=\"string\">&#x27;%110&#x27;</span>  不走索引</span><br><span class=\"line\">%linux%类的搜索需求，可以使用elasticsearch+mongodb 专门做搜索服务的数据库产品</span><br></pre></td></tr></table></figure>\n","categories":["DBA"],"tags":["MySQL","SQL","索引"]},{"title":"Redis-主从复制&数据恢复&故障处理&哨兵的故障转移","url":"/forward/da64184b.html","content":"<p><img src=\"/images/img-104.png\" alt=\"主从原理\"></p>\n<h2 id=\"redis主从复制准备工作\"><a href=\"#redis主从复制准备工作\" class=\"headerlink\" title=\"redis主从复制准备工作\"></a>redis主从复制准备工作</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用rsync服务将db01目录下已经编译好的redis安装目录推送到从节点db02上。</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># rsync -avz -e &quot;ssh -p 22&quot; /application/redis_cluster root@10.0.0.52:/application/</span></span><br><span class=\"line\"></span><br><span class=\"line\">检查db02：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># tree /application/redis_cluster/ -L 1</span></span><br><span class=\"line\">/application/redis_cluster/</span><br><span class=\"line\">├── redis -&gt; /application/redis_cluster/redis-5.0.5/</span><br><span class=\"line\">├── redis-3.2.12</span><br><span class=\"line\">├── redis-5.0.5</span><br><span class=\"line\">└── redis_6379</span><br><span class=\"line\"></span><br><span class=\"line\">修改配置文件：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># cat /application/redis_cluster/redis_6379/conf/redis_6379.conf</span></span><br><span class=\"line\"><span class=\"comment\">### 以守护进程模式启动</span></span><br><span class=\"line\">daemonize <span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"comment\">### 绑定的主机地址</span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 10.0.0.52 127.0.0.1  //更改ip</span><br><span class=\"line\"><span class=\"comment\">### 监听端口</span></span><br><span class=\"line\">port 6379</span><br><span class=\"line\"><span class=\"comment\">### pid 文件和 log 文件的保存地址</span></span><br><span class=\"line\">pidfile /application/redis_cluster/redis_6379/pid/redis_6379.pid</span><br><span class=\"line\">logfile /application/redis_cluster/redis_6379/logs/redis_6379.<span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\">### 设置数据库的数量，默认数据库为 0</span></span><br><span class=\"line\">databases 16</span><br><span class=\"line\"><span class=\"comment\">### 指定本地持久化文件的文件名,默认是 dump.rdb</span></span><br><span class=\"line\">dbfilename redis_6379.rdb</span><br><span class=\"line\"><span class=\"comment\">### 本地数据库的目录</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /data/redis_cluster/redis_6379</span><br><span class=\"line\">save 60 1000</span><br><span class=\"line\"><span class=\"comment\">#打开AOF持久化功能</span></span><br><span class=\"line\">appendonly <span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"comment\">##每秒执行一次持久化操作（写入日志）</span></span><br><span class=\"line\">appendfsync everysec</span><br><span class=\"line\"></span><br><span class=\"line\">创建持久化数据目录：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mkdir -p /data/redis_cluster/redis_6379/  #这里如果不创建，那么redis没办法启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">添加环境变量：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># cat &gt;&gt;/etc/bashrc&lt;&lt;&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/application/redis_cluster/redis/src:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># redis-server -v</span></span><br><span class=\"line\">Redis server v=5.0.5 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=80d2ef2db5b4103a</span><br><span class=\"line\"></span><br><span class=\"line\">启动：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># systemctl restart redis6379</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># systemctl status redis6379</span></span><br><span class=\"line\">● redis6379.service - Redis</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/redis6379.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since 一 2020-05-11 13:50:05 CST; 14s ago</span><br><span class=\"line\"> Main PID: 7657 (redis-server)</span><br><span class=\"line\">   CGroup: /system.slice/redis6379.service</span><br><span class=\"line\">           └─7657 /application/redis_cluster/redis/src/redis-server 10.0.0.52:6379</span><br><span class=\"line\"></span><br><span class=\"line\">5月 11 13:50:05 db02 systemd[1]: Started Redis.</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># ps -ef | grep redis</span></span><br><span class=\"line\">root      7657     1  0 13:50 ?        00:00:00 /application/redis_cluster/redis/src/redis-server 10.0.0.52:6379</span><br><span class=\"line\">root      7664  7500  0 13:50 pts/0    00:00:00 grep --color=auto redis</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># redis-cli </span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br></pre></td></tr></table></figure>\n<p>redis systemd管理：<a href=\"https://cakepanit.com/forward/321e3c2f.html#9-systemctl%E7%AE%A1%E7%90%86Redis%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8\">Redis Systemd</a></p>\n<h2 id=\"回顾mysql开启主从复制步骤\"><a href=\"#回顾mysql开启主从复制步骤\" class=\"headerlink\" title=\"回顾mysql开启主从复制步骤\"></a>回顾mysql开启主从复制步骤</h2><ul>\n<li>2.1打开binlog，建立复制授权用户</li>\n<li>2.2server id不同</li>\n<li>2.3主库数据导出 mysqldump xtrabackup<ul>\n<li> <code>--master-data=2</code> </li>\n<li> <code>--singxZxdasd-xasd=1</code></li>\n</ul>\n</li>\n<li>2.4从库数据导入</li>\n<li>2.5配置主从参数</li>\n<li>2.6yes 延迟</li>\n</ul>\n<h2 id=\"Redis主从复制\"><a href=\"#Redis主从复制\" class=\"headerlink\" title=\"Redis主从复制\"></a>Redis主从复制</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li>在分布式系统中为了解决单点问题,通常会把数据复制多个副本到其他机器,满足故障恢复和负载均衡等求.Redis 也是如此,提供了复制功能.</li>\n<li>复制功能是高可用 Redis 的基础,哨兵和集群都是在复制的基础上实现高可用的.</li>\n</ul>\n<h3 id=\"建立复制\"><a href=\"#建立复制\" class=\"headerlink\" title=\"建立复制\"></a>建立复制</h3><p>每个从节点只能有一个主节点,主节点可以有多个从节点.<br>配置复制的方式有三种:</p>\n<ul>\n<li>1.在配置文件中加入 <code>slaveof &#123;masterHost&#125; &#123;masterPort&#125; </code>随 redis 启动生效.</li>\n<li>2.在 redis-server 启动命令后加入<code>—slaveof &#123;masterHost&#125; &#123;masterPort&#125;</code>生效.</li>\n<li>3.直接使用命令:<code>slaveof &#123;masterHost&#125; &#123;masterPort&#125;</code>生效.不推荐</li>\n</ul>\n<p>查看复制状态信息命令<br><code>Info replication</code></p>\n<h3 id=\"断开复制\"><a href=\"#断开复制\" class=\"headerlink\" title=\"断开复制\"></a>断开复制</h3><p>Slaveof 命令不但可以建立复制,还可以在从节点执行 <code>slaveof no one</code> 来断开与主节点复制关系.<br>断开复制主要流程:</p>\n<ul>\n<li>1.断开与主节点复制关系</li>\n<li>2.从节点晋升为主节点<ul>\n<li>从节点断开复制后不会抛弃原有数据,只是无法再获取主节点上的数据变化.</li>\n<li>通过 slaveof 命令还可以实现切主操作,所谓切主是指把当前从节点对主节点的复制切换到另一个主节点.执行 slaveof {newMasterIp} {newMasterPort}命令即可.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"切主操作流程如下\"><a href=\"#切主操作流程如下\" class=\"headerlink\" title=\"切主操作流程如下:\"></a>切主操作流程如下:</h3><ul>\n<li>1.断开与旧主节点的复制关系</li>\n<li>2.与新主节点建立复制关系</li>\n<li>3.删除从节点当前所有数据</li>\n<li>4.对新主节点进行复制操作</li>\n</ul>\n<p><strong>提示:</strong> 线上操作一定要小心,因为切主后会清空之前所有的数据.</p>\n<h3 id=\"Redis主从复制工作过程\"><a href=\"#Redis主从复制工作过程\" class=\"headerlink\" title=\"Redis主从复制工作过程\"></a>Redis主从复制工作过程</h3><ul>\n<li>1 从库向主库发起同步请求</li>\n<li>2 主库接收到从库的同步请求</li>\n<li>3 主库开始bgsave生成rdb文件</li>\n<li>4 主库生成完之后，保存到磁盘成功</li>\n<li>5 主库将RDB文件发送给从库</li>\n<li>6 从库接收主库的RDB文件</li>\n<li>7 从库清空自己所有的数据</li>\n<li>8 从库将接受的RDB文件载入到内存中</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//主库中插入数据</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># for i in &#123;1..2000&#125;;do redis-cli set k_$&#123;i&#125; v_$&#123;i&#125;; done</span></span><br><span class=\"line\"></span><br><span class=\"line\">//从库执行slaveof</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br><span class=\"line\">127.0.0.1:6379&gt; slaveof 10.0.0.51 6379</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">   1) <span class=\"string\">&quot;k_1399&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;k_1479&quot;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"危险操作：\"><a href=\"#危险操作：\" class=\"headerlink\" title=\"危险操作：\"></a>危险操作：</h2><h3 id=\"如果主库不小心同步了空的从库，会导致主库数据全部丢失\"><a href=\"#如果主库不小心同步了空的从库，会导致主库数据全部丢失\" class=\"headerlink\" title=\"如果主库不小心同步了空的从库，会导致主库数据全部丢失\"></a>如果主库不小心同步了空的从库，会导致主库数据全部丢失</h3><h3 id=\"谨慎的操作流程：\"><a href=\"#谨慎的操作流程：\" class=\"headerlink\" title=\"谨慎的操作流程：\"></a>谨慎的操作流程：</h3><ul>\n<li>1.在配置文件里配置slaveof参数，不要热更新配置</li>\n<li>2.主库主动执行bgsave保存rdb文件，然后备份一份rdb文件</li>\n</ul>\n<h3 id=\"恢复操作：\"><a href=\"#恢复操作：\" class=\"headerlink\" title=\"恢复操作：\"></a>恢复操作：</h3><ul>\n<li>1.主库停止复制关系，注释掉aof相关参数</li>\n<li>2.停止主库</li>\n<li>3.删除原有的rdb数据，重命名备份的rdb文件</li>\n<li>4.重新启动主库，将rdb文件导入到内存里</li>\n</ul>\n<h2 id=\"redis数据恢复\"><a href=\"#redis数据恢复\" class=\"headerlink\" title=\"redis数据恢复\"></a>redis数据恢复</h2><h3 id=\"redis持久化数据备份\"><a href=\"#redis持久化数据备份\" class=\"headerlink\" title=\"redis持久化数据备份\"></a>redis持久化数据备份</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ll /data/redis_cluster/redis_6379/redis_6379.rdb </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 27967 5月  11 14:41 /data/redis_cluster/redis_6379/redis_6379.rdb</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># md5sum /data/redis_cluster/redis_6379/redis_6379.rdb</span></span><br><span class=\"line\">c9fec881d05c4282fb0e3ae4bf725a83  /data/redis_cluster/redis_6379/redis_6379.rdb</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cp /data/redis_cluster/redis_6379/redis_6379.rdb /data/redis_cluster/redis_6379/redis_6379.rdb.bak</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># md5sum /data/redis_cluster/redis_6379/redis_6379.rdb.bak</span></span><br><span class=\"line\">c9fec881d05c4282fb0e3ae4bf725a83  /data/redis_cluster/redis_6379/redis_6379.rdb.bak</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis数据恢复过程\"><a href=\"#redis数据恢复过程\" class=\"headerlink\" title=\"redis数据恢复过程\"></a>redis数据恢复过程</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.停止db01的redis服务</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># pkill redis</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -ef|grep redis</span></span><br><span class=\"line\"></span><br><span class=\"line\">2.注释掉配置文件中的主从关系，并替换持久化数据为全备</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cp /data/redis_cluster/redis_6379/redis_6379.rdb.bak /data/redis_cluster/redis_6379/redis_6379.rdb</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span>：是否覆盖<span class=\"string\">&quot;/data/redis_cluster/redis_6379/redis_6379.rdb&quot;</span>？ y</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl start redis6379</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -ef|grep redis</span></span><br><span class=\"line\">root       933     1  0 15:33 ?        00:00:00 /application/redis_cluster/redis/src/redis-server 10.0.0.51:6379</span><br><span class=\"line\">root       938   861  0 15:33 pts/0    00:00:00 grep --color=auto redis</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli </span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">   1) <span class=\"string\">&quot;k_238&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;k_329&quot;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主库故障解决流程\"><a href=\"#主库故障解决流程\" class=\"headerlink\" title=\"主库故障解决流程\"></a>主库故障解决流程</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br><span class=\"line\">SLAVEOF 10.0.0.51 6379</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##查看db02日志</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># tail -f /opt/redis_cluster/redis_6379/logs/redis_6379.log </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##关闭db01,主库故障</span></span><br><span class=\"line\">redis-cli shutdown</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##从库如何接管</span></span><br><span class=\"line\">从库db02slaveof no one取消复制关系</span><br><span class=\"line\">redis-cli -h db02 -p 6379 slaveof no one</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##db02备份从库数据</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/redis_cluster/redis_6379</span><br><span class=\"line\"><span class=\"built_in\">cp</span> redis_6379.rdb redis_6379.rdb.bak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##db01旧主库修复上线，成为db02的从节点</span></span><br><span class=\"line\">redis-server /opt/redis_cluster/redis_6379/conf/redis_6379.conf</span><br><span class=\"line\">SLAVEOF 10.0.0.52 6379 </span><br><span class=\"line\">keys *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##负载均衡关闭后端负载，防止数据写入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##修复后的db01从库重新升级为主库</span></span><br><span class=\"line\">SLAVEOF no one</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##代码修改为主库db01的IP，负载均衡重新挂载后端服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##db02重新生成主从关系</span></span><br><span class=\"line\">SLAVEOF 10.0.0.51 6379 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##确认数据同步正常</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis哨兵\"><a href=\"#Redis哨兵\" class=\"headerlink\" title=\"Redis哨兵\"></a>Redis哨兵</h2><h3 id=\"哨兵介绍\"><a href=\"#哨兵介绍\" class=\"headerlink\" title=\"哨兵介绍\"></a>哨兵介绍</h3><p>Sentinel 介绍</p>\n<ul>\n<li>Redis 的<strong>主从模式</strong>下，主节点一旦发生故障不能提供服务，需要<strong>人工干预</strong>，将从节点晋升为主节点，同时还需要<strong>修改客户端配置</strong>。对于很多应用场景这种方式无法接受。</li>\n<li>Sentinel（哨兵）架构解决了 redis 主从人工干预的问题。</li>\n<li>Redis Sentinel 是 redis 的高可用实现方案，实际生产环境中，对提高整个系统可用性非常有帮助的。</li>\n</ul>\n<h3 id=\"哨兵主要功能\"><a href=\"#哨兵主要功能\" class=\"headerlink\" title=\"哨兵主要功能\"></a>哨兵主要功能</h3><p>Redis Sentinel 是一个分布式系统， Redis Sentinel 为 Redis 提供高可用性。可以在没有人为干预的<br>情况下阻止某种类型的故障。<br>Redis 的 Sentinel 系统用于管理多个 Redis 服务器（instance）该系统执行以下三个任务：</p>\n<ol>\n<li>监控（Monitoring）：</li>\n</ol>\n<ul>\n<li>Sentinel 会不断地定期检查你的主服务器和从服务器是否运作正常。</li>\n</ul>\n<ol start=\"2\">\n<li>提醒（Notification）：</li>\n</ol>\n<ul>\n<li>当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</li>\n</ul>\n<ol start=\"3\">\n<li>自动故障迁移（Automatic failover）：<br>当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从<br>服务器升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失<br>效的主服务器时， 集群也会向客户端返回新主服务器的地址， 使得集群可以使用新主服务器代替失效服务器</li>\n</ol>\n<p>架构图：<br><img src=\"/images/img-101.png\" alt=\"Sentinel\"></p>\n<h3 id=\"架构规划\"><a href=\"#架构规划\" class=\"headerlink\" title=\"架构规划\"></a>架构规划</h3><table>\n<tr>\n    <td>角色</td>\n    <td>IP</td>\n    <td>端口</td>\n</tr>\n<tr>\n    <td>Master</td>\n    <td rowspan=\"2\">10.0.0.51</td>\n    <td>6379</td>\n</tr>\n<tr>\n    <td>Sentinel-01</td>\n    <td>26379</td>\n</tr>\n<tr>\n    <td>Master</td>\n    <td rowspan=\"2\">10.0.0.52</td>\n    <td>6379</td>\n</tr>\n<tr>\n    <td>Sentinel-01</td>\n    <td>26379</td>\n</tr>\n<tr>\n    <td>Master</td>\n    <td rowspan=\"2\">10.0.0.53</td>\n    <td>6379</td>\n</tr>\n<tr>\n    <td>Sentinel-01</td>\n    <td>26379</td>\n</tr>\n</table>\n\n<h3 id=\"安装配置命令\"><a href=\"#安装配置命令\" class=\"headerlink\" title=\"安装配置命令\"></a>安装配置命令</h3><p>哨兵是基于主从复制，所以需要先部署好主从复制<br>手工操作步骤如下：</p>\n<ol>\n<li>先配置和创建好 1 台服务器的节点和哨兵</li>\n<li>使用 rsync 传输到另外 2 台机器</li>\n<li>修改另外两台机器的 IP 地址</li>\n</ol>\n<p>建议使用 ansible 剧本批量部署</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#和db03配置互信，</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ssh-copy-id db03</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># rsync -avz -e &quot;ssh -p 22&quot; /application/redis_cluster root@10.0.0.53:/application/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#db03创建数据目录</span></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># mkdir -p /data/redis_cluster/redis_6379</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#db03更改配置文件</span></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># sed -i s#51#53#g /application/redis_cluster/redis_6379/conf/redis_6379.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#所有节点执行，添加用于哨兵的redis实例</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/redis_cluster/redis_26379</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /application/redis_cluster/redis_26379/&#123;conf,pid,logs&#125;</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /application/redis_cluster/redis_26379/conf/redis_26379.conf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">bind $(ifconfig enp0s8|awk &#x27;NR==2&#123;print $2&#125;&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">port 26379</span></span><br><span class=\"line\"><span class=\"string\">daemonize yes</span></span><br><span class=\"line\"><span class=\"string\">logfile /application/redis_cluster/redis_26379/logs/redis_26379.log</span></span><br><span class=\"line\"><span class=\"string\">dir /data/redis_cluster/redis_26379</span></span><br><span class=\"line\"><span class=\"string\">sentinel monitor mymaster 10.0.0.51 6379 2</span></span><br><span class=\"line\"><span class=\"string\">#mymaster 主节点别名 主节点 ip 和端口，判断主节点失败，两个 sentinel 节点同意</span></span><br><span class=\"line\"><span class=\"string\">sentinel down-after-milliseconds mymaster 3000</span></span><br><span class=\"line\"><span class=\"string\">#选项指定了 Sentinel 认为服务器已经断线所需的毫秒数。</span></span><br><span class=\"line\"><span class=\"string\">sentinel parallel-syncs mymaster 1</span></span><br><span class=\"line\"><span class=\"string\">#向新的主节点发起复制操作的从节点个数，1 轮询发起复制</span></span><br><span class=\"line\"><span class=\"string\">sentinel failover-timeout mymaster 18000</span></span><br><span class=\"line\"><span class=\"string\">#故障转移超时时间</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主从构建</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli </span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># redis-cli </span></span><br><span class=\"line\">127.0.0.1:6379&gt; SLAVEOF 10.0.0.51 6379</span><br><span class=\"line\">OK</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># redis-cli CONFIG GET slaveof</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slaveof&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10.0.0.51 6379&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># redis-cli </span></span><br><span class=\"line\">127.0.0.1:6379&gt; SLAVEOF 10.0.0.51 6379 </span><br><span class=\"line\">OK</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># redis-cli CONFIG GET slaveof</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slaveof&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10.0.0.51 6379&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动哨兵\"><a href=\"#启动哨兵\" class=\"headerlink\" title=\"启动哨兵\"></a>启动哨兵</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#原始配置文件</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /application/redis_cluster/redis_26379/conf/redis_26379.conf </span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 10.0.0.51</span><br><span class=\"line\">port 26379</span><br><span class=\"line\">daemonize <span class=\"built_in\">yes</span></span><br><span class=\"line\">logfile /application/redis_cluster/redis_26379/logs/redis_26379.<span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /data/redis_cluster/redis_26379</span><br><span class=\"line\">sentinel monitor mymaster 10.0.0.51 6379 2</span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 3000</span><br><span class=\"line\">sentinel parallel-syncs mymaster 1</span><br><span class=\"line\">sentinel failover-timeout mymaster 18000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#所有节点执行</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-sentinel /application/redis_cluster/redis_26379/conf/redis_26379.conf </span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -ef | grep redis</span></span><br><span class=\"line\">root       933     1  0 5月11 ?       00:00:08 /application/redis_cluster/redis/src/redis-server 10.0.0.51:6379</span><br><span class=\"line\">root      1652     1  0 00:50 ?        00:00:00 redis-sentinel 10.0.0.51:26379 [sentinel]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#哨兵启动后的配置文件</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /application/redis_cluster/redis_26379/conf/redis_26379.conf </span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 10.0.0.51</span><br><span class=\"line\">port 26379</span><br><span class=\"line\">daemonize <span class=\"built_in\">yes</span></span><br><span class=\"line\">logfile <span class=\"string\">&quot;/application/redis_cluster/redis_26379/logs/redis_26379.log&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> <span class=\"string\">&quot;/data/redis_cluster/redis_26379&quot;</span></span><br><span class=\"line\">sentinel myid 65b3c117682e551b8f647acdaccd33e8d6c0cb75</span><br><span class=\"line\">//自生的<span class=\"built_in\">id</span>号</span><br><span class=\"line\">sentinel deny-scripts-reconfig <span class=\"built_in\">yes</span></span><br><span class=\"line\">sentinel monitor mymaster 10.0.0.51 6379 2</span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 3000</span><br><span class=\"line\"><span class=\"comment\"># Generated by CONFIG REWRITE</span></span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\">sentinel failover-timeout mymaster 18000</span><br><span class=\"line\">sentinel config-epoch mymaster 0</span><br><span class=\"line\">sentinel leader-epoch mymaster 0</span><br><span class=\"line\">sentinel known-replica mymaster 10.0.0.53 6379 //从节点</span><br><span class=\"line\">sentinel known-replica mymaster 10.0.0.52 6379 /从节点</span><br><span class=\"line\">sentinel known-sentinel mymaster 10.0.0.53 26379 a569db0ab0f0ba3d0e9b71313feb78e41a45fc03</span><br><span class=\"line\">sentinel known-sentinel mymaster 10.0.0.52 26379 dca7491b21d361aa7f5c6591776a53b3946e1d4b</span><br><span class=\"line\">//从节点redis的<span class=\"built_in\">id</span>号，用于当主库宕机是对比redisid号选出新的主库</span><br><span class=\"line\">sentinel current-epoch 0</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>哨兵的配置文件不可以手动更改</p>\n<p><img src=\"/images/img-102.png\" alt=\"parallel-syncs\"></p>\n<h3 id=\"哨兵的故障转移\"><a href=\"#哨兵的故障转移\" class=\"headerlink\" title=\"哨兵的故障转移\"></a>哨兵的故障转移</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli set pincheng pingcheng.xyz</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli get pincheng </span></span><br><span class=\"line\"><span class=\"string\">&quot;pingcheng.xyz&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 get pincheng</span></span><br><span class=\"line\"><span class=\"string\">&quot;pingcheng.xyz&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 get pincheng</span></span><br><span class=\"line\"><span class=\"string\">&quot;pingcheng.xyz&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># pkill redis</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -ef | grep redis</span></span><br><span class=\"line\">root      1716  1596  0 01:01 pts/1    00:00:00 grep --color=auto redis</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 get pincheng</span></span><br><span class=\"line\"><span class=\"string\">&quot;pingcheng.xyz&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 get pincheng</span></span><br><span class=\"line\"><span class=\"string\">&quot;pingcheng.xyz&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 CONFIG GET slaveof //主从关系由指向db01变成db02被自动选举为了主库</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slaveof&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 CONFIG GET slaveof</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slaveof&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10.0.0.53 6379&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"故障转移选举过程：\"><a href=\"#故障转移选举过程：\" class=\"headerlink\" title=\"故障转移选举过程：\"></a>故障转移选举过程：</h3><p><img src=\"/images/img-103.png\" alt=\"选举过程\"></p>\n<ul>\n<li>即在权重相同的情况下，通过对比runid选出主节点。<ul>\n<li>权重查询命令:CONFIG GET slave-priority</li>\n<li>权重设置命令:CONFIG SET slave-priority 0</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"原主库修复上线，并重新成为主\"><a href=\"#原主库修复上线，并重新成为主\" class=\"headerlink\" title=\"原主库修复上线，并重新成为主\"></a>原主库修复上线，并重新成为主</h3><p>思路：</p>\n<ul>\n<li>1.原主库和主库的哨兵修复上线</li>\n<li>2.降低从节点<code>slavepriority</code>权重，并在主库上触发重新选举（抢回王位）</li>\n<li>3.注意 failover 后,将 slave-priority 调回原值.</li>\n</ul>\n<h4 id=\"原主库和主库的哨兵修复上线\"><a href=\"#原主库和主库的哨兵修复上线\" class=\"headerlink\" title=\"原主库和主库的哨兵修复上线\"></a>原主库和主库的哨兵修复上线</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart redis6379</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-sentinel /application/redis_cluster/redis_26379/conf/redis_26379.conf </span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -ef | grep redis</span></span><br><span class=\"line\">root      1784     1  0 01:22 ?        00:00:00 /application/redis_cluster/redis/src/redis-server 10.0.0.51:6379</span><br><span class=\"line\">root      1789     1  0 01:22 ?        00:00:00 redis-sentinel 10.0.0.51:26379 [sentinel]</span><br><span class=\"line\">root      1794  1596  0 01:22 pts/1    00:00:00 grep --color=auto redis</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli CONFIG GET slaveof</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slaveof&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10.0.0.53 6379&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 CONFIG GET slaveof</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slaveof&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10.0.0.53 6379&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 CONFIG GET slaveof</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slaveof&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"想让修复上线的redis成为主库\"><a href=\"#想让修复上线的redis成为主库\" class=\"headerlink\" title=\"想让修复上线的redis成为主库\"></a>想让修复上线的redis成为主库</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli CONFIG GET slave-priority</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slave-priority&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;100&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 CONFIG GET slave-priority</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slave-priority&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;100&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 CONFIG GET slave-priority</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slave-priority&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;100&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//调大当前库权重</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 CONFIG set slave-priority 0</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 CONFIG set slave-priority 0</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli CONFIG GET slave-priority</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slave-priority&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;100&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 CONFIG GET slave-priority</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slave-priority&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 CONFIG GET slave-priority</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slave-priority&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//触发重新选举（想让谁成为主库就在谁上面执行此操作）</span><br><span class=\"line\">db01:                                     哨兵      故障转移  指定组</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db01 -p 26379 Sentinel failover mymaster</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db01 CONFIG GET slaveof</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slaveof&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 CONFIG GET slaveof</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slaveof&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10.0.0.51 6379&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 CONFIG GET slaveof</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slaveof&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;10.0.0.51 6379&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修复其他从库权限，以备下次故障时进行选主\"><a href=\"#修复其他从库权限，以备下次故障时进行选主\" class=\"headerlink\" title=\"修复其他从库权限，以备下次故障时进行选主\"></a>修复其他从库权限，以备下次故障时进行选主</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db01 CONFIG GET slave-priority </span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slave-priority&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;100&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 CONFIG GET slave-priority </span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slave-priority&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;100&quot;</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 CONFIG GET slave-priority </span></span><br><span class=\"line\">1) <span class=\"string\">&quot;slave-priority&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;100&quot;</span></span><br></pre></td></tr></table></figure>","categories":["DBA"],"tags":["NoSQL","主从复制","高可用","Redis","Redis哨兵"]},{"title":"Terraform-基础设施即代码","url":"/forward/3df8560c.html","content":"<h2 id=\"Terraform介绍\"><a href=\"#Terraform介绍\" class=\"headerlink\" title=\"Terraform介绍\"></a>Terraform介绍</h2><p>Terraform是HashiCorp公司旗下的Provision Infrastructure产品, 是AWS APN Technology Partner与AWS DevOps Competency Partner。Terraform是一个IT基础架构自动化编排工具，它的口号是“Write, Plan, and Create Infrastructure as Code”, 是一个“基础设施即代码”工具，类似于AWS CloudFormation，允许您创建、更新和版本控制的AWS基础设施。</p>\n<p>Terraform基于AWS Go SDK进行构建，采用HashiCorp配置语言（HCL）对资源进行编排，具体的说就是可以用代码来管理维护IT资源，比如针对AWS，我们可以用它创建、修改或删除 S3 Bucket、Lambda,、EC2、Kinesis、VPC等各种资源。并且在真正运行之前可以看到执行计划(即干运行-dryrun)。由于状态保存到文件中，因此能够离线方式查看资源情况（前提是不要在 Terraform 之外对资源进行修改）。Terraform 配置的状态除了能够保存在本地文件中，也可以保存到 Consul, S3等处。</p>\n<p>Terraform是一个高度可扩展的工具，通过Provider来扩展对新的基础架构的支持，几乎支持<strong>所有的云服务平台</strong>，AWS只是Terraform内建 Providers 中的一种，国内还支持Aliyun，HuaweiCloud，TencentCloud。</p>\n<p>在Terraform诞生之前，我们对AWS资源的操作主要依赖Console、AWS CLI、SDK或Serverless。AWS CLI什么都能做，但它是无状态的，必须明确用不同的命令来创建、修改和删除。Serverless不是用来管理基础架构的，用Lambda创建资源是很麻烦的事。更通俗的讲，Terraform 就是运行在客户端的一个开源的，用于资源编排的自动化运维工具。以代码的形式将所要管理的资源定义在模板中，通过解析并执行模板来自动化完成所定义资源的创建，变更和管理，进而达到自动化运维的目标。</p>\n<p>值得一提的是B站除了自建的idc机房以外还对接国内外30+的公有云平台，目前B站的公有云云管平台底层也计划采用Terraform + 云厂商Openapi的方式进行实现。</p>\n<p><img src=\"/images/pasted-185.png\" alt=\"Terraform\"></p>\n<h2 id=\"Terraform特点\"><a href=\"#Terraform特点\" class=\"headerlink\" title=\"Terraform特点\"></a>Terraform特点</h2><p>Terraform 具备以下几个主要特点：</p>\n<ul>\n<li>基础设施即代码（IaC, Infrastructure as Code）<br>Terraform 基于一种特定的配置语言（HCL, Hashicorp Configuration Language）来描述基础设施资源。由此，可以像对待任何其他代码一样，实现对所描述的解决方案或者基础架构的版本控制和管理。同时，通用的解决方案和基础架构可以以模板的形式进行便捷的共享和重用。</li>\n<li>执行计划（Execution Plans）<br>Terraform 在执行模板前，运行 terraform plan 命令会先通过解析模板生成一个可执行的计划，这个计划展示了当前模板所要创建或变更的资源及其属性。操作人员可以预览这个计划，在确认无误后执行 terraform apply 命令，即可完成对所定义资源的快速创建和变更，以免发生一些超预期的问题。</li>\n<li>资源拓扑图（Resource Graph）<br>Terraform 会根据模板中的定义，构建所有资源的图形，并且以并行的方式创建和修改那些没有任何依赖资源的资源，以保证执行的高效性。对于有依赖资源的资源，被依赖的资源优先执行。</li>\n<li>自动化变更（Change Automation）<br>不论多复杂的资源，当模板中定义的资源内容发生变更时，Terraform 都会基于新的资源拓扑图将变更的内容plan 出来，在确认无误后，只需一个命令即可完成数个变更操作，避免了人为操作带来的错误。</li>\n</ul>\n<h2 id=\"Terraform环境安装\"><a href=\"#Terraform环境安装\" class=\"headerlink\" title=\"Terraform环境安装\"></a>Terraform环境安装</h2><p><a href=\"https://www.terraform.io/downloads\">https://www.terraform.io/downloads</a></p>\n<h3 id=\"Linux安装\"><a href=\"#Linux安装\" class=\"headerlink\" title=\"Linux安装\"></a>Linux安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils</span><br><span class=\"line\"><span class=\"comment\">#安装yum扩展工具</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.rep</span><br><span class=\"line\"><span class=\"comment\">#添加hashicorp yum仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install terraform</span><br><span class=\"line\"><span class=\"comment\">#安装terraform</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Windows安装\"><a href=\"#Windows安装\" class=\"headerlink\" title=\"Windows安装\"></a>Windows安装</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-ExecutionPolicy</span> Bypass <span class=\"literal\">-Scope</span> <span class=\"keyword\">Process</span> <span class=\"literal\">-Force</span>; [<span class=\"type\">System.Net.ServicePointManager</span>]::SecurityProtocol = [<span class=\"type\">System.Net.ServicePointManager</span>]::SecurityProtocol <span class=\"operator\">-bor</span> <span class=\"number\">3072</span>; <span class=\"built_in\">iex</span> ((<span class=\"built_in\">New-Object</span> System.Net.WebClient).DownloadString(<span class=\"string\">&#x27;https://community.chocolatey.org/install.ps1&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 安装choco包管理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">choco install terraform</span><br><span class=\"line\"><span class=\"comment\">#通过choco包管理器安装terraform环境</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"资源创建\"><a href=\"#资源创建\" class=\"headerlink\" title=\"资源创建\"></a>资源创建</h2><p>这里以AWS云为例，实现一套简单的资源创建：</p>\n<ol>\n<li>创建一个vpc</li>\n<li>创建一个互联网网关</li>\n<li>创建一个路由表并写入默认路由指向第2步创建的互联网网关</li>\n<li>在vpc中创建两个子网（一般要创建两个，否则部分资源无法高可用如RDS）</li>\n<li>将子网和路由表进行关联（否则子网下创建的资源无法访问外网）</li>\n<li>创建一个安全组，并写入入放行规则 放行指定端口（给ec2机器备用）</li>\n<li>在其中一个子网下创建一个网络接口（给ec2机器备用），关联第6步创建的安全组并分配一个EIP</li>\n<li>创建一台aws ec2机器（启用：选择指定的ami即镜像id，实例规格，可用区，密钥对，关联第7步的网络接口）。自定义启动脚本（安装并启动一个nginx）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># main.tf</span><br><span class=\"line\"></span><br><span class=\"line\"># aws各地域/代称</span><br><span class=\"line\"># US East (Ohio)/us-east-2      # US East (N. Virginia)/us-east-1   # US West (N. California)/us-west-1</span><br><span class=\"line\"># US West (Oregon)/us-west-2    # Africa (Cape Town)/af-south-1     # Asia Pacific (Hong Kong)/ap-east-1</span><br><span class=\"line\"># 亚太地区（孟买）/ap-south-1     # 亚太地区（大阪）/ap-northeast-3     # 亚太地区（首尔）/ap-northeast-2</span><br><span class=\"line\"># 亚太地区（新加坡）/ap-southeast-1     # 亚太地区（悉尼）/ap-southeast-2       # 亚太地区（东京）/ap-northeast-1</span><br><span class=\"line\"># 加拿大（中部）/ca-central-1       # 中国（北京）/cn-north-1       # 中国（宁夏）/cn-northwest-1</span><br><span class=\"line\"># 欧洲（法兰克福）/eu-central-1     # 欧洲（爱尔兰）/eu-west-1      # 欧洲（伦敦）/eu-west-2</span><br><span class=\"line\"># 欧洲（米兰）/eu-south-1           # 欧洲（巴黎）/eu-west-3        # 欧洲（斯德哥尔摩）/eu-north-1</span><br><span class=\"line\"># 中东（巴林）/me-south-1           # 南美洲（圣保罗）/sa-east-1</span><br><span class=\"line\"> </span><br><span class=\"line\"># 定义通用变量</span><br><span class=\"line\">variable &quot;subnet_prefix&quot; &#123;</span><br><span class=\"line\">    description = &quot;cidr block for the subnet&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 声明云厂商/地域</span><br><span class=\"line\">provider &quot;aws&quot; &#123;</span><br><span class=\"line\">    region = &quot;ap-northeast-1&quot;</span><br><span class=\"line\">    access_key = &quot;AKIxxxxxxxxxxK7CGE&quot;</span><br><span class=\"line\">    secret_key = &quot;7rqmTSvlxxxxxxxxxxxxx/oWbnSOc&quot;</span><br><span class=\"line\">#  控制台 &gt; 用户 &gt; Security credentials 获得access和secret key</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 创建一个vpc</span><br><span class=\"line\">resource &quot;aws_vpc&quot; &quot;first-vpc&quot; &#123;</span><br><span class=\"line\">  cidr_block = &quot;10.10.0.0/16&quot; #vpc的</span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = &quot;first-vpc&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 创建一个互联网网关</span><br><span class=\"line\">resource &quot;aws_internet_gateway&quot; &quot;first-gw&quot; &#123;</span><br><span class=\"line\">  vpc_id = aws_vpc.first-vpc.id</span><br><span class=\"line\"> </span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = &quot;first-gw&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 创建默认路由表指向互联网网关</span><br><span class=\"line\">resource &quot;aws_route_table&quot; &quot;first_route_table&quot; &#123;</span><br><span class=\"line\">  vpc_id = aws_vpc.first-vpc.id</span><br><span class=\"line\"> </span><br><span class=\"line\">  route &#123;</span><br><span class=\"line\">    cidr_block = &quot;0.0.0.0/0&quot;</span><br><span class=\"line\">    gateway_id = aws_internet_gateway.first-gw.id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  route &#123;</span><br><span class=\"line\">    ipv6_cidr_block        = &quot;::/0&quot;</span><br><span class=\"line\">    gateway_id = aws_internet_gateway.first-gw.id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = &quot;first_route_table&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 在vpc中创建一个子网段(一般要创建两个，否则部分资源高可用无法创建)</span><br><span class=\"line\">resource &quot;aws_subnet&quot; &quot;subnet-1&quot; &#123;</span><br><span class=\"line\">  vpc_id     = aws_vpc.first-vpc.id</span><br><span class=\"line\">  cidr_block = var.subnet_prefix[0].cidr_block</span><br><span class=\"line\">  availability_zone = &quot;ap-northeast-1a&quot;</span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = var.subnet_prefix[0].name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resource &quot;aws_subnet&quot; &quot;subnet-2&quot; &#123;</span><br><span class=\"line\">  vpc_id     = aws_vpc.first-vpc.id</span><br><span class=\"line\">  cidr_block = var.subnet_prefix[1].cidr_block</span><br><span class=\"line\">  availability_zone = &quot;ap-northeast-1c&quot;</span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = var.subnet_prefix[1].name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 关联子网和路由表</span><br><span class=\"line\">resource &quot;aws_route_table_association&quot; &quot;a&quot; &#123;</span><br><span class=\"line\">  subnet_id      = aws_subnet.subnet-1.id</span><br><span class=\"line\">  route_table_id = aws_route_table.first_route_table.id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resource &quot;aws_route_table_association&quot; &quot;b&quot; &#123;</span><br><span class=\"line\">  subnet_id      = aws_subnet.subnet-2.id</span><br><span class=\"line\">  route_table_id = aws_route_table.first_route_table.id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 安全组相关</span><br><span class=\"line\">resource &quot;aws_security_group&quot; &quot;allow_route&quot; &#123;</span><br><span class=\"line\">  name        = &quot;allow_route&quot;</span><br><span class=\"line\">  description = &quot;Allow_webserver&quot;</span><br><span class=\"line\">  vpc_id      = aws_vpc.first-vpc.id</span><br><span class=\"line\"> </span><br><span class=\"line\">  #入口流量限制</span><br><span class=\"line\">  ingress &#123;</span><br><span class=\"line\">    description      = &quot;HTTPS from VPC&quot;</span><br><span class=\"line\">    from_port        = 443</span><br><span class=\"line\">    to_port          = 443</span><br><span class=\"line\">    protocol         = &quot;tcp&quot;</span><br><span class=\"line\">    cidr_blocks      = [&quot;0.0.0.0/0&quot;] #允许所有人访问</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ingress &#123;</span><br><span class=\"line\">    description      = &quot;HTTP from VPC&quot;</span><br><span class=\"line\">    from_port        = 80</span><br><span class=\"line\">    to_port          = 80</span><br><span class=\"line\">    protocol         = &quot;tcp&quot;</span><br><span class=\"line\">    cidr_blocks      = [&quot;0.0.0.0/0&quot;] #允许所有人访问</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ingress &#123;</span><br><span class=\"line\">    description      = &quot;SSH from VPC&quot;</span><br><span class=\"line\">    from_port        = 22</span><br><span class=\"line\">    to_port          = 22</span><br><span class=\"line\">    protocol         = &quot;tcp&quot;</span><br><span class=\"line\">    cidr_blocks      = [&quot;0.0.0.0/0&quot;] #允许所有人访问</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  #出口流量限制</span><br><span class=\"line\">  egress &#123;</span><br><span class=\"line\">    from_port        = 0</span><br><span class=\"line\">    to_port          = 0</span><br><span class=\"line\">    protocol         = &quot;-1&quot; #所有协议</span><br><span class=\"line\">    cidr_blocks      = [&quot;0.0.0.0/0&quot;]</span><br><span class=\"line\">    ipv6_cidr_blocks = [&quot;::/0&quot;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = &quot;allow_tls&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># aws创建网络接口</span><br><span class=\"line\">resource &quot;aws_network_interface&quot; &quot;web-server-nic&quot; &#123;</span><br><span class=\"line\">  subnet_id       = aws_subnet.subnet-1.id #网络接口关联子网id</span><br><span class=\"line\">  private_ips     = [&quot;10.10.1.10&quot;] #指定子网中的一个ip</span><br><span class=\"line\">  security_groups = [aws_security_group.allow_route.id]</span><br><span class=\"line\"> </span><br><span class=\"line\">#   attachment &#123; #暂时不关联设备</span><br><span class=\"line\">#     instance     = aws_instance.test.id</span><br><span class=\"line\">#     device_index = 1</span><br><span class=\"line\">#   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 分配一个EIP</span><br><span class=\"line\">resource &quot;aws_eip&quot; &quot;one&quot; &#123;</span><br><span class=\"line\">  vpc                       = true</span><br><span class=\"line\">  network_interface         = aws_network_interface.web-server-nic.id #附加到网络接口上</span><br><span class=\"line\">  associate_with_private_ip = &quot;10.10.1.10&quot; #关联私有ip</span><br><span class=\"line\"> </span><br><span class=\"line\">  depends_on                = [aws_internet_gateway.first-gw] #EIP依赖互联网网关</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">data &quot;aws_ami&quot; &quot;latest_amazon_linux&quot; &#123;</span><br><span class=\"line\">  owners      = [&quot;amazon&quot;]</span><br><span class=\"line\">  most_recent      = true</span><br><span class=\"line\">  filter &#123;</span><br><span class=\"line\">    name   = &quot;name&quot;</span><br><span class=\"line\">    values = [&quot;amzn2-ami-kernel-5.10-hvm-*-gp2&quot;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  filter &#123;</span><br><span class=\"line\">    name   = &quot;architecture&quot;</span><br><span class=\"line\">    values = [&quot;x86_64&quot;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 开启aws ec2机器</span><br><span class=\"line\"># https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance</span><br><span class=\"line\">resource &quot;aws_instance&quot; &quot;mytest001&quot; &#123;</span><br><span class=\"line\">#  ami           = &quot;ami-0b7546e839d7ace12&quot;</span><br><span class=\"line\">  ami           = data.aws_ami.latest_amazon_linux.id</span><br><span class=\"line\">  instance_type = &quot;t2.micro&quot;</span><br><span class=\"line\">  availability_zone = &quot;ap-northeast-1a&quot; #确保选额可用区</span><br><span class=\"line\"> </span><br><span class=\"line\">  key_name = &quot;test&quot; #密钥对配置 https://ap-northeast-1.console.aws.amazon.com/ec2/v2/home?region=ap-northeast-1#KeyPairs:</span><br><span class=\"line\"> </span><br><span class=\"line\">  network_interface &#123; #关联网卡接口</span><br><span class=\"line\">    network_interface_id = aws_network_interface.web-server-nic.id</span><br><span class=\"line\">    device_index         = 0 #网卡设备索引，0表示第一个</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = &quot;testwebserver&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  user_data = &lt;&lt;-EOF</span><br><span class=\"line\">              #!/bin/bash</span><br><span class=\"line\">              sudo yum install -y amazon-linux-extras</span><br><span class=\"line\">              sudo amazon-linux-extras install nginx1</span><br><span class=\"line\">              sudo systemctl enable --now nginx</span><br><span class=\"line\">              EOF</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># terraform.tfvars</span><br><span class=\"line\">#subnet_prefix = [&quot;10.10.1.0/24&quot;,&quot;10.10.2.0/24&quot;]</span><br><span class=\"line\">subnet_prefix = [&#123; cidr_block = &quot;10.10.1.0/24&quot;,name = &quot;subnet-1&quot;&#125;,&#123; cidr_block = &quot;10.10.2.0/24&quot;,name = &quot;subnet-2&quot;&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行命令</span><br><span class=\"line\"># 预演：terraform.exe plan</span><br><span class=\"line\"># 部署：terraform.exe apply</span><br><span class=\"line\">#    部署个别资源：terraform.exe apply --target aws_instance.mytest001</span><br><span class=\"line\">#    手动传递变量：terraform.exe apply -var &quot;subnet_prefix1=10.10.1.0/24&quot;</span><br><span class=\"line\"># 删除：terraform.exe destroy</span><br><span class=\"line\">#    --auth-approve 无需确认</span><br><span class=\"line\">#    删除个别资源：terraform.exe destroy --target aws_instance.mytest001</span><br><span class=\"line\"># 查看线上资源：terraform.exe state list</span><br><span class=\"line\"> </span><br><span class=\"line\"># tffile terraform.tfstate apply之后线上的资源创建状态</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工作空间相关文件介绍\"><a href=\"#工作空间相关文件介绍\" class=\"headerlink\" title=\"工作空间相关文件介绍\"></a>工作空间相关文件介绍</h2><p>在上面的工作空间中我定义了两个文件：<code>main.tf</code>、<code>terraform.tfvars</code>；</p>\n<ul>\n<li><code>main.tf</code>：tf就是Terraform，Terraform代码大部分是.tf文件，语法是HCL，当然目前也支持JSON格式的Terraform代码，暂时只以tf为例</li>\n<li><code>terraform.tfvars</code>：Terraform 会自动加载特殊命名的变量定义文件：文件名为 terraform.tfvars 或 terraform.tfvars.json 的文件;文件名称以 .auto.tfvars 或 .auto.tfvars.json 结尾的文件</li>\n</ul>\n<h2 id=\"main-tf解析\"><a href=\"#main-tf解析\" class=\"headerlink\" title=\"main.tf解析\"></a>main.tf解析</h2><h3 id=\"声明云厂商-ak-sk-目标地域\"><a href=\"#声明云厂商-ak-sk-目标地域\" class=\"headerlink\" title=\"声明云厂商/ak-sk/目标地域\"></a>声明云厂商/ak-sk/目标地域</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 声明云厂商/地域</span><br><span class=\"line\">provider &quot;aws&quot; &#123;</span><br><span class=\"line\">    region = &quot;ap-northeast-1&quot;</span><br><span class=\"line\">    access_key = &quot;AKIARUxxxxxxxxxxx7CGE&quot;</span><br><span class=\"line\">    secret_key = &quot;7rqmTSvlgSxxxxxxxxxxxxx/oWbnSOc&quot;</span><br><span class=\"line\">#  控制台 &gt; 用户 &gt; Security credentials 获得access和secret key</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的public_key、private_key以及region 要替换成云账户真实的ak/sk和目标地域。<strong>这里将机密信息硬编码在代码中的做法是非常错误的，这里是为了方便演示。aws/aliyun/huaweicloud等 可以通过环境变量传递以上机密信息（Linux为例）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#aliyun</span><br><span class=\"line\">$ export ALICLOUD_ACCESS_KEY=&quot;LTAIUrZCw3********&quot;</span><br><span class=\"line\">$ export ALICLOUD_SECRET_KEY=&quot;zfwwWAMWIAiooj14GQ2*************&quot;</span><br><span class=\"line\">$ export ALICLOUD_REGION=&quot;cn-beijing&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">#aws</span><br><span class=\"line\">$ export AWS_ACCESS_KEY_ID=&quot;anaccesskey&quot;</span><br><span class=\"line\">$ export AWS_SECRET_ACCESS_KEY=&quot;asecretkey&quot;</span><br><span class=\"line\">$ export AWS_REGION=&quot;ap-northeast-1&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">#huaweicloud</span><br><span class=\"line\">$ export HW_REGION_NAME=&quot;cn-north-1&quot;</span><br><span class=\"line\">$ export HW_ACCESS_KEY=&quot;my-access-key&quot;</span><br><span class=\"line\">$ export HW_SECRET_KEY=&quot;my-secret-key&quot;</span><br></pre></td></tr></table></figure>\n<p>以上命令可以在linux终端中执行或者写入/etc/bashrc</p>\n<h3 id=\"创建一个vpc\"><a href=\"#创建一个vpc\" class=\"headerlink\" title=\"创建一个vpc\"></a>创建一个vpc</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 创建一个vpc</span><br><span class=\"line\">resource &quot;aws_vpc&quot; &quot;first-vpc&quot; &#123;</span><br><span class=\"line\">  cidr_block = &quot;10.10.0.0/16&quot; #指定vpc私网网段</span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = &quot;first-vpc&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文档：<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc</a></p>\n<h3 id=\"创建一个互联网网关\"><a href=\"#创建一个互联网网关\" class=\"headerlink\" title=\"创建一个互联网网关\"></a>创建一个互联网网关</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">resource &quot;aws_internet_gateway&quot; &quot;first-gw&quot; &#123;</span><br><span class=\"line\">  vpc_id = aws_vpc.first-vpc.id #获取上一步创建的vpcid，指定在此vpc中创建互联网网关</span><br><span class=\"line\"> </span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = &quot;first-gw&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文档：<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/internet_gateway\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/internet_gateway</a></p>\n<h3 id=\"创建默认路由表-写入默认路由指向互联网网关\"><a href=\"#创建默认路由表-写入默认路由指向互联网网关\" class=\"headerlink\" title=\"创建默认路由表 写入默认路由指向互联网网关\"></a>创建默认路由表 写入默认路由指向互联网网关</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">resource &quot;aws_route_table&quot; &quot;first_route_table&quot; &#123;</span><br><span class=\"line\">  vpc_id = aws_vpc.first-vpc.id #获取上一步创建的vpcid，指定在此vpc中创建路由表</span><br><span class=\"line\"> </span><br><span class=\"line\">  route &#123;  #ipv4的路由规则，0.0.0.0/0所有流量默认转发到上一步创建的互联网网关。即允许关联了这个路由表的子网通过互联网网关访问公网</span><br><span class=\"line\">    cidr_block = &quot;0.0.0.0/0&quot;</span><br><span class=\"line\">    gateway_id = aws_internet_gateway.first-gw.id  #通过末尾.id的方式获取上一步创建的互联网网关的资源id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  route &#123;</span><br><span class=\"line\">    ipv6_cidr_block        = &quot;::/0&quot;</span><br><span class=\"line\">    gateway_id = aws_internet_gateway.first-gw.id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = &quot;first_route_table&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文档：<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table</a></p>\n<h3 id=\"在vpc中创建一个子网段-一般要创建两个，否则部分资源无法做到高可用\"><a href=\"#在vpc中创建一个子网段-一般要创建两个，否则部分资源无法做到高可用\" class=\"headerlink\" title=\"在vpc中创建一个子网段(一般要创建两个，否则部分资源无法做到高可用)\"></a>在vpc中创建一个子网段(一般要创建两个，否则部分资源无法做到高可用)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">resource &quot;aws_subnet&quot; &quot;subnet-1&quot; &#123; #第一个子网</span><br><span class=\"line\">  vpc_id     = aws_vpc.first-vpc.id #获取第一步创建的vpcid</span><br><span class=\"line\">  cidr_block = var.subnet_prefix[0].cidr_block #这里用到一个类似map的方式取变量值（取子网段）</span><br><span class=\"line\">  availability_zone = &quot;ap-northeast-1a&quot; #定义在哪个可用区</span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = var.subnet_prefix[0].name ##这里用到一个类似map的方式取变量值（取子网段的名字）</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resource &quot;aws_subnet&quot; &quot;subnet-2&quot; &#123; #第二个子网</span><br><span class=\"line\">  vpc_id     = aws_vpc.first-vpc.id</span><br><span class=\"line\">  cidr_block = var.subnet_prefix[1].cidr_block</span><br><span class=\"line\">  availability_zone = &quot;ap-northeast-1c&quot;</span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = var.subnet_prefix[1].name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文档：<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet</a><br>这里创建子网时，定义的网段，和子网的tag标签 是从变量中获取的值。在1.2节介绍工作空间时，我定义了两个文件。一个main.tf。另一个是terraform.tfvars（这个文件terraform会自动加载）<br>其中terraform.tfvars文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">subnet_prefix = [&#123; cidr_block = &quot;10.10.1.0/24&quot;,name = &quot;subnet-1&quot;&#125;,&#123; cidr_block = &quot;10.10.2.0/24&quot;,name = &quot;subnet-2&quot;&#125;]</span><br></pre></td></tr></table></figure>\n<p>在上面的变量定义方式类似与golang中的map，可以看成是键值对类型的数组。在1.3.5 中取值方式是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var.subnet_prefix[0].cidr_block #即取到了10.10.1.0/24</span><br><span class=\"line\">var.subnet_prefix[0].name #即取到了subnet-1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将1-3-5创建的子网和1-3-4创建的路由表进行关联\"><a href=\"#将1-3-5创建的子网和1-3-4创建的路由表进行关联\" class=\"headerlink\" title=\"将1.3.5创建的子网和1.3.4创建的路由表进行关联\"></a>将1.3.5创建的子网和1.3.4创建的路由表进行关联</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 关联子网和路由表</span><br><span class=\"line\">resource &quot;aws_route_table_association&quot; &quot;a&quot; &#123;</span><br><span class=\"line\">  subnet_id      = aws_subnet.subnet-1.id #获取要关联的子网id</span><br><span class=\"line\">  route_table_id = aws_route_table.first_route_table.id #获取要关联的路由表id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resource &quot;aws_route_table_association&quot; &quot;b&quot; &#123;</span><br><span class=\"line\">  subnet_id      = aws_subnet.subnet-2.id</span><br><span class=\"line\">  route_table_id = aws_route_table.first_route_table.id</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文档：<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association</a></p>\n<h3 id=\"创建安全组，并放行入方向指定端口\"><a href=\"#创建安全组，并放行入方向指定端口\" class=\"headerlink\" title=\"创建安全组，并放行入方向指定端口\"></a>创建安全组，并放行入方向指定端口</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">resource &quot;aws_security_group&quot; &quot;allow_route&quot; &#123;</span><br><span class=\"line\">  name        = &quot;allow_route&quot; #安全组名字</span><br><span class=\"line\">  description = &quot;Allow_webserver&quot; #安全组描述</span><br><span class=\"line\">  vpc_id      = aws_vpc.first-vpc.id #在那个vpc中创建</span><br><span class=\"line\"> </span><br><span class=\"line\">  #入口流量限制</span><br><span class=\"line\">  ingress &#123;</span><br><span class=\"line\">    description      = &quot;HTTPS from VPC&quot;</span><br><span class=\"line\">    from_port        = 443</span><br><span class=\"line\">    to_port          = 443</span><br><span class=\"line\">    protocol         = &quot;tcp&quot;</span><br><span class=\"line\">    cidr_blocks      = [&quot;0.0.0.0/0&quot;] #允许所有人访问</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ingress &#123;</span><br><span class=\"line\">    description      = &quot;HTTP from VPC&quot;</span><br><span class=\"line\">    from_port        = 80</span><br><span class=\"line\">    to_port          = 80</span><br><span class=\"line\">    protocol         = &quot;tcp&quot;</span><br><span class=\"line\">    cidr_blocks      = [&quot;0.0.0.0/0&quot;] #允许所有人访问</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ingress &#123;</span><br><span class=\"line\">    description      = &quot;SSH from VPC&quot;</span><br><span class=\"line\">    from_port        = 22</span><br><span class=\"line\">    to_port          = 22</span><br><span class=\"line\">    protocol         = &quot;tcp&quot;</span><br><span class=\"line\">    cidr_blocks      = [&quot;0.0.0.0/0&quot;] #允许所有人访问</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  #出口流量限制</span><br><span class=\"line\">  egress &#123;</span><br><span class=\"line\">    from_port        = 0</span><br><span class=\"line\">    to_port          = 0</span><br><span class=\"line\">    protocol         = &quot;-1&quot; #所有协议</span><br><span class=\"line\">    cidr_blocks      = [&quot;0.0.0.0/0&quot;]</span><br><span class=\"line\">    ipv6_cidr_blocks = [&quot;::/0&quot;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = &quot;allow_tls&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文档：<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group</a></p>\n<h3 id=\"在指定子网下创建一个aws网络接口，并分配一个eip\"><a href=\"#在指定子网下创建一个aws网络接口，并分配一个eip\" class=\"headerlink\" title=\"在指定子网下创建一个aws网络接口，并分配一个eip\"></a>在指定子网下创建一个aws网络接口，并分配一个eip</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># aws创建网络接口</span><br><span class=\"line\">resource &quot;aws_network_interface&quot; &quot;web-server-nic&quot; &#123;</span><br><span class=\"line\">  subnet_id       = aws_subnet.subnet-1.id  #网络接口关联子网id</span><br><span class=\"line\">  private_ips     = [&quot;10.10.1.10&quot;]  #指定子网中的一个ip</span><br><span class=\"line\">  security_groups = [aws_security_group.allow_route.id]</span><br><span class=\"line\"> </span><br><span class=\"line\">#   attachment &#123; #暂时不关联设备</span><br><span class=\"line\">#     instance     = aws_instance.test.id</span><br><span class=\"line\">#     device_index = 1</span><br><span class=\"line\">#   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 分配一个EIP</span><br><span class=\"line\">resource &quot;aws_eip&quot; &quot;one&quot; &#123;</span><br><span class=\"line\">  vpc                       = true</span><br><span class=\"line\">  network_interface         = aws_network_interface.web-server-nic.id #附加到上面创建的网络接口上</span><br><span class=\"line\">  associate_with_private_ip = &quot;10.10.1.10&quot; #关联私有ip</span><br><span class=\"line\"> </span><br><span class=\"line\">  depends_on                = [aws_internet_gateway.first-gw] #EIP依赖互联网网关，所以这里需要定义依赖项</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文档：<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_interface\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_interface</a><br>参考文档：<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eip\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eip</a></p>\n<h3 id=\"启动一台ec2，并执行自定义的启动脚本\"><a href=\"#启动一台ec2，并执行自定义的启动脚本\" class=\"headerlink\" title=\"启动一台ec2，并执行自定义的启动脚本\"></a>启动一台ec2，并执行自定义的启动脚本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#查找你要用的镜像的ami</span><br><span class=\"line\">#https://ap-northeast-1.console.aws.amazon.com/ec2/v2/home?region=ap-northeast-1#Images:visibility=public-images;v=3;search=:ami-0b7546e839d7ace12</span><br><span class=\"line\">data &quot;aws_ami&quot; &quot;latest_amazon_linux&quot; &#123;</span><br><span class=\"line\">  owners      = [&quot;amazon&quot;]</span><br><span class=\"line\">  most_recent      = true</span><br><span class=\"line\">  filter &#123;</span><br><span class=\"line\">    name   = &quot;name&quot;</span><br><span class=\"line\">    values = [&quot;amzn2-ami-kernel-5.10-hvm-*-gp2&quot;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  filter &#123;</span><br><span class=\"line\">    name   = &quot;architecture&quot;</span><br><span class=\"line\">    values = [&quot;x86_64&quot;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 开启aws ec2机器</span><br><span class=\"line\"># https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance</span><br><span class=\"line\">resource &quot;aws_instance&quot; &quot;mytest001&quot; &#123;</span><br><span class=\"line\">#  ami           = &quot;ami-0b7546e839d7ace12&quot;  #写死ami</span><br><span class=\"line\">  ami           = data.aws_ami.latest_amazon_linux.id  #获取查找出来的ami</span><br><span class=\"line\">  instance_type = &quot;t2.micro&quot; #定义机器规格</span><br><span class=\"line\">  availability_zone = &quot;ap-northeast-1a&quot; #确定机器所在可用区</span><br><span class=\"line\"> </span><br><span class=\"line\">  key_name = &quot;test&quot; #密钥对配置 https://ap-northeast-1.console.aws.amazon.com/ec2/v2/home?region=ap-northeast-1#KeyPairs:</span><br><span class=\"line\"> </span><br><span class=\"line\">  network_interface &#123; #关联网卡接口</span><br><span class=\"line\">    network_interface_id = aws_network_interface.web-server-nic.id</span><br><span class=\"line\">    device_index         = 0 #网卡设备索引，0表示第一个</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  tags = &#123;</span><br><span class=\"line\">    Name = &quot;testwebserver&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  user_data = &lt;&lt;-EOF</span><br><span class=\"line\">              #!/bin/bash</span><br><span class=\"line\">              sudo yum install -y amazon-linux-extras</span><br><span class=\"line\">              sudo amazon-linux-extras install nginx1</span><br><span class=\"line\">              sudo systemctl enable --now nginx</span><br><span class=\"line\">              EOF</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">output &quot;eip&quot; &#123;</span><br><span class=\"line\">  value = aws_eip.one.public_ip</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考文档：<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ami\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ami</a><br>参考文档：<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance</a></p>\n<ul>\n<li>其中data代表利用aws插件定义的data模型对aws进行查询，例如我们在代码中利用data查询东京区域aws官方提供的Amazon Linux 2 Kernel 5.10 AMI 2.0.20220606.1 x86_64 HVM gp2 镜像的id，这样我们就不需要人工在界面上去查询相关id再硬编码到代码中，而是拿到搜索来的结果赋值给创建机器那一步。</li>\n<li>其中resource代表我们需要在云端创建的资源，在例子里我们创建的这些资源，分别是vpc，互联网网关，路由表，子网，安全组，网络接口，EIP，ec2机器，并将他们组合在一起形成一个简单的交付项目。</li>\n<li>在定义ec2时我们通过user_data定义了第一次开机时需要执行的一次性初始化脚本，脚本中定义了安装nginx并启动的动作。</li>\n<li>output “eip” 将terraform执行完毕后，aws分配给网络接口的公网eip打印到控制台中。</li>\n</ul>\n<h2 id=\"Terraform常用操作命令\"><a href=\"#Terraform常用操作命令\" class=\"headerlink\" title=\"Terraform常用操作命令\"></a>Terraform常用操作命令</h2><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行命令</span></span><br><span class=\"line\"><span class=\"comment\"># 预演：terraform.exe plan</span></span><br><span class=\"line\"><span class=\"comment\"># 部署：terraform.exe apply</span></span><br><span class=\"line\"><span class=\"comment\">#    部署个别资源：terraform.exe apply --target aws_instance.mytest001</span></span><br><span class=\"line\"><span class=\"comment\">#    手动传递变量：terraform.exe apply -var &quot;subnet_prefix1=10.10.1.0/24&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 删除：terraform.exe destroy</span></span><br><span class=\"line\"><span class=\"comment\">#    --auth-approve 无需确认</span></span><br><span class=\"line\"><span class=\"comment\">#    删除个别资源：terraform.exe destroy --target aws_instance.mytest001</span></span><br><span class=\"line\"><span class=\"comment\"># 查看线上资源：terraform.exe state list</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># tffile terraform.tfstate apply之后线上的资源创建状态</span></span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["OPS","Terraform","基础设施即代码","公有云编排"]},{"title":"Redis-数据类型&持久化&安全认证和配置的热更新","url":"/forward/ae6c7518.html","content":"<h2 id=\"全局命令\"><a href=\"#全局命令\" class=\"headerlink\" title=\"全局命令\"></a>全局命令</h2><p>Redis 有 5 种数据结构,他们是键值对中的值,对于键来说有一些通用的命令.</p>\n<h3 id=\"查看所有命键\"><a href=\"#查看所有命键\" class=\"headerlink\" title=\"查看所有命键\"></a>查看所有命键</h3><p><code>Keys *</code> // 十分危险的命令,线上禁止使用</p>\n<h3 id=\"查看键的总数\"><a href=\"#查看键的总数\" class=\"headerlink\" title=\"查看键的总数\"></a>查看键的总数</h3><p><code>Dbsize</code> // dbsize 命令在计算键总数时不会遍历所有键,而是直接获取 Redis 内置的键总数变量.</p>\n<h3 id=\"检查键是否存在\"><a href=\"#检查键是否存在\" class=\"headerlink\" title=\"检查键是否存在\"></a>检查键是否存在</h3><p><code>Exists key</code> // 如果键存在则返回 1,不存在则返回 0</p>\n<h3 id=\"删除键\"><a href=\"#删除键\" class=\"headerlink\" title=\"删除键\"></a>删除键</h3><p><code>Del key [key …]</code> // 通用命令,无论值是什么数据结构类型,del 命令都可以将其删除.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; DEL key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1 //存在并成功删除</span><br><span class=\"line\">127.0.0.1:6379&gt; EXISTS key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0 //不存在，且删除失败</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"键过期\"><a href=\"#键过期\" class=\"headerlink\" title=\"键过期\"></a>键过期</h3><p><code>Expire key seconds </code><br>// Redis 支持对键添加过期时间,当超过过期时间后,会自动删除键.<br>// 通过 ttl 命令观察键的剩余时间<br>大于等于 0 的证书: 键剩余过期时间</p>\n<ul>\n<li>-1: 键没设置过期时间</li>\n<li>-2: 键不存在</li>\n</ul>\n<p><code>PERSIST key</code><br>//去掉键过期时间，转永久</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; TTL pincheng</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -1 //永不过期</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; EXPIRE pincheng 10 //设为10s过期</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1 </span><br><span class=\"line\">127.0.0.1:6379&gt; TTL pincheng //剩余时间</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; get pincheng //被删除</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; TTL pincheng //键不存在</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -2</span><br><span class=\"line\">注意：设置完的过期键如果重复定义，会重新变成永不过期。</span><br><span class=\"line\"></span><br><span class=\"line\">去掉过期时间：</span><br><span class=\"line\">127.0.0.1:6379&gt; keys z*</span><br><span class=\"line\">1) <span class=\"string\">&quot;zw1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; EXPIRE zw1 100</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; TTL zw1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 94</span><br><span class=\"line\">127.0.0.1:6379&gt; TTL zw1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 93</span><br><span class=\"line\">127.0.0.1:6379&gt; PERSIST zw1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; TTL zw1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"键的数据类型\"><a href=\"#键的数据类型\" class=\"headerlink\" title=\"键的数据类型\"></a>键的数据类型</h3><p><code>Type key</code></p>\n<h3 id=\"变更KEY名\"><a href=\"#变更KEY名\" class=\"headerlink\" title=\"变更KEY名\"></a>变更KEY名</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; RENAME b bb</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; KEYS *</span><br><span class=\"line\">1) <span class=\"string\">&quot;bb&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h2><h3 id=\"※应用场景※\"><a href=\"#※应用场景※\" class=\"headerlink\" title=\"※应用场景※\"></a>※应用场景※</h3><p><code>session</code> 共享<br>常规计数：微博数，粉丝数，订阅、礼物<br>key:value</p>\n<hr>\n<h2 id=\"运维掌握应用场景即可\"><a href=\"#运维掌握应用场景即可\" class=\"headerlink\" title=\"运维掌握应用场景即可\"></a>运维掌握应用场景即可</h2><h3 id=\"单个定义\"><a href=\"#单个定义\" class=\"headerlink\" title=\"单个定义\"></a>单个定义</h3><p><code>set name zhangsan</code></p>\n<h3 id=\"批量定义\"><a href=\"#批量定义\" class=\"headerlink\" title=\"批量定义\"></a>批量定义</h3><p><code>MSET id 101 name zhangsan age 20 gender m</code><br> 等价于以下操作：<br><code>SET id 101 </code><br><code>set name zhangsan </code><br><code>set age 20 </code><br><code>set gender m</code></p>\n<h3 id=\"计数器\"><a href=\"#计数器\" class=\"headerlink\" title=\"计数器\"></a>计数器</h3><ul>\n<li>每点一次关注，都执行以下命令一次<br><code>127.0.0.1:6379&gt; incr num</code></li>\n<li>显示粉丝数量：<br><code>127.0.0.1:6379&gt; get num</code></li>\n</ul>\n<h3 id=\"暗箱操作：\"><a href=\"#暗箱操作：\" class=\"headerlink\" title=\"暗箱操作：\"></a>暗箱操作：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; INCRBY num 10000</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10006</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\"><span class=\"string\">&quot;10006&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY num 10000</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\"><span class=\"string\">&quot;6&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">增：</span><br><span class=\"line\"><span class=\"built_in\">set</span> mykey <span class=\"string\">&quot;test&quot;</span>                为键设置新值，并覆盖原有值</span><br><span class=\"line\">getset mycounter 0              设置值,取值同时进行</span><br><span class=\"line\">setex mykey 10 <span class=\"string\">&quot;hello&quot;</span>          设置指定 Key 的过期时间为10秒,在存活时间可以获取value</span><br><span class=\"line\">setnx mykey <span class=\"string\">&quot;hello&quot;</span>             若该键不存在，则为键设置新值</span><br><span class=\"line\">mset key3  <span class=\"string\">&quot;zyx&quot;</span>  key4 <span class=\"string\">&quot;xyz&quot;</span>    批量设置键</span><br><span class=\"line\"></span><br><span class=\"line\">删：</span><br><span class=\"line\">del key1                        删除已有键</span><br><span class=\"line\"></span><br><span class=\"line\">改：</span><br><span class=\"line\">append mykey <span class=\"string\">&quot;hello&quot;</span>            若该键并不存在,返回当前 Value 的长度</span><br><span class=\"line\">                                该键已经存在，返回追加后 Value的长度</span><br><span class=\"line\">incr mykey                      值增加1,若该key不存在,创建key,初始值设为0,增加后结果为1</span><br><span class=\"line\">decrby  mykey  5                值减少5</span><br><span class=\"line\">setrange mykey 20 <span class=\"built_in\">dd</span>            把第21和22个字节,替换为<span class=\"built_in\">dd</span>, 超过value长度,自动补0</span><br><span class=\"line\"></span><br><span class=\"line\">查：  </span><br><span class=\"line\">exists mykey                    判断该键是否存在，存在返回 1，否则返回0</span><br><span class=\"line\">get mykey                       获取Key对应的value</span><br><span class=\"line\">strlen mykey                    获取指定 Key 的字符长度</span><br><span class=\"line\">ttl mykey                       查看一下指定 Key 的剩余存活时间(秒数)</span><br><span class=\"line\">getrange mykey 1 20             获取第2到第20个字节,若20超过value长度,则截取第2个和后面所有的</span><br><span class=\"line\">mget key3 key4                  批量获取键</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli </span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key value [expiration EX seconds|PX milliseconds] [NX|XX]</span><br><span class=\"line\">                设置 键  值 </span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat zw.txt</span></span><br><span class=\"line\">韶光暂留。爷爷的脸在日光灯下，不满的情绪透过那浑浊的镜片：“你搬走桌子就不能多添一步，把台玻璃底下的纸片花儿都留下？”爸爸甚是不耐烦，换张餐桌，把原来的弃掷，再简单不过的事，拘泥于不明原因的繁琐，实在浪费时间。“唉，那些好东西，都是想给孩子多看看的，能一天，是一天……”我摊开掌心，看那漏网之鱼——许久前本该垫于桌下的。如此，便成了一去不返，留下的唯一痕迹。将记忆从过往中翻出，同这张纸片一起，敝帚自珍地数过。爷爷爱读报，每每叫他不应，定是入了迷。从小看他，一样的姿势，纱窗下，光晕支离破碎，尘埃轻舞，举着报一动不动，隐约闪烁在镜片后的情绪。只是，不知从何时起，他多了一项工作。变戏法似的，塞给我一张纸片，定睛，原是从报纸上裁剪下的，嗅那表面的味儿，报纸独有的，古老，富有生机，仿若一位从民国翩然而来的故人，用浅浅的语调，念过寥寥，念过婉转。总是敷衍道：“爷爷我回去有空再看。”语罢欲塞入兜中的手被他止住：“好文章啊好文章，不行，你得看，帮你压台玻璃底下，吃饭时随性看看总不浪费时间吧？”日子汹涌地向前，光阴如棋子，落子的位越来越少，年岁越过越薄。偶然撞见过爷爷裁剪，仿佛雕琢着的工匠，多一分阳光溅落到视野之上，亦是搅扰。“好文章啊好文章，不能荒废了的。”这样划着一道道线，咂嘴，兀自发笑。渐渐受他感染，奶奶也起了兴致，时不时压一张“青少年如何保护视力”，如此类，被爷爷发现，不过几天，便无处可寻。爷爷的眼光不容置疑。沉浸于那灰白色的纸张，漫步走过烟雨笼罩，黄白交错的苍穹下，看尽更迭的人面，烟花破碎的世事。往往中途吃饭到一半，便凑近了玻璃，一心一念，不知身处何方。奶奶因此少不了责备爷爷，爷爷仍是那一副悠闲模样：“不急，不急，看完再说。”这样的纵容，维持到此番爸爸的失误，经年累月，一瞬间化成云烟，就在目睹中，飘摇过头顶。爷爷也爱惜报纸，却因为剪报，他那里剩余堆积着的，不再完整，残破不堪，与我这里留下的一张，便成为追寻那笔财富的痕迹。可我知道不止于此，文字领我走过的河山，一条条纵横交错的路，编织，造就了回忆中的印痕，刻于血液。那一张张纸片，成了过去。留下的痕迹，在身体中，却磨灭不尽，厚重的复古气息，老一辈的用心，使这痕迹壮大，生根发芽。一念，百草生。念那随风，本该沉潜的书香。</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli set zw1 $(cat zw.txt)</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli get zw1 &gt; zw1.txt</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat zw1.txt</span></span><br><span class=\"line\">韶光暂留。爷爷的脸在日光灯下，不满的情绪透过那浑浊的镜片：“你搬走桌子就不能多添一步，把台玻璃底下的纸片花儿都留下？”爸爸甚是不耐烦，换张餐桌，把原来的弃掷，再简单不过的事，拘泥于不明原因的繁琐，实在浪费时间。“唉，那些好东西，都是想给孩子多看看的，能一天，是一天……”我摊开掌心，看那漏网之鱼——许久前本该垫于桌下的。如此，便成了一去不返，留下的唯一痕迹。将记忆从过往中翻出，同这张纸片一起，敝帚自珍地数过。爷爷爱读报，每每叫他不应，定是入了迷。从小看他，一样的姿势，纱窗下，光晕支离破碎，尘埃轻舞，举着报一动不动，隐约闪烁在镜片后的情绪。只是，不知从何时起，他多了一项工作。变戏法似的，塞给我一张纸片，定睛，原是从报纸上裁剪下的，嗅那表面的味儿，报纸独有的，古老，富有生机，仿若一位从民国翩然而来的故人，用浅浅的语调，念过寥寥，念过婉转。总是敷衍道：“爷爷我回去有空再看。”语罢欲塞入兜中的手被他止住：“好文章啊好文章，不行，你得看，帮你压台玻璃底下，吃饭时随性看看总不浪费时间吧？”日子汹涌地向前，光阴如棋子，落子的位越来越少，年岁越过越薄。偶然撞见过爷爷裁剪，仿佛雕琢着的工匠，多一分阳光溅落到视野之上，亦是搅扰。“好文章啊好文章，不能荒废了的。”这样划着一道道线，咂嘴，兀自发笑。渐渐受他感染，奶奶也起了兴致，时不时压一张“青少年如何保护视力”，如此类，被爷爷发现，不过几天，便无处可寻。爷爷的眼光不容置疑。沉浸于那灰白色的纸张，漫步走过烟雨笼罩，黄白交错的苍穹下，看尽更迭的人面，烟花破碎的世事。往往中途吃饭到一半，便凑近了玻璃，一心一念，不知身处何方。奶奶因此少不了责备爷爷，爷爷仍是那一副悠闲模样：“不急，不急，看完再说。”这样的纵容，维持到此番爸爸的失误，经年累月，一瞬间化成云烟，就在目睹中，飘摇过头顶。爷爷也爱惜报纸，却因为剪报，他那里剩余堆积着的，不再完整，残破不堪，与我这里留下的一张，便成为追寻那笔财富的痕迹。可我知道不止于此，文字领我走过的河山，一条条纵横交错的路，编织，造就了回忆中的印痕，刻于血液。那一张张纸片，成了过去。留下的痕迹，在身体中，却磨灭不尽，厚重的复古气息，老一辈的用心，使这痕迹壮大，生根发芽。一念，百草生。念那随风，本该沉潜的书香。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通常用-SET-command-和-GET-command-来设置和获取字符串值\"><a href=\"#通常用-SET-command-和-GET-command-来设置和获取字符串值\" class=\"headerlink\" title=\"通常用 SET command 和 GET command 来设置和获取字符串值\"></a>通常用 SET command 和 GET command 来设置和获取字符串值</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli set pincheng cakepanit.com</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli </span></span><br><span class=\"line\">127.0.0.1:6379&gt; get pincheng</span><br><span class=\"line\">127.0.0.1:6379&gt; keys * //查看所有键不代表生产操作</span><br><span class=\"line\">1) <span class=\"string\">&quot;pincheng&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;zw1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; DBSIZE //查看键数量</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; TYPE pincheng //查看键类型</span><br><span class=\"line\">string //字符串</span><br><span class=\"line\">127.0.0.1:6379&gt; TYPE zw1</span><br><span class=\"line\">string</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"INCR-命令将字符串值解析成整型-将其加-1-最后结果保存为新的字符串\"><a href=\"#INCR-命令将字符串值解析成整型-将其加-1-最后结果保存为新的字符串\" class=\"headerlink\" title=\"INCR 命令将字符串值解析成整型.将其加 1,最后结果保存为新的字符串\"></a>INCR 命令将字符串值解析成整型.将其加 1,最后结果保存为新的字符串</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> num1 10 //设置kv值为num1 10</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; GET num1 //查看值</span><br><span class=\"line\"><span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCR num1 //INCR 数值+1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 11</span><br><span class=\"line\">127.0.0.1:6379&gt; GET num1 </span><br><span class=\"line\"><span class=\"string\">&quot;11&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY num1 100 //INCRBY 增加指定数值</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 111</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DECR-命令将字符串值解析成整型-将其减-1-最后结果保存为新的字符串\"><a href=\"#DECR-命令将字符串值解析成整型-将其减-1-最后结果保存为新的字符串\" class=\"headerlink\" title=\"DECR 命令将字符串值解析成整型.将其减 1,最后结果保存为新的字符串\"></a>DECR 命令将字符串值解析成整型.将其减 1,最后结果保存为新的字符串</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; DECR num1 //DECR 数值-1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 110</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY num1 10 //DECRBY 减少指定数值</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 100</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MSET-和-MGET-可以一次存储或获取多个-key-对应的值\"><a href=\"#MSET-和-MGET-可以一次存储或获取多个-key-对应的值\" class=\"headerlink\" title=\"MSET 和 MGET 可以一次存储或获取多个 key 对应的值.\"></a>MSET 和 MGET 可以一次存储或获取多个 key 对应的值.</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;  mset key3 v3 key4 v4 key5 v5</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;  mget key3 key4 key5</span><br><span class=\"line\">1) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v4&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v5&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EXISTS-命令返回-1-或-0-标识给定-key-的值是否存在\"><a href=\"#EXISTS-命令返回-1-或-0-标识给定-key-的值是否存在\" class=\"headerlink\" title=\"EXISTS 命令返回 1 或 0 标识给定 key 的值是否存在.\"></a>EXISTS 命令返回 1 或 0 标识给定 key 的值是否存在.</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; EXISTS key1 //不存在</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; EXISTS key3 //存在</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表操作\"><a href=\"#列表操作\" class=\"headerlink\" title=\"列表操作\"></a>列表操作</h2><h3 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令:\"></a>操作命令:</h3><p><code>LPUSH</code> 命令可向 list 的左边(头部)添加一个新元素<br><code>RPUSH</code> 命令可向 list 的右边(尾部)添加一个新元素.<br>最后 <code>LRANGE</code> 可以从 <code>list</code> 中取出一定范围的元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; RPUSH list1 A</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; RPUSH list1 B</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; RPUSH list1 C</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH list1 top1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list1 0 -1 //从开头到最后</span><br><span class=\"line\">1) <span class=\"string\">&quot;top1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;B&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list1 1 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;B&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;C&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"操作命令-1\"><a href=\"#操作命令-1\" class=\"headerlink\" title=\"操作命令:\"></a>操作命令:</h3><p><code>Pop</code>,从 list 中删除元素并同时返回删除的值,可以在左(L)边或右(R)边操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; LPUSH list1 top //从左插入追加新元素top</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list1 0 -1 //查看列表所有元素</span><br><span class=\"line\">1) <span class=\"string\">&quot;top&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;top1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;B&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; RPOP list1 //从右删除一个元素</span><br><span class=\"line\"><span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list1 0 -1 </span><br><span class=\"line\">1) <span class=\"string\">&quot;top&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;top1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;B&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPOP list1 //从左删除一个元素</span><br><span class=\"line\"><span class=\"string\">&quot;top&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list1 0 -1 </span><br><span class=\"line\">1) <span class=\"string\">&quot;top1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;B&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li>消息队列系统</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">增：</span><br><span class=\"line\">lpush mykey a b             若key不存在,创建该键及与其关联的List,依次插入a ,b， 若List类型的key存在,则插入value中</span><br><span class=\"line\">lpushx mykey2 e             若key不存在,此命令无效， 若key存在,则插入value中</span><br><span class=\"line\">linsert mykey before a a1   在 a 的前面插入新元素 a1</span><br><span class=\"line\">linsert mykey after e e2    在e 的后面插入新元素 e2</span><br><span class=\"line\">rpush mykey a b             在链表尾部先插入b,在插入a</span><br><span class=\"line\">rpushx mykey e              若key存在,在尾部插入e, 若key不存在,则无效</span><br><span class=\"line\">rpoplpush mykey mykey2      将mykey的尾部元素弹出,再插入到mykey2 的头部(原子性的操作)</span><br><span class=\"line\"></span><br><span class=\"line\">删：</span><br><span class=\"line\">del mykey                   删除已有键 </span><br><span class=\"line\">lrem mykey 2 a              从头部开始找,按先后顺序,值为a的元素,删除数量为2个,若存在第3个,则不删除</span><br><span class=\"line\">ltrim mykey 0 2             从头开始,索引为0,1,2的3个元素,其余全部删除</span><br><span class=\"line\"></span><br><span class=\"line\">改：</span><br><span class=\"line\">lset mykey 1 e              从头开始, 将索引为1的元素值,设置为新值 e,若索引越界,则返回错误信息</span><br><span class=\"line\">rpoplpush mykey mykey       将 mykey 中的尾部元素移到其头部</span><br><span class=\"line\"></span><br><span class=\"line\">查：</span><br><span class=\"line\">lrange mykey 0 -1           取链表中的全部元素，其中0表示第一个元素,-1表示最后一个元素。</span><br><span class=\"line\">lrange mykey 0 2            从头开始,取索引为0,1,2的元素</span><br><span class=\"line\">lrange mykey 0 0            从头开始,取第一个元素,从第0个开始,到第0个结束</span><br><span class=\"line\">lpop mykey                  获取头部元素,并且弹出头部元素,出栈</span><br><span class=\"line\">lindex mykey 6              从头开始,获取索引为6的元素 若下标越界,则返回nil </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hash操作\"><a href=\"#hash操作\" class=\"headerlink\" title=\"hash操作\"></a>hash操作</h2><h3 id=\"操作命令-2\"><a href=\"#操作命令-2\" class=\"headerlink\" title=\"操作命令:\"></a>操作命令:</h3><ul>\n<li><code>Hash</code> 看起来就像一个’hash’的样子.由键值对组成</li>\n<li><code>HMSET</code> 指令设置 hash 中的多个域</li>\n<li><code>HGET</code> 取回单个域.</li>\n<li><code>HMGET</code> 取回一系列的值</li>\n</ul>\n<h3 id=\"应用场景：\"><a href=\"#应用场景：\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h3><p>存储部分变更的数据，如用户信息等。是最接近mysql表结构的一种类型，主要是可以做数据库缓存。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hmset user:1000 username zhangya age 27 job it //创建user=1000，并插入相关列和值</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hget user:1000 username //查询单个列的值</span><br><span class=\"line\"><span class=\"string\">&quot;zhangya&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:1000 username age job //查询多个列的值</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangya&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;27&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;it&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user:1000 //查询user=1000，的所有键值</span><br><span class=\"line\">1) <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;zhangya&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;age&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;27&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;job&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;it&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hmset user:1000 qq 526195417 //在指定键 增加一个列值</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user:1000</span><br><span class=\"line\">1) <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;zhangya&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;age&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;27&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;job&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;it&quot;</span></span><br><span class=\"line\">7) <span class=\"string\">&quot;qq&quot;</span></span><br><span class=\"line\">8) <span class=\"string\">&quot;526195417&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">增：</span><br><span class=\"line\">hset myhash field1 <span class=\"string\">&quot;s&quot;</span>    </span><br><span class=\"line\">//若字段field1不存在,创建该键及与其关联的Hashes, Hashes中,key为field1 ,并设value为s ，若存在会覆盖原value</span><br><span class=\"line\"></span><br><span class=\"line\">hsetnx myhash field1 s    </span><br><span class=\"line\">//若字段field1不存在,创建该键及与其关联的Hashes, Hashes中,key为field1 ,并设value为s， 若字段field1存在,则无效</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hmset myhash field1 <span class=\"string\">&quot;hello&quot;</span> field2 <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">//一次性设置多个字段</span><br><span class=\"line\"></span><br><span class=\"line\">删:</span><br><span class=\"line\">hdel myhash field1                      删除 myhash 键中字段名为 field1 的字段</span><br><span class=\"line\">del myhash                              删除键</span><br><span class=\"line\"></span><br><span class=\"line\">改:  </span><br><span class=\"line\">hincrby myhash field 1                  给field的值加1</span><br><span class=\"line\">HSET user:1000 qq 513247869             修改指定列的值</span><br><span class=\"line\"></span><br><span class=\"line\">查:</span><br><span class=\"line\">hget myhash field1                      获取键值为 myhash,字段为 field1 的值</span><br><span class=\"line\">hlen myhash                             获取myhash键的字段数量</span><br><span class=\"line\">hexists myhash field1                   判断 myhash 键中是否存在字段名为 field1 的字段</span><br><span class=\"line\">hmget myhash field1 field2 field3       一次性获取多个字段</span><br><span class=\"line\">hgetall myhash                          返回 myhash 键的所有字段及其值</span><br><span class=\"line\">hkeys myhash                            获取myhash 键中所有字段的名字</span><br><span class=\"line\">hvals myhash                            获取 myhash 键中所有字段的值</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将mysql中的表导入到redis中\"><a href=\"#将mysql中的表导入到redis中\" class=\"headerlink\" title=\"将mysql中的表导入到redis中\"></a>将mysql中的表导入到redis中</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db03 [(none)]&gt;select * from oldboy.t100w <span class=\"built_in\">where</span> <span class=\"built_in\">id</span>&lt;100;</span><br><span class=\"line\">+------+--------+------+------+---------------------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>   | num    | k1   | k2   | dt                  |</span><br><span class=\"line\">+------+--------+------+------+---------------------+</span><br><span class=\"line\">|    1 | 862168 | CJ   | DEOP | 2020-05-06 15:17:01 |</span><br><span class=\"line\">|    2 | 457542 | uf   | BC67 | 2020-05-06 15:17:01 |</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [oldboy]&gt;select concat(<span class=\"string\">&quot;hmset t100w_&quot;</span>,<span class=\"built_in\">id</span>,<span class=\"string\">&quot; id &quot;</span>,<span class=\"built_in\">id</span>,<span class=\"string\">&quot; num &quot;</span>,num,<span class=\"string\">&quot; k1 &quot;</span>,k1,<span class=\"string\">&quot; k2 &quot;</span>,k2,<span class=\"string\">&quot; dt &quot;</span>,<span class=\"string\">&quot;&#x27;&quot;</span>,dt,<span class=\"string\">&quot;&#x27;&quot;</span>) from t100w <span class=\"built_in\">where</span> <span class=\"built_in\">id</span>&lt;100 INTO OUTFILE <span class=\"string\">&#x27;/tmp/t100w.txt&#x27;</span>;</span><br><span class=\"line\">Query OK, 99 rows affected (0.31 sec)</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># cat /tmp/t100w.txt </span></span><br><span class=\"line\">hmset t100w_1 <span class=\"built_in\">id</span> 1 num 862168 k1 CJ k2 DEOP dt <span class=\"string\">&#x27;2020-05-06 15:17:01&#x27;</span></span><br><span class=\"line\">hmset t100w_2 <span class=\"built_in\">id</span> 2 num 457542 k1 uf k2 BC67 dt <span class=\"string\">&#x27;2020-05-06 15:17:01&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># scp /tmp/t100w.txt root@10.0.0.51:/tmp/ </span></span><br><span class=\"line\">root@10.0.0.51<span class=\"string\">&#x27;s password: </span></span><br><span class=\"line\"><span class=\"string\">t100w.txt                                                                         100% 6999     5.7MB/s   00:00 </span></span><br><span class=\"line\"><span class=\"string\">[root@db01 ~]# ll /tmp/</span></span><br><span class=\"line\"><span class=\"string\">总用量 8</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r-- 1 root root 6810 5月  10 22:06 t100w.txt</span></span><br><span class=\"line\"><span class=\"string\">[root@db01 ~]# cat /tmp/t100w.txt |redis-cli</span></span><br><span class=\"line\"><span class=\"string\">OK</span></span><br><span class=\"line\"><span class=\"string\">OK</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[root@db01 ~]# redis-cli keys t100w_*</span></span><br><span class=\"line\"><span class=\"string\"> 1) &quot;t100w_10&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 2) &quot;t100w_13&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 3) &quot;t100w_65&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 4) &quot;t100w_45&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">验证数据一致性：</span></span><br><span class=\"line\"><span class=\"string\">redis：</span></span><br><span class=\"line\"><span class=\"string\">[root@db01 ~]# redis-cli hgetall t100w_99</span></span><br><span class=\"line\"><span class=\"string\"> 1) &quot;id&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 2) &quot;99&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 3) &quot;num&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 4) &quot;30553&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 5) &quot;k1&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 6) &quot;XP&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 7) &quot;k2&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 8) &quot;67VW&quot;</span></span><br><span class=\"line\"><span class=\"string\"> 9) &quot;dt&quot;</span></span><br><span class=\"line\"><span class=\"string\">10) &quot;2020-05-06 15:17:01&quot;</span></span><br><span class=\"line\"><span class=\"string\">mysql：</span></span><br><span class=\"line\"><span class=\"string\">db03 [oldboy]&gt;select * from oldboy.t100w where id=99;</span></span><br><span class=\"line\"><span class=\"string\">+------+-------+------+------+---------------------+</span></span><br><span class=\"line\"><span class=\"string\">| id   | num   | k1   | k2   | dt                  |</span></span><br><span class=\"line\"><span class=\"string\">+------+-------+------+------+---------------------+</span></span><br><span class=\"line\"><span class=\"string\">|   99 | 30553 | XP   | 67VW | 2020-05-06 15:17:01 |</span></span><br><span class=\"line\"><span class=\"string\">+------+-------+------+------+---------------------+</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SET-集合类型（join-union）\"><a href=\"#SET-集合类型（join-union）\" class=\"headerlink\" title=\"SET 集合类型（join union）\"></a>SET 集合类型（join union）</h2><h3 id=\"应用场景：-1\"><a href=\"#应用场景：-1\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h3><p><strong>案例：</strong>在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。<br>Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，<br>对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</p>\n<h3 id=\"操作命令-3\"><a href=\"#操作命令-3\" class=\"headerlink\" title=\"操作命令:\"></a>操作命令:</h3><p>集合是字符串的无序排列,</p>\n<ul>\n<li><code>SADD</code> 指令把新的元素添加到 set 中</li>\n<li><code>SMEMBERS</code>查看集合内元素</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD lxl pg1 mff lbw dsm</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; SADD jnl lbw dsm uu</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS lxl</span><br><span class=\"line\">1) <span class=\"string\">&quot;pg1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;dsm&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;mff&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;lbw&quot;</span></span><br><span class=\"line\">SADD lzx lxl jnl dsm</span><br></pre></td></tr></table></figure>\n<p>和 list 类型不同,set 集合不允许出现重复的元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;  sadd jnl lbw</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0 //返回值为0，表示插入元素失败</span><br></pre></td></tr></table></figure>\n\n<p>Srem 用来删除指定的值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SREM lxl dsm</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS lxl</span><br><span class=\"line\">1) <span class=\"string\">&quot;pg1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;mff&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;lbw&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>sdiff 差异对比</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS dsm</span><br><span class=\"line\">1) <span class=\"string\">&quot;pg1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;mff&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;lbw&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS lxl</span><br><span class=\"line\">1) <span class=\"string\">&quot;pg1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;mff&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;lbw&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS jnl</span><br><span class=\"line\">1) <span class=\"string\">&quot;uu&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;dsm&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;lbw&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFF lxl jnl //以lxl为基准，jnl合集中不存在pg1和mff</span><br><span class=\"line\">1) <span class=\"string\">&quot;pg1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;mff&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFF jnl dsm //以jnl为基准，dsm合集中不存在dsm和uu</span><br><span class=\"line\">1) <span class=\"string\">&quot;dsm&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;uu&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFF jnl dsm lxl //以jnl和dsm对比出来的结果为基准，lxl中不存在dsm和uu</span><br><span class=\"line\">1) <span class=\"string\">&quot;dsm&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;uu&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SADD lxl uu</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFF jnl dsm lxl</span><br><span class=\"line\">1) <span class=\"string\">&quot;dsm&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Sinter 计算集合的交集（共同粉丝）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sinter jnl dsm lxl //他们三个的粉丝中都有lbw</span><br><span class=\"line\">1) <span class=\"string\">&quot;lbw&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Sunion 计算集合并集（两个人的粉丝去重相加）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; Sunion jnl dsm</span><br><span class=\"line\">1) <span class=\"string\">&quot;dsm&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;uu&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;lbw&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;pg1&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;mff&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">增：</span><br><span class=\"line\">sadd myset a b c  </span><br><span class=\"line\">//若key不存在,创建该键及与其关联的<span class=\"built_in\">set</span>,依次插入a ,b, c</span><br><span class=\"line\">//若key存在,则插入value中,若a 在myset中已经存在,则插入了 b 和 c 两个新成员。</span><br><span class=\"line\"></span><br><span class=\"line\">删：</span><br><span class=\"line\">spop myset              移除一个尾部元素</span><br><span class=\"line\">srem myset a d f        若f不存在, 移出 a、d ,并返回2</span><br><span class=\"line\"></span><br><span class=\"line\">改：</span><br><span class=\"line\">SMOVE jnl lxl uu        将uu从 jnl 移到 lxl</span><br><span class=\"line\"></span><br><span class=\"line\">查：</span><br><span class=\"line\">sismember myset a       判断 a 是否已经存在，返回值为 1 表示存在。</span><br><span class=\"line\">smembers myset          查看<span class=\"built_in\">set</span>中的内容</span><br><span class=\"line\">scard myset             获取Set 集合中元素的数量</span><br><span class=\"line\">srandmember myset       随机的返回某一成员</span><br><span class=\"line\">sdiff myset1 myset2 myset3               1和2得到一个结果,拿这个集合和3比较,获得每个独有的值</span><br><span class=\"line\">sdiffstore diffkey myset myset2 myset3   3个集和比较,获取独有的元素,并存入diffkey 关联的Set中</span><br><span class=\"line\">sinter myset myset2 myset3               获得3个集合中都有的元素</span><br><span class=\"line\">sinterstore interkey myset myset2 myset3 把交集存入interkey 关联的Set中</span><br><span class=\"line\">sunion myset myset2 myset3               获取3个集合中的成员的并集</span><br><span class=\"line\">sunionstore unionkey myset myset2 myset3 把并集存入unionkey 关联的Set中</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis持久化\"><a href=\"#Redis持久化\" class=\"headerlink\" title=\"Redis持久化\"></a>Redis持久化</h2><h3 id=\"RDB-持久化优缺点\"><a href=\"#RDB-持久化优缺点\" class=\"headerlink\" title=\"RDB 持久化优缺点:\"></a>RDB 持久化优缺点:</h3><p>可以在指定的时间间隔内生成数据集的 时间点快照（point-in-time snapshot）。</p>\n<ul>\n<li>优点：速度快，适合于用做备份，主从复制也是基于 RDB 持久化功能实现的。</li>\n<li>缺点：会有数据丢失</li>\n</ul>\n<h3 id=\"RDB持久化参数：\"><a href=\"#RDB持久化参数：\" class=\"headerlink\" title=\"RDB持久化参数：\"></a>RDB持久化参数：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#持久化数据存放目录</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> <span class=\"built_in\">dir</span> /data/redis_cluster/redis_6379</span><br><span class=\"line\"><span class=\"comment\">#RBD持久化数据文件</span></span><br><span class=\"line\">dbfilename redis_6379.rdb</span><br><span class=\"line\"><span class=\"comment\">#15分钟内有一个数据变化就save持久化</span></span><br><span class=\"line\">save 900 1</span><br><span class=\"line\"><span class=\"comment\">#5分钟内有10个数据变化就save持久化</span></span><br><span class=\"line\">save 300 10</span><br><span class=\"line\"><span class=\"comment\">#60秒内有10000个数据变化就save持久化</span></span><br><span class=\"line\">save 60 10000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RDB持久化测试：\"><a href=\"#RDB持久化测试：\" class=\"headerlink\" title=\"RDB持久化测试：\"></a>RDB持久化测试：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /application/redis_cluster/redis_6379/conf/redis_6379.conf </span></span><br><span class=\"line\"><span class=\"comment\">### 以守护进程模式启动</span></span><br><span class=\"line\">daemonize <span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"comment\">### 绑定的主机地址</span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 10.0.0.51 127.0.0.1</span><br><span class=\"line\"><span class=\"comment\">### 监听端口</span></span><br><span class=\"line\">port 6379</span><br><span class=\"line\"><span class=\"comment\">### pid 文件和 log 文件的保存地址</span></span><br><span class=\"line\">pidfile /application/redis_cluster/redis_6379/pid/redis_6379.pid</span><br><span class=\"line\">logfile /application/redis_cluster/redis_6379/logs/redis_6379.<span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\">### 设置数据库的数量，默认数据库为 0</span></span><br><span class=\"line\">databases 16</span><br><span class=\"line\"><span class=\"comment\">### 指定本地持久化文件的文件名,默认是 dump.rdb</span></span><br><span class=\"line\">dbfilename redis_6379.rdb</span><br><span class=\"line\"><span class=\"comment\">### 本地数据库的目录</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /data/redis_cluster/redis_6379</span><br><span class=\"line\">save 60 1000</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart redis6379</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># for i in `seq 1 3000`;do redis-cli set k_$&#123;i&#125; v_$&#123;i&#125;; done</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ll /data/redis_cluster/redis_6379/</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 110 5月  11 10:55 redis_6379.rdb</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG GET save</span><br><span class=\"line\">1) <span class=\"string\">&quot;save&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;60 1000&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AOF-持久化-append-only-log-file-优缺点\"><a href=\"#AOF-持久化-append-only-log-file-优缺点\" class=\"headerlink\" title=\"AOF 持久化(append-only log file)优缺点\"></a>AOF 持久化(append-only log file)优缺点</h3><p>记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。<br>AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。</p>\n<ul>\n<li>优点：可以最大程度保证数据不丢</li>\n<li>缺点：日志记录量级比较大</li>\n</ul>\n<p>AOD持久化参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#打开AOF持久化功能</span></span><br><span class=\"line\">appendonly <span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"comment\">#每秒执行一次持久化操作（写入日志）</span></span><br><span class=\"line\">appendfsync everysec</span><br><span class=\"line\"></span><br><span class=\"line\">或-------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#每执行一个写操作语句，就会持久化一次</span></span><br><span class=\"line\">appendfsync always</span><br><span class=\"line\"></span><br><span class=\"line\">或-------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#写入工作交给操作系统，由操作系统判断缓存区大小统一写入到AOF</span></span><br><span class=\"line\">appendfsync no</span><br></pre></td></tr></table></figure>\n<h3 id=\"AOF持久化测试\"><a href=\"#AOF持久化测试\" class=\"headerlink\" title=\"AOF持久化测试\"></a>AOF持久化测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /application/redis_cluster/redis_6379/conf/redis_6379.conf </span></span><br><span class=\"line\"><span class=\"comment\">### 以守护进程模式启动</span></span><br><span class=\"line\">daemonize <span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"comment\">### 绑定的主机地址</span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 10.0.0.51 127.0.0.1</span><br><span class=\"line\"><span class=\"comment\">### 监听端口</span></span><br><span class=\"line\">port 6379</span><br><span class=\"line\"><span class=\"comment\">### pid 文件和 log 文件的保存地址</span></span><br><span class=\"line\">pidfile /application/redis_cluster/redis_6379/pid/redis_6379.pid</span><br><span class=\"line\">logfile /application/redis_cluster/redis_6379/logs/redis_6379.<span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\">### 设置数据库的数量，默认数据库为 0</span></span><br><span class=\"line\">databases 16</span><br><span class=\"line\"><span class=\"comment\">### 指定本地持久化文件的文件名,默认是 dump.rdb</span></span><br><span class=\"line\">dbfilename redis_6379.rdb</span><br><span class=\"line\"><span class=\"comment\">### 本地数据库的目录</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /data/redis_cluster/redis_6379</span><br><span class=\"line\">save 60 1000</span><br><span class=\"line\"><span class=\"comment\">#打开AOF持久化功能</span></span><br><span class=\"line\">appendonly <span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"comment\">##每秒执行一次持久化操作（写入日志）</span></span><br><span class=\"line\">appendfsync everysec</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart redis6379</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ll  /data/redis_cluster/redis_6379/</span></span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-r--r-- 1 root root  0 5月  11 11:26 appendonly.aof</span><br><span class=\"line\">-rw-r--r-- 1 root root 92 5月  11 11:26 redis_6379.rdb</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：<br>1.如果同时有AOF和RDB存在，重启的时候，载入的是AOF文件<br>2.shutdown，此命令在redis中执行时。其实会触发两条命令 </p>\n<ul>\n<li>bgsave //持久化</li>\n<li>shutdown //关闭服务</li>\n</ul>\n<h3 id=\"持久化面试题\"><a href=\"#持久化面试题\" class=\"headerlink\" title=\"持久化面试题\"></a>持久化面试题</h3><p>redis 持久化方式有哪些？有什么区别？<br>rdb：基于快照的持久化，速度更快，一般用作备份，主从复制也是依赖于 rdb 持久化功能<br>aof：以追加的方式记录 redis 操作日志的文件。可以最大程度的保证 redis 数据安全，类似于 mysql 的 binlog</p>\n<h2 id=\"Redis安全认证\"><a href=\"#Redis安全认证\" class=\"headerlink\" title=\"Redis安全认证\"></a>Redis安全认证</h2><p>redis 默认开启了保护模式，只允许本地回环地址登录并访问数据库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">禁止 protected-mode</span><br><span class=\"line\">protected-mode <span class=\"built_in\">yes</span>/no （保护模式，是否只允许本地访问）</span><br></pre></td></tr></table></figure>\n<p>(1)Bind :指定 IP 进行监听</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># vim /opt/redis_cluster/redis_6379/conf/redis_6379.conf</span></span><br><span class=\"line\"><span class=\"built_in\">bind</span> 10.0.0.51 127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>(2)增加 requirepass {password}</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># vim /opt/redis_cluster/redis_6379/conf/redis_6379.conf</span></span><br><span class=\"line\">requirepass 123456</span><br><span class=\"line\">验证方法一：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -a 123456</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">OK</span><br><span class=\"line\">验证方法二：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; auth 123456</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis配置的热更新\"><a href=\"#Redis配置的热更新\" class=\"headerlink\" title=\"Redis配置的热更新\"></a>Redis配置的热更新</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CONFIG GET *</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG GET save</span><br><span class=\"line\">1) <span class=\"string\">&quot;save&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG SET save <span class=\"string\">&quot;60 100 300 10 600 1&quot;</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG GET save</span><br><span class=\"line\">1) <span class=\"string\">&quot;save&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;60 100 300 10 600 1&quot;</span></span><br></pre></td></tr></table></figure>","categories":["DBA"],"tags":["NoSQL","Redis"]},{"title":"k8s企业级DevOps实践-Kong in Kubernetes","url":"/forward/b36ee5af.html","content":"<h3 id=\"Kong介绍\"><a href=\"#Kong介绍\" class=\"headerlink\" title=\"Kong介绍\"></a>Kong介绍</h3><p>本文介绍将 Kong 微服务网关作为 Kubernetes 集群内部业务项目之间通讯的最佳实践，之前写过一篇文章使用 Nginx Ingress Controller 作为集群统一的流量入口：使用 Kubernetes Ingress 对外暴露服务，但是相比于 Kong Ingress Controller来说，Kong 支持的功能更加强大，更适合微服务架构：</p>\n<ul>\n<li>拥有庞大的插件生态，能轻易扩展 Kong 支持的功能，比如 API 认证，流控，访问限制等；</li>\n<li>Kong 服务本身和 Admin 管理 API 都集成在一个进程，通过端口区分两者，简化了部署的复杂度；</li>\n<li>Kong 节点的配置统一持久化到数据库，所有节点通过数据库共享数据，在 Ingress 更新后能实时同步到各个节点，而 Nginx Ingress Controller 是通过重新加载机制响应 Ingress 更新，这种方式代价比较大，可能会导致服务的短暂中断；</li>\n<li>Kong 有成熟的第三方管理 UI 和 Admin 管理 API 对接，从而能可视化管理 Kong 配置。</li>\n</ul>\n<p>kong是一个云原生的、高性能的、可扩展的API网关(分布式微服务抽象层)。 kong基于openresty, nginx+lua模块开发，其核心价值就是高性能和可扩展性。</p>\n<p>kong的基本运行情况如下图所示，kong可以通过充当微服务请求的网关， 同时通过插件提供负载均衡、日志记录、身份认证、速率限制(rate-limiting)、转换(transformations)等功能。</p>\n<p><img src=\"/images/pasted-82.png\" alt=\"kong\"><br>客户端请求到达kong网关后，经过一系列的插件处理之后才会将请求转发给指定的后端服务。</p>\n<p>kong的主要组件包含:</p>\n<ul>\n<li>Kong Server: 基于nginx的服务器，用来接收API请求</li>\n<li>PostgreSQL或Apache Cassandra: 用来存储数据</li>\n<li>konga: 第三方开源的图形化管理工具，支持kong的最新版本(因为kong的社区版不提供dashboard)</li>\n<li>kong的三大基础特性:</li>\n</ul>\n<blockquote>\n<p>可扩展性: 可以通过添加更多服务器进行横向扩展<br>模块化: 通过添加插件进行扩展其插件可定制开发<br>云原生: 可在任何基础架构上运行，如云环境或内部网络，对云原生、kubernetes天然支持</p>\n</blockquote>\n<h4 id=\"Kong依赖的技术\"><a href=\"#Kong依赖的技术\" class=\"headerlink\" title=\"Kong依赖的技术\"></a>Kong依赖的技术</h4><p>Kong部署在Nginx和Apache Cassandra或PostgreSQL等可靠技术之上，并提供了易于使用的RESTful API来操作和配置系统。下面是Kong的技术逻辑图。基于这些技术，Kong提供相关的特性支持：</p>\n<ul>\n<li>Nginx<ul>\n<li>经过验证的高性能基础；</li>\n<li>HTTP和反向代理服务器；</li>\n<li>处理低层级的操作。</li>\n</ul>\n</li>\n<li>OpenRestry<ul>\n<li>支持Lua脚本；</li>\n<li>拦截请求/响应生命周期；</li>\n<li>基于Nginx进行扩展。</li>\n</ul>\n</li>\n<li>Clustering&amp;Datastore<ul>\n<li>支持Cassandra或PostgreSQL数据库；</li>\n<li>内存级的缓存；</li>\n<li>支持水平扩展。</li>\n</ul>\n</li>\n<li>Plugins<ul>\n<li>使用Lua创建插件；</li>\n<li>功能强大的定制能力；</li>\n<li>与第三方服务实现集成。</li>\n</ul>\n</li>\n<li>Restful Administration API<ul>\n<li>通过Restful API管理Kong；</li>\n<li>支持CI/CD&amp;DevOps；</li>\n<li>基于插件的可扩展。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/pasted-83.png\" alt=\"kong\"></p>\n<h3 id=\"线上购买阿里云POSTGRES数据库\"><a href=\"#线上购买阿里云POSTGRES数据库\" class=\"headerlink\" title=\"线上购买阿里云POSTGRES数据库\"></a>线上购买阿里云POSTGRES数据库</h3><p><img src=\"/images/pasted-77.png\" alt=\"POSTGRES\"></p>\n<h3 id=\"创建用户及kong数据库\"><a href=\"#创建用户及kong数据库\" class=\"headerlink\" title=\"创建用户及kong数据库\"></a>创建用户及kong数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database kong owner kong;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"映射集群外部数据库\"><a href=\"#映射集群外部数据库\" class=\"headerlink\" title=\"映射集群外部数据库\"></a>映射集群外部数据库</h3><h4 id=\"IP方式\"><a href=\"#IP方式\" class=\"headerlink\" title=\"IP方式\"></a>IP方式</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-postgres</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">5432</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">1921</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Endpoints</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-postgres</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">subsets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">addresses:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">ip:</span> <span class=\"number\">172.19</span><span class=\"string\">.x.x</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">1921</span></span><br></pre></td></tr></table></figure>\n<p>现在，可以在集群内使用简单的连接字符串访问数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">psql -U user_name -d database_name -h my-postgres.kong</span><br></pre></td></tr></table></figure>\n<h4 id=\"URL方式\"><a href=\"#URL方式\" class=\"headerlink\" title=\"URL方式\"></a>URL方式</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-postgres</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ExternalName</span></span><br><span class=\"line\">  <span class=\"attr\">externalName:</span> <span class=\"string\">pgm-uf6ja8np76k4vmdk168190.pg.rds.aliyuncs.com</span></span><br></pre></td></tr></table></figure>\n<p>现在，可以在集群内使用简单的连接字符串访问数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试是否引入成功</span></span><br><span class=\"line\"><span class=\"comment\"># curl my-postgres.kong:1921</span></span><br><span class=\"line\">curl: (52) Empty reply from server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># psql -U user_name -d database_name -h my-postgres.kong</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>创建连接的目的是我们可以使用serviceName连接数据库，通常我们会建议将db/es/redis/mq/等非k8s必须资源独立于k8s的集群外部署，降低k8s管理的复杂度；而这种独立在外部部署的资源建议添加一个k8s的endpoint/service指向来描述其调用地址，便于灵活管理及调用方便。</p>\n</blockquote>\n<h3 id=\"kong安装\"><a href=\"#kong安装\" class=\"headerlink\" title=\"kong安装\"></a>kong安装</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">root@node001</span> <span class=\"string\">kong</span>]<span class=\"comment\"># cat allinone-kong.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">filebeat</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">filebeat.yml:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">    filebeat.inputs:</span></span><br><span class=\"line\"><span class=\"string\">    - type: log</span></span><br><span class=\"line\"><span class=\"string\">      enabled: true</span></span><br><span class=\"line\"><span class=\"string\">      paths:</span></span><br><span class=\"line\"><span class=\"string\">        - /data/access.log</span></span><br><span class=\"line\"><span class=\"string\">      tags: [&quot;k8s_access&quot;, &quot;SG&quot;, &quot;kong&quot;]</span></span><br><span class=\"line\"><span class=\"string\">    filebeat.config.modules:</span></span><br><span class=\"line\"><span class=\"string\">      path: $&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class=\"line\"><span class=\"string\">      reload.enabled: false</span></span><br><span class=\"line\"><span class=\"string\">    setup.template.settings:</span></span><br><span class=\"line\"><span class=\"string\">      index.number_of_shards: 1</span></span><br><span class=\"line\"><span class=\"string\"></span>    </span><br><span class=\"line\">    <span class=\"attr\">processors:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_cloud_metadata:</span> <span class=\"string\">~</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attr\">output.logstash:</span></span><br><span class=\"line\">      <span class=\"attr\">hosts:</span> [<span class=\"string\">&#x27;$&#123;LOGSTASH_HOST:localhost&#125;:$&#123;LOGSTASH_PORT:8888&#125;&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\">#  hosts: [&quot;k8slogs.fxeyeinterface.com:8888&quot;]</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-postgres</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ExternalName</span></span><br><span class=\"line\">  <span class=\"attr\">externalName:</span> <span class=\"string\">pgm-xxxxxxxxxxxxx.pgsql.singapore.rds.aliyuncs.com</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiextensions.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CustomResourceDefinition</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kongclusterplugins.configuration.konghq.com</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">additionalPrinterColumns:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.plugin</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Name</span> <span class=\"string\">of</span> <span class=\"string\">the</span> <span class=\"string\">plugin</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Plugin-Type</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.metadata.creationTimestamp</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Age</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Age</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">date</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.disabled</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Indicates</span> <span class=\"string\">if</span> <span class=\"string\">the</span> <span class=\"string\">plugin</span> <span class=\"string\">is</span> <span class=\"string\">disabled</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Disabled</span></span><br><span class=\"line\">    <span class=\"attr\">priority:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">boolean</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.config</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Configuration</span> <span class=\"string\">of</span> <span class=\"string\">the</span> <span class=\"string\">plugin</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Config</span></span><br><span class=\"line\">    <span class=\"attr\">priority:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">  <span class=\"attr\">group:</span> <span class=\"string\">configuration.konghq.com</span></span><br><span class=\"line\">  <span class=\"attr\">names:</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">KongClusterPlugin</span></span><br><span class=\"line\">    <span class=\"attr\">plural:</span> <span class=\"string\">kongclusterplugins</span></span><br><span class=\"line\">    <span class=\"attr\">shortNames:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">kcp</span></span><br><span class=\"line\">  <span class=\"attr\">scope:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\">  <span class=\"attr\">subresources:</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">validation:</span></span><br><span class=\"line\">    <span class=\"attr\">openAPIV3Schema:</span></span><br><span class=\"line\">      <span class=\"attr\">properties:</span></span><br><span class=\"line\">        <span class=\"attr\">config:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">        <span class=\"attr\">configFrom:</span></span><br><span class=\"line\">          <span class=\"attr\">properties:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">properties:</span></span><br><span class=\"line\">                <span class=\"attr\">key:</span></span><br><span class=\"line\">                  <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span></span><br><span class=\"line\">                  <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                <span class=\"attr\">namespace:</span></span><br><span class=\"line\">                  <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">              <span class=\"attr\">required:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">name</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">namespace</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">key</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">        <span class=\"attr\">disabled:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">boolean</span></span><br><span class=\"line\">        <span class=\"attr\">plugin:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">        <span class=\"attr\">protocols:</span></span><br><span class=\"line\">          <span class=\"attr\">items:</span></span><br><span class=\"line\">            <span class=\"attr\">enum:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">http</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">https</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">grpc</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">grpcs</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">tcp</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">tls</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">        <span class=\"attr\">run_on:</span></span><br><span class=\"line\">          <span class=\"attr\">enum:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">first</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">second</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">all</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">      <span class=\"attr\">required:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">plugin</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiextensions.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CustomResourceDefinition</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kongconsumers.configuration.konghq.com</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">additionalPrinterColumns:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.username</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Username</span> <span class=\"string\">of</span> <span class=\"string\">a</span> <span class=\"string\">Kong</span> <span class=\"string\">Consumer</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Username</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.metadata.creationTimestamp</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Age</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Age</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">date</span></span><br><span class=\"line\">  <span class=\"attr\">group:</span> <span class=\"string\">configuration.konghq.com</span></span><br><span class=\"line\">  <span class=\"attr\">names:</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">KongConsumer</span></span><br><span class=\"line\">    <span class=\"attr\">plural:</span> <span class=\"string\">kongconsumers</span></span><br><span class=\"line\">    <span class=\"attr\">shortNames:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">kc</span></span><br><span class=\"line\">  <span class=\"attr\">scope:</span> <span class=\"string\">Namespaced</span></span><br><span class=\"line\">  <span class=\"attr\">subresources:</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">validation:</span></span><br><span class=\"line\">    <span class=\"attr\">openAPIV3Schema:</span></span><br><span class=\"line\">      <span class=\"attr\">properties:</span></span><br><span class=\"line\">        <span class=\"attr\">credentials:</span></span><br><span class=\"line\">          <span class=\"attr\">items:</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">        <span class=\"attr\">custom_id:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiextensions.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CustomResourceDefinition</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kongingresses.configuration.konghq.com</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">group:</span> <span class=\"string\">configuration.konghq.com</span></span><br><span class=\"line\">  <span class=\"attr\">names:</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">KongIngress</span></span><br><span class=\"line\">    <span class=\"attr\">plural:</span> <span class=\"string\">kongingresses</span></span><br><span class=\"line\">    <span class=\"attr\">shortNames:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ki</span></span><br><span class=\"line\">  <span class=\"attr\">scope:</span> <span class=\"string\">Namespaced</span></span><br><span class=\"line\">  <span class=\"attr\">subresources:</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">validation:</span></span><br><span class=\"line\">    <span class=\"attr\">openAPIV3Schema:</span></span><br><span class=\"line\">      <span class=\"attr\">properties:</span></span><br><span class=\"line\">        <span class=\"attr\">proxy:</span></span><br><span class=\"line\">          <span class=\"attr\">properties:</span></span><br><span class=\"line\">            <span class=\"attr\">connect_timeout:</span></span><br><span class=\"line\">              <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span></span><br><span class=\"line\">              <span class=\"attr\">pattern:</span> <span class=\"string\">^/.*$</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">protocol:</span></span><br><span class=\"line\">              <span class=\"attr\">enum:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">http</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">https</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">grpc</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">grpcs</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">tcp</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">tls</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">read_timeout:</span></span><br><span class=\"line\">              <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">            <span class=\"attr\">retries:</span></span><br><span class=\"line\">              <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">            <span class=\"attr\">write_timeout:</span></span><br><span class=\"line\">              <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">        <span class=\"attr\">route:</span></span><br><span class=\"line\">          <span class=\"attr\">properties:</span></span><br><span class=\"line\">            <span class=\"attr\">headers:</span></span><br><span class=\"line\">              <span class=\"attr\">additionalProperties:</span></span><br><span class=\"line\">                <span class=\"attr\">items:</span></span><br><span class=\"line\">                  <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">            <span class=\"attr\">https_redirect_status_code:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">            <span class=\"attr\">methods:</span></span><br><span class=\"line\">              <span class=\"attr\">items:</span></span><br><span class=\"line\">                <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">            <span class=\"attr\">path_handling:</span></span><br><span class=\"line\">              <span class=\"attr\">enum:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">v0</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">v1</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">preserve_host:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">boolean</span></span><br><span class=\"line\">            <span class=\"attr\">protocols:</span></span><br><span class=\"line\">              <span class=\"attr\">items:</span></span><br><span class=\"line\">                <span class=\"attr\">enum:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">http</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">https</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">grpc</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">grpcs</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">tcp</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">tls</span></span><br><span class=\"line\">                <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">            <span class=\"attr\">regex_priority:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">            <span class=\"attr\">request_buffering:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">boolean</span></span><br><span class=\"line\">            <span class=\"attr\">response_buffering:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">boolean</span></span><br><span class=\"line\">            <span class=\"attr\">snis:</span></span><br><span class=\"line\">              <span class=\"attr\">items:</span></span><br><span class=\"line\">                <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">            <span class=\"attr\">strip_path:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">boolean</span></span><br><span class=\"line\">        <span class=\"attr\">upstream:</span></span><br><span class=\"line\">          <span class=\"attr\">properties:</span></span><br><span class=\"line\">            <span class=\"attr\">algorithm:</span></span><br><span class=\"line\">              <span class=\"attr\">enum:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">round-robin</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">consistent-hashing</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">least-connections</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">hash_fallback:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">hash_fallback_header:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">hash_on:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">hash_on_cookie:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">hash_on_cookie_path:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">hash_on_header:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">healthchecks:</span></span><br><span class=\"line\">              <span class=\"attr\">properties:</span></span><br><span class=\"line\">                <span class=\"attr\">active:</span></span><br><span class=\"line\">                  <span class=\"attr\">properties:</span></span><br><span class=\"line\">                    <span class=\"attr\">concurrency:</span></span><br><span class=\"line\">                      <span class=\"attr\">minimum:</span> <span class=\"number\">1</span></span><br><span class=\"line\">                      <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                    <span class=\"attr\">healthy:</span></span><br><span class=\"line\">                      <span class=\"attr\">properties:</span></span><br><span class=\"line\">                        <span class=\"attr\">http_statuses:</span></span><br><span class=\"line\">                          <span class=\"attr\">items:</span></span><br><span class=\"line\">                            <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">                        <span class=\"attr\">interval:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                        <span class=\"attr\">successes:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                      <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">                    <span class=\"attr\">http_path:</span></span><br><span class=\"line\">                      <span class=\"attr\">pattern:</span> <span class=\"string\">^/.*$</span></span><br><span class=\"line\">                      <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                    <span class=\"attr\">timeout:</span></span><br><span class=\"line\">                      <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                      <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                    <span class=\"attr\">unhealthy:</span></span><br><span class=\"line\">                      <span class=\"attr\">properties:</span></span><br><span class=\"line\">                        <span class=\"attr\">http_failures:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                        <span class=\"attr\">http_statuses:</span></span><br><span class=\"line\">                          <span class=\"attr\">items:</span></span><br><span class=\"line\">                            <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">                        <span class=\"attr\">interval:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                        <span class=\"attr\">tcp_failures:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                        <span class=\"attr\">timeout:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                      <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">                  <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">                <span class=\"attr\">passive:</span></span><br><span class=\"line\">                  <span class=\"attr\">properties:</span></span><br><span class=\"line\">                    <span class=\"attr\">healthy:</span></span><br><span class=\"line\">                      <span class=\"attr\">properties:</span></span><br><span class=\"line\">                        <span class=\"attr\">http_statuses:</span></span><br><span class=\"line\">                          <span class=\"attr\">items:</span></span><br><span class=\"line\">                            <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">                        <span class=\"attr\">interval:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                        <span class=\"attr\">successes:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                      <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">                    <span class=\"attr\">unhealthy:</span></span><br><span class=\"line\">                      <span class=\"attr\">properties:</span></span><br><span class=\"line\">                        <span class=\"attr\">http_failures:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                        <span class=\"attr\">http_statuses:</span></span><br><span class=\"line\">                          <span class=\"attr\">items:</span></span><br><span class=\"line\">                            <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">                        <span class=\"attr\">interval:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                        <span class=\"attr\">tcp_failures:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                        <span class=\"attr\">timeout:</span></span><br><span class=\"line\">                          <span class=\"attr\">minimum:</span> <span class=\"number\">0</span></span><br><span class=\"line\">                          <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                      <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">                  <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">                <span class=\"attr\">threshold:</span></span><br><span class=\"line\">                  <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">            <span class=\"attr\">host_header:</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">            <span class=\"attr\">slots:</span></span><br><span class=\"line\">              <span class=\"attr\">minimum:</span> <span class=\"number\">10</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiextensions.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CustomResourceDefinition</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kongplugins.configuration.konghq.com</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">additionalPrinterColumns:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.plugin</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Name</span> <span class=\"string\">of</span> <span class=\"string\">the</span> <span class=\"string\">plugin</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Plugin-Type</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.metadata.creationTimestamp</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Age</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Age</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">date</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.disabled</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Indicates</span> <span class=\"string\">if</span> <span class=\"string\">the</span> <span class=\"string\">plugin</span> <span class=\"string\">is</span> <span class=\"string\">disabled</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Disabled</span></span><br><span class=\"line\">    <span class=\"attr\">priority:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">boolean</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.config</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Configuration</span> <span class=\"string\">of</span> <span class=\"string\">the</span> <span class=\"string\">plugin</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Config</span></span><br><span class=\"line\">    <span class=\"attr\">priority:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">  <span class=\"attr\">group:</span> <span class=\"string\">configuration.konghq.com</span></span><br><span class=\"line\">  <span class=\"attr\">names:</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">KongPlugin</span></span><br><span class=\"line\">    <span class=\"attr\">plural:</span> <span class=\"string\">kongplugins</span></span><br><span class=\"line\">    <span class=\"attr\">shortNames:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">kp</span></span><br><span class=\"line\">  <span class=\"attr\">scope:</span> <span class=\"string\">Namespaced</span></span><br><span class=\"line\">  <span class=\"attr\">subresources:</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">validation:</span></span><br><span class=\"line\">    <span class=\"attr\">openAPIV3Schema:</span></span><br><span class=\"line\">      <span class=\"attr\">properties:</span></span><br><span class=\"line\">        <span class=\"attr\">config:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">        <span class=\"attr\">configFrom:</span></span><br><span class=\"line\">          <span class=\"attr\">properties:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">properties:</span></span><br><span class=\"line\">                <span class=\"attr\">key:</span></span><br><span class=\"line\">                  <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span></span><br><span class=\"line\">                  <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">              <span class=\"attr\">required:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">name</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">key</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">        <span class=\"attr\">disabled:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">boolean</span></span><br><span class=\"line\">        <span class=\"attr\">plugin:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">        <span class=\"attr\">protocols:</span></span><br><span class=\"line\">          <span class=\"attr\">items:</span></span><br><span class=\"line\">            <span class=\"attr\">enum:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">http</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">https</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">grpc</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">grpcs</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">tcp</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">tls</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">        <span class=\"attr\">run_on:</span></span><br><span class=\"line\">          <span class=\"attr\">enum:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">first</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">second</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">all</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">      <span class=\"attr\">required:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">plugin</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiextensions.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CustomResourceDefinition</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">tcpingresses.configuration.konghq.com</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">additionalPrinterColumns:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.status.loadBalancer.ingress[*].ip</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Address</span> <span class=\"string\">of</span> <span class=\"string\">the</span> <span class=\"string\">load</span> <span class=\"string\">balancer</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Address</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">JSONPath:</span> <span class=\"string\">.metadata.creationTimestamp</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">Age</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Age</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">date</span></span><br><span class=\"line\">  <span class=\"attr\">group:</span> <span class=\"string\">configuration.konghq.com</span></span><br><span class=\"line\">  <span class=\"attr\">names:</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">TCPIngress</span></span><br><span class=\"line\">    <span class=\"attr\">plural:</span> <span class=\"string\">tcpingresses</span></span><br><span class=\"line\">  <span class=\"attr\">scope:</span> <span class=\"string\">Namespaced</span></span><br><span class=\"line\">  <span class=\"attr\">subresources:</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">validation:</span></span><br><span class=\"line\">    <span class=\"attr\">openAPIV3Schema:</span></span><br><span class=\"line\">      <span class=\"attr\">properties:</span></span><br><span class=\"line\">        <span class=\"attr\">apiVersion:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">        <span class=\"attr\">kind:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">        <span class=\"attr\">metadata:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">          <span class=\"attr\">properties:</span></span><br><span class=\"line\">            <span class=\"attr\">rules:</span></span><br><span class=\"line\">              <span class=\"attr\">items:</span></span><br><span class=\"line\">                <span class=\"attr\">properties:</span></span><br><span class=\"line\">                  <span class=\"attr\">backend:</span></span><br><span class=\"line\">                    <span class=\"attr\">properties:</span></span><br><span class=\"line\">                      <span class=\"attr\">serviceName:</span></span><br><span class=\"line\">                        <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                      <span class=\"attr\">servicePort:</span></span><br><span class=\"line\">                        <span class=\"attr\">format:</span> <span class=\"string\">int32</span></span><br><span class=\"line\">                        <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                    <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">                  <span class=\"attr\">host:</span></span><br><span class=\"line\">                    <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                  <span class=\"attr\">port:</span></span><br><span class=\"line\">                    <span class=\"attr\">format:</span> <span class=\"string\">int32</span></span><br><span class=\"line\">                    <span class=\"attr\">type:</span> <span class=\"string\">integer</span></span><br><span class=\"line\">                <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">            <span class=\"attr\">tls:</span></span><br><span class=\"line\">              <span class=\"attr\">items:</span></span><br><span class=\"line\">                <span class=\"attr\">properties:</span></span><br><span class=\"line\">                  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">                    <span class=\"attr\">items:</span></span><br><span class=\"line\">                      <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                    <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">                  <span class=\"attr\">secretName:</span></span><br><span class=\"line\">                    <span class=\"attr\">type:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">              <span class=\"attr\">type:</span> <span class=\"string\">array</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">        <span class=\"attr\">status:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">object</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"string\">v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">status:</span></span><br><span class=\"line\">  <span class=\"attr\">acceptedNames:</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">plural:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">conditions:</span> []</span><br><span class=\"line\">  <span class=\"attr\">storedVersions:</span> []</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-serviceaccount</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-ingress-clusterrole</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">secrets</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">services</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">networking.k8s.io</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">extensions</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">networking.internal.knative.dev</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ingresses</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">events</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">create</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">patch</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">networking.k8s.io</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">extensions</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">networking.internal.knative.dev</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ingresses/status</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">configuration.konghq.com</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">tcpingresses/status</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">configuration.konghq.com</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">kongplugins</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">kongclusterplugins</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">kongcredentials</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">kongconsumers</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">kongingresses</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">tcpingresses</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">create</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-ingress-clusterrole-nisa-binding</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-ingress-clusterrole</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-serviceaccount</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">service.beta.kubernetes.io/aws-load-balancer-backend-protocol:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\">    <span class=\"attr\">service.beta.kubernetes.io/aws-load-balancer-type:</span> <span class=\"string\">nlb</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-proxy</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">proxy</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8000</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">proxy-ssl</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8443</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8443</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">proxy-http2</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8888</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8888</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">proxy-http2-ssl</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8844</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8844</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kong-admin</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8001</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8001</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kong-admin-ssl</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8444</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8444</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">ingress-kong</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">LoadBalancer</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-validation-webhook</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">webhook</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">ingress-kong</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">ingress-kong</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-kong</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">ingress-kong</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">        <span class=\"attr\">kuma.io/gateway:</span> <span class=\"string\">enabled</span></span><br><span class=\"line\">        <span class=\"attr\">prometheus.io/port:</span> <span class=\"string\">&quot;8100&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">prometheus.io/scrape:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">traffic.sidecar.istio.io/includeInboundPorts:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">ingress-kong</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/tmp</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">DirectoryOrCreate</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">konglogs</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">defaultMode:</span> <span class=\"number\">0444</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-config</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">LOGSTASH_HOST</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">k8slogs.fxeyeinterface.com</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">LOGSTASH_PORT</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;8888&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">logscollection</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/base:filebeat-7.4.1</span></span><br><span class=\"line\">        <span class=\"attr\">args:</span> [</span><br><span class=\"line\">          <span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;/etc/filebeat.yml&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;-e&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">1024Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">2000m</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ls</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">konglogs</span></span><br><span class=\"line\">            <span class=\"attr\">mountPath:</span> <span class=\"string\">/data/</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">            <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/filebeat.yml</span></span><br><span class=\"line\">            <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">subPath:</span> <span class=\"string\">filebeat.yml</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_DATABASE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_HOST</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">my-postgres.kong</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">Abc123@@</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_PORT</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;1921&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PROXY_LISTEN</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8000,</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8443</span> <span class=\"string\">ssl,</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8888</span> <span class=\"string\">http2,</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8844</span> <span class=\"string\">ssl</span> <span class=\"string\">http2</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PORT_MAPS</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"number\">80</span><span class=\"string\">:8000,</span> <span class=\"number\">443</span><span class=\"string\">:8443</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_ADMIN_LISTEN</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8001,0.0.0.0:8444</span> <span class=\"string\">ssl</span> <span class=\"comment\">#修改</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_STATUS_LISTEN</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8100</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_NGINX_WORKER_PROCESSES</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_ADMIN_ACCESS_LOG</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/dev/stdout</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_ADMIN_ERROR_LOG</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/dev/stderr</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PROXY_ERROR_LOG</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/dev/stderr</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PROXY_ACCESS_LOG</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/tmp/access.log</span> <span class=\"string\">custom_fmt</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_NGINX_HTTP_LOG_FORMAT</span></span><br><span class=\"line\"><span class=\"comment\">#          value: custom_fmt &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $http_host $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; $upstream_addr $upstream_status $upstream_cache_status &quot;$upstream_http_content_type&quot; $upstream_response_time &gt; $request_time&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">custom_fmt</span> <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $http_host $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$upstream_addr&quot; &quot;$upstream_status&quot; $upstream_cache_status &quot;$upstream_http_content_type&quot; &quot;$upstream_response_time&quot; &gt; $request_time&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/kong:kong-2.5</span></span><br><span class=\"line\">        <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">          <span class=\"attr\">postStart:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;&gt; /tmp/access.log&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">preStop:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;kong quit;&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/status</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">8100</span></span><br><span class=\"line\">            <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">proxy</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/tmp</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">konglogs</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8000</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">proxy</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8844</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">proxy-http2-ssl</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8443</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">proxy-ssl</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8100</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">metrics</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8444</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kong-admin-ssl</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8888</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kong-http2</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8844</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kong-http2-ssl</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8001</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kong-admin</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/status</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">8100</span></span><br><span class=\"line\">            <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CONTROLLER_KONG_ADMIN_URL</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">https://127.0.0.1:8444</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CONTROLLER_KONG_ADMIN_TLS_SKIP_VERIFY</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CONTROLLER_PUBLISH_SERVICE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">kong/kong-proxy</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">              <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAMESPACE</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">              <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.namespace</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/kong:kubernetes-ingress-controller-1.3</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/healthz</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">10254</span></span><br><span class=\"line\">            <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">ingress-controller</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">webhook</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/healthz</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">10254</span></span><br><span class=\"line\">            <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/bin/sh</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">while</span> <span class=\"literal\">true</span><span class=\"string\">;</span> <span class=\"string\">do</span> <span class=\"string\">kong</span> <span class=\"string\">migrations</span> <span class=\"string\">list;</span> <span class=\"string\">if</span> [[ <span class=\"number\">0</span> <span class=\"string\">-eq</span> <span class=\"string\">$?</span> ]]<span class=\"string\">;</span> <span class=\"string\">then</span> <span class=\"string\">exit</span> <span class=\"number\">0</span><span class=\"string\">;</span> <span class=\"string\">fi;</span></span><br><span class=\"line\">          <span class=\"string\">sleep</span> <span class=\"number\">2</span><span class=\"string\">;</span>  <span class=\"string\">done;</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_HOST</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">my-postgres.kong</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">Abc123@@</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_PORT</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;1921&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/kong:kong-2.5</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">wait-for-migrations</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">kong-serviceaccount</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-migrations</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">kong-migrations</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/bin/sh</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">kong</span> <span class=\"string\">migrations</span> <span class=\"string\">bootstrap</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">Abc123@@</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_HOST</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">my-postgres.kong</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_PORT</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;1921&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-shanghai.aliyuncs.com/wikifx/kong:kong-2.5</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">kong-migrations</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/bin/sh</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">until</span> <span class=\"string\">nc</span> <span class=\"string\">-zv</span> <span class=\"string\">$KONG_PG_HOST</span> <span class=\"string\">$KONG_PG_PORT</span> <span class=\"string\">-w1;</span> <span class=\"string\">do</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;waiting for db&#x27;</span><span class=\"string\">;</span></span><br><span class=\"line\">          <span class=\"string\">sleep</span> <span class=\"number\">1</span><span class=\"string\">;</span> <span class=\"string\">done</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_HOST</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">my-postgres.kong</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KONG_PG_PORT</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;1921&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">wait-for-postgres</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">OnFailure</span></span><br></pre></td></tr></table></figure>\n<p>上面的YAML需要注意修改PG的外部地址和端口，以及kong环境变量和PG配置一致</p>\n<h3 id=\"安装konga管理UI\"><a href=\"#安装konga管理UI\" class=\"headerlink\" title=\"安装konga管理UI\"></a>安装konga管理UI</h3><p>Kong 企业版提供了管理UI，开源版本是没有的。但是有很多的开源的管理 UI ，其中比较好用的是Konga。<br>项目地址：<a href=\"https://github.com/pantsel/konga\">https://github.com/pantsel/konga</a></p>\n<h4 id=\"Konga-特性\"><a href=\"#Konga-特性\" class=\"headerlink\" title=\"Konga 特性\"></a>Konga 特性</h4><p>Konga 主要是用 AngularJS 写的，运行于nodejs服务端。具有以下特性：</p>\n<ul>\n<li>管理所有Kong Admin API对象。</li>\n<li>支持从远程源（数据库，文件，API等）导入使用者。</li>\n<li>管理多个Kong节点。使用快照备份，还原和迁移Kong节点。</li>\n<li>使用运行状况检查监视节点和API状态。</li>\n<li>支持电子邮件和闲置通知。</li>\n<li>支持多用户。</li>\n<li>易于数据库集成（MySQL，postgresSQL，MongoDB，SQL Server）。</li>\n</ul>\n<h4 id=\"安装konga\"><a href=\"#安装konga\" class=\"headerlink\" title=\"安装konga\"></a>安装konga</h4><p>konga提供了自己的持久化机制来存储它的用户信息和配置信息，支持的数据库包括MySQL、MongoDB、PostgresSQL，可通过DB_ADAPTER等环境变量指定。 这里使用的是外部的MySQL数据库。下面分别在k8s上创建如下konga的deployment、service和ingress。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-konga</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kong-konga</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kong-konga</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">dbmigration</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">pantsel/konga</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">node</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/app/bin/konga.js</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">prepare</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--adapter</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--uri</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">mysql://wikifx:Wikifx123@rm-uf6458d05c7fhmo7w90110.mysql.rds.aliyuncs.com:3306/kongadb</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kong-konga</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">pantsel/konga:0.14.9</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"comment\">#        - name: DB_ADAPTER</span></span><br><span class=\"line\"><span class=\"comment\">#          value: postgres</span></span><br><span class=\"line\"><span class=\"comment\">#        - name: DB_HOST</span></span><br><span class=\"line\"><span class=\"comment\">#        #服务名.命名空间</span></span><br><span class=\"line\"><span class=\"comment\">#          value: my-postgres.kong</span></span><br><span class=\"line\"><span class=\"comment\">#        - name: DB_PORT</span></span><br><span class=\"line\"><span class=\"comment\">#          value: &quot;1921&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#        - name: DB_USER</span></span><br><span class=\"line\"><span class=\"comment\">#          value: kong</span></span><br><span class=\"line\"><span class=\"comment\">#        - name: DB_DATABASE</span></span><br><span class=\"line\"><span class=\"comment\">#          value: konga</span></span><br><span class=\"line\"><span class=\"comment\">#        - name: DB_PASSWORD</span></span><br><span class=\"line\"><span class=\"comment\">#          value: &quot;Abc123@@&quot;  #注意修改</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">DB_ADAPTER</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">DB_URI</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">mysql://wikifx:Wikifx123@rm-uf6458d05c7fhmo7w90110.mysql.rds.aliyuncs.com:3306/kongadb</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_ENV</span></span><br><span class=\"line\">          <span class=\"comment\">#value: production</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">development</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">1337</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-konga</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">1337</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">32222</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kong-konga</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-78.png\" alt=\"初始化数据\"></p>\n<p><img src=\"/images/pasted-79.png\" alt=\"kong\"><br>管理员用户创建完成后，就可以登录到konga中，之后出现创建konga到kong admin api连接的页面，在连接创建页面填入如下图所示内容:</p>\n<p><img src=\"/images/pasted-81.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-80.png\" alt=\"upload successful\"></p>\n<h3 id=\"Prometheus-监控-Kong\"><a href=\"#Prometheus-监控-Kong\" class=\"headerlink\" title=\"Prometheus 监控 Kong\"></a>Prometheus 监控 Kong</h3><p>参见: <a href=\"https://cakepanit.com/forward/dc57d8c5.html\">https://cakepanit.com/forward/dc57d8c5.html</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">monitoring.coreos.com/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceMonitor</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kong</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-ingress-scraping</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/metrics</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"string\">http-metrics</span></span><br><span class=\"line\">  <span class=\"attr\">jobLabel:</span> <span class=\"string\">app</span></span><br><span class=\"line\">  <span class=\"attr\">namespaceSelector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchNames:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">kong</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">k8s-app:</span> <span class=\"string\">kong-metrics</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">kong-metrics</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kong-metrics</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kong</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http-metrics</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8100</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8100</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">ingress-kong</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-85.png\" alt=\"Prometheus\"></p>\n","categories":["OPS"],"tags":["OPS","Kong","Kubernetes"]},{"title":"k8s企业级DevOps实践-k8s的持久化存储","url":"/forward/1051b489.html","content":"<h2 id=\"Volume\"><a href=\"#Volume\" class=\"headerlink\" title=\"Volume\"></a>Volume</h2><p>在K8s上，Pod的生命周期可能是很短，它们会被频繁地销毁和创建，自然在容器销毁时，里面运行时新增的数据，如修改的配置及日志文件等也会被清除。解决这一问题时可以用K8s volume来持久化保存容器的数据，Volume的生命周期独立于容器，Pod中的容器可能被销毁重建，但Volume会被保留。</p>\n<p>本质上，K8s volume是一个目录，这点和Docker volume差不多，当Volume被mount到Pod上，这个Pod中的所有容器都可以访问这个volume，在生产场景中，我们常用的类型有这几种：</p>\n<ul>\n<li>emptyDir</li>\n<li>hostPath</li>\n<li>PersistentVolume(PV) &amp; PersistentVolumeClaim(PVC)</li>\n<li>StorageClass</li>\n</ul>\n<h3 id=\"emptyDir\"><a href=\"#emptyDir\" class=\"headerlink\" title=\"emptyDir\"></a>emptyDir</h3><p>emptyDir是最基础的Volume类型，pod内的容器发生重启不会造成emptyDir里面数据的丢失，但是当pod被重启后，emptyDir数据会丢失，也就是说emptyDir与pod的生命周期是一致的，这个使用场景实际上是在生产环境某些时候，它的最实际实用是提供Pod内多容器的volume数据共享，下面用一个实际的生产者，消费者的栗子来演示下emptyDir的作用：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;50m&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">20Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;50m&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">20Mi</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span>        <span class=\"comment\"># 准备将pod的目录进行卷挂载</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">html-files</span>  <span class=\"comment\"># 自定个名称，容器内可以类似这样挂载多个卷</span></span><br><span class=\"line\">            <span class=\"attr\">mountPath:</span> <span class=\"string\">&quot;/usr/share/nginx/html&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span>       <span class=\"comment\"># 在pod内再跑一个容器，每秒把当时时间写到nginx默认页面上</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">        <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/bin/sh</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">           while :; do</span></span><br><span class=\"line\"><span class=\"string\">             if [ -f /html/index.html ];then</span></span><br><span class=\"line\"><span class=\"string\">               echo &quot;[$(date +%F\\ %T)] hello&quot; &gt;&gt; /html/index.html</span></span><br><span class=\"line\"><span class=\"string\">               sleep 1</span></span><br><span class=\"line\"><span class=\"string\">             else</span></span><br><span class=\"line\"><span class=\"string\">               touch /html/index.html</span></span><br><span class=\"line\"><span class=\"string\">             fi</span></span><br><span class=\"line\"><span class=\"string\">           done</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">html-files</span>       <span class=\"comment\"># 注意这里的名称和上面nginx容器保持一样，这样才能相互进行访问</span></span><br><span class=\"line\">            <span class=\"attr\">mountPath:</span> <span class=\"string\">&quot;/html&quot;</span>  <span class=\"comment\"># 将数据挂载到当前这个容器的这个目录下</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">html-files</span>   <span class=\"comment\"># 最后定义这个卷的名称也保持和上面一样</span></span><br><span class=\"line\">          <span class=\"attr\">emptyDir:</span>             <span class=\"comment\"># 这就是使用emptyDir卷类型了</span></span><br><span class=\"line\">            <span class=\"attr\">medium:</span> <span class=\"string\">Memory</span>   <span class=\"comment\"># 这里将文件写入内存中保存，这样速度会很快，配置为medium: &quot;&quot; 就是代表默认的使用本地磁盘空间来进行存储</span></span><br><span class=\"line\">            <span class=\"attr\">sizeLimit:</span> <span class=\"string\">10Mi</span>   <span class=\"comment\"># 因为内存比较珍贵，注意限制使用大小,超出10MPOD会被k8s驱逐掉</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">web</span> </span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//busybox运行时生产数据</span></span><br><span class=\"line\"><span class=\"string\">//nginx运行时消费数据</span></span><br><span class=\"line\">[<span class=\"string\">root@node1</span> <span class=\"string\">app</span>]<span class=\"comment\"># kubectl get pod -o wide</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>                   <span class=\"string\">READY</span>   <span class=\"string\">STATUS</span>    <span class=\"string\">RESTARTS</span>   <span class=\"string\">AGE</span>     <span class=\"string\">IP</span>              <span class=\"string\">NODE</span>    <span class=\"string\">NOMINATED</span> <span class=\"string\">NODE</span>   <span class=\"string\">READINESS</span> <span class=\"string\">GATES</span></span><br><span class=\"line\"><span class=\"string\">web-7d647b7fc8-s7blv</span>   <span class=\"number\">2</span><span class=\"string\">/2</span>     <span class=\"string\">Running</span>   <span class=\"number\">0</span>          <span class=\"string\">5h26m</span>   <span class=\"number\">10.100</span><span class=\"number\">.104</span><span class=\"number\">.11</span>   <span class=\"string\">node2</span>   <span class=\"string\">&lt;none&gt;</span>           <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">root@node1</span> <span class=\"string\">app</span>]<span class=\"comment\"># curl 10.96.10.109</span></span><br><span class=\"line\">[<span class=\"number\">2021-06-09 13:16:53</span>] <span class=\"string\">hello</span></span><br><span class=\"line\">[<span class=\"number\">2021-06-09 13:16:54</span>] <span class=\"string\">hello</span></span><br><span class=\"line\">[<span class=\"number\">2021-06-09 13:16:55</span>] <span class=\"string\">hello</span></span><br><span class=\"line\">[<span class=\"number\">2021-06-09 13:16:56</span>] <span class=\"string\">hello</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># web的pod的描述信息中取到docker运行时的id</span></span><br><span class=\"line\">[<span class=\"string\">root@node1</span> <span class=\"string\">~</span>]<span class=\"comment\"># kubectl describe  po web-7d647b7fc8-s7blv | grep &quot;Container ID:&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">Container ID:</span>   <span class=\"string\">containerd://cb51edc831de2197840c1cd647877c2def9fa504ae24a55597455cc311f884b7</span></span><br><span class=\"line\">    <span class=\"attr\">Container ID:</span>  <span class=\"string\">containerd://ae90836c6708eb44445238e73146f20c1be7244353ebc7062499ca992e666e36</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker inspect 上面的结果会发现两个容器挂载的同一个Volume。这就实现了pod之间临时的数据共享了</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"hostPath\"><a href=\"#hostPath\" class=\"headerlink\" title=\"hostPath\"></a>hostPath</h3><p>hostPath Volume 的作用是将容器运行的node上已经存在文件系统目录给mount到pod的容器。在生产中大部分应用是是不会直接使用hostPath的，因为我们并不关心Pod在哪台node上运行，而hostPath又恰好增加了pod与node的耦合，限制了pod的使用，这里只作一下了解，知道有这个东西存在即可，一般只是一些安装服务会用到，比如下面我截取了网络插件calico的部分volume配置:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/host/driver</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">flexvol-driver-host</span></span><br><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">DirectoryOrCreate</span> <span class=\"comment\">#目录不存在则创建</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">flexvol-driver-host</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PV-amp-PVC\"><a href=\"#PV-amp-PVC\" class=\"headerlink\" title=\"PV&amp;PVC\"></a>PV&amp;PVC</h3><p>Volume里面在生产中用的最多的PersistentVolume(持久卷，简称PV)和 PersistentVolumeClaim(持久卷消费，简称PVC)，在企业中，Volume是由存储系统的管理员来维护，他们来提供pv，pv具有持久性，生命周期独立于Pod；Pod则是由应用的开发人员来维护，如果要进行一卷挂载，那么就写一个pvc来消费pv就可以了，K8s会查找并提供满足条件的pv。</p>\n<p>有了pvc，我们在K8s进行卷挂载就只需要考虑要多少容量了，而不用关心真正的空间是用什么存储系统做的等一些底层细节信息，pv这些只有存储管理员才应用去关心它。</p>\n<p>K8s支持多种类型的pv，我们这里就以生产中常用的NFS来作演示（在阿里等云上的话就用NAS），生产中如果对存储要求不是太高的话，建议就用NFS，这样出问题也比较容易解决，如果有性能需求，也可以看看rook的ceph，以及Rancher的Longhorn。</p>\n<h4 id=\"部署NFS-SERVER\"><a href=\"#部署NFS-SERVER\" class=\"headerlink\" title=\"部署NFS-SERVER\"></a>部署NFS-SERVER</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我们这里在10.0.1.201上安装（在生产中，大家要提供作好NFS-SERVER环境的规划）</span></span><br><span class=\"line\"><span class=\"comment\"># yum -y install nfs-utils</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建NFS挂载目录</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir /nfs_dir</span></span><br><span class=\"line\"><span class=\"comment\"># chown nobody.nobody /nfs_dir</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改NFS-SERVER配置</span></span><br><span class=\"line\"><span class=\"comment\"># echo &#x27;/nfs_dir *(rw,sync,no_root_squash)&#x27; &gt; /etc/exports</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl restart rpcbind.service</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl restart nfs-utils.service </span></span><br><span class=\"line\"><span class=\"comment\"># systemctl restart nfs-server.service </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加NFS-SERVER开机自启动</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl enable nfs-server.service </span></span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/nfs-server.service to /usr/lib/systemd/system/nfs-server.service.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证NFS-SERVER是否能正常访问</span></span><br><span class=\"line\"><span class=\"comment\"># showmount -e 10.0.1.201</span></span><br><span class=\"line\">Export list <span class=\"keyword\">for</span> 10.0.1.201:</span><br><span class=\"line\">/nfs_dir *</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建基于NFS的PV\"><a href=\"#创建基于NFS的PV\" class=\"headerlink\" title=\"创建基于NFS的PV\"></a>创建基于NFS的PV</h4><p>首先在NFS-SERVER的挂载目录里面创建一个目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mkdir /nfs_dir/pv1</span></span><br></pre></td></tr></table></figure>\n<p>接着准备好pv的yaml配置，保存为pv1.yaml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat pv1.yaml </span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: pv1</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: test-claim    <span class=\"comment\"># 这里建议打上一个独有的标签，方便在多个pv的时候方便提供pvc选择挂载(pv唯一标识)</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 1Gi     <span class=\"comment\"># &lt;--  1</span></span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteOnce     <span class=\"comment\"># &lt;--  2</span></span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Recycle     <span class=\"comment\"># &lt;--  3</span></span><br><span class=\"line\">  storageClassName: nfs     <span class=\"comment\"># &lt;--  4</span></span><br><span class=\"line\">  nfs:</span><br><span class=\"line\">    path: /nfs_dir/pv1     <span class=\"comment\"># &lt;--  5</span></span><br><span class=\"line\">    server: 10.0.1.201</span><br></pre></td></tr></table></figure>\n<ol>\n<li>capacity 指定 PV 的容量为 1G。单位以1000进制时使用(E, P, T, G, M, K, m)，以1024进制时使用(Ei, Pi, Ti, Gi, Mi, Ki)</li>\n<li>accessModes 指定访问模式为 ReadWriteOnce，支持的访问模式有： </li>\n</ol>\n<ul>\n<li>ReadWriteOnce – PV 能以 read-write 模式 mount 到单个节点。 </li>\n<li>ReadOnlyMany – PV 能以 read-only 模式 mount 到多个节点。</li>\n<li>ReadWriteMany – PV 能以 read-write 模式 mount 到多个节点。</li>\n</ul>\n<ol start=\"3\">\n<li>persistentVolumeReclaimPolicy 指定当 PV 的回收策略为 Recycle，支持的策略有： </li>\n</ol>\n<ul>\n<li>Retain – 需要管理员手工回收。* </li>\n<li>Recycle – 清除 PV 中的数据，效果相当于执行 rm -rf /thevolume/*。 </li>\n<li>Delete – 删除 Storage Provider 上的对应存储资源，例如 AWS EBS、GCE PD、Azure Disk、OpenStack Cinder Volume 等。</li>\n</ul>\n<ol start=\"4\">\n<li>storageClassName 指定 PV 的 class 为 nfs。相当于为 PV 设置了一个分类，PVC 可以指定 class 申请相应 class 的 PV。</li>\n<li>指定 PV 在 NFS 服务器上对应的目录，这里注意，我测试的时候，需要手动先创建好这个目录并授权好，不然后面挂载会提示目录不存在 mkdir /nfsdata/pv1 &amp;&amp; chown -R nobody.nogroup /nfsdata 。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建这个pv</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f pv1.yaml </span></span><br><span class=\"line\">persistentvolume/pv1 created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># STATUS 为 Available，表示 pv1 就绪，可以被 PVC 申请</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pv</span></span><br><span class=\"line\">NAME   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class=\"line\">pv1    1Gi        RWO            Recycle          Available           nfs                     4m45s</span><br><span class=\"line\"><span class=\"comment\"># pv不受命名空间限制</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建基于NFS的PVC\"><a href=\"#创建基于NFS的PVC\" class=\"headerlink\" title=\"创建基于NFS的PVC\"></a>创建基于NFS的PVC</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat pvc1.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">test-claim</span></span><br><span class=\"line\"><span class=\"comment\"># pvc会被namespace限制</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl apply -f pvc1.yaml          </span></span><br><span class=\"line\">persistentvolumeclaim/pvc1 created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 看下pvc的STATUS为Bound代表成功挂载到pv了</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pvc           </span></span><br><span class=\"line\">NAME   STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">pvc1   Bound    pv1      1Gi        RWO            nfs            2s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这个时候再看下pv，STATUS也是Bound了，同时CLAIM提示被default/pvc1消费</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pv</span></span><br><span class=\"line\">NAME   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM          STORAGECLASS   REASON   AGE</span><br><span class=\"line\">pv1    1Gi        RWO            Recycle          Bound    default/pvc1   nfs  </span><br></pre></td></tr></table></figure>\n<p>准备pod服务来挂载这个pvc，这里就以上面最开始演示用的nginx的deployment的yaml配置来作修改</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat nginx.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span>    <span class=\"comment\"># 我们这里将nginx容器默认的页面目录挂载</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">html-files</span></span><br><span class=\"line\">            <span class=\"attr\">mountPath:</span> <span class=\"string\">&quot;/usr/share/nginx/html&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">html-files</span></span><br><span class=\"line\">          <span class=\"attr\">persistentVolumeClaim:</span>  <span class=\"comment\"># 卷类型使用pvc,同时下面名称处填先创建好的pvc1</span></span><br><span class=\"line\">            <span class=\"attr\">claimName:</span> <span class=\"string\">pvc1</span></span><br></pre></td></tr></table></figure>\n<p>更新配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f nginx.yaml </span></span><br><span class=\"line\">service/nginx unchanged</span><br><span class=\"line\">deployment.apps/nginx configured</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们看到新pod已经在创建了</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pod</span></span><br><span class=\"line\">NAME                     READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">nginx-569546db98-4nmmg   0/1     ContainerCreating   0          5s</span><br><span class=\"line\">nginx-f89759699-6vgr8    1/1     Running             1          23h</span><br><span class=\"line\">web-5bf769fdfc-44p7h     2/2     Running             0          113m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们这里直接用svc地址测试一下</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get svc</span></span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">kubernetes   ClusterIP   10.68.0.1       &lt;none&gt;        443/TCP   23h</span><br><span class=\"line\">nginx        ClusterIP   10.68.238.54    &lt;none&gt;        80/TCP    23h</span><br><span class=\"line\">web          ClusterIP   10.68.229.231   &lt;none&gt;        80/TCP    6h27m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 咦，这里为什么是显示403了呢，注意，卷挂载后会把当前已经存在这个目录的文件给覆盖掉，这个和传统机器上的磁盘目录挂载道理是一样的</span></span><br><span class=\"line\">[root@node-1 ~]<span class=\"comment\"># curl 10.68.238.54</span></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class=\"line\">&lt;hr&gt;&lt;center&gt;nginx/1.19.5&lt;/center&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们来自己创建一个index.html页面</span></span><br><span class=\"line\"><span class=\"comment\"># echo &#x27;hello, world!&#x27; &gt; /nfs_dir/pv1/index.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再请求下看看，已经正常了</span></span><br><span class=\"line\"><span class=\"comment\"># curl 10.68.238.54                             </span></span><br><span class=\"line\">hello, world!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们来手动删除这个nginx的pod，看下容器内的修改是否是持久的呢？</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl delete pod nginx-569546db98-4nmmg </span></span><br><span class=\"line\">pod <span class=\"string\">&quot;nginx-569546db98-4nmmg&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 等待一会，等新的pod被创建好</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pod</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-569546db98-99qpq   1/1     Running   0          45s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再测试一下，可以看到，容器内的修改现在已经被持久化了</span></span><br><span class=\"line\"><span class=\"comment\"># curl 10.68.238.54        </span></span><br><span class=\"line\">hello, world!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后面我们再想修改有两种方式，一个是exec进到pod内进行修改，还有一个是直接修改挂载在NFS目录下的文件</span></span><br><span class=\"line\"><span class=\"comment\"># echo 111 &gt; /nfs_dir/pv1/index.html</span></span><br><span class=\"line\"><span class=\"comment\"># curl 10.68.238.54  </span></span><br><span class=\"line\">111</span><br><span class=\"line\">下面讲下如何回收PVC以及PV</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里删除时会一直卡着，我们按ctrl+c看看怎么回事（k8s的保护机制）</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl delete pvc pvc1 </span></span><br><span class=\"line\">persistentvolumeclaim <span class=\"string\">&quot;pvc1&quot;</span> deleted</span><br><span class=\"line\">^C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 看下pvc发现STATUS是Terminating删除中的状态，我分析是因为服务pod还在占用这个pvc使用中</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pvc</span></span><br><span class=\"line\">NAME   STATUS        VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">pvc1   Terminating   pv1      1Gi        RWO            nfs            21m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先删除这个pod</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl delete pod nginx-569546db98-99qpq </span></span><br><span class=\"line\">pod <span class=\"string\">&quot;nginx-569546db98-99qpq&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再看先删除的pvc已经没有了</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pvc</span></span><br><span class=\"line\">No resources found <span class=\"keyword\">in</span> default namespace.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据先前创建pv时的数据回收策略为Recycle – 清除 PV 中的数据，这时果然先创建的index.html已经被删除了，在生产中要尤其注意这里的模式，注意及时备份数据，注意及时备份数据，注意及时备份数据</span></span><br><span class=\"line\"><span class=\"comment\"># ll /nfs_dir/pv1/</span></span><br><span class=\"line\">total 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 虽然此时pv是可以再次被pvc来消费的，但根据生产的经验，建议在删除pvc时，也同时把它消费的pv一并删除，然后再重启创建都是可以的</span></span><br></pre></td></tr></table></figure>\n\n<p>K8s对于存储解耦的设计是，pv交给存储管理员来管理，运维人员只管用pvc来消费就好，但这里我们实际还是得一起管理pv和pvc，在实际工作中，我们（存储管理员）可以提前配置好pv的动态供给StorageClass，来根据pvc的消费动态生成pv。</p>\n<h3 id=\"StorageClass\"><a href=\"#StorageClass\" class=\"headerlink\" title=\"StorageClass\"></a>StorageClass</h3><p>我这是直接拿生产中用的实例来作演示，利用nfs-client-provisioner来生成一个基于nfs的StorageClass，部署配置yaml配置如下，保持为nfs-sc.yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner-runner</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;persistentvolumes&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;delete&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;update&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;storage.k8s.io&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;storageclasses&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;events&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;patch&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;endpoints&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;patch&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">run-nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span> </span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner-runner</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-provisioner-01</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Recreate</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nfs-provisioner-01</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nfs-provisioner-01</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">jmgao1983/nfs-client-provisioner:latest</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-root</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/persistentvolumes</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">PROVISIONER_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">nfs-provisioner-01</span>  <span class=\"comment\"># 此处供应者名字供storageclass调用</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NFS_SERVER</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"number\">10.0</span><span class=\"number\">.1</span><span class=\"number\">.201</span>   <span class=\"comment\"># 填入NFS的地址</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NFS_PATH</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">/nfs_dir</span>   <span class=\"comment\"># 填入NFS挂载的目录</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-root</span></span><br><span class=\"line\">          <span class=\"attr\">nfs:</span></span><br><span class=\"line\">            <span class=\"attr\">server:</span> <span class=\"number\">10.0</span><span class=\"number\">.1</span><span class=\"number\">.201</span>   <span class=\"comment\"># 填入NFS的地址</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/nfs_dir</span>   <span class=\"comment\"># 填入NFS挂载的目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-boge</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">nfs-provisioner-01</span></span><br><span class=\"line\"><span class=\"comment\"># Supported policies: Delete、 Retain ， default is Delete</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br></pre></td></tr></table></figure>\n<p>创建这个StorageClass：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f nfs-sc.yaml </span></span><br><span class=\"line\">serviceaccount/nfs-client-provisioner created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner created</span><br><span class=\"line\">deployment.apps/nfs-provisioner-01 created</span><br><span class=\"line\">  orageclass.storage.k8s.io/nfs-boge created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意这个是在放kube-system的namespace下面，这里面放置一些偏系统类的服务</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n kube-system get pod -w</span></span><br><span class=\"line\">NAME                                       READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">calico-kube-controllers-7fdc86d8ff-dpdm5   1/1     Running             1          24h</span><br><span class=\"line\">calico-node-8jcp5                          1/1     Running             1          24h</span><br><span class=\"line\">calico-node-m92rn                          1/1     Running             1          24h</span><br><span class=\"line\">calico-node-xg5n4                          1/1     Running             1          24h</span><br><span class=\"line\">calico-node-xrfqq                          1/1     Running             1          24h</span><br><span class=\"line\">coredns-d9b6857b5-5zwgf                    1/1     Running             1          24h</span><br><span class=\"line\">metrics-server-869ffc99cd-wfj44            1/1     Running             2          24h</span><br><span class=\"line\">nfs-provisioner-01-5db96d9cc9-qxlgk        0/1     ContainerCreating   0          9s</span><br><span class=\"line\">nfs-provisioner-01-5db96d9cc9-qxlgk        1/1     Running             0          21s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># StorageClass已经创建好了</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get sc</span></span><br><span class=\"line\">NAME       PROVISIONER          RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class=\"line\">nfs-boge   nfs-provisioner-01   Retain          Immediate           <span class=\"literal\">false</span>                  37s</span><br></pre></td></tr></table></figure>\n<p>基于StorageClass创建一个pvc，动态生成的pv效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vim pvc-sc.yaml </span></span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: pvc-sc</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  storageClassName: nfs-boge</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 1Mi</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\"># kubectl  apply -f pvc-sc.yaml </span></span><br><span class=\"line\">persistentvolumeclaim/pvc-sc created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl  get pvc</span></span><br><span class=\"line\">NAME     STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">pvc-sc   Bound    pvc-63eee4c7-90fd-4c7e-abf9-d803c3204623   1Mi        RWX            nfs-boge       3s</span><br><span class=\"line\">pvc1     Bound    pv1                                        1Gi        RWO            nfs            24m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl  get pv</span></span><br><span class=\"line\">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM            STORAGECLASS   REASON   AGE</span><br><span class=\"line\">pv1                                        1Gi        RWO            Recycle          Bound    default/pvc1     nfs                     49m</span><br><span class=\"line\">pvc-63eee4c7-90fd-4c7e-abf9-d803c3204623   1Mi        RWX            Retain           Bound    default/pvc-sc   nfs-boge                7s</span><br></pre></td></tr></table></figure>\n<p>修改下nginx的yaml配置，将pvc的名称换成上面的pvc-sc：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim nginx.yaml </span></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: nginx</span><br><span class=\"line\">  name: nginx</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - image: nginx</span><br><span class=\"line\">        name: nginx</span><br><span class=\"line\">        volumeMounts:    <span class=\"comment\"># 我们这里将nginx容器默认的页面目录挂载</span></span><br><span class=\"line\">          - name: html-files</span><br><span class=\"line\">            mountPath: <span class=\"string\">&quot;/usr/share/nginx/html&quot;</span></span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: html-files</span><br><span class=\"line\">          persistentVolumeClaim:</span><br><span class=\"line\">            claimName: pvc-sc</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f nginx.yaml </span></span><br><span class=\"line\">service/nginx unchanged</span><br><span class=\"line\">deployment.apps/nginx configured</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里注意下，因为是动态生成的pv，所以它的目录基于是一串随机字符串生成的，这时我们直接进到pod内来创建访问页面</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl exec -it nginx-57cdc6d9b4-n497g -- bash</span></span><br><span class=\"line\">root@nginx-57cdc6d9b4-n497g:/<span class=\"comment\"># echo &#x27;storageClass used&#x27; &gt; /usr/share/nginx/html/index.html</span></span><br><span class=\"line\">root@nginx-57cdc6d9b4-n497g:/<span class=\"comment\"># exit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># curl 10.68.238.54                              </span></span><br><span class=\"line\">storageClass used</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们看下NFS挂载的目录</span></span><br><span class=\"line\"><span class=\"comment\"># ll /nfs_dir/</span></span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxrwxrwx 2 root root 24 Nov 27 17:52 default-pvc-sc-pvc-63eee4c7-90fd-4c7e-abf9-d803c3204623</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 Nov 27 17:25 pv1</span><br></pre></td></tr></table></figure>","categories":["OPS"],"tags":["OPS","Kubernetes","数据持久化"]},{"title":"k8s企业级DevOps实践-workload(工作负载)、副本保障机制、Pod驱逐策略、服务的滚动更新和回滚","url":"/forward/dc57d8c4.html","content":"<p>只使用Pod, 将会面临如下需求:</p>\n<ol>\n<li>业务应用如何启动多个副本</li>\n<li>Pod重建后IP会变化，外部如何访问Pod服务</li>\n<li>运行业务Pod的某个节点挂了，如何自动帮我把Pod转移到集群中的可用节点启动起来</li>\n<li>我的业务应用功能是收集节点监控数据,需要把Pod运行在k8s集群的各个节点上</li>\n</ol>\n<h2 id=\"Workload-工作负载\"><a href=\"#Workload-工作负载\" class=\"headerlink\" title=\"Workload (工作负载)\"></a>Workload (工作负载)</h2><p>控制器又称工作负载是用于实现管理pod的中间层，确保pod资源符合预期的状态，pod的资源出现故障时，会尝试 进行重启，当根据重启策略无效，则会重新新建pod的资源。 </p>\n<p><img src=\"/images/pasted-47.png\" alt=\"Workload\"></p>\n<ul>\n<li>ReplicaSet: 代用户创建指定数量的pod副本数量，确保pod副本数量符合预期状态，并且支持滚动式自动扩容和缩容功能</li>\n<li>Deployment：工作在ReplicaSet之上，用于管理无状态应用，目前来说最好的控制器。支持滚动更新和回滚功能，还提供声明式配置</li>\n<li>DaemonSet：用于确保集群中的每一个节点只运行特定的pod副本，通常用于实现系统级后台任务。比如ELK服务</li>\n<li>Job：只要完成就立即退出，不需要重启或重建</li>\n<li>Cronjob：周期性任务控制，不需要持续后台运行</li>\n<li>StatefulSet：管理有状态应用</li>\n</ul>\n<h3 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h3><p><code>myblog/deployment/deploy-mysql.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span> <span class=\"comment\">#定义资源的元数据信息</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span> <span class=\"comment\">#定义资源的名称，在同一个namespace空间中必须是唯一的</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span> <span class=\"comment\">#定义所属ns</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span>   <span class=\"comment\">#指定Pod副本数</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>     <span class=\"comment\">#指定Pod的选择器</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span>   <span class=\"comment\">#给Pod打label</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 声明pod的网络模式为host模式，效果通docker run --net=host</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span> <span class=\"comment\">#容器持久化目录</span></span><br><span class=\"line\">        <span class=\"attr\">hostPath:</span> </span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/opt/mysql/data</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span>   <span class=\"comment\"># 使用节点选择器将Pod调度到指定label的节点</span></span><br><span class=\"line\">        <span class=\"attr\">component:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/mysql:5.7-utf8</span></span><br><span class=\"line\">        <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;--character-set-server=utf8&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;--collation-server=utf8_general_ci&quot;</span>    <span class=\"comment\">#  指定字符编码</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span> <span class=\"comment\">#暴露端口</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span> <span class=\"comment\">#获取ns内secret中定义的值</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_USER</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_USER</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_DATABASE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;myblog&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> <span class=\"comment\">#容器资源限制相关</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span> <span class=\"comment\">#容器健康检查相关</span></span><br><span class=\"line\">          <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span> <span class=\"comment\">#容器内挂载点</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br></pre></td></tr></table></figure>\n\n<p><code>deploy-myblog.yaml</code>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span>   <span class=\"comment\">#指定Pod副本数</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>             <span class=\"comment\">#指定Pod的选择器</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span>   <span class=\"comment\">#给Pod打label</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/myblog:v2</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_HOST</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_HOST</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PORT</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_PORT</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_USER</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_USER</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/blog/index/</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">            <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span>  <span class=\"comment\"># 容器启动后第一次执行探测是需要等待多少秒</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span>     <span class=\"comment\"># 执行探测的频率</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span>             <span class=\"comment\"># 探测超时时间</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span> </span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span> </span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/blog/index/</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">            <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span> </span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>创建测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get po -o wide</span></span><br><span class=\"line\">NAME     READY   STATUS    RESTARTS   AGE    IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">myblog   1/1     Running   3          10d    10.244.2.40     k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">mysql    1/1     Running   2          3d2h   192.168.56.20   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除旧的mysql pod</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo delete po mysql</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;mysql&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建新的mysql pod</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get po -o wide</span></span><br><span class=\"line\">NAME     READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">myblog   1/1     Running   3          10d   10.244.2.40   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># vi deploy-mysql.yaml </span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl create -f deploy-mysql.yaml</span></span><br><span class=\"line\">deployment.apps/mysql created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检查状态</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get po -o wide</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE   IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">myblog                   1/1     Running   3          10d   10.244.2.40     k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">mysql-5fcb655cc9-q48f9   1/1     Running   0          11s   192.168.56.20   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建myblog pod</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl apply -f deploy-myblog.yaml </span></span><br><span class=\"line\">deployment.apps/myblog created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检查状态</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get po -o wide</span></span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE    IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">myblog                    1/1     Running   4          10d    10.244.2.40     k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">myblog-749b5dbc4b-fvsk9   1/1     Running   0          15s    10.244.2.43     k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running   0          9m7s   192.168.56.20   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除旧的 myblog pod</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo delete po myblog</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;myblog&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看Deployment\"><a href=\"#查看Deployment\" class=\"headerlink\" title=\"查看Deployment\"></a>查看Deployment</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl api-resources</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get deploy</span></span><br><span class=\"line\">NAME     READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">myblog   1/1     1            1           11m</span><br><span class=\"line\">mysql    1/1     1            1           20m</span><br><span class=\"line\"></span><br><span class=\"line\">  * `NAME` 列出了集群中 Deployments 的名称。</span><br><span class=\"line\">  * `READY`显示当前正在运行的副本数/期望的副本数。</span><br><span class=\"line\">  * `UP-TO-DATE`显示已更新以实现期望状态的副本数。</span><br><span class=\"line\">  * `AVAILABLE`显示应用程序可供用户使用的副本数。</span><br><span class=\"line\">  * `AGE` 显示应用程序运行的时间量。</span><br><span class=\"line\">  </span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get po</span></span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">myblog-749b5dbc4b-fvsk9   1/1     Running   0          14m</span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running   0          22m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检查副本集状态</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get rs</span></span><br><span class=\"line\">NAME                DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">myblog-749b5dbc4b   1         1         1       16m</span><br><span class=\"line\">mysql-5fcb655cc9    1         1         1       25m</span><br><span class=\"line\"></span><br><span class=\"line\">DESIRED 期望的副本集</span><br><span class=\"line\">CURRENT 当前的副本集</span><br><span class=\"line\">READY 准备好的副本集</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"副本保障机制\"><a href=\"#副本保障机制\" class=\"headerlink\" title=\"副本保障机制\"></a>副本保障机制</h3><p>controller实时检测pod状态，并保障副本数一直处于期望的值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl -n demo get po -o wide</span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE   IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">myblog-749b5dbc4b-fvsk9   1/1     Running   0          24m   10.244.2.43     k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running   0          33m   192.168.56.20   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 删除pod，观察pod状态变化</span></span><br><span class=\"line\">$ kubectl -n demo delete pod myblog-749b5dbc4b-fvsk9</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 观察pod</span></span><br><span class=\"line\">$ kubectl get pods -o wide</span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE   IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">myblog-749b5dbc4b-5xmsf   1/1     Running   0          85s   10.244.2.44     k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running   0          35m   192.168.56.20   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置两个副本, 或者通过kubectl -n demo edit deploy myblog的方式，最好通过修改文件，然后apply的方式，这样yaml文件可以保持同步</span></span><br><span class=\"line\">$ kubectl -n demo scale deploy myblog --replicas=2</span><br><span class=\"line\">deployment.extensions/myblog scaled</span><br><span class=\"line\"></span><br><span class=\"line\">$ vi deploy-myblog.yaml</span><br><span class=\"line\">...</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 2   <span class=\"comment\">#指定Pod副本数</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl apply -f deploy-myblog.yaml </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 观察pod</span></span><br><span class=\"line\">$ kubectl get pods -o wide</span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get po -o wide</span></span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE  </span><br><span class=\"line\">myblog-749b5dbc4b-5xmsf   1/1     Running   0          4m52s </span><br><span class=\"line\">myblog-749b5dbc4b-jhmc5   1/1     Running   0          27s </span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running   0          38m  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pod驱逐策略\"><a href=\"#Pod驱逐策略\" class=\"headerlink\" title=\"Pod驱逐策略\"></a>Pod驱逐策略</h3><p> K8S 有个特色功能叫 pod eviction，它在某些场景下如节点 NotReady，或者资源不足时，把 pod 驱逐至其它节点，这也是出于业务保护的角度去考虑的。</p>\n<ol>\n<li><p>Kube-controller-manager: 周期性检查所有节点状态，当节点处于 NotReady 状态超过一段时间后，驱逐该节点上所有 pod。停掉kubelet</p>\n<ul>\n<li><code>pod-eviction-timeout</code>：NotReady 状态节点超过该时间后，执行驱逐，默认 5 min</li>\n</ul>\n</li>\n<li><p>Kubelet: 周期性检查本节点资源，当资源不足时，按照优先级驱逐部分 pod</p>\n<ul>\n<li><code>memory.available</code>：节点可用内存</li>\n<li><code>nodefs.available</code>：节点根盘可用存储空间 默认80%</li>\n<li><code>nodefs.inodesFree</code>：节点inodes可用数量</li>\n<li><code>imagefs.available</code>：镜像存储盘的可用空间</li>\n<li><code>imagefs.inodesFree</code>：镜像存储盘的inodes可用数量</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"服务滚动更新\"><a href=\"#服务滚动更新\" class=\"headerlink\" title=\"服务滚动更新\"></a>服务滚动更新</h3><p>修改dockerfile，重新打tag模拟服务更新。</p>\n<p>更新方式：</p>\n<ul>\n<li>修改yaml文件，使用<code>kubectl -n demo apply -f deploy-myblog.yaml</code>来应用更新</li>\n<li><code>kubectl -n demo edit deploy myblog</code>在线更新</li>\n<li><code>kubectl set image deploy myblog myblog=192.168.56.10:5000/myblog:v3 --record</code> </li>\n</ul>\n<p>修改文件测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi mybolg/blog/template/index.html</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker build . -t 192.168.56.10:5000/myblog:v3 -f Dockerfile_optimized</span><br><span class=\"line\">$ docker push 192.168.56.10:5000/myblog:v3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"滚动更新策略\"><a href=\"#滚动更新策略\" class=\"headerlink\" title=\"滚动更新策略\"></a>滚动更新策略</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span>\t<span class=\"comment\">#指定Pod副本数</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>\t\t<span class=\"comment\">#指定Pod的选择器</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">25</span><span class=\"string\">%</span> <span class=\"comment\">#滚动更新时最大激增的比例，不满足就向上取整。也可以为固定的数值如 1、2、3</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">25</span><span class=\"string\">%</span> <span class=\"comment\">#滚动更新时最大不可用的比例，不满足就向下取整。这里计算后应该为0</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span>\t\t<span class=\"comment\">#指定更新方式为滚动更新，默认策略，通过get deploy yaml查看</span></span><br><span class=\"line\">    <span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-48.png\" alt=\"uppod\"></p>\n<p>策略控制：</p>\n<ul>\n<li>maxSurge：最大激增数, 指更新过程中, 最多可以比replicas预先设定值多出的pod数量, 可以为固定值或百分比,默认为desired Pods数的25%。计算时向上取整(比如3.4，取4)，更新过程中最多会有replicas + maxSurge个pod</li>\n<li>maxUnavailable： 指更新过程中, 最多有几个pod处于无法服务状态 , 可以为固定值或百分比，默认为desired Pods数的25%。计算时向下取整(比如3.6，取3)</li>\n</ul>\n<p><em>在Deployment rollout时，需要保证Available(Ready) Pods数不低于 desired pods number - maxUnavailable; 保证所有的非异常状态Pods数不多于 desired pods number + maxSurge</em>。</p>\n<p>以myblog为例，使用默认的策略，更新过程:</p>\n<ol>\n<li>maxSurge 25%，2个实例，向上取整，则maxSurge为1，意味着最多可以有2+1=3个Pod，那么此时会新创建1个ReplicaSet，RS-new，把副本数置为1，此时呢，副本控制器就去创建这个新的Pod</li>\n<li>同时，maxUnavailable是25%，副本数2*25%，向下取整，则为0，意味着，滚动更新的过程中，不能有少于2个可用的Pod，因此，旧的Replica（RS-old）会先保持不动，等RS-new管理的Pod状态Ready后，此时已经有3个Ready状态的Pod了，那么由于只要保证有2个可用的Pod即可，因此，RS-old的副本数会有2个变成1个，此时，会删掉一个旧的Pod</li>\n<li>删掉旧的Pod的时候，由于总的Pod数量又变成2个了，因此，距离最大的3个还有1个Pod可以创建，所以，RS-new把管理的副本数由1改成2，此时又会创建1个新的Pod，等RS-new管理了2个Pod都ready后，那么就可以把RS-old的副本数由1置为0了，这样就完成了滚动更新</li>\n</ol>\n<p>检查滚动更新事件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl -n demo describe deploy myblog</span><br><span class=\"line\">  Normal  ScalingReplicaSet  37m   deployment-controller  Scaled up replica <span class=\"built_in\">set</span> myblog-749b5dbc4b to 2</span><br><span class=\"line\">  Normal  ScalingReplicaSet  20m   deployment-controller  Scaled up replica <span class=\"built_in\">set</span> myblog-785dbb55cc to 1 <span class=\"comment\">#启动一个新pod</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  19m   deployment-controller  Scaled down replica <span class=\"built_in\">set</span> myblog-749b5dbc4b to 1 <span class=\"comment\">#关闭一个旧pod</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  19m   deployment-controller  Scaled up replica <span class=\"built_in\">set</span> myblog-785dbb55cc to 2 <span class=\"comment\">#再起一个新pod</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  19m   deployment-controller  Scaled down replica <span class=\"built_in\">set</span> myblog-749b5dbc4b to 0 <span class=\"comment\">#再关一个旧pod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正在更新中</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get po -o wide</span></span><br><span class=\"line\">NAME                      READY   STATUS        RESTARTS   AGE  </span><br><span class=\"line\">myblog-749b5dbc4b-5xmsf   1/1     Terminating   0          22m   </span><br><span class=\"line\">myblog-749b5dbc4b-jhmc5   1/1     Terminating   0          17m  </span><br><span class=\"line\">myblog-785dbb55cc-ljjf7   1/1     Running       0          46s </span><br><span class=\"line\">myblog-785dbb55cc-r7hpf   1/1     Running       0          21s  </span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running       0          56m  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新完毕</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get po -o wide</span></span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE  </span><br><span class=\"line\">myblog-785dbb55cc-ljjf7   1/1     Running   0          24m </span><br><span class=\"line\">myblog-785dbb55cc-r7hpf   1/1     Running   0          23m  </span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running   0          79m  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务回滚\"><a href=\"#服务回滚\" class=\"headerlink\" title=\"服务回滚\"></a>服务回滚</h3><p>通过滚动升级的策略可以平滑的升级Deployment，若升级出现问题，需要最快且最好的方式回退到上一次能够提供正常工作的版本。为此K8S提供了回滚机制。</p>\n<p><strong>revision</strong>：更新应用时，K8S都会记录当前的版本号，即为revision，当升级出现问题时，可通过回滚到某个特定的revision，默认配置下，K8S只会保留最近的几个revision，可以通过Deployment配置文件中的spec.revisionHistoryLimit属性增加revision数量，默认是10。</p>\n<p>查看当前：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">kubectl</span> <span class=\"string\">-n</span> <span class=\"string\">demo</span> <span class=\"string\">rollout</span> <span class=\"string\">history</span> <span class=\"string\">deploy</span> <span class=\"string\">myblog</span> <span class=\"comment\">##CHANGE-CAUSE为空</span></span><br><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">kubectl</span> <span class=\"string\">delete</span> <span class=\"string\">-f</span> <span class=\"string\">deploy-myblog.yaml</span>    <span class=\"comment\">## 方便演示到具体效果，删掉已有deployment</span></span><br></pre></td></tr></table></figure>\n\n<p>记录回滚：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f deploy-myblog.yaml --record</span><br><span class=\"line\"><span class=\"comment\">#此时创建的deploy pod版本为v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl -n demo <span class=\"built_in\">set</span> image deploy myblog myblog=192.168.56.10:5000/myblog:v3 --record=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>查看deployment更新历史：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl -n demo rollout <span class=\"built_in\">history</span> deploy myblog</span><br><span class=\"line\">deployment.apps/myblog </span><br><span class=\"line\">REVISION  CHANGE-CAUSE</span><br><span class=\"line\">1         kubectl create --filename=deploy-myblog.yaml --record=<span class=\"literal\">true</span></span><br><span class=\"line\">2         kubectl <span class=\"built_in\">set</span> image deploy myblog myblog=192.168.56.10:5000/myblog:v3 --namespace=demo --record=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">REVISION即为版本信息。</span><br></pre></td></tr></table></figure>\n\n<p>回滚到具体的REVISION:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前REVISION为2回滚到1</span></span><br><span class=\"line\">$ kubectl -n demo rollout undo deploy myblog --to-revision=1</span><br><span class=\"line\">deployment.extensions/myblog rolled back</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问应用测试</span></span><br></pre></td></tr></table></figure>\n\n","categories":["OPS"],"tags":["OPS","Kubernetes","Workload"]},{"title":"k8s企业级DevOps实践-容器集群网络","url":"/forward/8269a7fd.html","content":"<blockquote>\n<p>本文会再谈Docker网络、Pod网络、CNI模式、CNI选型。</p>\n</blockquote>\n<h1 id=\"Docker网络\"><a href=\"#Docker网络\" class=\"headerlink\" title=\"Docker网络\"></a>Docker网络</h1><h2 id=\"一览表：\"><a href=\"#一览表：\" class=\"headerlink\" title=\"一览表：\"></a>一览表：</h2><table>\n<thead>\n<tr>\n<th align=\"center\">容器网络模式</th>\n<th align=\"left\">简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">bridge</td>\n<td align=\"left\">容器具有独立的network namespace，会将容器连接到docker0虚拟网桥，并配置IP地址，docker的默认网络模式。</td>\n</tr>\n<tr>\n<td align=\"center\">host</td>\n<td align=\"left\">容器没有独立的network namespace，和宿主机共用网络。</td>\n</tr>\n<tr>\n<td align=\"center\">none</td>\n<td align=\"left\">容器具有独立的network namespace，与宿主机网络隔离，但并没有对其进行任何网络设置。</td>\n</tr>\n<tr>\n<td align=\"center\">container</td>\n<td align=\"left\">容器和某一个已存在的容器共享network namespace。</td>\n</tr>\n</tbody></table>\n<h2 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"bridge\"></a>bridge</h2><p><img src=\"/images/pasted-292.png\" alt=\"bridge\"><br>bridge模式是 docker 的默认网络模式，不写<code>–net</code>参数，就是bridge模式。使用<code>docker run -p</code>时，docker 实际是在iptables做了DNAT规则，实现端口转发功能。可以使用<code>iptables -t nat -vnL</code>查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个新的 Docker 网络。-d参数指定 Docker 网络类型</span></span><br><span class=\"line\">$ docker network create -d bridge my-net</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 运行一个容器并连接到新建的 my-net 网络</span></span><br><span class=\"line\">$ docker run -it --<span class=\"built_in\">rm</span> --name busybox1 --network my-net busybox sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"host\"><a href=\"#host\" class=\"headerlink\" title=\"host\"></a>host</h2><p><img src=\"/images/pasted-293.png\" alt=\"host\"><br>在这种模式下，容器不会获得独立的<code>Network Namespace</code>，与宿主机操作系统共用一个<code>Network Namespace</code>。即：容器不会虚拟自己的网卡，不会配置自己的IP。宿主机的IP就是容器的IP，容器的端口就是宿主机的端口，所以同一个宿主机下的多个容器不能暴露同一个端口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run -tid --net=host --name docker_host1 ubuntu-base:v3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a>none</h2><p><img src=\"/images/pasted-294.png\" alt=\"none\"><br>这种模式一般又被称为“隔离模式”，常被用于在容器内完成CPU密集型任务，计算完成后将结果保留到磁盘上。在此过程中，不与外界进行网络连接，从网络层面（断开）保证计算执行过程的安全性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run -i -t --<span class=\"built_in\">rm</span> --net=none base /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"container\"><a href=\"#container\" class=\"headerlink\" title=\"container\"></a>container</h2><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用下面的命令创建出来的容器都是bridge模式，二者的ip以及网络配置都是一样的(默认bridge模式)</span></span><br><span class=\"line\">$ docker run -it  --name test3 centos /bin/bash;</span><br><span class=\"line\">$ docker run -it  --net=<span class=\"string\">&quot;container:test3&quot;</span> --name test4 centos /bin/bash;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 使用下面的命令创建出来的容器都是host模式，二者的ip以及网络配置都是一样的(host模式)，并且和宿主机一样</span></span><br><span class=\"line\">$ docker run -it --net=host --name test5 centos /bin/bash;</span><br><span class=\"line\">$ docker run -it --net=<span class=\"string\">&quot;container:test5&quot;</span> --name test6 centos /bin/bash;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><p>docker的网络模式分为4种，最常用的为<code>bridge</code>和<code>host</code>模式。<code>bridge</code>模式通过<code>docker0</code>网桥，启动容器的时候通过创建一对虚拟网卡，将容器连接在桥上，同时维护了虚拟网卡与网桥端口的关系，实现容器间的通信。容器与宿主机之间的通信通过<code>iptables</code>端口映射的方式，docker利用<code>iptables</code>的<code>PREROUTING</code>和<code>POSTROUTING</code>的nat功能，实现了SNAT与DNAT，使得容器内部的服务被完美的保护起来。</p>\n<h1 id=\"Pod网络和CNI插件\"><a href=\"#Pod网络和CNI插件\" class=\"headerlink\" title=\"Pod网络和CNI插件\"></a>Pod网络和CNI插件</h1><p>Pod相当于是k8s平台中的虚拟机，它是K8s的最小调度单元。Pod网络就是能够保证K8s集群中的所有Pods(包括同一节点上的，也包括不同节点上的Pods)，逻辑上看起来都在同一个平面网络内，能够相互做IP寻址和通信的网络，下图是Pod网络的简化概念模型：<br><img src=\"/images/pasted-295.png\" alt=\"Pod网络\"></p>\n<h2 id=\"同一节点上的Pod网络\"><a href=\"#同一节点上的Pod网络\" class=\"headerlink\" title=\"同一节点上的Pod网络\"></a>同一节点上的Pod网络</h2><p>前面提到，Pod相当于是K8s中的“虚拟机”，实际一个Pod中可以住一个或者多个(大多数场景住一个)应用容器，这些容器共享Pod的网络栈和其它资源如Volume。那么什么是共享网络栈？同一节点上的Pod之间如何寻址和互通？下图样例来解释：<br><img src=\"/images/pasted-296.png\" alt=\"同一节点上的Pod网络\"></p>\n<h3 id=\"网络层面：\"><a href=\"#网络层面：\" class=\"headerlink\" title=\"网络层面：\"></a>网络层面：</h3><p>上图节点上展示了Pod网络所依赖的3个网络设备：</p>\n<ul>\n<li><code>eth0</code>是节点主机上的网卡，这个是支持该节点流量出入的设备，也是支持集群节点间IP寻址和互通的设备。</li>\n<li><code>docker0</code>是一个虚拟网桥，可以简单理解为一个虚拟交换机，它是支持该节点上的Pod之间进行IP寻址和互通的设备。</li>\n<li><code>veth0</code>则是Pod1的虚拟网卡，是支持该Pod内容器互通和对外访问的虚拟设备。<code>docker0</code>网桥和<code>veth0</code>网卡，都是linux支持和创建的虚拟网络设备。</li>\n</ul>\n<h3 id=\"容器层面：\"><a href=\"#容器层面：\" class=\"headerlink\" title=\"容器层面：\"></a>容器层面：</h3><ul>\n<li>上图Pod1内部住了3个容器，它们都共享一个虚拟网卡<code>veth0</code>。<ul>\n<li>内部的这些容器可以通过<code>localhost</code>相互访问</li>\n<li>且它们三个不能在同一端口上同时开启服务，否则就会有端口冲突，这就是共享网络栈的意思。</li>\n</ul>\n</li>\n<li>Pod1中还有一个比较特殊的叫<code>pause</code>的容器，这个容器运行的唯一目的是为Pod建立共享的<code>veth0</code>网络接口。如果你SSH到K8s集群中一个有Pod运行的节点上去，然后运行<code>docker ps</code>，可以看到通过<code>pause</code>命令运行的容器。</li>\n</ul>\n<p><img src=\"/images/pasted-297.png\" alt=\"pause\"></p>\n<p>Pod的IP是由<code>docker0</code>网桥分配的，例如上图<code>docker0</code>网桥的IP是<code>172.17.0.1</code>，它给第一个Pod1分配IP为<code>172.17.0.2</code>。如果该节点上再启一个Pod2，那么相应的分配IP为<code>172.17.0.3</code>，如果再启动Pod可依次类推。因为这些Pods都连在同一个网桥上，在同一个网段内，它们可以进行IP寻址和互通，如下图所示：<br><img src=\"/images/pasted-298.png\" alt=\"同一节点上的Pod网络\"></p>\n<blockquote>\n<p>节点内Pod网络在<code>172.17.0.0/24</code>这个地址空间内，而节点主机在<code>10.100.0.0/24</code>这个地址空间内，也就是说Pod网络和节点网络不在同一个网络内，不同节点间的Pod该如何IP寻址和互通呢？</p>\n</blockquote>\n<h2 id=\"不同节点间的Pod网络\"><a href=\"#不同节点间的Pod网络\" class=\"headerlink\" title=\"不同节点间的Pod网络\"></a>不同节点间的Pod网络</h2><p>假设我们有两个节点主机：<br>host1(<code>10.100.0.2</code>)和host2(<code>10.100.0.3</code>)，它们在<code>10.100.0.0/24</code>这个地址空间内。<br>host1上有一个PodX(<code>172.17.0.2</code>)，host2上有一个PodY(<code>172.17.1.3</code>)，Pod网络在<code>172.17.0.0/16</code>这个地址空间内。<br>注意，Pod网络的地址，是由K8s统一管理和分配的，保证集群内Pod的IP地址唯一。我们发现节点网络和Pod网络不在同一个网络地址空间内，那么host1上的PodX该如何与host2上的PodY进行互通？<br><img src=\"/images/pasted-299.png\" alt=\"不同节点间的Pod网络\"></p>\n<p>实际上不同节点间的Pod网络互通，有很多技术实现方案，底层的技术细节也很复杂。为了简化描述，这里大致吧这些方案大体分为两类，一类是路由方案，另外一类是<code>覆盖(Overlay)网络</code>方案。当然还有第三类<code>Underlay模式</code>，这一类严重依赖底层网络。只有用公有云商用k8s或者idc中（bilibili机房中容器集群用了mac vlan）时才会碰到。例如金山。。。今年四月才支持VPC-ENI模式（即podip分在单独的子网上）</p>\n<h3 id=\"路由方案\"><a href=\"#路由方案\" class=\"headerlink\" title=\"路由方案\"></a>路由方案</h3><p>如果底层的网络是你可以控制的，比如说企业内部自建的数据中心，并且你和运维团队的关系比较好，可以采用路由方案，如下图所示：<br><img src=\"/images/pasted-300.png\" alt=\"路由方案\"></p>\n<p>这个方案简单理解，就是通过路由设备为K8s集群的Pod网络单独划分网段，并配置路由器支持Pod网络的转发。例如上图中，对于目标为<code>172.17.1.0/24</code>这个范围内的包，转发到<code>10.100.0.3</code>这个主机上，同样，对于目标为<code>172.17.0.0/24</code>这个范围内的包，转发到<code>10.100.0.2</code>这个主机上。当主机的eth0接口接收到来自Pod网络的包，就会向内部网桥转发，这样不同节点间的Pod就可以相互IP寻址和通信。这种方案依赖于底层的网络设备，但是不引入额外性能开销。</p>\n<h3 id=\"覆盖-Overlay-网络方案\"><a href=\"#覆盖-Overlay-网络方案\" class=\"headerlink\" title=\"覆盖(Overlay)网络方案\"></a>覆盖(Overlay)网络方案</h3><p>如果底层的网络是你无法控制的，比如说公有云网络，或者企业的运维团队不支持路由方案，可以采用覆盖(Overlay)网络方案，如下图所示：<br><img src=\"/images/pasted-301.png\" alt=\"覆盖(Overlay)网络方案\"><br>所谓覆盖网络，就是在现有网络之上再建立一个虚拟网络，实现技术有很多，例如flannel/weavenet等等，这些方案大都采用隧道封包技术。简单理解，Pod网络的数据包，在出节点之前，会先被封装成节点网络的数据包，当数据包到达目标节点，包内的Pod网络数据包会被解封出来，再转发给节点内部的Pod网络。这种方案对底层网络没有特别依赖，但是封包解包会引入额外性能开销。</p>\n<h2 id=\"NB的CNI插件介绍\"><a href=\"#NB的CNI插件介绍\" class=\"headerlink\" title=\"NB的CNI插件介绍\"></a>NB的CNI插件介绍</h2><p>考虑到Pod网络实现技术众多，为了简化集成，K8s支持<code>CNI(Container Network Interface)</code>标准，不同的Pod网络技术可以通过CNI插件形式和K8s进行集成。节点上的Kubelet通过CNI标准接口操作Pod网路，例如添加或删除网络接口等，它不需要关心Pod网络的具体实现细节。</p>\n<p>K8s 通过 CNI 配置文件来决定使用什么 CNI。</p>\n<p><strong>基本的使用方法为：</strong></p>\n<ul>\n<li>首先在每个结点上配置 CNI 配置文件(/etc/cni/net.d/xxnet.conf)，其中 xxnet.conf 是某一个网络配置文件的名称；</li>\n<li>安装 CNI 配置文件中所对应的二进制插件；</li>\n<li>在这个节点上创建 Pod 之后，Kubelet 就会根据 CNI 配置文件执行前两步所安装的 CNI 插件；</li>\n</ul>\n<p>上步执行完之后，Pod 的网络就配置完成了。<br><strong>具体的流程如下图所示：</strong><br><img src=\"/images/pasted-302.png\" alt=\"CNI插件介绍\"><br>在集群里面创建一个 Pod 的时候：</p>\n<ul>\n<li>首先会通过 apiserver 将 Pod 的配置写入。apiserver 的一些管控组件（比如 Scheduler）会调度到某个具体的节点上去。</li>\n<li>Kubelet 监听到这个 Pod 的创建之后，会在本地进行一些创建的操作。</li>\n<li>当执行到创建网络这一步骤时，首先它会读取刚才我们所说的配置目录中的配置文件，配置文件里面会声明所使用的是哪一个插件。<ul>\n<li>然后去执行具体的 CNI 插件的二进制文件，再由 CNI 插件进入 Pod 的网络空间去配置 Pod 的网络。</li>\n</ul>\n</li>\n<li>配置完成之后，Kuberlet 也就完成了整个 Pod 的创建过程，这个 Pod 就在线了。</li>\n</ul>\n<p>大家可能会觉得上述流程有很多步（比如要对 CNI 配置文件进行配置、安装二进制插件等等），看起来比较复杂。</p>\n<p>但如果我们只是作为一个用户去使用 CNI 插件的话就比较简单，因为很多 CNI 插件都已提供了一键安装的能力。以我们常用的 Flannel 为例，如链接中所示：只需要我们使用 <code>kubectl apply Flannel</code> 的一个 <code>Deploying</code> 模板，它就能自动地将配置、二进制文件安装到每一个节点上去。</p>\n<p>安装完之后，整个集群的 CNI 插件就安装完成了:<a href=\"/forward/57e2aa11.html#%E9%83%A8%E7%BD%B2CNI%E7%BD%91%E7%BB%9C\">二进制安装集群，并部署flannel实践</a></p>\n<p>因此，如果我们只是去使用 CNI 插件的话，那么其实很多 CNI 插件已经提供了一键安装的脚本，无需大家关心 Kubernetes 内部是如何配置的以及如何调用 API 的。</p>\n<h2 id=\"NB的CNI插件选型\"><a href=\"#NB的CNI插件选型\" class=\"headerlink\" title=\"NB的CNI插件选型\"></a>NB的CNI插件选型</h2><blockquote>\n<p>社区有很多的 CNI 插件，比如 Calico, flannel, Terway 等等。那么在一个真正具体的生产环境中，我们要选择哪一个 CNI 插件呢？</p>\n</blockquote>\n<p>这就要从 CNI 的几种实现模式说起。我们需要根据不同的场景选择不同的实现模式，再去选择对应的具体某一个插件。</p>\n<p>通常来说，CNI 插件可以分为三种：<code>Overlay</code>、<code>路由</code>及 <code>Underlay</code>。<br><img src=\"/images/pasted-303.png\" alt=\"NB的CNI插件选型\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">容器网络模式</th>\n<th align=\"left\">简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Overlay</td>\n<td align=\"left\">flannel、华为云CCE-容器隧道网络、阿里云ACK-flannel…</td>\n</tr>\n<tr>\n<td align=\"center\">路由</td>\n<td align=\"left\">华为云CCE-VPC网络、百度云CCE-VPC路由…</td>\n</tr>\n<tr>\n<td align=\"center\">Underlay</td>\n<td align=\"left\">Terway、百度云CCE_VPC-ENI、华为云CCE-云原生网络2.0、百度云CCE_VPC-Hybird、MAC VLAN、IP VLAN…</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>Overlay 模式</code>的典型特征是容器独立于主机的 IP 段，这个 IP 段进行跨主机网络通信时是通过在主机之间创建隧道的方式，将整个容器网段的包全都封装成底层的物理网络中主机之间的包。该方式的好处在于它不依赖于底层网络；</li>\n<li><code>路由模式</code>中主机和容器也分属不同的网段，它与 <code>Overlay</code> 模式的主要区别在于它的跨主机通信是通过路由打通，无需在不同主机之间做一个隧道封包。但路由打通就需要部分依赖于底层网络，比如说要求底层网络有二层可达的一个能力；</li>\n<li><code>Underlay 模式</code>中容器和宿主机位于同一层网络，两者拥有相同的地位。容器之间网络的打通主要依靠于底层网络。因此该模式是强依赖于底层能力的。</li>\n</ul>\n<blockquote>\n<p>ps：每个模式具体的实现细节，这里暂时不赘述。后面有机会去专业做容器网络时可以再详细讲解。这里我们了解三种模式的区别，方便我们在云资源交付工作中为业务选型集群网络模式提供依据即可</p>\n</blockquote>\n<p>了解了以上三种常用的实现模式之后，再根据自己的环境、需求判断可由哪一种模式进行实现，再在对应的模式中去找 CNI 插件。不过社区中有那么多插件，它们又都属于哪种模式？如何进行选择呢？怎么挑选适合自己的呢？我们可以从以下 3 个方面来考虑。</p>\n<p><img src=\"/images/pasted-304.png\" alt=\"CNI选型\"></p>\n<h3 id=\"环境限制\"><a href=\"#环境限制\" class=\"headerlink\" title=\"环境限制\"></a>环境限制</h3><p>不同环境中所支持的底层能力是不同的。</p>\n<ul>\n<li><strong>虚拟化环境</strong>（例如 OpenStack）中的网络限制较多，比如不允许机器之间直接通过二层协议访问，必须要带有 IP 地址这种三层的才能去做转发，限制某一个机器只能使用某些 IP 等。在这种被做了强限制的底层网络中，只能去选择 <code>Overlay</code> 的插件，常见的有 <code>Flannel-vxlan</code>, <code>Calico-ipip</code>, <code>Weave</code> 等等；</li>\n</ul>\n<ul>\n<li><strong>物理机环境</strong>中底层网络的限制较少，比如说我们在同一个交换机下面直接做一个二层的通信。对于这种集群环境，我们可以选择 <code>Underlay</code> 或者路由模式的插件。<code>Underlay</code> 意味着我们可以直接在一个物理机上插多个网卡或者是在一些网卡上做硬件虚拟化；路由模式就是依赖于 Linux 的路由协议做一个打通。这样就避免了像 <code>vxlan</code> 的封包方式导致的性能降低。这种环境下我们可选的插件包括 <code>clico-bgp</code>, <code>flannel-hostgw</code>, <code>sriov</code> 等等；</li>\n</ul>\n<ul>\n<li><strong>公有云环境</strong>也是虚拟化，因此底层限制也会较多。但每个公有云都会考虑适配容器，提升容器的性能，因此每家公有云可能都提供了一些 API 去配置一些额外的网卡或者路由这种能力。在公有云上，我们要尽量选择公有云厂商提供的 CNI 插件以达到兼容性和性能上的最优。比如 Aliyun 就提供了一个高性能的 Terway 插件。</li>\n</ul>\n<p>环境限制考虑完之后，我们心中应该都有一些选择了，知道哪些能用、哪些不能用。在这个基础上，我们再去考虑功能上的需求。</p>\n<h3 id=\"功能需求\"><a href=\"#功能需求\" class=\"headerlink\" title=\"功能需求\"></a>功能需求</h3><ul>\n<li>首先是安全需求；</li>\n</ul>\n<p>K8s 支持 <code>NetworkPolicy</code>，就是说我们可以通过 <code>NetworkPolicy</code> 的一些规则去支持“Pod 之间是否可以访问”这类策略。但不是每个 CNI 插件都支持 <code>NetworkPolicy</code> 的声明，如果大家有这个需求，可以选择支持 <code>NetworkPolicy</code> 的一些插件，比如 <code>Calico</code>, <code>Weave</code> 等等。</p>\n<ul>\n<li>第二个是是否需要集群外的资源与集群内的资源互联互通；</li>\n</ul>\n<p>大家的应用最初都是在虚拟机或者物理机上，容器化之后，应用无法一下就完成迁移，因此就需要传统的虚拟机或者物理机能跟容器的 IP 地址互通。为了实现这种互通，就需要两者之间有一些打通的方式或者直接位于同一层。此时可以选择 <code>Underlay</code> 的网络，比如 <code>sriov</code> 这种就是 Pod 和以前的虚拟机或者物理机在同一层。我们也可以使用 <code>calico-bgp</code>，此时它们虽然不在同一网段，但可以通过它去跟原有的路由器做一些 BGP 路由的一个发布，这样也可以打通虚拟机与容器。</p>\n<ul>\n<li>最后考虑的就是 K8s 的服务发现与负载均衡的能力。</li>\n</ul>\n<p>K8s 的服务发现与负载均衡就是我们前面所介绍的 K8s 的 <code>Service</code>，但并不是所有的 <code>CNI</code> 插件都能实现这两种能力。比如很多 <code>Underlay</code> 模式的插件，在 Pod 中的网卡是直接用的 <code>Underlay</code> 的硬件，或者通过硬件虚拟化插到容器中的，这个时候它的流量无法走到宿主机所在的命名空间，因此也无法应用 <code>kube-proxy</code> 在宿主机配置的规则。<br>这种情况下，插件就无法访问到 K8s 的服务发现。因此大家如果需要服务发现与负载均衡，在选择 <code>Underlay</code> 的插件时就需要注意它们是否支持这两种能力。</p>\n<p>经过功能需求的过滤之后，能选的插件就很少了。经过环境限制和功能需求的过滤之后，如果还剩下 3、4 种插件，可以再来考虑性能需求。</p>\n<h3 id=\"性能需求\"><a href=\"#性能需求\" class=\"headerlink\" title=\"性能需求\"></a>性能需求</h3><p>我们可以从 Pod 的创建速度和 Pod 的网络性能来衡量不同插件的性能。</p>\n<ul>\n<li>Pod 的创建速度</li>\n</ul>\n<p>当我们创建一组 Pod 时，比如业务高峰来了，需要紧急扩容，这时比如说我们扩容了 1000 个 Pod，就需要 <code>CNI</code> 插件创建并配置 1000 个网络资源。<code>Overlay</code> 和路由模式在这种情况下的创建速度是很快的，因为它是在机器里面又做了虚拟化，所以只需要调用内核接口就可以完成这些操作。但对于 <code>Underlay</code> 模式，由于需要创建一些底层的网络资源，所以整个 Pod 的创建速度相对会慢一些。因此对于经常需要紧急扩容或者创建大批量的 Pod 这些场景，我们应该尽量选择 <code>Overlay</code> 或者路由模式的网络插件。</p>\n<ul>\n<li>Pod 的网络性能</li>\n</ul>\n<p>主要表现在两个 Pod 之间的网络转发、网络带宽、PPS 延迟等这些性能指标上。<code>Overlay</code> 模式的性能较差，因为它在节点上又做了一层虚拟化，还需要去封包，封包又会带来一些包头的损失、CPU 的消耗等，如果大家对网络性能的要求比较高，比如说机器学习、大数据这些场景就不适合使用 <code>Overlay</code> 模式。这种情形下我们通常选择 <code>Underlay</code> 或者路由模式的<code>CNI</code>插件。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>在我们云上交付时，各云考虑更好的网络规划、网工侧不用单独打通路由、网络转发性能</p>\n<p><strong>模式选择</strong>：<code>Overlay</code> &lt; <code>路由</code> &lt; <code>Underlay</code></p>\n<p><strong>各云差异化</strong></p>\n<ul>\n<li>阿里云：flannel &lt; Terway</li>\n<li>百度云：VPC路由  &lt; VPC-ENI</li>\n<li>华为云：容器隧道网络 &lt; VPC网络(VPC路由) &lt; 云原生网络2.0（类阿里Terway和百度VPC-ENI、仅CCE Turbo集群支持使用云原生网络2.0）</li>\n<li>腾讯云：Cilium-Overlay(隧道网络) &lt; GlobalRouter（VPC路由）&lt; VPC-CNI（类阿里Terway和百度VPC-ENI）</li>\n</ul>\n","categories":["OPS"],"tags":["Kubernetes","CNI"]},{"title":"k8s企业级DevOps实践-虚拟化介绍和Docker原理深入","url":"/forward/61316209.html","content":"<p>虚拟化核心需要解决的问题：资源隔离与资源限制</p>\n<ul>\n<li>虚拟机硬件虚拟化技术， 通过一个 hypervisor 层实现对资源的彻底隔离。</li>\n<li>容器则是操作系统级别的虚拟化，利用的是内核的 Cgroup 和 Namespace 特性，此功能完全通过软件实现。</li>\n</ul>\n<h3 id=\"Namespace-资源隔离\"><a href=\"#Namespace-资源隔离\" class=\"headerlink\" title=\"Namespace 资源隔离\"></a>Namespace 资源隔离</h3><p>命名空间是全局资源的一种抽象，将资源放到不同的命名空间中，各个命名空间中的资源是相互隔离的。 通俗来讲，就是docker在启动一个容器的时候，会调用Linux Kernel Namespace的接口，来创建一块虚拟空间，创建的时候，可以支持设置下面这几种（可以随意选择）,docker默认都设置。</p>\n<ul>\n<li>pid：用于进程隔离（PID：进程ID）</li>\n<li>net：管理网络接口（NET：网络）</li>\n<li>ipc：管理对 IPC 资源的访问（IPC：进程间通信（信号量、消息队列和共享内存））</li>\n<li>mnt：管理文件系统挂载点（MNT：挂载）</li>\n<li>uts：隔离主机名和域名</li>\n<li>user：隔离用户和用户组（3.8以后的内核才支持）</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setNamespaces</span><span class=\"params\">(daemon *Daemon, s *specs.Spec, c *container.Container)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// user</span></span><br><span class=\"line\">    <span class=\"comment\">// network</span></span><br><span class=\"line\">    <span class=\"comment\">// ipc</span></span><br><span class=\"line\">    <span class=\"comment\">// uts</span></span><br><span class=\"line\">    <span class=\"comment\">// pid</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> c.HostConfig.PidMode.IsContainer() &#123;</span><br><span class=\"line\">        ns := specs.LinuxNamespace&#123;Type: <span class=\"string\">&quot;pid&quot;</span>&#125;</span><br><span class=\"line\">        pc, err := daemon.getPidContainer(c)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ns.Path = fmt.Sprintf(<span class=\"string\">&quot;/proc/%d/ns/pid&quot;</span>, pc.State.GetPID())</span><br><span class=\"line\">        setNamespace(s, ns)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> c.HostConfig.PidMode.IsHost() &#123;</span><br><span class=\"line\">        oci.RemoveNamespace(s, specs.LinuxNamespaceType(<span class=\"string\">&quot;pid&quot;</span>))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ns := specs.LinuxNamespace&#123;Type: <span class=\"string\">&quot;pid&quot;</span>&#125;</span><br><span class=\"line\">        setNamespace(s, ns)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CGroup-资源限制\"><a href=\"#CGroup-资源限制\" class=\"headerlink\" title=\"CGroup 资源限制\"></a>CGroup 资源限制</h3><p>通过<code>namespace</code>可以保证容器之间的隔离，但是无法控制每个容器可以占用多少资源， 如果其中的某一个容器正在执行 CPU 密集型的任务，那么就会影响其他容器中任务的性能与执行效率，导致多个容器相互影响并且抢占资源。如何对多个容器的资源使用进行限制就成了解决进程虚拟资源隔离之后的主要问题。<br><img src=\"/images/pasted-13.png\" alt=\"docker\"></p>\n<p>Control Groups（简称 CGroups）就是能够隔离宿主机器上的物理资源，例如 CPU、内存、磁盘 I/O 和网络带宽。每一个 <code>CGroup</code> 都是一组被相同的标准和参数限制的进程。而我们需要做的，其实就是把容器这个进程加入到指定的<code>Cgroup</code>中。</p>\n<h3 id=\"UnionFS-联合文件系统\"><a href=\"#UnionFS-联合文件系统\" class=\"headerlink\" title=\"UnionFS 联合文件系统\"></a>UnionFS 联合文件系统</h3><p>Linux <code>namespace</code>和<code>cgroup</code>分别解决了容器的资源隔离与资源限制，那么容器是很轻量的，通常每台机器中可以运行几十上百个容器， 这些个容器是共用一个image，还是各自将这个image复制了一份，然后各自独立运行呢？ 如果每个容器之间都是全量的文件系统拷贝，那么会导致至少如下问题：</p>\n<ul>\n<li>运行容器的速度会变慢</li>\n<li>容器和镜像对宿主机的磁盘空间的压力</li>\n</ul>\n<p>怎么解决这个问题——Docker的存储驱动</p>\n<ul>\n<li>镜像分层存储</li>\n<li>UnionFS</li>\n</ul>\n<p>Docker 镜像是由一系列的层组成的，每层代表 Dockerfile 中的一条指令，比如下面的 Dockerfile 文件：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">15.04</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> make /app</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> python /app/app.py</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 Dockerfile 包含4条命令，其中每一行就创建了一层，下面显示了上述Dockerfile构建出来的镜像运行的容器层的结构：<br><img src=\"/images/pasted-14.png\" alt=\"docker\"></p>\n<p>镜像就是由这些层一层一层堆叠起来的，镜像中的这些层都是只读的，当我们运行容器的时候，就可以在这些基础层至上添加新的可写层，也就是我们通常说的<code>容器层</code>，对于运行中的容器所做的所有更改（比如写入新文件、修改现有文件、删除文件）都将写入这个容器层。</p>\n<p>对容器层的操作，主要利用了写时复制（CoW）技术。CoW就是copy-on-write，表示只在需要写时才去复制，这个是针对已有文件的修改场景。 CoW技术可以让所有的容器共享image的文件系统，所有数据都从image中读取，只有当要对文件进行写操作时，才从image里把要写的文件复制到自己的文件系统进行修改。所以无论有多少个容器共享同一个image，所做的写操作都是对从image中复制到自己的文件系统中的复本上进行，并不会修改image的源文件，且多个容器操作同一个文件，会在每个容器的文件系统里生成一个复本，每个容器修改的都是自己的复本，相互隔离，相互不影响。使用CoW可以有效的提高磁盘的利用率。<br><img src=\"/images/pasted-15.png\" alt=\"docker\"></p>\n<h3 id=\"Docker网络\"><a href=\"#Docker网络\" class=\"headerlink\" title=\"Docker网络\"></a>Docker网络</h3><p>docker容器是一块具有隔离性的虚拟系统，容器内可以有自己独立的网络空间，</p>\n<ul>\n<li>多个容器之间是如何实现通信的呢？</li>\n<li>容器和宿主机之间又是如何实现的通信呢？</li>\n<li>使用-p参数是怎么实现的端口映射?</li>\n</ul>\n<p>了解docker的网络模型，对于学习docker来说十分必要。</p>\n<h4 id=\"网络模式\"><a href=\"#网络模式\" class=\"headerlink\" title=\"网络模式\"></a>网络模式</h4><p>我们在使用docker run创建Docker容器时，可以用–net选项指定容器的网络模式，Docker有以下4种网络模式：</p>\n<ul>\n<li><p>bridge模式，使用–net=bridge指定，默认设置</p>\n</li>\n<li><p>host模式，使用–net=host指定，容器内部网络空间共享宿主机的空间，效果类似直接在宿主机上启动一个进程，端口信息和宿主机共用。</p>\n</li>\n<li><p>container模式，使用–net=container:NAME_or_ID指定</p>\n<p>指定容器与特定容器共享网络命名空间</p>\n</li>\n<li><p>none模式，使用–net=none指定</p>\n<p>网络模式为空，即仅保留网络命名空间，但是不做任何网络相关的配置(网卡、IP、路由等)</p>\n</li>\n</ul>\n<h4 id=\"bridge模式\"><a href=\"#bridge模式\" class=\"headerlink\" title=\"bridge模式\"></a>bridge模式</h4><p>那我们之前在演示创建docker容器的时候其实是没有指定的网络模式的，如果不指定的话默认就会使用bridge模式，bridge本意是桥的意思，其实就是网桥模式，那我们怎么理解网桥，如果需要做类比的话，我们可以把网桥看成一个二层的交换机设备，我们来看下这张图：</p>\n<p>交换机通信简图<br><img src=\"/images/pasted-16.png\" alt=\"dockernet\"><br>网桥模式示意图<br>docker-bridge.jpeg<br><img src=\"/images/pasted-17.png\" alt=\"dockernet\"><br>网桥在哪，查看网桥</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> yum install <span class=\"literal\">-y</span> bridge<span class=\"literal\">-utils</span></span><br><span class=\"line\"><span class=\"variable\">$</span> brctl show</span><br><span class=\"line\">bridge name     bridge id               STP enabled     interfaces</span><br><span class=\"line\">docker0         <span class=\"number\">8000.0242</span>b5fbe57b       no              veth3a496ed</span><br></pre></td></tr></table></figure>\n\n<p>有了网桥之后，docker在启动一个容器的时候做了哪些事情才能实现容器间的互联互通</p>\n<p>Docker 创建一个容器的时候，会执行如下操作：</p>\n<ul>\n<li>创建一对虚拟接口/网卡，也就是veth pair</li>\n<li>本地主机一端桥接 到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 veth9953b75</li>\n<li>容器一端放到新启动的容器内部，并修改名字作为 eth0，这个网卡/接口只在容器的命名空间可见</li>\n<li>从网桥可用地址段中（也就是与该bridge对应的network）获取一个空闲地址分配给容器的 eth0</li>\n<li>配置默认路由到网桥</li>\n</ul>\n<p>那整个过程其实是docker自动帮我们完成的，清理掉所有容器，验证：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 清掉所有容器</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">rm</span> -f `docker ps -aq`</span><br><span class=\"line\">$ docker ps</span><br><span class=\"line\">$ brctl show <span class=\"comment\"># 查看网桥中的接口，目前没有</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建测试容器test1</span></span><br><span class=\"line\">$ docker run -d --name test1 nginx:alpine</span><br><span class=\"line\">$ brctl show <span class=\"comment\"># 查看网桥中的接口，已经把test1的veth端接入到网桥中</span></span><br><span class=\"line\">$ ip a |grep veth <span class=\"comment\"># 已在宿主机中可以查看到</span></span><br><span class=\"line\">41: vethff3fbfd@if40: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti test1 sh </span><br><span class=\"line\">/ <span class=\"comment\"># ifconfig  # 查看容器的eth0网卡及分配的容器ip</span></span><br><span class=\"line\">/ <span class=\"comment\"># route -n  # 观察默认网关都指向了网桥的地址，即所有流量都转向网桥，等于是在veth pair接通了网线</span></span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再来启动一个测试容器，测试容器间的通信</span></span><br><span class=\"line\">$ docker run -d --name test2 nginx:alpine</span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti <span class=\"built_in\">test</span> sh</span><br><span class=\"line\">/ <span class=\"comment\"># sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apk/repositories</span></span><br><span class=\"line\">/ <span class=\"comment\"># apk add curl</span></span><br><span class=\"line\">/ <span class=\"comment\"># curl 172.17.0.8:80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 为啥可以通信，因为两个容器是接在同一个网桥中的，通信其实是通过mac地址和端口的的记录来做转发的。test1访问test2，通过test1的eth0发送ARP广播，网桥会维护一份mac映射表，我们可以大概通过命令来看一下，</span></span><br><span class=\"line\">$ brctl showmacs docker0</span><br><span class=\"line\"><span class=\"comment\">## 这些mac地址是主机端的veth网卡对应的mac，可以查看一下</span></span><br><span class=\"line\">$ ip a </span><br></pre></td></tr></table></figure>\n\n<p>如何知道网桥上的这些虚拟网卡与容器端是如何对应？</p>\n<p>通过ifindex，网卡索引号<br><img src=\"/images/pasted-18.png\" alt=\"dockernet\"><br>整理脚本，快速查看对应：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> container <span class=\"keyword\">in</span> $(docker ps -q); <span class=\"keyword\">do</span></span><br><span class=\"line\">    iflink=`docker <span class=\"built_in\">exec</span> -it <span class=\"variable\">$container</span> sh -c <span class=\"string\">&#x27;cat /sys/class/net/eth0/iflink&#x27;</span>`</span><br><span class=\"line\">    iflink=`<span class=\"built_in\">echo</span> <span class=\"variable\">$iflink</span>|<span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;\\r&#x27;</span>`</span><br><span class=\"line\">    veth=`grep -l <span class=\"variable\">$iflink</span> /sys/class/net/veth*/ifindex`</span><br><span class=\"line\">    veth=`<span class=\"built_in\">echo</span> <span class=\"variable\">$veth</span>|sed -e <span class=\"string\">&#x27;s;^.*net/\\(.*\\)/ifindex$;\\1;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$container</span>:<span class=\"variable\">$veth</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>上面介绍了容器之间的通信（类似容器[计算机]接入docker虚拟网桥[交换机]），那么容器与宿主机的通信是如何做的？<br><img src=\"/images/pasted-19.png\" alt=\"dockernet\"><br>添加端口映射：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 启动容器的时候通过-p参数添加宿主机端口与容器内部服务端口的映射</span></span><br><span class=\"line\">$ docker run --name <span class=\"built_in\">test</span> -d -p 8088:80 nginx:alpine</span><br><span class=\"line\">$ curl localhost:8088</span><br></pre></td></tr></table></figure>\n\n<p>端口映射如何实现的？先来回顾iptables链表图</p>\n<p><img src=\"/images/pasted-20.png\" alt=\"dockernet\"></p>\n<p>访问本机的8088端口，数据包会从流入方向进入本机，因此涉及到PREROUTING和INPUT链，我们是通过做宿主机与容器之间加的端口映射，所以肯定会涉及到端口转换，那哪个表是负责存储端口转换信息的呢，就是nat表，负责维护网络地址转换信息的。因此我们来查看一下PREROUTING链的nat表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@55-console ~]<span class=\"comment\"># iptables -t nat -nvL PREROUTING</span></span><br><span class=\"line\">Chain PREROUTING (policy ACCEPT 15080 packets, 1258K bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">13797  820K DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure>\n\n<p>规则利用了iptables的addrtype拓展，匹配网络类型为本地的包，如何确定哪些是匹配本地，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@55-console ~]<span class=\"comment\"># ip route show table local type local</span></span><br><span class=\"line\">127.0.0.0/8 dev lo  proto kernel  scope host  src 127.0.0.1 </span><br><span class=\"line\">127.0.0.1 dev lo  proto kernel  scope host  src 127.0.0.1 </span><br><span class=\"line\">172.17.0.1 dev docker0  proto kernel  scope host  src 172.17.0.1 </span><br><span class=\"line\">192.168.1.55 dev ens192  proto kernel  scope host  src 192.168.1.55</span><br></pre></td></tr></table></figure>\n\n<p>也就是说目标地址类型匹配到这些的，会转发到我们的TARGET中，TARGET是动作，意味着对符合要求的数据包执行什么样的操作，最常见的为ACCEPT或者DROP，此处的TARGET为DOCKER，很明显DOCKER不是标准的动作，那DOCKER是什么呢？我们通常会定义自定义的链，这样把某类对应的规则放在自定义链中，然后把自定义的链绑定到标准的链路中，因此此处DOCKER 是自定义的链。那我们现在就来看一下DOCKER这个自定义链上的规则。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@55-console ~]<span class=\"comment\"># iptables -t nat -nvL DOCKER</span></span><br><span class=\"line\">Chain DOCKER (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">   77  4620 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">    0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:12800 to:172.17.0.2:12800</span><br><span class=\"line\">    1    52 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:11800 to:172.17.0.2:11800</span><br><span class=\"line\">  133  6916 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.17.0.3:8080</span><br></pre></td></tr></table></figure>\n\n<p>此条规则就是对主机收到的目的端口为11800的tcp流量进行DNAT转换，将流量发往172.17.0.2:11800，172.17.0.2地址是不是就是我们上面创建的Docker容器的ip地址，流量走到网桥上了，后面就走网桥的转发就ok了。<br>所以，外界只需访问192.168.1.56:11800就可以访问到容器中的服务了。</p>\n<p>数据包在出口方向走POSTROUTING链，我们查看一下规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@55-console ~]<span class=\"comment\"># iptables -t nat -nvL POSTROUTING</span></span><br><span class=\"line\">Chain POSTROUTING (policy ACCEPT 335 packets, 19964 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt <span class=\"keyword\">in</span>     out     <span class=\"built_in\">source</span>               destination         </span><br><span class=\"line\">   68 31283 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0           </span><br><span class=\"line\">    0     0 MASQUERADE  tcp  --  *      *       172.17.0.2           172.17.0.2           tcp dpt:12800</span><br><span class=\"line\">    0     0 MASQUERADE  tcp  --  *      *       172.17.0.2           172.17.0.2           tcp dpt:11800</span><br><span class=\"line\">    0     0 MASQUERADE  tcp  --  *      *       172.17.0.3           172.17.0.3           tcp dpt:8080</span><br></pre></td></tr></table></figure>\n\n<p>大家注意MASQUERADE这个动作是什么意思，其实是一种更灵活的SNAT，把源地址转换成主机的出口ip地址，那解释一下这条规则的意思:</p>\n<p>这条规则会将源地址为172.17.0.0/16的包（也就是从Docker容器产生的包），并且不是从docker0网卡发出的，进行源地址转换，转换成主机网卡的地址。大概的过程就是ACK的包在容器里面发出来，会路由到网桥docker0，网桥根据宿主机的路由规则会转给宿主机网卡eth0，这时候包就从docker0网卡转到eth0网卡了，并从eth0网卡发出去，这时候这条规则就会生效了，把源地址换成了eth0的ip地址。</p>\n<blockquote>\n<p>注意一下，刚才这个过程涉及到了网卡间包的传递，那一定要打开主机的ip_forward转发服务，要不然包转不了，服务肯定访问不到。</p>\n</blockquote>\n<h5 id=\"抓包演示\"><a href=\"#抓包演示\" class=\"headerlink\" title=\"抓包演示\"></a>抓包演示</h5><p>我们先想一下，我们要抓哪个网卡的包</p>\n<ul>\n<li><p>首先访问宿主机的8088端口，我们抓一下宿主机的eth0</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> tcpdump <span class=\"literal\">-i</span> eth0 port <span class=\"number\">8088</span> <span class=\"literal\">-w</span> host.cap</span><br></pre></td></tr></table></figure></li>\n<li><p>然后最终包会流入容器内，那我们抓一下容器内的eth0网卡</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 容器内安装一下tcpdump</span></span><br><span class=\"line\">$ sed -i <span class=\"string\">&#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27;</span> /etc/apk/repositories</span><br><span class=\"line\">$ apk add tcpdump</span><br><span class=\"line\">$ tcpdump -i eth0 port 80 -w container.cap</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>到另一台机器访问一下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl 172.21.32.6:8088/</span><br></pre></td></tr></table></figure>\n\n<p>停止抓包，拷贝容器内的包到宿主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">cp</span> <span class=\"built_in\">test</span>:/root/container.cap /root/</span><br></pre></td></tr></table></figure>\n\n<p>把抓到的内容拷贝到本地，使用wireshark进行分析。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ scp root@172.21.32.6:/root/*.<span class=\"built_in\">cap</span> /d/packages</span><br></pre></td></tr></table></figure>\n\n<p>（wireshark合并包进行分析）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">宿主机：192.168.1.32</span><br><span class=\"line\"> |__DOCKER Container 172.17.0.n</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-21.png\" alt=\"dockernet\"></p>\n<p><img src=\"/images/pasted-22.png\" alt=\"dockernet\"></p>\n<p><img src=\"/images/pasted-23.png\" alt=\"dockernet\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">请求：</span><br><span class=\"line\">No.1_直接访问: 物理机1 172.21.32.9:51594 &gt; 物理机2 172.21.32.15:8088 </span><br><span class=\"line\"></span><br><span class=\"line\">No.2_DNAT转换：172.21.32.9:51594 &gt; 172.17.0.4:80 </span><br><span class=\"line\">//将No.1请求报文中的目的ip32.15:8088转为容器的ip0.4:80，利用的是DOCKER自定义的iptables链</span><br><span class=\"line\"></span><br><span class=\"line\">响应：</span><br><span class=\"line\">No.3_容器响应：172.17.0.4:80 &gt; 物理机1 172.21.32.9:51594</span><br><span class=\"line\"></span><br><span class=\"line\">No.4_SNAT转换：172.21.32.15:8088 &gt; 172.21.32.9:51594</span><br><span class=\"line\">//将No.3请求报文中的目的ip0.4:80转为宿主机的ip32.15:8088，利用的是POSTROUTING链</span><br></pre></td></tr></table></figure>\n\n<p>进到容器内的包做<code>DNAT</code>，出去的包做<code>SNAT</code>，这样对外面来讲，根本就不知道机器内部是谁提供服务，其实这就和一个内网多个机器公用一个外网IP地址上网的效果是一样的，这也属于NAT功能的一个常见的应用场景。</p>\n<p>一系列的nat转换后对于其他机器或服务访问本机由docker提供的服务时，对于他们来说就形成了不可知论</p>\n<h4 id=\"Host模式\"><a href=\"#Host模式\" class=\"headerlink\" title=\"Host模式\"></a>Host模式</h4><p>容器内部不会创建网络空间，共享宿主机的网络空间。直接使用宿主机的端口无法判断来源[容器服务/本机服务]。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker run --net host -d --name mysql -e MYSQL_ROOT_PASSWORD=pincheng mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Conatiner模式\"><a href=\"#Conatiner模式\" class=\"headerlink\" title=\"Conatiner模式\"></a>Conatiner模式</h4><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。 </p>\n<p><img src=\"/images/pasted-24.png\" alt=\"dockernet\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 启动测试容器，共享mysql的网络空间</span></span><br><span class=\"line\">$ docker run -ti --<span class=\"built_in\">rm</span> --net=container:mysql busybox sh</span><br><span class=\"line\">/ <span class=\"comment\"># ip a</span></span><br><span class=\"line\">/ <span class=\"comment\"># netstat -tlp|grep 3306</span></span><br><span class=\"line\">/ <span class=\"comment\"># telnet localhost 3306</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实用技巧\"><a href=\"#实用技巧\" class=\"headerlink\" title=\"实用技巧\"></a>实用技巧</h4><ol>\n<li><p>清理主机上所有退出的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">rm</span>  $(docker ps -aq)</span><br></pre></td></tr></table></figure></li>\n<li><p>调试或者排查容器启动错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 若有时遇到容器启动失败的情况，可以先使用相同的镜像启动一个临时容器，先进入容器</span></span><br><span class=\"line\">$ docker run -ti --<span class=\"built_in\">rm</span> &lt;image_id&gt; bash</span><br><span class=\"line\"><span class=\"comment\">## 进入容器后，手动执行该容器对应的ENTRYPOINT或者CMD命令，这样即使出错，容器也不会退出，因为bash作为1号进程，我们只要不退出容器，该容器就不会自动退出</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>为了解决软件交付过程中的环境依赖，同时提供一种更加轻量的虚拟化技术，Docker出现了</p>\n</li>\n<li><p>2013年诞生，15年开始迅速发展，从17.03月开始，使用时间日期管理版本，稳定版以每季度为准</p>\n</li>\n<li><p>Docker是一种CS架构的软件产品，可以把代码及依赖打包成镜像，作为交付介质，并且把镜像启动成为容器，提供容器生命周期的管理</p>\n</li>\n<li><p>使用yum部署docker，启动后通过操作docker这个命令行，自动调用docker daemon完成容器相关操作</p>\n</li>\n<li><p>常用操作</p>\n<ul>\n<li>systemctl  start|stop|restart docker</li>\n<li>docker build | pull  -&gt; docker tag -&gt; docker push</li>\n<li>docker run –name my-demo  -d  -p 8080:80 -v  /opt/data:/data  demo:v20200327</li>\n<li>docker cp  /path/a.txt  mycontainer:/opt</li>\n<li>docker exec -ti  mycontainer  /bin/sh</li>\n<li>docker logs -f mycontainer</li>\n</ul>\n</li>\n<li><p>通过dockerfile构建业务镜像，先使用基础镜像，然后通过一系列的指令把我们的业务应用所需要的运行环境和依赖都打包到镜像中，然后通过CMD或者ENTRYPOINT指令把镜像启动时的入口制定好，完成封装即可。有点类似于，先找来一个空的集装箱(基础镜像)，然后把项目依赖的服务都扔到集装箱中，然后设置好服务的启动入口，关闭箱门，即完成了业务镜像的制作。</p>\n</li>\n<li><p>容器的实现依赖于内核模块提供的namespace和control-group的功能，通过namespace创建一块虚拟空间，空间内实现了各类资源(进程、网络、文件系统)的隔离，提供control-group实现了对隔离的空间的资源使用的限制。</p>\n</li>\n<li><p>docker镜像使用分层的方式进行存储，根据主机的存储驱动的不同，实现方式会不同，kernel在3.10.0-514以上自动支持overlay2 存储驱动，也是目前Docker推荐的方式。</p>\n</li>\n<li><p>得益于分层存储的模式，多个容器可以通过copy-on-write的策略，在镜像的最上层加一个可写层，实现一个镜像快速启动多个容器的场景</p>\n</li>\n<li><p>docker的网络模式分为4种，最常用的为bridge和host模式。bridge模式通过docker0网桥，启动容器的时候通过创建一对虚拟网卡，将容器连接在桥上，同时维护了虚拟网卡与网桥端口的关系，实现容器间的通信。容器与宿主机之间的通信通过iptables端口映射的方式，docker利用iptables的PREROUTING和POSTROUTING的nat功能，实现了SNAT与DNAT，使得容器内部的服务被完美的保护起来。</p>\n</li>\n</ul>\n","categories":["OPS"],"tags":["OPS","Docker","Kubernetes"]},{"title":"k8s企业级DevOps实践-集群服务发现及Ingress的实现服务访问","url":"/forward/503970b4.html","content":"<h3 id=\"Service服务访问\"><a href=\"#Service服务访问\" class=\"headerlink\" title=\"Service服务访问\"></a>Service服务访问</h3><p>我们已经能够通过Deployment来创建一组Pod来提供具有高可用性的服务。虽然每个Pod都会分配一个单独的Pod IP，然而却存在如下两个问题：</p>\n<ul>\n<li>Pod IP仅仅是集群内可见的虚拟IP，外部无法访问。</li>\n<li>Pod IP会随着Pod的销毁而消失，当ReplicaSet对Pod进行动态伸缩时，Pod IP可能随时随地都会变化，这样对于我们访问这个服务带来了难度。</li>\n</ul>\n<h4 id=\"Service-负载均衡-Cluster-IP\"><a href=\"#Service-负载均衡-Cluster-IP\" class=\"headerlink\" title=\"Service 负载均衡/Cluster IP\"></a>Service 负载均衡/Cluster IP</h4><p>service是一组pod的服务抽象，相当于一组pod的LB，负责将请求分发给对应的pod。service会为这个LB提供一个IP，一般称为cluster IP 。使用Service对象，通过selector进行标签选择，找到对应的Pod:</p>\n<p><code>myblog/deployment/svc-myblog.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8002</span> <span class=\"comment\">#pod对外的端口</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">myblog</span> <span class=\"comment\">#匹配到此label的pod的8002端口，会加入到此k8s lb中</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n<p>操作演示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 别名</span></span><br><span class=\"line\">$ <span class=\"comment\">#alias kd=&#x27;kubectl -n demo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建服务</span></span><br><span class=\"line\">$ kubectl create -f svc-myblog.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 检查pod label</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get po --show-labels</span></span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class=\"line\">myblog-7fc47887f9-h5529   1/1     Running   1          44h   app=myblog,pod-template-hash=7fc47887f9</span><br><span class=\"line\">myblog-7fc47887f9-k85mr   1/1     Running   1          44h   app=myblog,pod-template-hash=7fc47887f9</span><br><span class=\"line\">myblog-7fc47887f9-v6qbf   1/1     Running   1          44h   app=myblog,pod-template-hash=7fc47887f9</span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running   1          47h   app=mysql,pod-template-hash=5fcb655cc9</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get svc</span></span><br><span class=\"line\">NAME     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">myblog   ClusterIP   10.100.226.216   &lt;none&gt;        80/TCP    76s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此时k8s会帮我们维护一个ENDPOINTS</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get ep</span></span><br><span class=\"line\">NAME     ENDPOINTS                                         AGE</span><br><span class=\"line\">myblog   10.244.0.5:8002,10.244.0.6:8002,10.244.0.7:8002   116s</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl -n demo  describe svc myblog</span><br><span class=\"line\">Name:              myblog</span><br><span class=\"line\">Namespace:         demo</span><br><span class=\"line\">Labels:            &lt;none&gt;</span><br><span class=\"line\">Annotations:       &lt;none&gt;</span><br><span class=\"line\">Selector:          app=myblog</span><br><span class=\"line\">Type:              ClusterIP</span><br><span class=\"line\">IP:                10.100.226.216</span><br><span class=\"line\">Port:              &lt;<span class=\"built_in\">unset</span>&gt;  80/TCP <span class=\"comment\">#lb端口</span></span><br><span class=\"line\">TargetPort:        8002/TCP <span class=\"comment\">#目的端口</span></span><br><span class=\"line\">Endpoints:         10.244.0.5:8002,10.244.0.6:8002,10.244.0.7:8002</span><br><span class=\"line\">Session Affinity:  None</span><br><span class=\"line\">Events:            &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试扩容</span></span><br><span class=\"line\">$ kubectl -n demo scale deploy myblog --replicas=4</span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get ep</span></span><br><span class=\"line\">NAME     ENDPOINTS                                                     AGE</span><br><span class=\"line\">myblog   10.244.0.5:8002,10.244.0.6:8002,10.244.0.7:8002 + 1 more...   9m14s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Service与Pod如何关联？<br>service对象创建的同时，会创建同名的endpoints对象，若服务设置了readinessProbe, 当readinessProbe检测失败时，endpoints列表中会剔除掉对应的pod_ip，这样流量就不会分发到健康检测失败的Pod中</p>\n<p>Service Cluster-IP如何访问？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl -n demo get svc myblog</span><br><span class=\"line\">NAME     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">myblog   ClusterIP   10.100.226.216   &lt;none&gt;        80/TCP    12m</span><br><span class=\"line\">$ curl 10.100.226.216/blog/index/</span><br></pre></td></tr></table></figure>\n\n<p>为mysql服务创建service：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n<p>访问mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get svc mysql</span></span><br><span class=\"line\">NAME    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">mysql   ClusterIP   10.109.65.147   &lt;none&gt;        3306/TCP   4s</span><br><span class=\"line\"></span><br><span class=\"line\">root@k8s-master deployment]<span class=\"comment\"># curl 10.109.65.147:3306</span></span><br><span class=\"line\">5.7.33x</span><br><span class=\"line\">l^cj��!��i%m<span class=\"string\">&#x27;p|]6uE&lt;mysql_native_password!��#08S01Got packets out of order</span></span><br></pre></td></tr></table></figure>\n<p>目前使用hostNetwork部署，通过宿主机ip+port访问，弊端：</p>\n<ul>\n<li>服务使用hostNetwork，使得宿主机的端口大量暴漏，存在安全隐患</li>\n<li>容易引发端口冲突</li>\n</ul>\n<p>服务均属于k8s集群，尽可能使用k8s的网络访问，因此可以对目前myblog访问mysql的方式做改造：</p>\n<ul>\n<li>为mysql创建一个固定clusterIp的Service，把clusterIp配置在myblog的环境变量中</li>\n<li>利用集群服务发现的能力，组件之间通过service name来访问</li>\n</ul>\n<h4 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h4><p>在k8s集群中，组件之间可以通过定义的Service名称实现通信。</p>\n<p>演示服务发现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 演示思路：在myblog的容器中直接通过service名称访问服务，观察是否可以访问通</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先查看服务</span></span><br><span class=\"line\">$ kubectl -n demo get svc</span><br><span class=\"line\">NAME     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">myblog   ClusterIP   10.100.226.216   &lt;none&gt;        80/TCP     22m</span><br><span class=\"line\">mysql    ClusterIP   10.109.65.147    &lt;none&gt;        3306/TCP   7m4s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get pod -o wide</span></span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE   IP              NODE   </span><br><span class=\"line\">myblog-7fc47887f9-h5529   1/1     Running   1          45h   10.244.0.7      k8s-master  </span><br><span class=\"line\">myblog-7fc47887f9-k85mr   1/1     Running   1          45h   10.244.0.6      k8s-master </span><br><span class=\"line\">myblog-7fc47887f9-pc24g   1/1     Running   0          15m   10.244.0.8      k8s-master </span><br><span class=\"line\">myblog-7fc47887f9-v6qbf   1/1     Running   1          45h   10.244.0.5      k8s-master </span><br><span class=\"line\">mysql-5fcb655cc9-q48f9    1/1     Running   1          2d    192.168.56.20   k8s-slave1 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入myblog容器</span></span><br><span class=\"line\">$ kubectl -n demo <span class=\"built_in\">exec</span> -ti myblog-7fc47887f9-h5529 bash</span><br><span class=\"line\">[root@myblog-7fc47887f9-h5529 myblog]<span class=\"comment\"># curl mysql:3306</span></span><br><span class=\"line\">5.7.33�a@zCA\\;��!��&amp;&gt;Jn<span class=\"string\">&#x27;+L|emysql_native_password!��#08S01Got packets out of order</span></span><br><span class=\"line\"><span class=\"string\">[root@myblog-5c97d79cdb-j485f myblog]# curl myblog/blog/index/</span></span><br><span class=\"line\"><span class=\"string\">我的博客列表</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 查看容器内dns解析</span></span><br><span class=\"line\"><span class=\"string\">[root@myblog-7fc47887f9-h5529 myblog]# cat /etc/resolv.conf </span></span><br><span class=\"line\"><span class=\"string\">nameserver 10.96.0.10</span></span><br><span class=\"line\"><span class=\"string\">search demo.svc.cluster.local svc.cluster.local cluster.local www.tendawifi.com</span></span><br><span class=\"line\"><span class=\"string\">options ndots:5</span></span><br><span class=\"line\"><span class=\"string\">[root@myblog-7fc47887f9-h5529 myblog]# curl mysql.demo.svc.cluster.local:3306</span></span><br><span class=\"line\"><span class=\"string\">5.7.33sYx4mnio��!��;?Q&quot;bk3`&#123;o;\\mysql_native_password!��#08S01Got packets out of order #自动拼接的搜索域</span></span><br><span class=\"line\"><span class=\"string\">[root@myblog-7fc47887f9-h5529 myblog]# exit</span></span><br><span class=\"line\"><span class=\"string\">exit</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 问，这个dns是哪来的，凭什么他能提供k8s集群内的解析</span></span><br><span class=\"line\"><span class=\"string\">[root@k8s-master deployment]# kubectl -n kube-system get po | grep core</span></span><br><span class=\"line\"><span class=\"string\">coredns-58cc8c89f4-gnmdb             1/1     Running   7          15d</span></span><br><span class=\"line\"><span class=\"string\">coredns-58cc8c89f4-r9hlv             1/1     Running   7          15d</span></span><br><span class=\"line\"><span class=\"string\">实际上是k8s中的coredns组件在提供的服务</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 也是通过Service和ENDPOINTS能力对k8s内提供的服务访问</span></span><br><span class=\"line\"><span class=\"string\">[root@k8s-master deployment]# kubectl -n kube-system get svc</span></span><br><span class=\"line\"><span class=\"string\">NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE</span></span><br><span class=\"line\"><span class=\"string\">kube-dns   ClusterIP   10.96.0.10   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   15d</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然podip和clusterip都不固定，但是service name是固定的，而且具有完全的跨集群可移植性，因此组件之间调用的同时，完全可以通过service name去通信，这样避免了大量的ip维护成本，使得服务的yaml模板更加简单。因此可以对mysql和myblog的部署进行优化改造：</p>\n<ol>\n<li>mysql可以去掉hostNetwork部署，使得服务只暴漏在k8s集群内部网络</li>\n<li>configMap中数据库地址可以换成Service（LB）名称，这样跨环境的时候，配置内容基本上可以保持不用变化</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span> <span class=\"comment\">#定义资源的元数据信息</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span> <span class=\"comment\">#定义资源的名称，在同一个namespace空间中必须是唯一的</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span> <span class=\"comment\">#定义所属ns</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span>   <span class=\"comment\">#指定Pod副本数</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>     <span class=\"comment\">#指定Pod的选择器</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span>   <span class=\"comment\">#给Pod打label</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"comment\">#去掉此行      hostNetwork: true # 声明pod的网络模式为host模式，效果通docker run --net=host</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span> <span class=\"comment\">#容器持久化目录</span></span><br><span class=\"line\">        <span class=\"attr\">hostPath:</span> </span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/opt/mysql/data</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span>   <span class=\"comment\"># 使用节点选择器将Pod调度到指定label的节点</span></span><br><span class=\"line\">        <span class=\"attr\">component:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/mysql:5.7-utf8</span></span><br><span class=\"line\">        <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;--character-set-server=utf8&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;--collation-server=utf8_general_ci&quot;</span>    <span class=\"comment\">#  指定字符编码</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span> <span class=\"comment\">#暴露端口</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span> <span class=\"comment\">#获取ns内secret中定义的值</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_USER</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_USER</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_DATABASE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;myblog&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> <span class=\"comment\">#容器资源限制相关</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span> <span class=\"comment\">#容器健康检查相关</span></span><br><span class=\"line\">          <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span> <span class=\"comment\">#容器内挂载点</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br></pre></td></tr></table></figure>\n\n<p>修改configmap.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">MYSQL_HOST:</span> <span class=\"string\">&quot;mysql&quot;</span>\t<span class=\"comment\"># 此处替换为Service name</span></span><br><span class=\"line\">  <span class=\"attr\">MYSQL_PORT:</span> <span class=\"string\">&quot;3306&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 去除各容器污点</span></span><br><span class=\"line\">$ kubectl taint nodes k8s-master smoke-</span><br><span class=\"line\">node/k8s-master untainted</span><br><span class=\"line\">$ kubectl taint nodes k8s-slave1 drunk-</span><br><span class=\"line\">node/k8s-slave1 untainted</span><br><span class=\"line\">$ kubectl taint nodes k8s-slave2 perm-</span><br><span class=\"line\">node/k8s-slave2 untainted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 更新查看configmap</span></span><br><span class=\"line\">$ kubectl -n demo apply -f configmap.yaml</span><br><span class=\"line\">configmap/myblog unchanged</span><br><span class=\"line\">kubectl -n demo describe configmap myblog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 重建mysql</span></span><br><span class=\"line\">$ kubectl apply -f deploy-mysql.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 重新注入configmap到myblog</span></span><br><span class=\"line\">$ kubectl -n demo scale deploy myblog --replicas=0</span><br><span class=\"line\">$ kubectl -n demo scale deploy myblog --replicas=3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 验证</span></span><br><span class=\"line\">$ kubectl -n demo <span class=\"built_in\">exec</span> -it myblog-7fc47887f9-5wwxs bash</span><br><span class=\"line\">[root@myblog-7fc47887f9-5wwxs myblog]<span class=\"comment\"># env | grep MYSQL_HOST</span></span><br><span class=\"line\">MYSQL_HOST=mysql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务发现实现\"><a href=\"#服务发现实现\" class=\"headerlink\" title=\"服务发现实现\"></a>服务发现实现</h4><p> <code>CoreDNS</code>是一个<code>Go</code>语言实现的链式插件<code>DNS服务端</code>，是CNCF成员，是一个高性能、易扩展的<code>DNS服务端</code>。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl -n kube-system get po -o wide|grep dns</span><br><span class=\"line\">coredns-58cc8c89f4-gnmdb             1/1     Running   7          15d   10.244.2.50     k8s-slave1</span><br><span class=\"line\">coredns-58cc8c89f4-r9hlv             1/1     Running   7          15d   10.244.2.49     k8s-slave1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看myblog的pod解析配置</span></span><br><span class=\"line\"><span class=\"comment\"># 查看容器内dns解析</span></span><br><span class=\"line\">[root@myblog-7fc47887f9-h5529 myblog]<span class=\"comment\"># cat /etc/resolv.conf </span></span><br><span class=\"line\">nameserver 10.96.0.10</span><br><span class=\"line\">search demo.svc.cluster.local svc.cluster.local cluster.local www.tendawifi.com</span><br><span class=\"line\">options ndots:5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动拼接的搜索域</span></span><br><span class=\"line\">[root@myblog-7fc47887f9-h5529 myblog]<span class=\"comment\"># curl mysql.demo.svc.cluster.local:3306</span></span><br><span class=\"line\">5.7.33sYx4mnio��!��;?Q<span class=\"string\">&quot;bk3`&#123;o;\\mysql_native_password!��#08S01Got packets out of order </span></span><br><span class=\"line\"><span class=\"string\">[root@myblog-7fc47887f9-h5529 myblog]# exit</span></span><br><span class=\"line\"><span class=\"string\">exit</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">##  从哪来</span></span><br><span class=\"line\"><span class=\"string\">$ kubectl -n kube-system get svc</span></span><br><span class=\"line\"><span class=\"string\">NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE</span></span><br><span class=\"line\"><span class=\"string\">kube-dns   ClusterIP   10.96.0.10   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   15d</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 启动pod的时候，会把kube-dns服务的cluster-ip地址注入到pod的resolve解析配置中，同时添加对应的namespace的search域。 因此跨namespace通过service name访问的话，需要添加对应的namespace名称，匹配第二个搜索域svc.cluster.local</span></span><br><span class=\"line\"><span class=\"string\">service_name.namespace_name</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 例如访问k8s系统级别的Service服务</span></span><br><span class=\"line\"><span class=\"string\">[root@k8s-master deployment]# kubectl describe svc </span></span><br><span class=\"line\"><span class=\"string\">Name:              kubernetes</span></span><br><span class=\"line\"><span class=\"string\">Namespace:         default</span></span><br><span class=\"line\"><span class=\"string\">Labels:            component=apiserver</span></span><br><span class=\"line\"><span class=\"string\">                   provider=kubernetes</span></span><br><span class=\"line\"><span class=\"string\">Annotations:       &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"string\">Selector:          &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"string\">Type:              ClusterIP</span></span><br><span class=\"line\"><span class=\"string\">IP:                10.96.0.1</span></span><br><span class=\"line\"><span class=\"string\">Port:              https  443/TCP</span></span><br><span class=\"line\"><span class=\"string\">TargetPort:        6443/TCP</span></span><br><span class=\"line\"><span class=\"string\">Endpoints:         192.168.56.10:6443</span></span><br><span class=\"line\"><span class=\"string\">Session Affinity:  None</span></span><br><span class=\"line\"><span class=\"string\">Events:            &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 跨namespace访问Service</span></span><br><span class=\"line\"><span class=\"string\">[root@myblog-7fc47887f9-5wwxs myblog]# curl https://kubernetes</span></span><br><span class=\"line\"><span class=\"string\">curl: (6) Could not resolve host: kubernetes; Unknown error</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[root@myblog-7fc47887f9-5wwxs myblog]# curl -k https://kubernetes.default</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;</span>kind<span class=\"string\">&quot;: &quot;</span>Status<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;</span>apiVersion<span class=\"string\">&quot;: &quot;</span>v1<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;</span>metadata<span class=\"string\">&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;</span>status<span class=\"string\">&quot;: &quot;</span>Failure<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;</span>message<span class=\"string\">&quot;: &quot;</span>forbidden: User \\&quot;system:anonymous\\&quot; cannot get path \\&quot;/\\&quot;<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;</span>reason<span class=\"string\">&quot;: &quot;</span>Forbidden<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;</span>details<span class=\"string\">&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;</span>code<span class=\"string\">&quot;: 403</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Service负载均衡-NodePort\"><a href=\"#Service负载均衡-NodePort\" class=\"headerlink\" title=\"Service负载均衡/NodePort\"></a>Service负载均衡/NodePort</h4><p>cluster-ip为虚拟地址，只能在k8s集群内部进行访问，集群外部如果访问内部服务，实现方式之一为使用NodePort方式。NodePort会默认在 30000-32767 ，不指定的会随机使用其中一个。</p>\n<p><code>myblog/deployment/svc-myblog-nodeport.yaml</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: myblog<span class=\"literal\">-np</span></span><br><span class=\"line\">  namespace: demo</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: <span class=\"number\">80</span></span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: <span class=\"number\">8002</span></span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: myblog</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: NodePort</span><br></pre></td></tr></table></figure>\n\n<p>查看并访问服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl -n demo create -f svc-myblog-nodeport.yaml</span><br><span class=\"line\">service/myblog-np created</span><br><span class=\"line\">$ [root@k8s-master deployment]<span class=\"comment\"># kubectl -n demo get svc</span></span><br><span class=\"line\">NAME        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">myblog      ClusterIP   10.100.226.216   &lt;none&gt;        80/TCP         87m</span><br><span class=\"line\">myblog-np   NodePort    10.103.170.13    &lt;none&gt;        80:31728/TCP   16s</span><br><span class=\"line\">mysql       ClusterIP   10.109.65.147    &lt;none&gt;        3306/TCP       72m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#集群内每个节点的NodePort端口都会进行监听</span></span><br><span class=\"line\">[root@k8s-master deployment]<span class=\"comment\"># netstat -lntup | grep 31728</span></span><br><span class=\"line\">tcp6       0      0 :::31728                :::*                    LISTEN      3179/kube-proxy </span><br><span class=\"line\">[root@k8s-slave1 ~]<span class=\"comment\"># netstat -lntup | grep 31728</span></span><br><span class=\"line\">tcp6       0      0 :::31728                :::*                    LISTEN      2339/kube-proxy</span><br><span class=\"line\">[root@k8s-slave2 ~]<span class=\"comment\"># netstat -lntup | grep 31728</span></span><br><span class=\"line\">tcp6       0      0 :::31728                :::*                    LISTEN      1909/kube-proxy</span><br></pre></td></tr></table></figure>\n<p><strong>浏览器访问</strong><br><img src=\"/images/pasted-49.png\" alt=\"upload successful\"></p>\n<h4 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy\"></a>kube-proxy</h4><p>运行在每个节点上，监听 API Server 中服务对象的变化，再通过创建流量路由规则来实现网络的转发。<a href=\"https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\">参照</a></p>\n<p>参见：<a href=\"https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\">官方文档</a></p>\n<p>有三种模式：</p>\n<ul>\n<li>User space, 让 Kube-Proxy 在用户空间监听一个端口，所有的 Service 都转发到这个端口，然后 Kube-Proxy 在内部应用层对其进行转发 ， 所有报文都走一遍用户态，性能不高，k8s v1.2版本后废弃。</li>\n<li>Iptables， 当前默认模式，完全由 IPtables 来实现， 通过各个node节点上的iptables规则来实现service的负载均衡，但是随着service数量的增大，iptables模式由于线性查找匹配、全量更新等特点，其性能会显著下降。 </li>\n<li>IPVS， 与iptables同样基于Netfilter，但是采用的hash表，因此当service数量达到一定规模时，hash查表的速度优势就会显现出来，从而提高service的服务性能。 k8s 1.8版本开始引入，1.11版本开始稳定，需要开启宿主机的ipvs模块。</li>\n</ul>\n<p>iptables模式示意图：<br><img src=\"/images/pasted-50.png\" alt=\"iptables\"></p>\n<p>流量转发路径抓取</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ iptables-save |grep -v myblog-np|grep  <span class=\"string\">&quot;demo/myblog&quot;</span></span><br><span class=\"line\">-A KUBE-SERVICES ! -s 10.244.0.0/16 -d 10.100.226.216/32 -p tcp -m comment --comment <span class=\"string\">&quot;demo/myblog: cluster IP&quot;</span> -m tcp --dport 80 -j KUBE-MARK-MASQ</span><br><span class=\"line\">-A KUBE-SERVICES -d 10.100.226.216/32 -p tcp -m comment --comment <span class=\"string\">&quot;demo/myblog: cluster IP&quot;</span> -m tcp --dport 80 -j KUBE-SVC-WQNGJ7YFZKCTKPZK</span><br><span class=\"line\"></span><br><span class=\"line\">$ iptables-save |grep KUBE-SVC-WQNGJ7YFZKCTKPZK</span><br><span class=\"line\">:KUBE-SVC-WQNGJ7YFZKCTKPZK - [0:0]</span><br><span class=\"line\">-A KUBE-SERVICES -d 10.100.226.216/32 -p tcp -m comment --comment <span class=\"string\">&quot;demo/myblog: cluster IP&quot;</span> -m tcp --dport 80 -j KUBE-SVC-WQNGJ7YFZKCTKPZK</span><br><span class=\"line\">-A KUBE-SVC-WQNGJ7YFZKCTKPZK -m statistic --mode random --probability 0.33332999982 -j KUBE-SEP-3T3R7W52EDXE5YWP</span><br><span class=\"line\">-A KUBE-SVC-WQNGJ7YFZKCTKPZK -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-4P46YSTS2B3EDKRW</span><br><span class=\"line\">-A KUBE-SVC-WQNGJ7YFZKCTKPZK -j KUBE-SEP-RZRWFU3D4FSY742B</span><br><span class=\"line\"></span><br><span class=\"line\">$ iptables-save |grep KUBE-SEP-4P46YSTS2B3EDKRW</span><br><span class=\"line\">:KUBE-SEP-4P46YSTS2B3EDKRW - [0:0]</span><br><span class=\"line\">-A KUBE-SEP-4P46YSTS2B3EDKRW -s 10.244.1.22/32 -j KUBE-MARK-MASQ</span><br><span class=\"line\">-A KUBE-SEP-4P46YSTS2B3EDKRW -p tcp -m tcp -j DNAT --to-destination 10.244.1.22:8002</span><br><span class=\"line\">-A KUBE-SVC-WQNGJ7YFZKCTKPZK -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-4P46YSTS2B3EDKRW</span><br><span class=\"line\"></span><br><span class=\"line\">$ iptables-save |grep  KUBE-SEP-3T3R7W52EDXE5YWP</span><br><span class=\"line\">:KUBE-SEP-3T3R7W52EDXE5YWP - [0:0]</span><br><span class=\"line\">-A KUBE-SEP-3T3R7W52EDXE5YWP -s 10.244.0.9/32 -j KUBE-MARK-MASQ</span><br><span class=\"line\">-A KUBE-SEP-3T3R7W52EDXE5YWP -p tcp -m tcp -j DNAT --to-destination 10.244.0.9:8002</span><br><span class=\"line\">-A KUBE-SVC-WQNGJ7YFZKCTKPZK -m statistic --mode random --probability 0.33332999982 -j KUBE-SEP-3T3R7W52EDXE5YWP</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ingress服务访问\"><a href=\"#Ingress服务访问\" class=\"headerlink\" title=\"Ingress服务访问\"></a>Ingress服务访问</h3><p>对于Kubernetes的Service，无论是Cluster-Ip和NodePort均是四层的负载，集群内的服务如何实现七层的负载均衡，这就需要借助于Ingress，Ingress控制器的实现方式有很多，比如nginx, Contour, Haproxy, trafik, Istio，我们以nginx的实现为例做演示。</p>\n<p>Ingress-nginx是7层的负载均衡器 ，负责统一管理外部对k8s cluster中service的请求。主要包含：</p>\n<ul>\n<li>ingress-nginx-controller：根据用户编写的ingress规则（创建的ingress的yaml文件），动态的去更改nginx服务的配置文件，并且reload重载使其生效（是自动化的，通过lua脚本来实现）；</li>\n<li>ingress资源对象：将Nginx的配置抽象成一个Ingress对象，每添加一个新的Service资源对象只需写一个新的Ingress规则的yaml文件即可（或修改已存在的ingress规则的yaml文件）</li>\n</ul>\n<p>示意图：<br><img src=\"/images/pasted-51.png\" alt=\"Ingress\"></p>\n<h4 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h4><ol>\n<li>ingress controller通过和kubernetes api交互，动态的去感知集群中ingress规则变化</li>\n<li>然后读取ingress规则(规则就是写明了哪个域名对应哪个service)，按照自定义的规则，生成一段nginx配置</li>\n<li>再写到nginx-ingress-controller的pod里，这个Ingress controller的pod里运行着一个Nginx服务，控制器把生成的nginx配置写入/etc/nginx.conf文件中</li>\n<li>然后reload一下使配置生效。以此达到域名分别配置和动态更新的问题。</li>\n</ol>\n<h4 id=\"Ingress安装\"><a href=\"#Ingress安装\" class=\"headerlink\" title=\"Ingress安装\"></a>Ingress安装</h4><p>参见：<a href=\"https://github.com/kubernetes/ingress-nginx/blob/master/docs/deploy/index.md\">官方文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#这里我们将Ingres调度到 slave1（192.168.56.20）部署</span></span><br><span class=\"line\"><span class=\"comment\"># 给slave2打上对应的标签</span></span><br><span class=\"line\">$ kubectl label node k8s-slave1 ingress=<span class=\"literal\">true</span></span><br><span class=\"line\">node/k8s-slave1 labeled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml</span><br><span class=\"line\">或者使用myblog/deployment/ingress/mandatory.yaml</span><br><span class=\"line\">...</span><br><span class=\"line\">212     spec:</span><br><span class=\"line\">213       hostNetwork: <span class=\"literal\">true</span> <span class=\"comment\">#添加为host模式</span></span><br><span class=\"line\">214       <span class=\"comment\"># wait up to five minutes for the drain of connections</span></span><br><span class=\"line\">215       terminationGracePeriodSeconds: 300</span><br><span class=\"line\">216       serviceAccountName: nginx-ingress-serviceaccount</span><br><span class=\"line\">217       nodeSelector:</span><br><span class=\"line\">218         ingress: <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">219       containers:</span><br><span class=\"line\">...</span><br><span class=\"line\">安装ingress</span><br><span class=\"line\">$ kubectl create -f mandatory.yaml</span><br><span class=\"line\">$ kubectl -n ingress-nginx get po -o wide</span><br><span class=\"line\">NAME                                       READY   STATUS    RESTARTS   AGE   IP              NODE</span><br><span class=\"line\">nginx-ingress-controller-766b7d9f4-bprq8   1/1     Running   0          7s    192.168.56.20   k8s-slave1 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加ingress对象</span></span><br><span class=\"line\">$ vi myblog/deployment/ingress.yaml</span><br><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: myblog</span><br><span class=\"line\">  namespace: demo</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: test.cakepanit.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - path: /</span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          serviceName: myblog</span><br><span class=\"line\">          servicePort: 80</span><br><span class=\"line\">$ kubectl create -f ingress.yaml </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改本机hosts（mac系统）</span></span><br><span class=\"line\">$ felix@MacBook ~ % sudo vim /etc/hosts</span><br><span class=\"line\">Password:</span><br><span class=\"line\">felix@MacBook ~ % <span class=\"built_in\">cat</span> /etc/hosts</span><br><span class=\"line\">192.168.56.20 test.cakepanit.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h4><p><img src=\"/images/pasted-52.png\" alt=\"test\"></p>\n<p>ingress-nginx动态生成upstream配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl -n ingress-nginx get po</span><br><span class=\"line\">$ kubectl -n ingress-nginx <span class=\"built_in\">exec</span> -it nginx-ingress-controller-766b7d9f4-bprq8 bash</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> nginx.conf</span><br><span class=\"line\">...</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">                server_name test.cakepanit.com ;</span><br><span class=\"line\"></span><br><span class=\"line\">                listen 80  ;</span><br><span class=\"line\">                listen [::]:80  ;</span><br><span class=\"line\">                listen 443  ssl http2 ;</span><br><span class=\"line\">                listen [::]:443  ssl http2 ;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">set</span> <span class=\"variable\">$proxy_upstream_name</span> <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                ssl_certificate_by_lua_block &#123;</span><br><span class=\"line\">                        certificate.call()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                location / &#123;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>HTTPS访问：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#自签名证书</span></span><br><span class=\"line\">$ openssl req -x509 -nodes -days 2920 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj <span class=\"string\">&quot;/CN=*.devops.cn/O=ingress-nginx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 证书信息保存到secret对象中，ingress-nginx会读取secret对象解析出证书加载到nginx配置中</span></span><br><span class=\"line\">$ kubectl -n demo create secret tls https-secret --key tls.key --cert tls.crt </span><br></pre></td></tr></table></figure>\n\n<p>修改yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog-tls</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">test.cakepanit.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">tls:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">test.cakepanit.com</span></span><br><span class=\"line\">    <span class=\"attr\">secretName:</span> <span class=\"string\">https-secret</span></span><br></pre></td></tr></table></figure>\n<p>然后，访问 <a href=\"https://test.cakepanit.com/admin/\">https://test.cakepanit.com/admin/</a><br>```</p>\n","categories":["OPS"],"tags":["OPS","Kubernetes","服务发现"]},{"title":"Debian 12 ISO镜像无人应答安装","url":"/forward/8ed285a0.html","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p><strong>preseed</strong>是<strong>Debian</strong>和<strong>Ubuntu</strong>操作系统中用于自动化安装过程的一种方式。通过编写一个包含预定义答案的配置文件（称为<strong>preseed</strong>文件），可以在安装过程中自动回答安装程序的各种问题，从而实现无人值守或自定义化的安装。<strong>preseed</strong>文件包含了安装过程中可能涉及到的各种问题的答案，比如语言选择、时区设置、分区方案、软件包选择、用户账户等等。</p>\n<p>使用<strong>preseed</strong>可以大大简化大规模部署系统的过程，提高效率并减少可能出错的几率。结合<strong>genisoimage</strong>等工具，可以将<strong>preseed</strong>文件与安装介质打包在一起，以便进行自动化安装。这样就能够轻松地实现定制化安装，节省时间和精力。</p>\n<p><strong>2024-04-09:文档更新</strong><br>更新内容：</p>\n<ul>\n<li>如何替换官版iso镜像内核为自定义内核（可选）</li>\n<li>如何为官版iso镜像注入指定的硬件驱动（可选）</li>\n</ul>\n<h1 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt -y install genisoimage</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake]<span class=\"comment\"># wget https://mirrors.huaweicloud.com/repository/debian-cd/12.0.0/amd64/iso-cd/debian-12.0.0-amd64-netinst.iso</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake]<span class=\"comment\"># mount debian-12.0.0-amd64-netinst.iso mnt/</span></span><br><span class=\"line\">mount: /dev/loop0 is write-protected, mounting read-only</span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake]<span class=\"comment\"># tree ./ -L 2</span></span><br><span class=\"line\">./</span><br><span class=\"line\">├── debian-12.0.0-amd64-netinst.iso</span><br><span class=\"line\">├── isofiles</span><br><span class=\"line\">└── mnt</span><br><span class=\"line\">    ├── boot</span><br><span class=\"line\">    ├── css</span><br><span class=\"line\">    ├── debian -&gt; .</span><br><span class=\"line\">    ├── dists</span><br><span class=\"line\">    ├── doc</span><br><span class=\"line\">    ├── EFI</span><br><span class=\"line\">    ├── firmware</span><br><span class=\"line\">    ├── install</span><br><span class=\"line\">    ├── install.amd</span><br><span class=\"line\">    ├── isolinux</span><br><span class=\"line\">    ├── md5sum.txt</span><br><span class=\"line\">    ├── pics</span><br><span class=\"line\">    ├── pool</span><br><span class=\"line\">    ├── README.html</span><br><span class=\"line\">    ├── README.mirrors.html</span><br><span class=\"line\">    ├── README.mirrors.txt</span><br><span class=\"line\">    ├── README.<span class=\"built_in\">source</span></span><br><span class=\"line\">    └── README.txt</span><br></pre></td></tr></table></figure>\n<h1 id=\"编辑镜像\"><a href=\"#编辑镜像\" class=\"headerlink\" title=\"编辑镜像\"></a>编辑镜像</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake]<span class=\"comment\"># cp -rT mnt/ isofiles/</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake]<span class=\"comment\"># ls isofiles/</span></span><br><span class=\"line\">boot  debian  doc  firmware  install.amd  md5sum.txt  pool         README.mirrors.html  README.<span class=\"built_in\">source</span></span><br><span class=\"line\">css   dists   EFI  install   isolinux     pics        README.html  README.mirrors.txt   README.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加预设文件\"><a href=\"#添加预设文件\" class=\"headerlink\" title=\"添加预设文件\"></a>添加预设文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles]<span class=\"comment\"># cat conf/auto.preseed  </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 本地化</span></span><br><span class=\"line\"><span class=\"comment\"># 中文</span></span><br><span class=\"line\">d-i debian-installer/locale string zh_CN.UTF-8</span><br><span class=\"line\">d-i keyboard-configuration/xkb-keymap select us</span><br><span class=\"line\">d-i localechooser/supported-locales multiselect en_US.UTF-8, zh_CN.UTF-8</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 网络</span></span><br><span class=\"line\">d-i netcfg/choose_interface select auto</span><br><span class=\"line\">d-i netcfg/enable boolean <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#d-i netcfg/disable_autoconfig boolean true</span></span><br><span class=\"line\"><span class=\"comment\">#d-i netcfg/confirm_static boolean true</span></span><br><span class=\"line\"><span class=\"comment\">#d-i netcfg/get_ipaddress string 192.168.10.20</span></span><br><span class=\"line\"><span class=\"comment\">#d-i netcfg/get_netmask string 255.255.255.0</span></span><br><span class=\"line\"><span class=\"comment\">#d-i netcfg/get_gateway string 192.168.10.1</span></span><br><span class=\"line\"><span class=\"comment\">#d-i netcfg/get_nameservers string 8.8.8.8</span></span><br><span class=\"line\">d-i netcfg/get_hostname string debian</span><br><span class=\"line\">d-i netcfg/get_domain string</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### Network console</span></span><br><span class=\"line\"><span class=\"comment\">#d-i anna/choose_modules string network-console</span></span><br><span class=\"line\"><span class=\"comment\">#d-i network-console/password password passwd</span></span><br><span class=\"line\"><span class=\"comment\">#d-i network-console/password-again password passwd</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### Mirror</span></span><br><span class=\"line\">d-i mirror/country string manual</span><br><span class=\"line\">d-i mirror/http/hostname string mirrors.aliyun.com</span><br><span class=\"line\">d-i mirror/http/directory string /debian</span><br><span class=\"line\">d-i mirror/http/proxy string</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### Account setup</span></span><br><span class=\"line\"><span class=\"comment\">#d-i passwd/root-login boolean false</span></span><br><span class=\"line\"><span class=\"comment\">#d-i passwd/user-fullname string VDI</span></span><br><span class=\"line\"><span class=\"comment\">#d-i passwd/username string vdi</span></span><br><span class=\"line\"><span class=\"comment\">#d-i passwd/user-password-crypted password $6$tqS.VkgdFyXhE7Zd$gAbPpQ.fD8Zb0A3AjDuWzfYuwNntQ9fUHHqCmjmthNyIGbdfKCdrtgEi4hfuaZulx16BTuGMbvNe4K/v/B58Q/</span></span><br><span class=\"line\">d-i passwd/root-login boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i passwd/make-user boolean <span class=\"literal\">false</span></span><br><span class=\"line\">d-i passwd/root-password password 123456</span><br><span class=\"line\">d-i passwd/root-password-again password 123456</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 时区</span></span><br><span class=\"line\">d-i clock-setup/utc boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i time/zone string Asia/Shanghai</span><br><span class=\"line\">d-i clock-setup/ntp boolean <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### 分区</span></span><br><span class=\"line\">d-i partman-auto/disk string /dev/[sv]da</span><br><span class=\"line\"><span class=\"comment\"># 用第一块盘来操作分区</span></span><br><span class=\"line\"><span class=\"comment\">#d-i partman/early_command string \\</span></span><br><span class=\"line\"><span class=\"comment\">#       ONEDISK=&quot;$(lsblk -l -n -o NAME -d -p | grep &#x27;/dev/vda\\|/dev/nvme0n1\\|/dev/sda\\|/dev/xvda&#x27;|sort|tail -n 1)&quot;; \\</span></span><br><span class=\"line\"><span class=\"comment\">#       debconf-set partman-auto/disk &quot;$ONEDISK&quot;; \\</span></span><br><span class=\"line\"><span class=\"comment\">#       debconf-set grub-installer/bootdev &quot;$ONEDISK&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"># 常规分区</span></span><br><span class=\"line\">d-i partman-auto/method string regular</span><br><span class=\"line\"><span class=\"comment\"># 禁止swap分区</span></span><br><span class=\"line\">d-i partman-basicfilesystems/no_swap boolean <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 如果硬盘内之前有lvm或是raid的分区，全部删除</span></span><br><span class=\"line\">d-i partman-lvm/device_remove_lvm boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i partman-md/device_remove_md boolean <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 分区，一个boot分区最小512M，1优先级，最大1024M</span></span><br><span class=\"line\">d-i partman-auto/expert_recipe string                    \\</span><br><span class=\"line\">      boot-root ::                                       \\</span><br><span class=\"line\">              512 1 1024 ext4                            \\</span><br><span class=\"line\">                 <span class=\"variable\">$primary</span>&#123; &#125; <span class=\"variable\">$bootable</span>&#123; &#125;                \\</span><br><span class=\"line\">                 method&#123; format &#125; format&#123; &#125;              \\</span><br><span class=\"line\">                 use_filesystem&#123; &#125; filesystem&#123; ext4 &#125;    \\</span><br><span class=\"line\">                 mountpoint&#123; /boot &#125;                     \\</span><br><span class=\"line\">              .                                          \\</span><br><span class=\"line\">              1 2 -1 xfs                             \\</span><br><span class=\"line\">                  method&#123; format &#125; format&#123; &#125;             \\</span><br><span class=\"line\">                  use_filesystem&#123; &#125; filesystem&#123; xfs &#125;    \\</span><br><span class=\"line\">                  mountpoint&#123; / &#125;                        \\</span><br><span class=\"line\">              .                                         </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 非交互式完成分区</span></span><br><span class=\"line\"><span class=\"comment\">## 确认是否写入新的分区标签。设置为&quot;true&quot;表示允许写入新的分区标签。</span></span><br><span class=\"line\">d-i partman-partitioning/confirm_write_new_label boolean <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">## 安装程序在选择分区时选择“完成”选项，即跳过手动选择分区的步骤。</span></span><br><span class=\"line\">d-i partman/choose_partition select finish</span><br><span class=\"line\"><span class=\"comment\">## 确认分区的操作。设置为&quot;true&quot;表示允许自动确认分区操作。</span></span><br><span class=\"line\">d-i partman/confirm boolean <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">## 确认是否覆盖分区。设置为&quot;true&quot;表示允许自动确认分区操作</span></span><br><span class=\"line\">d-i partman/confirm_nooverwrite boolean <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### Apt setup</span></span><br><span class=\"line\"><span class=\"comment\"># 不启用非自由（non-free）软件包源。</span></span><br><span class=\"line\">d-i apt-setup/non-free boolean <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 启用贡献（contrib）软件包源。</span></span><br><span class=\"line\">d-i apt-setup/contrib boolean <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 选择了主要（main）软件包源，以确保安装基本软件。</span></span><br><span class=\"line\">d-i apt-setup/services-select multiselect main</span><br><span class=\"line\"><span class=\"comment\"># 允许在安装过程中使用未经身份验证的软件包源。</span></span><br><span class=\"line\">d-i debian-installer/allow_unauthenticated boolean <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 光盘相关</span></span><br><span class=\"line\">d-i apt-setup/cdrom/set-first boolean <span class=\"literal\">false</span></span><br><span class=\"line\">d-i apt-setup/cdrom/set-next boolean <span class=\"literal\">false</span>  </span><br><span class=\"line\">d-i apt-setup/cdrom/set-failed boolean <span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### Package selection</span></span><br><span class=\"line\"><span class=\"comment\"># 标准安装</span></span><br><span class=\"line\">tasksel tasksel/first multiselect standard</span><br><span class=\"line\">d-i pkgsel/upgrade select none</span><br><span class=\"line\">d-i pkgsel/language-packs multiselect en, zh</span><br><span class=\"line\">d-i pkgsel/include string openssh-server</span><br><span class=\"line\">d-i pkgsel/update-policy select none</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 禁止在安装的时候弹出popularity</span></span><br><span class=\"line\">popularity-contest popularity-contest/participate boolean <span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">### Boot loader installation</span></span><br><span class=\"line\">d-i grub-installer/only_debian boolean <span class=\"literal\">true</span></span><br><span class=\"line\">d-i grub-installer/bootdev string /dev/[sv]da</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 安装完成之后不要弹出安装完成的界面，直接重启</span></span><br><span class=\"line\">d-i finish-install/reboot_in_progress note</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 允许ssh服务使用root用户登录</span></span><br><span class=\"line\">d-i preseed/late_command string in-target sed -i <span class=\"string\">&#x27;s/#PermitRootLogin.*/PermitRootLogin yes/g&#x27;</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改启动\"><a href=\"#修改启动\" class=\"headerlink\" title=\"修改启动\"></a>修改启动</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 背景图修改</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake]<span class=\"comment\"># ls -l isofiles/isolinux/splash.png</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles]<span class=\"comment\"># cp isolinux/gtk.cfg isolinux/gtk_auto.cfg</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 去掉默认选项</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles]<span class=\"comment\"># vim isolinux/gtk.cfg</span></span><br><span class=\"line\">label installgui</span><br><span class=\"line\">        menu label ^Graphical install</span><br><span class=\"line\">        kernel /install.amd/vmlinuz</span><br><span class=\"line\">        append vga=788 initrd=/install.amd/gtk/initrd.gz --- quiet</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 添加表单选项</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles]<span class=\"comment\"># vim isolinux/gtk_auto.cfg</span></span><br><span class=\"line\">default autoinstallgui</span><br><span class=\"line\">label autoinstallgui</span><br><span class=\"line\">        menu label ^Auto Install</span><br><span class=\"line\">        menu default</span><br><span class=\"line\">        kernel /install.amd/vmlinuz</span><br><span class=\"line\">        append vga=788 initrd=/install.amd/gtk/initrd.gz auto=<span class=\"literal\">true</span> file=/cdrom/conf/auto.preseed --- quiet</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">timeout</span> 10</span><br><span class=\"line\"> </span><br><span class=\"line\">ontimeout /install.amd/vmlinuz vga=788 initrd=/install.amd/gtk/initrd.gz auto=<span class=\"literal\">true</span> file=/cdrom/conf/auto.preseed --- quiet</span><br><span class=\"line\"> </span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles/isolinux]<span class=\"comment\"># vim isolinux/menu.cfg</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles/isolinux]<span class=\"comment\"># cat menu.cfg</span></span><br><span class=\"line\">menu hshift 4</span><br><span class=\"line\">menu width 70</span><br><span class=\"line\"> </span><br><span class=\"line\">menu title Bli Debian 12 Installer (BIOS mode)</span><br><span class=\"line\">include stdmenu.cfg</span><br><span class=\"line\">include gtk_auto.cfg <span class=\"comment\">#加这一行</span></span><br><span class=\"line\">include gtk.cfg</span><br><span class=\"line\">include txt.cfg</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 删掉默认超时配置</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake]<span class=\"comment\"># rm -rf isofiles/isolinux/spkgtk.cfg</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改内核为自研内核（可选）\"><a href=\"#修改内核为自研内核（可选）\" class=\"headerlink\" title=\"修改内核为自研内核（可选）\"></a>修改内核为自研内核（可选）</h1><p>这里为B站内部自研内核不方便挂链接，可以替换为你们自己编译的内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake]<span class=\"comment\"># mkdir kernel</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake]<span class=\"comment\"># cd kernel/</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/kernel]<span class=\"comment\">#</span></span><br><span class=\"line\">wget http://mirrors.bilixxx.xxx/debian-custom/pool/main-stretch/l/linux/5.10.0-103/linux-headers-5.10.0-103-bili_20220321162725-96b29d4680e3_amd64.deb</span><br><span class=\"line\">wget http://mirrors.bilixxx.xxx/debian-custom/pool/main-stretch/l/linux/5.10.0-103/linux-image-5.10.0-103-bili_20220321162725-96b29d4680e3_amd64.deb</span><br><span class=\"line\">wget http://mirrors.bilixxx.xxx/debian-custom/pool/main-stretch/l/linux/5.10.0-103/linux-libc-dev_20220321162725-96b29d4680e3_amd64.deb</span><br><span class=\"line\">wget http://mirrors.bilixxx.xxx/debian-custom/pool/main-stretch/l/linux/5.10.0-103/linux-tools-5.10.0-103-bili_20220321162725-96b29d4680e3_amd64.deb</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 重命名</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/kernel]<span class=\"comment\"># ls</span></span><br><span class=\"line\">linux-headers-5.10.0-103-bili_amd64.deb  linux-image-5.10.0-103-bili_amd64.deb  linux-libc-dev_amd64.deb  linux-tools-5.10.0-103-bili_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除替换镜像内原内核\"><a href=\"#删除替换镜像内原内核\" class=\"headerlink\" title=\"删除替换镜像内原内核\"></a>删除替换镜像内原内核</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 原内核</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/kernel]<span class=\"comment\"># ls ../isofiles/pool/main/l/linux/</span></span><br><span class=\"line\">linux-compiler-gcc-12-x86_6.1.27-1_amd64.deb    linux-headers-6.1.0-9-common_6.1.27-1_all.deb  linux-libc-dev_6.1.27-1_amd64.deb</span><br><span class=\"line\">linux-headers-6.1.0-9-amd64_6.1.27-1_amd64.deb  linux-kbuild-6.1_6.1.27-1_amd64.deb</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 删除原内核</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/kernel]<span class=\"comment\"># rm -rf ../isofiles/pool/main/l/linux/*</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/kernel]<span class=\"comment\"># ls ../isofiles/pool/main/l/linux/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 拷贝自研内核</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/kernel]<span class=\"comment\"># cp ./* ../isofiles/pool/main/l/linux/</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/kernel]<span class=\"comment\"># ls ../isofiles/pool/main/l/linux/</span></span><br><span class=\"line\">linux-headers-5.10.0-103-bili_amd64.deb  linux-image-5.10.0-103-bili_amd64.deb  linux-libc-dev_amd64.deb  linux-tools-5.10.0-103-bili_amd64.deb</span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/kernel]<span class=\"comment\"># ls -l ../isofiles/pool/main/l/linux/</span></span><br><span class=\"line\">total 65384</span><br><span class=\"line\">-rw-r--r-- 1 root root  8021830 Apr  7 17:52 linux-headers-5.10.0-103-bili_amd64.deb</span><br><span class=\"line\">-rw-r--r-- 1 root root 52777856 Apr  7 17:52 linux-image-5.10.0-103-bili_amd64.deb</span><br><span class=\"line\">-rw-r--r-- 1 root root  1138684 Apr  7 17:52 linux-libc-dev_amd64.deb</span><br><span class=\"line\">-rw-r--r-- 1 root root  5006500 Apr  7 17:52 linux-tools-5.10.0-103-bili_amd64.deb</span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/kernel]<span class=\"comment\"># cd ../isofiles/pool/main/l/linux/</span></span><br><span class=\"line\"> </span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles/pool/main/l/linux]<span class=\"comment\"># chmod 555 ./*</span></span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles/pool/main/l/linux]<span class=\"comment\"># ls -l</span></span><br><span class=\"line\">total 65384</span><br><span class=\"line\">-r-xr-xr-x 1 root root  8021830 Apr  7 17:52 linux-headers-5.10.0-103-bili_amd64.deb</span><br><span class=\"line\">-r-xr-xr-x 1 root root 52777856 Apr  7 17:52 linux-image-5.10.0-103-bili_amd64.deb</span><br><span class=\"line\">-r-xr-xr-x 1 root root  1138684 Apr  7 17:52 linux-libc-dev_amd64.deb</span><br><span class=\"line\">-r-xr-xr-x 1 root root  5006500 Apr  7 17:52 linux-tools-5.10.0-103-bili_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更改官版iso镜像安装的目标内核\"><a href=\"#更改官版iso镜像安装的目标内核\" class=\"headerlink\" title=\"更改官版iso镜像安装的目标内核\"></a>更改官版iso镜像安装的目标内核</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles/pool/main/l/linux-signed-amd64]# rm -rf linux-image-6.1.0-9-amd64_6.1.27-1_amd64.deb</span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles/pool/main/l/linux-signed-amd64]# mkdir ./linux-image ./linux-headers</span><br><span class=\"line\"> </span><br><span class=\"line\"># 宿主机为centos 没有dpkg 这里用docker启动一个debian镜像继续操作</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64# ls</span><br><span class=\"line\">btrfs-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb          mtd-core-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">crc-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb            multipath-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">crypto-dm-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb      nbd-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">crypto-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb         nic-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">efi-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb            nic-pcmcia-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">event-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb          nic-shared-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">ext4-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb           nic-usb-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">f2fs-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb           nic-wireless-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">firewire-core-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb  pata-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">fuse-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb           pcmcia-storage-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">i2c-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb            ppp-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">jfs-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb            rfkill-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">linux-headers                                               scsi-nic-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">linux-headers-amd64_6.1.27-1_amd64.deb                      sound-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">linux-image                                                 squashfs-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">linux-image-amd64_6.1.27-1_amd64.deb                        udf-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">loop-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb           uinput-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">md-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb             xfs-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\">mmc-core-modules-6.1.0-9-amd64-di_6.1.27-1_amd64.udeb</span><br><span class=\"line\"> </span><br><span class=\"line\"># 解压包</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64# dpkg -X linux-image-amd64_6.1.27-1_amd64.deb linux-image</span><br><span class=\"line\">./</span><br><span class=\"line\">./usr/</span><br><span class=\"line\">./usr/share/</span><br><span class=\"line\">./usr/share/bug/</span><br><span class=\"line\">./usr/share/bug/linux-image-amd64/</span><br><span class=\"line\">./usr/share/bug/linux-image-amd64/presubj</span><br><span class=\"line\">./usr/share/doc/</span><br><span class=\"line\">./usr/share/doc/linux-image-amd64</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64# dpkg -X linux-headers-amd64_6.1.27-1_amd64.deb linux-headers</span><br><span class=\"line\">./</span><br><span class=\"line\">./usr/</span><br><span class=\"line\">./usr/share/</span><br><span class=\"line\">./usr/share/doc/</span><br><span class=\"line\">./usr/share/lintian/</span><br><span class=\"line\">./usr/share/lintian/overrides/</span><br><span class=\"line\">./usr/share/lintian/overrides/linux-headers-amd64</span><br><span class=\"line\">./usr/share/doc/linux-headers-amd64</span><br><span class=\"line\"> </span><br><span class=\"line\"># dpkg -e 从一个 Debian 软件包中提取控制信息并解压缩软件包的数据。在这个命令中，../linux-image-amd64_4.9+80+deb9u6_amd64.deb 是指定的 Debian 软件包文件。通过该命令，你可以提取软件包的控制信息，比如包名、版本号、依赖关系等，并将软件包的数据解压缩到当前目录。</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-headers# ls</span><br><span class=\"line\">usr</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-headers# dpkg -e ../linux-headers-amd64_6.1.27-1_amd64.deb</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-headers# ls</span><br><span class=\"line\">DEBIAN  usr</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-headers# cd ../linux-image</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-image# dpkg -e ../linux-image-amd64_6.1.27-1_amd64.deb</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-image# ls</span><br><span class=\"line\">DEBIAN  usr</span><br><span class=\"line\"> </span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-image# cat DEBIAN/control</span><br><span class=\"line\">Package: linux-image-amd64</span><br><span class=\"line\">Source: linux-signed-amd64 (6.1.27+1)</span><br><span class=\"line\">Version: 6.1.27-1</span><br><span class=\"line\">Architecture: amd64</span><br><span class=\"line\">Maintainer: Debian Kernel Team &lt;debian-kernel@lists.debian.org&gt;</span><br><span class=\"line\">Installed-Size: 13</span><br><span class=\"line\">Depends: linux-image-6.1.0-9-amd64 (= 6.1.27-1) #改这里，将版本号</span><br><span class=\"line\">Provides: linux-image-generic, linux-latest-modules-6.1.0-9-amd64, virtualbox-guest-modules, wireguard-modules (= 1.0.0)</span><br><span class=\"line\">Built-Using: linux (= 6.1.27-1)</span><br><span class=\"line\">Section: kernel</span><br><span class=\"line\">Priority: optional</span><br><span class=\"line\">Homepage: https://www.kernel.org/</span><br><span class=\"line\">Description: Linux for 64-bit PCs (meta-package)</span><br><span class=\"line\"> This package depends on the latest Linux kernel and modules for use on PCs</span><br><span class=\"line\"> with AMD64, Intel 64 or VIA Nano processors.</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">#编辑</span><br><span class=\"line\">image包</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-image# sed -i &#x27;s#Depends: linux-image-6.1.0-9-amd64 (= 6.1.27-1)#Depends: linux-image-5.10.0-103-bili#g&#x27; DEBIAN/control</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-image# dpkg -b ./ linux-image-amd64_6.1.27-1_amd64.deb</span><br><span class=\"line\"> </span><br><span class=\"line\">#head包</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-headers# sed -i &#x27;s#Depends: linux-headers-6.1.0-9-amd64 (= 6.1.27-1)#Depends: linux-headers-5.10.0-103-bili#g&#x27; DEBIAN/control</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/pool/main/l/linux-signed-amd64/linux-headers# dpkg -b ./ linux-headers-amd64_6.1.27-1_amd64.deb</span><br><span class=\"line\"> </span><br><span class=\"line\">替换掉上级目录的linux image和head包</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更新索引（如果修改了内核）\"><a href=\"#更新索引（如果修改了内核）\" class=\"headerlink\" title=\"更新索引（如果修改了内核）\"></a>更新索引（如果修改了内核）</h1><p><strong>更新Packages.gz文件</strong><br><strong>Packages.gz</strong> 文件是 Debian 软件包索引文件的一种压缩形式。它包含了软件源中所有可用软件包的信息，如软件包名称、版本号、描述、依赖关系等。具体来说，Packages.gz 文件的作用包括：</p>\n<ul>\n<li><strong>软件包索引</strong>：<strong>Packages.gz</strong> 文件是软件源的索引文件，列出了软件源中可用的所有软件包的详细信息。</li>\n<li><strong>软件包信息</strong>：每个软件包的信息包括软件包的名称、版本、大小、依赖关系、描述等内容，帮助用户了解和选择合适的软件包进行安装。</li>\n<li><strong>提供给包管理器使用</strong>：当用户使用包管理器（如 apt）搜索、安装或更新软件时，会通过读取 Packages.gz 文件来获取软件包信息，并根据其中的数据进行操作。</li>\n<li><strong>减少数据传输量</strong>：压缩后的 <strong>Packages.gz</strong> 文件可以减少网络数据传输量，提高下载速度并减少带宽占用。</li>\n</ul>\n<p>总的来说，<strong>Packages.gz</strong> 文件是 Debian 软件包管理系统中重要的组成部分，用于提供软件包的元数据信息，使用户能够方便地管理和安装软件包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@d1f49e856234:/data/isofiles<span class=\"comment\"># ls</span></span><br><span class=\"line\">EFI          README.mirrors.html  README.<span class=\"built_in\">source</span>  boot  css     dists  firmware  install.amd  md5sum.txt  pool</span><br><span class=\"line\">README.html  README.mirrors.txt   README.txt     conf  debian  doc    install   isolinux     pics</span><br><span class=\"line\"> </span><br><span class=\"line\">root@d1f49e856234:/data/isofiles<span class=\"comment\"># dpkg-scanpackages pool/main/ /dev/null |tee dists/bookworm/main/binary-amd64/Packages |gzip &gt; dists/bookworm/main/binary-amd64/Packages.gz</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>更新Release文件</strong></p>\n<p><code>dists/bookworm/Release</code> 是 Debian 发行版中的一个文件，用于指示软件源（repository）中可用软件包的版本和其他相关信息。具体来说，它的作用包括：</p>\n<ul>\n<li><strong>版本信息</strong>：<strong>Release</strong> 文件会列出软件源中各个软件包的版本号，以及它们所属的分支（如 stable、testing、unstable 等）。</li>\n<li><strong>数字签名</strong>：<strong>Release</strong> 文件中通常包含软件源的数字签名，用于验证软件包的完整性和真实性。这有助于防止恶意软件注入或篡改。</li>\n<li><strong>其他元数据</strong>：除了版本信息外，<strong>Release</strong> 文件还可能包含其他元数据，如软件包的依赖关系、建议安装的软件包等。</li>\n<li><strong>提供给包管理器使用</strong>：当用户使用包管理器（如 apt）来更新软件包列表或安装新软件包时，系统会根据 dists/bookworm/Release 文件中的信息来确定可用的软件包版本和来源。</li>\n</ul>\n<p>总的来说，<code>dists/bookworm/Release</code> 文件是 Debian 发行版中用于描述软件源中可用软件包的元数据文件之一，对软件包的管理和维护起着重要的作用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份源文件</span></span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/dists/bookworm<span class=\"comment\"># ls</span></span><br><span class=\"line\">Release  main  non-free-firmware</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/dists/bookworm<span class=\"comment\"># mv Release&#123;,.bak&#125; </span></span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/dists/bookworm<span class=\"comment\"># ls</span></span><br><span class=\"line\">Release.bak  main  non-free-firmware</span><br><span class=\"line\"> </span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/dists/bookworm<span class=\"comment\"># cat &gt; makedb.sh &lt;&lt;&#x27;EOF&#x27;</span></span><br><span class=\"line\">&gt; <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> == <span class=\"string\">&quot;checksum_md5&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">&#x27; &#x27;</span>$(<span class=\"built_in\">md5sum</span> <span class=\"variable\">$2</span> | <span class=\"built_in\">cut</span> --delimiter=<span class=\"string\">&#x27; &#x27;</span> --fields=1)<span class=\"string\">&#x27; %16d &#x27;</span><span class=\"variable\">$2</span><span class=\"string\">&#x27;\\n&#x27;</span> $(<span class=\"built_in\">wc</span> --bytes <span class=\"variable\">$2</span> | <span class=\"built_in\">cut</span> --delimiter=<span class=\"string\">&#x27; &#x27;</span> --fields=1)</span><br><span class=\"line\">        <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> == <span class=\"string\">&quot;checksum_sha1&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">&#x27; &#x27;</span>$(<span class=\"built_in\">sha1sum</span> <span class=\"variable\">$2</span> | <span class=\"built_in\">cut</span> --delimiter=<span class=\"string\">&#x27; &#x27;</span> --fields=1)<span class=\"string\">&#x27; %16d &#x27;</span><span class=\"variable\">$2</span><span class=\"string\">&#x27;\\n&#x27;</span> $(<span class=\"built_in\">wc</span> --bytes <span class=\"variable\">$2</span> | <span class=\"built_in\">cut</span> --delimiter=<span class=\"string\">&#x27; &#x27;</span> --fields=1)</span><br><span class=\"line\">        <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> == <span class=\"string\">&quot;checksum_sha256&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">&#x27; &#x27;</span>$(<span class=\"built_in\">sha256sum</span> <span class=\"variable\">$2</span> | <span class=\"built_in\">cut</span> --delimiter=<span class=\"string\">&#x27; &#x27;</span> --fields=1)<span class=\"string\">&#x27; %16d &#x27;</span><span class=\"variable\">$2</span><span class=\"string\">&#x27;\\n&#x27;</span> $(<span class=\"built_in\">wc</span> --bytes <span class=\"variable\">$2</span> | <span class=\"built_in\">cut</span> --delimiter=<span class=\"string\">&#x27; &#x27;</span> --fields=1)</span><br><span class=\"line\">        <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> == <span class=\"string\">&quot;checksum_sha512&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">&#x27; &#x27;</span>$(<span class=\"built_in\">sha512sum</span> <span class=\"variable\">$2</span> | <span class=\"built_in\">cut</span> --delimiter=<span class=\"string\">&#x27; &#x27;</span> --fields=1)<span class=\"string\">&#x27; %16d &#x27;</span><span class=\"variable\">$2</span><span class=\"string\">&#x27;\\n&#x27;</span> $(<span class=\"built_in\">wc</span> --bytes <span class=\"variable\">$2</span> | <span class=\"built_in\">cut</span> --delimiter=<span class=\"string\">&#x27; &#x27;</span> --fields=1)</span><br><span class=\"line\">        <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">SELF_SCRIPT=<span class=\"string\">&quot;`pwd`/<span class=\"variable\">$0</span>&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Calculing hash for packages...&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;MD5Sum:&quot;</span> &gt;&gt; Release</span><br><span class=\"line\">find main/ -<span class=\"built_in\">type</span> f | xargs -n 1 <span class=\"variable\">$SELF_SCRIPT</span> checksum_md5 &gt;&gt; Release</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;SHA1:&quot;</span> &gt;&gt; Release</span><br><span class=\"line\">find main/ -<span class=\"built_in\">type</span> f | xargs -n 1 <span class=\"variable\">$SELF_SCRIPT</span> checksum_sha1 &gt;&gt; Release</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;SHA256:&quot;</span> &gt;&gt; Release</span><br><span class=\"line\">find main/ -<span class=\"built_in\">type</span> f | xargs -n 1 <span class=\"variable\">$SELF_SCRIPT</span> checksum_sha256 &gt;&gt; Release</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;SHA512:&quot;</span> &gt;&gt; Release</span><br><span class=\"line\">find main/ -<span class=\"built_in\">type</span> f | xargs -n 1 <span class=\"variable\">$SELF_SCRIPT</span> checksum_sha512 &gt;&gt; Release</span><br><span class=\"line\">&gt; EOF</span><br><span class=\"line\"> </span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/dists/bookworm<span class=\"comment\"># ls</span></span><br><span class=\"line\">Release.bak  main  makedb.sh  non-free-firmware</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/dists/bookworm<span class=\"comment\"># ./makedb.sh</span></span><br><span class=\"line\"> </span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/dists/bookworm<span class=\"comment\"># head -n 12 Release.bak</span></span><br><span class=\"line\">Origin: Debian</span><br><span class=\"line\">Label: Debian</span><br><span class=\"line\">Suite: stable</span><br><span class=\"line\">Version: 12.0</span><br><span class=\"line\">Codename: bookworm</span><br><span class=\"line\">Changelogs: https://metadata.ftp-master.debian.org/changelogs/@CHANGEPATH@_changelog</span><br><span class=\"line\">Date: Sat, 10 Jun 2023 08:51:17 UTC</span><br><span class=\"line\">Acquire-By-Hash: <span class=\"built_in\">yes</span></span><br><span class=\"line\">No-Support-for-Architecture-all: Packages</span><br><span class=\"line\">Architectures: amd64</span><br><span class=\"line\">Components: main</span><br><span class=\"line\">Description: Debian 12.0 Released 10 June 2023</span><br><span class=\"line\">root@d1f49e856234:/data/isofiles/dists/bookworm<span class=\"comment\"># head -n 12 Release    </span></span><br><span class=\"line\">Origin: Debian</span><br><span class=\"line\">Label: Debian</span><br><span class=\"line\">Suite: stable</span><br><span class=\"line\">Version: 12.0</span><br><span class=\"line\">Codename: bookworm</span><br><span class=\"line\">Changelogs: https://metadata.ftp-master.debian.org/changelogs/@CHANGEPATH@_changelog</span><br><span class=\"line\">Date: Sat, 10 Jun 2023 08:51:17 UTC</span><br><span class=\"line\">Acquire-By-Hash: <span class=\"built_in\">yes</span></span><br><span class=\"line\">No-Support-for-Architecture-all: Packages</span><br><span class=\"line\">Architectures: amd64</span><br><span class=\"line\">Components: main</span><br><span class=\"line\">Description: Debian 12.0 Released 10 June 2023</span><br><span class=\"line\"> </span><br><span class=\"line\">将Release.bak文件头12行粘贴到新Release中</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"重新生成md5sum-txt\"><a href=\"#重新生成md5sum-txt\" class=\"headerlink\" title=\"重新生成md5sum.txt\"></a>重新生成md5sum.txt</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles]# chmod +w md5sum.txt</span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles]# find -follow -type f ! -name md5sum.txt -print0 | xargs -0 md5sum &gt; md5sum.txt</span><br><span class=\"line\">find: File system loop detected; ‘./debian’ is part of the same file system loop as ‘.’.</span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles]# ls -lh</span><br><span class=\"line\">total 176K</span><br><span class=\"line\">dr-xr-xr-x 3 root root 4.0K Feb 26 14:29 boot</span><br><span class=\"line\">drwxr-xr-x 2 root root 4.0K Feb 26 14:48 conf</span><br><span class=\"line\">dr-xr-xr-x 2 root root 4.0K Feb 26 14:29 css</span><br><span class=\"line\">lrwxrwxrwx 1 root root    1 Feb 26 14:29 debian -&gt; .</span><br><span class=\"line\">dr-xr-xr-x 3 root root 4.0K Feb 26 14:29 dists</span><br><span class=\"line\">dr-xr-xr-x 4 root root 4.0K Feb 26 14:29 doc</span><br><span class=\"line\">dr-xr-xr-x 4 root root 4.0K Feb 26 14:29 EFI</span><br><span class=\"line\">dr-xr-xr-x 3 root root 4.0K Feb 26 14:29 firmware</span><br><span class=\"line\">dr-xr-xr-x 2 root root 4.0K Feb 26 14:29 install</span><br><span class=\"line\">dr-xr-xr-x 4 root root 4.0K Feb 26 14:29 install.amd</span><br><span class=\"line\">dr-xr-xr-x 2 root root 4.0K Feb 26 15:05 isolinux</span><br><span class=\"line\">-rw-r--r-- 1 root root  93K Feb 26 15:09 md5sum.txt</span><br><span class=\"line\">dr-xr-xr-x 2 root root 4.0K Feb 26 14:29 pics</span><br><span class=\"line\">dr-xr-xr-x 4 root root 4.0K Feb 26 14:29 pool</span><br><span class=\"line\">-r--r--r-- 1 root root 8.6K Feb 26 14:29 README.html</span><br><span class=\"line\">-r--r--r-- 1 root root  291 Feb 26 14:29 README.mirrors.html</span><br><span class=\"line\">-r--r--r-- 1 root root   86 Feb 26 14:29 README.mirrors.txt</span><br><span class=\"line\">-r--r--r-- 1 root root  543 Feb 26 14:29 README.source</span><br><span class=\"line\">-r--r--r-- 1 root root 5.3K Feb 26 14:29 README.txt</span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles]# chmod -w md5sum.txt</span><br><span class=\"line\">[root@nvm-jscs02-cloud-dev-01 /data/isomake/isofiles]# cd ..</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">genisoimage -r -J -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o preseed-debian-12.0.0-amd64-netinst.iso isofiles</span><br></pre></td></tr></table></figure>\n<p><strong>genisoimage</strong>是一个用于创建ISO映像文件的工具。</p>\n<ul>\n<li>-r: 生成Rock Ridge目录结构，以支持长文件名和符号链接等UNIX特性。</li>\n<li>-J: 生成Joliet目录信息，以支持Windows系统对长文件名的识别。</li>\n<li>-b isolinux/isolinux.bin: 指定引导映像的位置和名称。</li>\n<li>-c isolinux/boot.cat: 指定引导目录表的位置和名称。</li>\n<li>-no-emul-boot: 指定不使用光盘仿真模式来引导。</li>\n<li>-boot-load-size 4: 指定引导加载程序的大小为4扇区。</li>\n<li>-boot-info-table: 生成引导信息表，用于在ISO中保存引导信息。</li>\n<li>-o preseed-debian-12.0.0-amd64-netinst.iso: 指定生成的ISO文件的名称。</li>\n<li>isofiles: 指定需要添加到ISO中的文件和目录。<br>通过这些参数，genisoimage将创建一个包含指定文件和目录的ISO映像文件，并设置好引导相关的信息，以便在启动时正确加载操作系统或其他内容。</li>\n</ul>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><div class=\"gallery\">\n    <div class=\"fj-gallery lazyload\" data-rowHeight=\"550\" data-limit=\"1\">\n    <span class=\"gallery-data\">[{\"url\":\"/images/pasted-328.png\",\"alt\":\"点击\"},{\"url\":\"/images/pasted-327.gif\",\"alt\":\"test\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div>\n\n<h1 id=\"内核替换测试\"><a href=\"#内核替换测试\" class=\"headerlink\" title=\"内核替换测试\"></a>内核替换测试</h1><p><img src=\"/images/pasted-329.png\" alt=\"内核测试\"></p>\n<h1 id=\"驱动添加-更新\"><a href=\"#驱动添加-更新\" class=\"headerlink\" title=\"驱动添加/更新\"></a>驱动添加/更新</h1><p>在上面测试镜像所安装的测试机器上对需要加入的驱动编译安装，否则编译内核版本与实际封装的版本不一致可能会出问题(需要安装内核同版本的linux-header 和 gcc工具)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">intel i40e网卡驱动</span><br><span class=\"line\">下载地址：https://www.intel.cn/content/www/cn/zh/download/18026/intel-network-adapter-driver-for-pcie-40-gigabit-ethernet-network-connections-under-linux.html  </span><br><span class=\"line\"> </span><br><span class=\"line\">root@debian:~<span class=\"comment\"># tar -xf i40e-2.24.6.tar.gz </span></span><br><span class=\"line\">root@debian:~<span class=\"comment\"># cd i40e-2.24.6/src/</span></span><br><span class=\"line\"> </span><br><span class=\"line\">root@debian:~/i40e-2.24.6/src<span class=\"comment\"># make</span></span><br><span class=\"line\">filtering include/net/flow_keys.h out</span><br><span class=\"line\">filtering include/linux/jump_label_type.h out</span><br><span class=\"line\">filtering include/linux/jump_label_type.h out</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/usr/src/linux-headers-5.10.0-103-bili&#x27;</span></span><br><span class=\"line\">/root/i40e-2.24.6/src/Makefile:39: 2</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_main.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_ethtool.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_xsk.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_adminq.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_common.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_hmc.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_lan_hmc.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_nvm.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_debugfs.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_diag.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_txrx.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_ptp.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_filters.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_ddp.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_client.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_virtchnl_pf.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_dcb.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e_dcb_nl.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/kcompat.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/kcompat_vfd.o</span><br><span class=\"line\">  LD [M]  /root/i40e-2.24.6/src/i40e.o</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/auxiliary.o</span><br><span class=\"line\">  LD [M]  /root/i40e-2.24.6/src/intel_auxiliary.o</span><br><span class=\"line\">/root/i40e-2.24.6/src/Makefile:39: 2</span><br><span class=\"line\">  MODPOST /root/i40e-2.24.6/src/Module.symvers</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/i40e.mod.o</span><br><span class=\"line\">  LD [M]  /root/i40e-2.24.6/src/i40e.ko</span><br><span class=\"line\">  CC [M]  /root/i40e-2.24.6/src/intel_auxiliary.mod.o</span><br><span class=\"line\">  LD [M]  /root/i40e-2.24.6/src/intel_auxiliary.ko</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/usr/src/linux-headers-5.10.0-103-bili&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">root@debian:~/i40e-2.24.6/src<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\"> </span><br><span class=\"line\">root@debian:~/i40e-2.24.6/src<span class=\"comment\"># make install</span></span><br><span class=\"line\">filtering include/net/flow_keys.h out</span><br><span class=\"line\">filtering include/linux/jump_label_type.h out</span><br><span class=\"line\">filtering include/linux/jump_label_type.h out</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/usr/src/linux-headers-5.10.0-103-bili&#x27;</span></span><br><span class=\"line\">/root/i40e-2.24.6/src/Makefile:39: 2</span><br><span class=\"line\">/root/i40e-2.24.6/src/Makefile:39: 2</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/usr/src/linux-headers-5.10.0-103-bili&#x27;</span></span><br><span class=\"line\">Installing modules...</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/usr/src/linux-headers-5.10.0-103-bili&#x27;</span></span><br><span class=\"line\">  INSTALL /root/i40e-2.24.6/src/i40e.ko</span><br><span class=\"line\">  INSTALL /root/i40e-2.24.6/src/intel_auxiliary.ko</span><br><span class=\"line\">  DEPMOD  5.10.0-103-bili</span><br><span class=\"line\">Warning: modules_install: missing <span class=\"string\">&#x27;System.map&#x27;</span> file. Skipping depmod.</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/usr/src/linux-headers-5.10.0-103-bili&#x27;</span></span><br><span class=\"line\">make auxiliary_install</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/root/i40e-2.24.6/src&#x27;</span></span><br><span class=\"line\">filtering include/net/flow_keys.h out</span><br><span class=\"line\">filtering include/linux/jump_label_type.h out</span><br><span class=\"line\">filtering include/linux/jump_label_type.h out</span><br><span class=\"line\">Installing auxiliary...</span><br><span class=\"line\">install -D -m 644 Module.symvers /lib/modules/5.10.0-103-bili/extern-symvers/intel_auxiliary.symvers</span><br><span class=\"line\">install -d /lib/modules/5.10.0-103-bili/updates/drivers/net/ethernet/intel/auxiliary</span><br><span class=\"line\"><span class=\"built_in\">mv</span> -f /lib/modules/5.10.0-103-bili/updates/drivers/net/ethernet/intel/i40e/intel_auxiliary.ko* /lib/modules/5.10.0-103-bili/updates/drivers/net/ethernet/intel/auxiliary/</span><br><span class=\"line\">install -d //lib/modules/5.10.0-103-bili/build/include/linux</span><br><span class=\"line\">install -D -m 644 linux/auxiliary_bus.h auxiliary_compat.h kcompat_generated_defs.h -t //lib/modules/5.10.0-103-bili/build/include/linux</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/root/i40e-2.24.6/src&#x27;</span></span><br><span class=\"line\">/sbin/depmod -e -F /boot/System.map-5.10.0-103-bili  -a 5.10.0-103-bili</span><br><span class=\"line\">depmod: WARNING: /lib/modules/5.10.0-103-bili/kernel/drivers/infiniband/hw/i40iw/i40iw.ko needs unknown symbol i40e_unregister_client</span><br><span class=\"line\">depmod: WARNING: /lib/modules/5.10.0-103-bili/kernel/drivers/infiniband/hw/i40iw/i40iw.ko needs unknown symbol i40e_register_client</span><br><span class=\"line\">Updating initramfs...</span><br><span class=\"line\">update-initramfs: Generating /boot/initrd.img-5.10.0-103-bili</span><br><span class=\"line\">make mandocs_install</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/root/i40e-2.24.6/src&#x27;</span></span><br><span class=\"line\">filtering include/net/flow_keys.h out</span><br><span class=\"line\">filtering include/linux/jump_label_type.h out</span><br><span class=\"line\">filtering include/linux/jump_label_type.h out</span><br><span class=\"line\">Copying manpages...</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/root/i40e-2.24.6/src&#x27;</span></span><br><span class=\"line\">root@debian:~/i40e-2.24.6/src<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 拿到编译后的.ko文件</span></span><br><span class=\"line\">root@debian:/lib/modules/5.10.0-103-bili/updates/drivers/net/ethernet/intel<span class=\"comment\"># tree ./</span></span><br><span class=\"line\">./</span><br><span class=\"line\">|-- auxiliary</span><br><span class=\"line\">|   `-- intel_auxiliary.ko</span><br><span class=\"line\">`-- i40e</span><br><span class=\"line\">    `-- i40e.ko</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 检查依赖</span></span><br><span class=\"line\">root@debian:/lib/modules/5.10.0-103-bili/updates/drivers/net/ethernet/intel<span class=\"comment\"># modinfo ./i40e/i40e.ko</span></span><br><span class=\"line\">filename:       /lib/modules/5.10.0-103-bili/updates/drivers/net/ethernet/intel/./i40e/i40e.ko</span><br><span class=\"line\">version:        2.24.6</span><br><span class=\"line\">license:        GPL</span><br><span class=\"line\">description:    Intel(R) 40-10 Gigabit Ethernet Connection Network Driver</span><br><span class=\"line\">author:         Intel Corporation, &lt;e1000-devel@lists.sourceforge.net&gt;</span><br><span class=\"line\">srcversion:     3C6B125A18A073136C3A997</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d0000158Bsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d0000158Asv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00000DDAsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037D3sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037D2sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037D1sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037D0sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037CFsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037CEsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00000D58sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00000CF8sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001588sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001587sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d0000104Fsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d0000104Esv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000015FFsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001589sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001586sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d0000101Fsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00000DD2sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001585sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001584sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001583sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001581sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001580sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001574sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001572sv*sd*bc*sc*i*</span><br><span class=\"line\">depends:        ptp,intel_auxiliary <span class=\"comment\"># 依赖intel_auxiliary</span></span><br><span class=\"line\">name:           i40e</span><br><span class=\"line\">vermagic:       5.10.0-103-bili SMP mod_unload modversions</span><br><span class=\"line\">parm:           debug:Debug level (0=none,...,16=all) (int)</span><br><span class=\"line\">parm:           l4mode:L4 cloud filter mode: 0=UDP,1=TCP,2=Both,-1=Disabled(default) (int)</span><br><span class=\"line\"> </span><br><span class=\"line\">拷贝两个ko文件备用</span><br></pre></td></tr></table></figure>\n\n<p>进入官方iso解包后的目录，找到我们自定义内核文件的位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解包自研内核包</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux<span class=\"comment\"># mkdir linux-image</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux<span class=\"comment\"># ls</span></span><br><span class=\"line\">linux-headers-5.10.0-103-bili_amd64.deb  linux-image  linux-image-5.10.0-103-bili_amd64.deb  linux-libc-dev_amd64.deb  linux-tools-5.10.0-103-bili_amd64.deb</span><br><span class=\"line\"> </span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux<span class=\"comment\"># dpkg -X linux-image-5.10.0-103-bili_amd64.deb ./linux-image</span></span><br><span class=\"line\">./</span><br><span class=\"line\">./boot/</span><br><span class=\"line\">./boot/System.map-5.10.0-103-bili</span><br><span class=\"line\">./boot/config-5.10.0-103-bili</span><br><span class=\"line\">./boot/vmlinuz-5.10.0-103-bili</span><br><span class=\"line\">./etc/</span><br><span class=\"line\">./etc/kernel/</span><br><span class=\"line\">./etc/kernel/postinst.d/</span><br><span class=\"line\">./etc/kernel/postrm.d/</span><br><span class=\"line\">./etc/kernel/preinst.d/</span><br><span class=\"line\">./etc/kernel/prerm.d/</span><br><span class=\"line\">./lib/</span><br><span class=\"line\">./lib/modules/</span><br><span class=\"line\">./lib/modules/5.10.0-103-bili/</span><br><span class=\"line\">./lib/modules/5.10.0-103-bili/kernel/</span><br><span class=\"line\">./lib/modules/5.10.0-103-bili/kernel/arch/</span><br><span class=\"line\">./lib/modules/5.10.0-103-bili/kernel/arch/x86/</span><br><span class=\"line\">./lib/modules/5.10.0-103-bili/kernel/arch/x86/crypto/</span><br><span class=\"line\">./lib/modules/5.10.0-103-bili/kernel/arch/x86/crypto/aegis128-aesni.ko</span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux<span class=\"comment\"># cd linux-image</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># dpkg -e ../linux-image-5.10.0-103-bili_amd64.deb</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 上一步编译好的ko文件</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux<span class=\"comment\"># ls /data/kernel/intel/</span></span><br><span class=\"line\">auxiliary  i40e <span class=\"comment\">#目录</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 复制替换</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># find ./ -name &quot;i40e.ko&quot;</span></span><br><span class=\"line\">./lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/i40e/i40e.ko</span><br><span class=\"line\"> </span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># ls ./lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/</span></span><br><span class=\"line\">e100.ko  e1000  e1000e  i40e  iavf  ice  igb  igbvf  igc  ixgb  ixgbe  ixgbevf</span><br><span class=\"line\"> </span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># cp -r /data/kernel/intel/* ./lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># ls -l ./lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/</span></span><br><span class=\"line\">total 132</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Apr  8 08:44 auxiliary <span class=\"comment\">#新增</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 84968 Mar 21  2022 e100.ko</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 e1000</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 e1000e</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 i40e <span class=\"comment\">#变更</span></span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 iavf</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 ice</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 igb</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 igbvf</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 igc</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 ixgb</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 ixgbe</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Mar 21  2022 ixgbevf</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 检查是否一致</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># md5sum /data/kernel/intel/i40e/i40e.ko</span></span><br><span class=\"line\">440a5e906874f9861869100303281222  /data/kernel/intel/i40e/i40e.ko</span><br><span class=\"line\"> </span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># md5sum /data/kernel/intel/auxiliary/intel_auxiliary.ko</span></span><br><span class=\"line\">a34fdffe7b827e7606e3b2c6c46d06c0  /data/kernel/intel/auxiliary/intel_auxiliary.ko</span><br><span class=\"line\"> </span><br><span class=\"line\">--</span><br><span class=\"line\"> </span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># md5sum ./lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/i40e/i40e.ko</span></span><br><span class=\"line\">440a5e906874f9861869100303281222  ./lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/i40e/i40e.ko</span><br><span class=\"line\"> </span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># md5sum ./lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/auxiliary/intel_auxiliary.ko</span></span><br><span class=\"line\">a34fdffe7b827e7606e3b2c6c46d06c0  ./lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/auxiliary/intel_auxiliary.ko</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 将所需要升级或集成的驱动文件拷贝或替换，然后回到刚刚生成的校验文件。将替换的驱动和集成的驱动的md5值写入解压后内核包的md5sums文件中</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># grep -E &quot;i40e.ko|intel_auxiliary.ko&quot; DEBIAN/md5sums</span></span><br><span class=\"line\">b11aad828bb0bd6beb41261e7cb1d013  lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/i40e/i40e.ko</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 替换旧驱动和添加新驱动intel_auxiliary.ko</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># sed -i &#x27;s#b11aad828bb0bd6beb41261e7cb1d013#440a5e906874f9861869100303281222#g&#x27; DEBIAN/md5sums</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># echo &quot;a34fdffe7b827e7606e3b2c6c46d06c0  lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/auxiliary/intel_auxiliary.ko&quot; &gt;&gt; DEBIAN/md5sums</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># grep -E &quot;i40e.ko|intel_auxiliary.ko&quot; DEBIAN/md5sums</span></span><br><span class=\"line\">440a5e906874f9861869100303281222  lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/i40e/i40e.ko</span><br><span class=\"line\">a34fdffe7b827e7606e3b2c6c46d06c0  lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/auxiliary/intel_auxiliary.ko</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 构建新的image包</span></span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># dpkg -b ./ ../linux-image-5.10.0-103-bili_amd64.deb</span></span><br><span class=\"line\">dpkg-deb: building package <span class=\"string\">&#x27;linux-image-5.10.0-103-bili&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;../linux-image-5.10.0-103-bili_amd64.deb&#x27;</span>.</span><br><span class=\"line\">root@04807b743cb2:/data/isofiles/pool/main/l/linux/linux-image<span class=\"comment\"># ls -l ../linux-image-5.10.0-103-bili_amd64.deb</span></span><br><span class=\"line\">-r-xr-xr-x 1 root root 54929480 Apr  8 08:56 ../linux-image-5.10.0-103-bili_amd64.deb</span><br></pre></td></tr></table></figure>\n<p><strong>从更新索引开始往后继续执行，最后打包测试</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@debian:~<span class=\"comment\"># uname -a</span></span><br><span class=\"line\">Linux debian 5.10.0-103-bili <span class=\"comment\">#96b29d4680e3 SMP Mon Mar 21 16:28:39 HKT 2022 x86_64 GNU/Linux</span></span><br><span class=\"line\">root@debian:~<span class=\"comment\"># depmod -a</span></span><br><span class=\"line\">root@debian:~<span class=\"comment\"># modinfo intel_auxiliary</span></span><br><span class=\"line\">filename:       /lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/auxiliary/intel_auxiliary.ko</span><br><span class=\"line\">author:         linux.nics@intel.com</span><br><span class=\"line\">description:    Auxiliary Bus Standalone</span><br><span class=\"line\">license:        GPL v2</span><br><span class=\"line\">depends:       </span><br><span class=\"line\">name:           intel_auxiliary</span><br><span class=\"line\">vermagic:       5.10.0-103-bili SMP mod_unload modversions</span><br><span class=\"line\">root@debian:~<span class=\"comment\"># modinfo i40e</span></span><br><span class=\"line\">filename:       /lib/modules/5.10.0-103-bili/kernel/drivers/net/ethernet/intel/i40e/i40e.ko</span><br><span class=\"line\">version:        2.24.6</span><br><span class=\"line\">license:        GPL</span><br><span class=\"line\">description:    Intel(R) 40-10 Gigabit Ethernet Connection Network Driver</span><br><span class=\"line\">author:         Intel Corporation, &lt;e1000-devel@lists.sourceforge.net&gt;</span><br><span class=\"line\">srcversion:     3C6B125A18A073136C3A997</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d0000158Bsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d0000158Asv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00000DDAsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037D3sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037D2sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037D1sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037D0sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037CFsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000037CEsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00000D58sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00000CF8sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001588sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001587sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d0000104Fsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d0000104Esv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d000015FFsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001589sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001586sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d0000101Fsv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00000DD2sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001585sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001584sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001583sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001581sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001580sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001574sv*sd*bc*sc*i*</span><br><span class=\"line\"><span class=\"built_in\">alias</span>:          pci:v00008086d00001572sv*sd*bc*sc*i*</span><br><span class=\"line\">depends:        ptp,intel_auxiliary</span><br><span class=\"line\">name:           i40e</span><br><span class=\"line\">vermagic:       5.10.0-103-bili SMP mod_unload modversions</span><br><span class=\"line\">parm:           debug:Debug level (0=none,...,16=all) (int)</span><br><span class=\"line\">parm:           l4mode:L4 cloud filter mode: 0=UDP,1=TCP,2=Both,-1=Disabled(default) (int)</span><br></pre></td></tr></table></figure>\n<p>可以看到更新的i40e 新驱动网卡和新添加的intel_auxiliary（i40e的依赖项）都已经加载成功了～</p>\n<blockquote>\n<p>参考文档：</p>\n<ul>\n<li><a href=\"https://www.debian.org/releases/bookworm/example-preseed.txt\">https://www.debian.org/releases/bookworm/example-preseed.txt</a></li>\n<li><a href=\"https://debian-handbook.info/browse/stable/sect.automated-installation.html\">https://debian-handbook.info/browse/stable/sect.automated-installation.html</a></li>\n</ul>\n</blockquote>\n","categories":["OPS"],"tags":["无人应答","preseed"]},{"title":"GitLab-CI语法","url":"/forward/ff7280bd.html","content":"<h3 id=\"用-gitlab-ci-yml配置任务\"><a href=\"#用-gitlab-ci-yml配置任务\" class=\"headerlink\" title=\"用 .gitlab-ci.yml配置任务\"></a>用 <code>.gitlab-ci.yml</code>配置任务</h3><p>此文档用于描述<code>.gitlab-ci.yml</code>语法，<code>.gitlab-ci.yml</code>文件被用来管理项目的runner 任务。<br>如果想要快速的了解GitLab CI ，可查看<a href=\"https://docs.gitlab.com/ce/ci/quick_start/README.html\">快速引导</a>。</p>\n<h4 id=\"gitlab-ci-yml\"><a href=\"#gitlab-ci-yml\" class=\"headerlink\" title=\"gitlab-ci.yml\"></a>gitlab-ci.yml</h4><p>从7.12版本开始，GitLab CI使用YAML文件(.gitlab-ci.yml)来管理项目配置。该文件存放于项目仓库的根目录，它定义该项目如何构建。<br>开始构建之前YAML文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含<code>script</code>部分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job1:</span><br><span class=\"line\">  script: &quot;execute-script-for-job1&quot;</span><br><span class=\"line\">  </span><br><span class=\"line\">job2:</span><br><span class=\"line\">  script: &quot;execute-script-for-job2&quot;</span><br></pre></td></tr></table></figure>\n<p>上面这个例子就是一个最简单且带有两个独立任务的CI配置，每个任务分别执行不同的命令。</p>\n<p><code>script</code>可以直接执行系统命令(例如：./configure;make;make install)或者是直接执行脚本(test.sh)。</p>\n<p>任务是由Runners接管并且由服务器中runner执行。更重要的是，每一个任务的执行过程都是独立运行的。</p>\n<p>用下面这个例子来说明YAML语法还有更多复杂的任务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">image: ruby:2.1</span><br><span class=\"line\">services:</span><br><span class=\"line\">  - postgres</span><br><span class=\"line\"></span><br><span class=\"line\">before_script:</span><br><span class=\"line\">  - bundle install</span><br><span class=\"line\"></span><br><span class=\"line\">after_script:</span><br><span class=\"line\">  - rm secrets</span><br><span class=\"line\"></span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - build</span><br><span class=\"line\">  - test</span><br><span class=\"line\">  - deploy</span><br><span class=\"line\"></span><br><span class=\"line\">job1:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - execute-script-for-job1</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">    - docker</span><br></pre></td></tr></table></figure>\n<p>下面列出保留字段，这些保留字段不能被定义为<code>job</code>[名称：</p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>是否必须</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>image</td>\n<td>否</td>\n<td>用于docker镜像，查看docker文档</td>\n</tr>\n<tr>\n<td>services</td>\n<td>否</td>\n<td>用于docker服务，查看docker文档</td>\n</tr>\n<tr>\n<td>stages</td>\n<td>否</td>\n<td>定义构建阶段</td>\n</tr>\n<tr>\n<td>types</td>\n<td>否</td>\n<td>stages 的别名(已废除)</td>\n</tr>\n<tr>\n<td>before_script</td>\n<td>否</td>\n<td>定义在每个job之前运行的命令</td>\n</tr>\n<tr>\n<td>after_script</td>\n<td>否</td>\n<td>定义在每个job之后运行的命令</td>\n</tr>\n<tr>\n<td>variable</td>\n<td>否</td>\n<td>定义构建变量</td>\n</tr>\n<tr>\n<td>cache</td>\n<td>否</td>\n<td>定义一组文件列表，可在后续运行中使用</td>\n</tr>\n</tbody></table>\n<h4 id=\"image和services\"><a href=\"#image和services\" class=\"headerlink\" title=\"image和services\"></a>image和services</h4><p>这两个关键字允许使用一个自定义的Docker镜像和一系列的服务，并且可以用于整个job周期。详细配置文档请查看<a href=\"https://docs.gitlab.com/ce/ci/docker/README.html\">a separate document</a>。</p>\n<h3 id=\"before-script\"><a href=\"#before-script\" class=\"headerlink\" title=\"before_script\"></a>before_script</h3><p><code>before_script</code>用来定义所有job之前运行的命令，包括deploy(部署) jobs，但是在修复artifacts之后。它可以是一个数组或者是多行字符串。</p>\n<h3 id=\"after-script\"><a href=\"#after-script\" class=\"headerlink\" title=\"after_script\"></a>after_script</h3><blockquote>\n<p>GitLab 8.7 开始引入，并且要求Gitlab Runner v1.2</p>\n</blockquote>\n<p><code>after_script</code>用来定义所有job之后运行的命令。它必须是一个数组或者是多行字符串</p>\n<h3 id=\"stages\"><a href=\"#stages\" class=\"headerlink\" title=\"stages\"></a>stages</h3><p><code>stages</code>用来定义可以被job调用的stages。stages的规范允许有灵活的多级pipelines。</p>\n<p>stages中的元素顺序决定了对应job的执行顺序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 相同stage的job可以平行执行。</span><br><span class=\"line\">2. 下一个stage的job会在前一个stage的job成功后开始执行。</span><br></pre></td></tr></table></figure>\n<p>接下仔细看看这个例子，它包含了3个stage：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">stages:</span><br><span class=\"line\">  - build</span><br><span class=\"line\">  - test</span><br><span class=\"line\">  - deploy</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>首先，所有<code>build</code>的<code>jobs</code>都是并行执行的。</p>\n</li>\n<li><p>所有<code>build</code>的jobs执行成功后，<code>test</code>的jobs才会开始并行执行。</p>\n</li>\n<li><p>所有<code>test</code>的jobs执行成功，<code>deploy</code>的jobs才会开始并行执行。</p>\n</li>\n<li><p>所有的<code>deploy</code>的jobs执行成功，<code>commit</code>才会标记为<code>success</code>。</p>\n</li>\n<li><p>任何一个前置的<code>jobs</code>失败了，commit会标记为<code>failed</code>并且下一个stages的jobs都不会执行。</p>\n</li>\n</ol>\n<p>这有两个特殊的例子值得一提：</p>\n<ol>\n<li>如果.gitlab-ci.yml中没有定义stages，那么job’s stages 会默认定义为 build，test 和 deploy。</li>\n<li>如果一个job没有指定stage，那么这个任务会分配到test stage。</li>\n</ol>\n<h3 id=\"types\"><a href=\"#types\" class=\"headerlink\" title=\"types\"></a>types</h3><blockquote>\n<p>已废除，将会在10.0中移除。用stages替代。</p>\n</blockquote>\n<p>与<code>stages</code>同义</p>\n<h3 id=\"variables\"><a href=\"#variables\" class=\"headerlink\" title=\"variables\"></a>variables</h3><blockquote>\n<p>GitLab Runner V0.5.0. 开始引入</p>\n</blockquote>\n<p>GItLab CI 允许在<code>.gitlab-ci.yml</code>文件中添加变量，并在job环境中起作用。因为这些配置是存储在git仓库中，所以最好是存储项目的非敏感配置，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">variables:</span><br><span class=\"line\">  DATABASE_URL:&quot;postgres://postgres@postgres/my_database&quot;</span><br></pre></td></tr></table></figure>\n<p>这些变量可以被后续的命令和脚本使用。服务容器也可以使用YAML中定义的变量，因此我们可以很好的调控服务容器。变量也可以定义成<code>job level</code>。</p>\n<p>除了用户自定义的变量外，Runner也可以定义它自己的变量。<code>CI_COMMIT_REG_NAME</code>就是一个很好的例子，它的值表示用于构建项目的分支或tag名称。除了在<code>.gitlab-ci.yml</code>中设置变量外，还有可以通过GitLab的界面上设置私有变量。</p>\n<p><a href=\"https://docs.gitlab.com/ce/ci/variables/README.html\">更多关于variables</a>。</p>\n<h3 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h3><blockquote>\n<p>Gitlab Runner v0.7.0 开始引入。</p>\n</blockquote>\n<p><code>cache</code>用来指定需要在job之间缓存的文件或目录。只能使用该项目工作空间内的路径。</p>\n<h5 id=\"从GitLab-9-0开始，pipelines和job就默认开启了缓存\"><a href=\"#从GitLab-9-0开始，pipelines和job就默认开启了缓存\" class=\"headerlink\" title=\"从GitLab 9.0开始，pipelines和job就默认开启了缓存\"></a>从GitLab 9.0开始，pipelines和job就默认开启了缓存</h5><p>如果<code>cache</code>定义在jobs的作用域之外，那么它就是全局缓存，所有jobs都可以使用该缓存。</p>\n<p>缓存<code>binaries</code>和<code>.config</code>中的所有文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rspec:</span><br><span class=\"line\">  script: test</span><br><span class=\"line\">  cache:</span><br><span class=\"line\">    paths:</span><br><span class=\"line\">    - binaries/</span><br><span class=\"line\">    - .config</span><br></pre></td></tr></table></figure>\n<p>缓存git中没有被跟踪的文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rspec:</span><br><span class=\"line\">  script: test</span><br><span class=\"line\">  cache:</span><br><span class=\"line\">    untracked: true</span><br></pre></td></tr></table></figure>\n<p>缓存<code>binaries</code>下没有被git跟踪的文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rspec:</span><br><span class=\"line\">  script: test</span><br><span class=\"line\">  cache:</span><br><span class=\"line\">    untracked: true</span><br><span class=\"line\">    paths:</span><br><span class=\"line\">    - binaries/</span><br></pre></td></tr></table></figure>\n<p>job中优先级高于全局的。下面这个<code>rspecjob</code>中将只会缓存<code>binaries/</code>下的文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cache:</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">  - my/files</span><br><span class=\"line\"></span><br><span class=\"line\">rspec:</span><br><span class=\"line\">  script: test</span><br><span class=\"line\">  cache:</span><br><span class=\"line\">    key: rspec</span><br><span class=\"line\">    paths:</span><br><span class=\"line\">    - binaries/</span><br></pre></td></tr></table></figure>\n<p>注意，缓存是在jobs之前进行共享的。如果你不同的jobs缓存不同的文件路径，必须设置不同的<code>cache:key</code>，否则缓存内容将被重写。</p>\n<p>缓存只是尽力而为之，所以别期望缓存会一直存在。查看更多详细内容，请查阅GitLab Runner。</p>\n<h3 id=\"缓存key\"><a href=\"#缓存key\" class=\"headerlink\" title=\"缓存key\"></a>缓存key</h3><blockquote>\n<p>GitLab Runner v1.0.0 开始引入。</p>\n</blockquote>\n<p><code>key</code>指令允许我们定义缓存的作用域(亲和性)，可以是所有jobs的单个缓存，也可以是每个job，也可以是每个分支或者是任何你认为合适的地方。</p>\n<p>它也可以让你很好的调整缓存，允许你设置不同jobs的缓存，甚至是不同分支的缓存。</p>\n<p><code>cache:key</code>可以使用任何的<code>预定义变量</code>。</p>\n<p>默认key是默认设置的这个项目缓存，因此默认情况下，每个pipelines和jobs中可以共享一切，从GitLab 9.0开始。</p>\n<h5 id=\"配置示例\"><a href=\"#配置示例\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h5><p>缓存每个job：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cache:</span><br><span class=\"line\">  key: &quot;$CI_JOB_NAME&quot;</span><br><span class=\"line\">  untracked: true</span><br></pre></td></tr></table></figure>\n<p>缓存每个分支：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cache:</span><br><span class=\"line\">  key: &quot;$CI_COMMIT_REF_NAME&quot;</span><br><span class=\"line\">  untracked: true</span><br></pre></td></tr></table></figure>\n<p>缓存每个job且每个分支：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cache:</span><br><span class=\"line\">  key: &quot;$CI_JOB_NAME/$CI_COMMIT_REF_NAME&quot;</span><br><span class=\"line\">  untracked: true</span><br></pre></td></tr></table></figure>\n<p>缓存每个分支且每个stage：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cache:</span><br><span class=\"line\">  key: &quot;$CI_JOB_STAGE/$CI_COMMIT_REF_NAME&quot;</span><br><span class=\"line\">  untracked: true</span><br></pre></td></tr></table></figure>\n<p>如果使用的<code>Windows Batch</code>(windows批处理)来跑脚本需要用<code>%</code>替代<code>$</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cache:</span><br><span class=\"line\">  key: &quot;%CI_JOB_STAGE%/%CI_COMMIT_REF_NAME%&quot;</span><br><span class=\"line\">  untracked: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Jobs\"><a href=\"#Jobs\" class=\"headerlink\" title=\"Jobs\"></a>Jobs</h3><p><code>.gitlab-ci.yml</code>允许指定无限量jobs。每个jobs必须有一个唯一的名字，而且不能是上面提到的关键字。job由一列参数来定义jobs的行为。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job_name:</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - rake spec</span><br><span class=\"line\">    - coverage</span><br><span class=\"line\">  stage: test</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">  except:</span><br><span class=\"line\">    - develop</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">    - ruby</span><br><span class=\"line\">    - postgres</span><br><span class=\"line\">  allow_failure: true</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>script</td>\n<td>yes</td>\n<td>Runner执行的命令或脚本</td>\n</tr>\n<tr>\n<td>image</td>\n<td>no</td>\n<td>所使用的docker镜像，查阅使用docker镜像</td>\n</tr>\n<tr>\n<td>services</td>\n<td>no</td>\n<td>所使用的docker服务，查阅使用docker镜像</td>\n</tr>\n<tr>\n<td>stage</td>\n<td>no</td>\n<td>定义job stage（默认：test）</td>\n</tr>\n<tr>\n<td>type</td>\n<td>no</td>\n<td>stage的别名（已弃用）</td>\n</tr>\n<tr>\n<td>variables</td>\n<td>no</td>\n<td>定义job级别的变量</td>\n</tr>\n<tr>\n<td>only</td>\n<td>no</td>\n<td>定义一列git分支，并为其创建job</td>\n</tr>\n<tr>\n<td>except</td>\n<td>no</td>\n<td>定义一列git分支，不创建job</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>no</td>\n<td>定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags）</td>\n</tr>\n<tr>\n<td>allow_failure</td>\n<td>no</td>\n<td>允许job失败。失败的job不影响commit状态</td>\n</tr>\n<tr>\n<td>when</td>\n<td>no</td>\n<td>定义何时开始job。可以是on_success，on_failure，always或者manual</td>\n</tr>\n<tr>\n<td>dependencies</td>\n<td>no</td>\n<td>定义job依赖关系，这样他们就可以互相传递artifacts</td>\n</tr>\n<tr>\n<td>cache</td>\n<td>no</td>\n<td>定义应在后续运行之间缓存的文件列表</td>\n</tr>\n<tr>\n<td>before_script</td>\n<td>no</td>\n<td>重写一组在作业前执行的命令</td>\n</tr>\n<tr>\n<td>after_script</td>\n<td>no</td>\n<td>重写一组在作业后执行的命令</td>\n</tr>\n<tr>\n<td>environment</td>\n<td>no</td>\n<td>定义此作业完成部署的环境名称</td>\n</tr>\n<tr>\n<td>coverage</td>\n<td>no</td>\n<td>定义给定作业的代码覆盖率设置</td>\n</tr>\n</tbody></table>\n<h3 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h3><p><code>script</code>是Runner执行的yaml脚本。举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  script: &quot;bundle exec rspec&quot;</span><br></pre></td></tr></table></figure>\n<p>该参数也可以用数组包含多个命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - uname -a</span><br><span class=\"line\">    - bundle exec rspec</span><br></pre></td></tr></table></figure>\n<p>有时候，<code>script</code>命令需要被单引号或者是双引号包裹起来。举个例子，当命令中包含冒号(:)时，script需要被包在双引号中，这样YAML解析器才可以正确解析为一个字符串而不是一个键值对(key:value)。使用这些特殊字符的时候一定要注意：<code>:,&#123;,&#125;,[,],,,&amp;,*,#,?,|,-,&lt;,&gt;,=,!</code>。</p>\n<h3 id=\"stage\"><a href=\"#stage\" class=\"headerlink\" title=\"stage\"></a>stage</h3><p><code>stage</code>允许一组jobs进入不同的stages。jobs在相同的<code>stage</code>时会<code>parallel</code>同时进行。查阅<code>stages</code>更多的用法请查看<a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#stages\"><code>stages</code></a>。</p>\n<h3 id=\"only-and-except\"><a href=\"#only-and-except\" class=\"headerlink\" title=\"only and except\"></a>only and except</h3><p><code>only</code>和except是两个参数用分支策略来限制jobs构建：</p>\n<ol>\n<li><code>only</code>定义哪些分支和标签的git项目将会被job执行。</li>\n<li><code>except</code>定义哪些分支和标签的git项目将不会被job执行。</li>\n</ol>\n<p>下面是refs策略的使用规则：</p>\n<ul>\n<li><code>only</code>和<code>except</code>可同时使用。如果<code>only</code>和<code>except</code>在一个job配置中同时存在，则以<code>only</code>为准，跳过<code>except</code>(从下面示例中得出)。</li>\n<li><code>only</code>和<code>except</code>可以使用正则表达式。</li>\n<li><code>only</code>和<code>except</code>允许使用特殊的关键字：<code>branches</code>，<code>tags</code>和<code>triggers</code>。</li>\n<li><code>only</code>和<code>except</code>允许使用指定仓库地址但不是forks的仓库(查看示例3)。</li>\n</ul>\n<p>在下面这个例子中，job将只会运行以issue-开始的refs(分支)，然而except中设置将被跳过。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  # use regexp</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - /^issue-.*$/</span><br><span class=\"line\">  # use special keyword</span><br><span class=\"line\">  except:</span><br><span class=\"line\">    - branches</span><br></pre></td></tr></table></figure>\n<p>在下面这个例子中，job将只会执行有tags的refs，或者通过API触发器明确地请求构建。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  # use special keywords</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - tags</span><br><span class=\"line\">    - triggers</span><br></pre></td></tr></table></figure>\n<p>仓库路径只能用于父级仓库执行jobs，而不是forks：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - branches@gitlab-org/gitlab-ce</span><br><span class=\"line\">  except:</span><br><span class=\"line\">    - master@gitlab-org/gitlab-ce</span><br></pre></td></tr></table></figure>\n<p>上面这个例子将会为所有的分支执行job，但master分支除外。</p>\n<h3 id=\"Job-variables\"><a href=\"#Job-variables\" class=\"headerlink\" title=\"Job variables\"></a>Job variables</h3><p>在job中是可以使用关键字<code>variables</code>来定义job变量。它的运行原理跟<a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#variables\"><code>global-level</code></a>是一样的，但是它允许设置特殊的job变量。</p>\n<p>当设置了job级别的关键字<code>variables</code>，它会覆盖全局YAML和预定义中的job变量。想要关闭全局变量可以在job中设置一个空数组：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job_name:</span><br><span class=\"line\">  variables: []</span><br></pre></td></tr></table></figure>\n<p>Job变量的优先级关系可查看variables文档说明。</p>\n<h3 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags\"></a>tags</h3><p><code>tags</code>可以从允许运行此项目的所有Runners中选择特定的Runners来执行jobs。</p>\n<p>在注册Runner的过程中，我们可以设置Runner的标签，比如<code>ruby</code>，<code>postgres</code>，<code>development</code>。</p>\n<p>tags可通过tags来指定特殊的Runners来运行jobs：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">    - ruby</span><br><span class=\"line\">    - postgres</span><br></pre></td></tr></table></figure>\n<p>上面这个示例中，需要确保构建此<code>job</code>的Runner必须定义了<code>ruby</code>和<code>postgres</code>这两个tags。</p>\n<h3 id=\"allow-failure\"><a href=\"#allow-failure\" class=\"headerlink\" title=\"allow_failure\"></a>allow_failure</h3><p><code>allow_failure</code>可以用于当你想设置一个job失败的之后并不影响后续的CI组件的时候。失败的jobs不会影响到commit状态。</p>\n<p>当开启了允许job失败，所有的intents和purposes里的pipeline都是成功/绿色，但是也会有一个”CI build passed with warnings”信息显示在merge request或commit或job page。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。</p>\n<p>下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个stage，因为这里有设置了allow_failure: true。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job1:</span><br><span class=\"line\">  stage: test</span><br><span class=\"line\">  script:</span><br><span class=\"line\">  - execute_script_that_will_fail</span><br><span class=\"line\">  allow_failure: true</span><br><span class=\"line\"></span><br><span class=\"line\">job2:</span><br><span class=\"line\">  stage: test</span><br><span class=\"line\">  script:</span><br><span class=\"line\">  - execute_script_that_will_succeed</span><br><span class=\"line\"></span><br><span class=\"line\">job3:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script:</span><br><span class=\"line\">  - deploy_to_staging</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"when\"><a href=\"#when\" class=\"headerlink\" title=\"when\"></a>when</h3><p>when is used to implement jobs that are run in case of failure or despite the failure.</p>\n<p>when可以设置以下值：</p>\n<ol>\n<li><p>on_success - 只有前面stages的所有工作成功时才执行。 这是默认值。</p>\n</li>\n<li><p>on_failure - 当前面stages中任意一个jobs失败后执行。</p>\n</li>\n<li><p>always - 无论前面stages中jobs状态如何都执行。</p>\n</li>\n<li><p><code>manual </code> - 手动执行(GitLab8.10增加)。更多请查看手动操作。<br>举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">stages:</span><br><span class=\"line\">- build</span><br><span class=\"line\">- cleanup_build</span><br><span class=\"line\">- test</span><br><span class=\"line\">- deploy</span><br><span class=\"line\">- cleanup</span><br><span class=\"line\"></span><br><span class=\"line\">build_job:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">  - make build</span><br><span class=\"line\"></span><br><span class=\"line\">cleanup_build_job:</span><br><span class=\"line\">  stage: cleanup_build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">  - cleanup build when failed</span><br><span class=\"line\">  when: on_failure</span><br><span class=\"line\"></span><br><span class=\"line\">test_job:</span><br><span class=\"line\">  stage: test</span><br><span class=\"line\">  script:</span><br><span class=\"line\">  - make test</span><br><span class=\"line\"></span><br><span class=\"line\">deploy_job:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script:</span><br><span class=\"line\">  - make deploy</span><br><span class=\"line\">  when: manual</span><br><span class=\"line\"></span><br><span class=\"line\">cleanup_job:</span><br><span class=\"line\">  stage: cleanup</span><br><span class=\"line\">  script:</span><br><span class=\"line\">  - cleanup after jobs</span><br><span class=\"line\">  when: always</span><br></pre></td></tr></table></figure>\n<p>脚本说明：</p>\n</li>\n<li><p>只有当build_job失败的时候才会执行`cleanup_build_job 。</p>\n</li>\n<li><p>不管前一个job执行失败还是成功都会执行`cleanup_job 。</p>\n</li>\n<li><p>可以从GitLab界面中手动执行deploy_jobs。</p>\n</li>\n</ol>\n<h3 id=\"Manual-actions\"><a href=\"#Manual-actions\" class=\"headerlink\" title=\"Manual actions\"></a>Manual actions</h3><blockquote>\n<p>GitLab 8.10 开始引入手动执行。GitLab 9.0 开始引入手动停止。GitLab 9.2 开始引入保护手动操作。</p>\n</blockquote>\n<p>手动操作指令是不自动执行的特殊类型的job；它们必须要人为启动。手动操作指令可以从pipeline，build，environment和deployment视图中启动。</p>\n<p>部署到生产环境是手动操作指令的一个很好示例。</p>\n<p>了解更多请查看<a href=\"https://docs.gitlab.com/ce/ci/environments.html#manually-deploying-to-environments\">environments documentation</a>。</p>\n<p>手动操作指令可以是可选的或阻塞。在定义了手动执行的那个stage中，手动操作指令将会停止pipline中的自动执行指令。当有人通过点击play按钮来执行需要手动执行的job时，可以来恢复pipeline的执行。</p>\n<p>当pipeline被阻塞时，即使是pipeline是成功状态也不会merge。被阻塞的pipelines也有一个特殊的状态，叫<code>manual</code>。</p>\n<p>手动操作指令默认是不阻塞的。如果你想要手动操作指令产生阻塞，首先需要在job的配置文件<code>.gitlab-ci.yml</code>中添加<code>allow_failure:false</code>。</p>\n<p>可选的手动操作指令默认设置<code>allow_failure:true</code>。</p>\n<p>可选动作的状态不影响整个pipeline的状态。</p>\n<p>手动操作指令被认为是写操作，所以当前用户触发操作时，必须拥有操作保护分支的权限。换句话说，为了触发一个手动操作指令到pipeline中正在运行的指定分支，当前用户必须拥有推送到这分支的权限。</p>\n<h3 id=\"enviroment\"><a href=\"#enviroment\" class=\"headerlink\" title=\"enviroment\"></a>enviroment</h3><blockquote>\n<p>注意：<br>GitLab 8.9 开始引入。<br>更多关于environment说明或者示例可以查看 <a href=\"https://docs.gitlab.com/ce/ci/environments.html\"><code>documentation about environments</code></a>。</p>\n</blockquote>\n<p><code>environment</code>用于定义job部署到特殊的环境中。如果指定了<code>environment</code>，并且没有该名称下的环境，则会自动创建新环境。</p>\n<p>在最简单的格式中，环境关键字可以定义为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy to production:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script: git push production HEAD:master</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    name: production</span><br></pre></td></tr></table></figure>\n<p>在上面这个例子中，<code>deploy to profuctionjob</code>将会执行部署到<code>production</code>环境的操作。</p>\n<h3 id=\"environment-name\"><a href=\"#environment-name\" class=\"headerlink\" title=\"environment:name\"></a>environment:name</h3><blockquote>\n<p>注意<br>GitLab 8.11 开始引入。<br>在GitLab8.11之前，环境名称定义为environment:production。现在推荐的做法是定义为name关键字。</p>\n</blockquote>\n<p><code>environment</code>名称可以包含：</p>\n<ul>\n<li>英文字母(letters)</li>\n<li>数字(digits)</li>\n<li>空格(spaces)</li>\n<li>-</li>\n<li>_</li>\n<li>/</li>\n<li>$</li>\n<li>{</li>\n<li>}<br>常用的名称有<code>qa,staging，和production</code>，当然你可以在你的工作流中使用任意名字。</li>\n</ul>\n<p>除了在<code>environment</code>关键字右边紧跟name定义方法外，也是可以为环境名称单独设定一个值。例如，用<code>name</code>关键字在<code>environment</code>下面设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy to production:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script: git push production HEAD:master</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    name: production</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"environment-url\"><a href=\"#environment-url\" class=\"headerlink\" title=\"environment:url\"></a>environment:url</h3><blockquote>\n<p>注意：</p>\n<ul>\n<li>GitLab 8.11 开始引用。</li>\n<li>在GitLab 8.11之前，URL只能在GitLab’s UI中添加。现在推荐的定义方法是在.gitlab-ci.yml。<br>这是设置一个可选值，它会显示在按钮中，点击它可以带你到设置的URL页面。</li>\n</ul>\n</blockquote>\n<p>在下面这个例子中，如果job都成功完成了，在environment/deployments页面中将会创建一个合并请求的按钮，它将指向<code>https://prod.example.com</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy to production:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script: git push production HEAD:master</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    name: production</span><br><span class=\"line\">    url: https://prod.example.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"environment-on-stop\"><a href=\"#environment-on-stop\" class=\"headerlink\" title=\"environment:on_stop\"></a>environment:on_stop</h3><blockquote>\n<p>注意：</p>\n<ul>\n<li>GitLab 8.13中开始引入。</li>\n<li>从GitLab 8.14开始，当在<code>environment</code>中定义了一个stop操作，GitLab将会在相关联的分支本删除时自动触发一个stop操作。<br>关闭(停止)environments可以通过在environment下定义关键字<code>on_stop</code>来实现。它定义了一个不同的job，用于关闭environment。</li>\n</ul>\n</blockquote>\n<p>请查看<code>environment:action</code>模块中例子。</p>\n<h3 id=\"environment-action\"><a href=\"#environment-action\" class=\"headerlink\" title=\"environment:action\"></a>environment:action</h3><blockquote>\n<p>Gitlab 8.13 开始引入。</p>\n</blockquote>\n<p><code>action</code>和<code>on_stop</code>联合使用，定义在job中，用来关闭environment。</p>\n<p>举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">review_app:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script: make deploy-app</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    name: review</span><br><span class=\"line\">    on_stop: stop_review_app</span><br><span class=\"line\"></span><br><span class=\"line\">stop_review_app:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script: make delete-app</span><br><span class=\"line\">  when: manual</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    name: review</span><br><span class=\"line\">    action: stop</span><br></pre></td></tr></table></figure>\n<p>上面这个例子中，我们定义了<code>review_appjob</code>来部署到<code>review</code>环境中，同时我们也定义了一个新<code>stop_review_appjob</code>在<code>on_stop</code>中。一旦<code>review_appjob</code>执行完成并且成功，它将触发定义在<code>when</code>中的<code>stop_review_appjob</code>。在这种情况下，我们设置为<code>manual</code>，需要通过GitLab’s web界面来允许<a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#manual-actions\"><code>manual action</code></a>。</p>\n<p><code>stop_review_appjob</code>需要定义下面这些关键字：</p>\n<ul>\n<li><code>when</code> - <a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#when\"><code>说明</code></a></li>\n<li><code>environment:name</code></li>\n<li><code>environment:action</code></li>\n<li><code>stage</code>需要和<code>review_app</code>相同，以便分支删除被删除的时候自动执行停止。</li>\n</ul>\n<h3 id=\"dynamic-environment\"><a href=\"#dynamic-environment\" class=\"headerlink\" title=\"dynamic environment\"></a>dynamic environment</h3><blockquote>\n<p>注意：</p>\n<blockquote>\n<p>GitLab 8.12开始引入，并且要求GitLab Runner 1.6 。<br>GitLab 8.15开始引入<code>$CI_ENVIRONMENT_SLUG</code>。</p>\n</blockquote>\n</blockquote>\n<p><code>environment</code>也可以是代表配置项，其中包含<code>name</code>和<code>url</code>。这些参数可以使用任何的<a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#variables\"><code>CI variables</code></a>(包括预定义、安全变量和<code>.gitlab-ci.yml</code>中的变量)。</p>\n<p>举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy as review app:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script: make deploy</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    name: review/$CI_COMMIT_REF_NAME</span><br><span class=\"line\">    url: https://$CI_ENVIRONMENT_SLUG.example.com/</span><br></pre></td></tr></table></figure>\n<p>当<code>$CI_COMMIT_REF_NAME</code> 被Runner设置为<a href=\"https://docs.gitlab.com/ce/ci/variables/README.html\"><code>environment variable</code></a>时，<code>deply as review appjob</code>将会被指定部署到动态创建<code>revuew/$CI_COMMIT_REF_NAME</code>的环境中。<code>$CI_ENVIRONMENT_SLUG</code>变量是基于环境名称的，最终组合成完整的URLs。在这种情况下，如果<code>deploy as review appjob</code>是运行在名称为<code>pow</code>的分支下，那么可以通过URL<code>https&quot;//review-pw.example.com/</code>来访问这个环境。</p>\n<p>这当然意味着托管应用程序的底层服务器已经正确配置。</p>\n<p>常见的做法是为分支创建动态环境，并讲它们作为Review Apps。</p>\n<h3 id=\"artifacts\"><a href=\"#artifacts\" class=\"headerlink\" title=\"artifacts\"></a>artifacts</h3><blockquote>\n<p>注意：</p>\n</blockquote>\n<ul>\n<li>非Windows平台从GitLab Runner v0.7.0中引入。</li>\n<li>Windows平台从GitLab Runner V1.0.0中引入。</li>\n<li>在GItLab 9.2之前，在artifacts之后存储缓存。</li>\n<li>在GItLab 9.2之后，在artifacts之前存储缓存。</li>\n<li>目前并不是所有的executors都支持。</li>\n<li>默认情况下，job artifacts 只正对成功的jobs收集。</li>\n</ul>\n<p><code>artifacts</code>用于指定成功后应附加到job的文件和目录的列表。只能使用项目工作间内的文件或目录路径。如果想要在不通的job之间传递artifacts，请<a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies\">查阅依赖关系</a>。以下是一些例子：</p>\n<p>发送<code>binaries</code>和<code>.config</code>中的所有文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">artifacts:</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">  - binaries/</span><br><span class=\"line\">  - .config</span><br></pre></td></tr></table></figure>\n<p>发送所有没有被Git跟踪的文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">artifacts:</span><br><span class=\"line\">  untracked: true</span><br></pre></td></tr></table></figure>\n<p>发送没有被Git跟踪和<code>binaries</code>中的所有文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">artifacts:</span><br><span class=\"line\">  untracked: true</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">  - binaries/</span><br></pre></td></tr></table></figure>\n<p>定义一个空的<code>dependencies</code>可以禁用artifact传递：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  script: make build</span><br><span class=\"line\">  dependencies: []</span><br></pre></td></tr></table></figure>\n<p>有时候只需要为标签为releases创建artifacts，以避免将临时构建的artifacts传递到生产服务器中。</p>\n<p>只为tags创建artifacts（<code>default-job</code>将不会创建artifacts）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">default-job:</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - mvn test -U</span><br><span class=\"line\">  except:</span><br><span class=\"line\">    - tags</span><br><span class=\"line\"></span><br><span class=\"line\">release-job:</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - mvn package -U</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    paths:</span><br><span class=\"line\">    - target/*.war</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - tags</span><br><span class=\"line\">在job成功完成后artifacts将会发送到GitLab中，同时也会在GitLab UI中提供下载。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"artifacts-name\"><a href=\"#artifacts-name\" class=\"headerlink\" title=\"artifacts:name\"></a>artifacts:name</h3><blockquote>\n<p>GitLab 8.6 和 Runner v1.1.0 引入。</p>\n</blockquote>\n<p><code>name</code>允许定义创建的artifacts存档的名称。这样一来，我们可以为每个存档提供一个唯一的名称，当需要从GitLab中下载是才不会混乱。artifacts:name可以使用任何的预定义变量(predefined variables)。它的默认名称为artifacts，当下载是就变成了artifacts.zip。</p>\n<h3 id=\"配置示例-1\"><a href=\"#配置示例-1\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h3><p>通过使用当前job的名字作为存档名称：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    name: &quot;$CI_JOB_NAME&quot;</span><br></pre></td></tr></table></figure>\n<p>使用当前分支名称或者是tag作为存到名称，只存档没有被Git跟踪的文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">   artifacts:</span><br><span class=\"line\">     name: &quot;$CI_COMMIT_REF_NAME&quot;</span><br><span class=\"line\">     untracked: true</span><br></pre></td></tr></table></figure>\n<p>使用当前job名称和当前分支名称或者是tag作为存档名称，只存档没有被Git跟踪的文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    name: &quot;$&#123;CI_JOB_NAME&#125;_$&#123;CI_COMMIT_REF_NAME&#125;&quot;</span><br><span class=\"line\">    untracked: true</span><br></pre></td></tr></table></figure>\n<p>使用当前stage和分支名称作为存档名称：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    name: &quot;$&#123;CI_JOB_STAGE&#125;_$&#123;CI_COMMIT_REF_NAME&#125;&quot;</span><br><span class=\"line\">    untracked: true</span><br></pre></td></tr></table></figure>\n<p>如果是使用Windows批处理来运行yaml脚本，需要用%替换$：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    name: &quot;%CI_JOB_STAGE%_%CI_COMMIT_REF_NAME%&quot;</span><br><span class=\"line\">    untracked: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"artifacts-when\"><a href=\"#artifacts-when\" class=\"headerlink\" title=\"artifacts:when\"></a>artifacts:when</h3><blockquote>\n<p>GitLab 8.9和GitLab Runner v1.3.0 引入。<br>在job失败的时候，<code>artifacts:when</code>用来上传artifacts或者忽略失败。</p>\n</blockquote>\n<p><code>artifacts:when</code>可以设置一下值：</p>\n<ol>\n<li>on_success - 当job成功的时候上传artifacts。默认值。</li>\n<li>on_failure - 当job失败的时候上传artifacts。</li>\n<li>always - 不论job失败还是成功都上传artifacts。</li>\n</ol>\n<h4 id=\"示例配置\"><a href=\"#示例配置\" class=\"headerlink\" title=\"示例配置\"></a>示例配置</h4><p>只在job失败的时候上传artifacts。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    when: on_failure</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"artifacts-expire-in\"><a href=\"#artifacts-expire-in\" class=\"headerlink\" title=\"artifacts:expire_in\"></a>artifacts:expire_in</h3><blockquote>\n<p>GitLab 8.9 和 GitLab Runner v1.3.0 引入。</p>\n</blockquote>\n<p><code>artifacts:expire_in</code>用于过期后删除邮件上传的artifacts。默认情况下，artifacts都是在GitLab中永久保存。<code>expire_in</code>允许设置设置artifacts的存储时间，从它们被上传存储到GitLab开始计算。</p>\n<p>可以通过job页面的<code>Keep</code>来修改有效期。</p>\n<p>过期后，artifacts会被通过一个默认每小时执行一次的定时job删除，所以在过期后无法访问artifacts。</p>\n<p><code>expire_in</code>是一个时间区间。下面可设置的值：</p>\n<ul>\n<li>‘3 mins 4 sec’</li>\n<li>‘2 hrs 20 min’</li>\n<li>‘2h20min’</li>\n<li>‘6 mos 1 day’</li>\n<li>‘47 yrs 6 mos and 4d’</li>\n<li>‘3 weeks and 2 days’</li>\n</ul>\n<h5 id=\"示例配置-1\"><a href=\"#示例配置-1\" class=\"headerlink\" title=\"示例配置\"></a>示例配置</h5><p>设置artifacts的有效期为一个星期：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job:</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    expire_in: 1 week</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h3><blockquote>\n<p>GitLab 8.6 和 GitLab RUnner v1.1.1引入。</p>\n</blockquote>\n<p>这个功能应该与<code>artifacts</code>一起使用，并允许定义在不同jobs之间传递artifacts。</p>\n<p>注意：所有之前的stages都是默认设置通过。</p>\n<p>如果要使用此功能，应该在上下文的job中定义dependencies，并且列出之前都已经通过的jobs和可下载的artifacts。你只能在当前执行的stages前定义jobs。你如果在当前stages或者后续的stages中定义了jobs，它将会报错。可以通过定义一个空数组是当前job跳过下载artifacts。</p>\n<p>在接下来的例子中，我们定义两个带artifacts的jobs，build:osx和build:linux。当test:osx开始执行的时候，build:osx的artifacts就会开始下载并且会在build的stages下执行。同样的会发生在test:linux，从build:linux中下载artifacts。</p>\n<p>因为stages的优先级关系，deployjob将会下载之前jobs的所有artifacts：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">build:osx:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  script: make build:osx</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    paths:</span><br><span class=\"line\">    - binaries/</span><br><span class=\"line\"></span><br><span class=\"line\">build:linux:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  script: make build:linux</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    paths:</span><br><span class=\"line\">    - binaries/</span><br><span class=\"line\"></span><br><span class=\"line\">test:osx:</span><br><span class=\"line\">  stage: test</span><br><span class=\"line\">  script: make test:osx</span><br><span class=\"line\">  dependencies:</span><br><span class=\"line\">  - build:osx</span><br><span class=\"line\"></span><br><span class=\"line\">test:linux:</span><br><span class=\"line\">  stage: test</span><br><span class=\"line\">  script: make test:linux</span><br><span class=\"line\">  dependencies:</span><br><span class=\"line\">  - build:linux</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script: make deploy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"before-script-和-after-script\"><a href=\"#before-script-和-after-script\" class=\"headerlink\" title=\"before_script 和 after_script\"></a>before_script 和 after_script</h3><p>它可能会覆盖全局定义的before_script和after_script：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">before_script:</span><br><span class=\"line\">- global before script</span><br><span class=\"line\"></span><br><span class=\"line\">job:</span><br><span class=\"line\">  before_script:</span><br><span class=\"line\">  - execute this instead of global before script</span><br><span class=\"line\">  script:</span><br><span class=\"line\">  - my command</span><br><span class=\"line\">  after_script:</span><br><span class=\"line\">  - execute this after my script</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"coverage\"><a href=\"#coverage\" class=\"headerlink\" title=\"coverage\"></a>coverage</h3><blockquote>\n<p>注意：<br>GitLab 8.17 引入。</p>\n</blockquote>\n<p><code>coverage</code>允许你配置代码覆盖率将会从该job中提取输出。</p>\n<p>在这里正则表达式是唯一有效的值。因此，字符串的前后必须使用/包含来表明一个正确的正则表达式规则。特殊字符串需要转义。</p>\n<p>一个简单的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">job1:</span><br><span class=\"line\">  coverage: &#x27;/Code coverage: \\d+\\.\\d+/&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git-Strategy\"><a href=\"#Git-Strategy\" class=\"headerlink\" title=\"Git Strategy\"></a>Git Strategy</h3><blockquote>\n<p>GitLab 8.9中以试验性功能引入。将来的版本中可能改变或完全移除。GIT_STRATEGY要求GitLab Runner v1.7+。</p>\n</blockquote>\n<p>你可以通过设置GIT_STRATEGY用于获取最新的代码，可以再全局variables或者是在单个job的variables模块中设置。如果没有设置，将从项目中使用默认值。</p>\n<p>可以设置的值有：clone，fetch，和none。</p>\n<p>clone是最慢的选项。它会从头开始克隆整个仓库，包含每一个job，以确保项目工作区是最原始的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">variables:</span><br><span class=\"line\">  GIT_STRATEGY: clone</span><br></pre></td></tr></table></figure>\n<p>当它重新使用项目工作区是，fetch是更快（如果不存在则返回克隆）。git clean用于撤销上一个job做的任何改变，git fetch用于获取上一个job到现在的的commit。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">variables:</span><br><span class=\"line\">  GIT_STRATEGY: fetch</span><br></pre></td></tr></table></figure>\n<p>none也是重新使用项目工作区，但是它会跳过所有的Git操作（包括GitLab Runner前的克隆脚本，如果存在的话）。它主要用在操作job的artifacts（例如：deploy）。Git数据仓库肯定是存在的，但是他肯定不是最新的，所以你只能依赖于从项目工作区的缓存或者是artifacts带来的文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">variables:</span><br><span class=\"line\">  GIT_STRATEGY: none</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git-Checout\"><a href=\"#Git-Checout\" class=\"headerlink\" title=\"Git Checout\"></a>Git Checout</h3><blockquote>\n<p>GitLab Runner 9.3 引入。</p>\n</blockquote>\n<p>当GIT_STRATEGY设置为clone或fetch时，可以使用GIT_CHECKOUT变量来指定是否应该运行git checkout。如果没有指定，它默认为true。就像GIT_STRATEGY一样，它可以设置在全局variables或者是单个job的variables中设置。</p>\n<p>如果设置为false，Runner就会：</p>\n<ul>\n<li>fetch - 更新仓库并在当前版本中保留工作副本，</li>\n<li>clone - 克隆仓库并在默认分支中保留工作副本。<br>Having this setting set to true will mean that for both clone and fetch strategies the Runner will checkout the working copy to a revision related to the CI pipeline:</li>\n</ul>\n<p>【如果设置这个为true将意味着clone和fetch策略都会让Runner执行项目工作区更新到最新：】</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">variables:</span><br><span class=\"line\">  GIT_STRATEGY: clone</span><br><span class=\"line\">  GIT_CHECKOUT: false</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - git checkout master</span><br><span class=\"line\">  - git merge $CI_BUILD_REF_NAME</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git-Submodule-Strategy\"><a href=\"#Git-Submodule-Strategy\" class=\"headerlink\" title=\"Git Submodule Strategy\"></a>Git Submodule Strategy</h3><blockquote>\n<p>需要GitLab Runner v1.10+。</p>\n</blockquote>\n<p>GIT_SUBMODULE_STRATEGY变量用于在构建之前拉取代码时，Git子模块是否或者如何被引入。就像GIT_STRATEGY一样，它可在全局variables或者是单个job的variables模块中设置。</p>\n<p>它的可用值有：none，normal和recursive：</p>\n<p>none意味着在拉取项目代码时，子模块将不会被引入。这个是默认值，与v1.10之前相同的。<br>normal意味着在只有顶级子模块会被引入。它相当于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git submodule sync</span><br><span class=\"line\">git submodule update --init</span><br></pre></td></tr></table></figure>\n<p>recursive意味着所有的子模块（包括子模块的子模块）都会被引入，他相当于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git submodule sync --recursive</span><br><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n<p>注意：如果想要此功能正常工作，子模块必须配置（在.gitmodules）下面中任意一个：</p>\n<p>可访问的公共仓库http(s)地址，<br>在同一个GitLab服务器上有一个可访问到另外的仓库的真实地址。更多查看Git 子模块文档。</p>\n<h3 id=\"Job-stages-attempts\"><a href=\"#Job-stages-attempts\" class=\"headerlink\" title=\"Job stages attempts\"></a>Job stages attempts</h3><p>GitLab引入，要求GItLab Runner v1.9+。<br>正在执行的job将会按照你设置尝试次数依次执行下面的stages：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET_SOURCES_ATTEMPTS</td>\n<td>获取job源的尝试次数</td>\n</tr>\n<tr>\n<td>ARTIFACT_DOWNLOAD_ATTEMPTS</td>\n<td>下载artifacts的尝试次数</td>\n</tr>\n<tr>\n<td>RESTORE_CACHE_ATTEMPTS</td>\n<td>重建缓存的尝试次数</td>\n</tr>\n</tbody></table>\n<p>默认是一次尝试。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">variables:</span><br><span class=\"line\">  GET_SOURCES_ATTEMPTS: 3</span><br></pre></td></tr></table></figure>\n\n<p>你可以在全局variables模块中设置，也可以在单个job的variables模块中设置。</p>\n<h3 id=\"Shallow-cloning\"><a href=\"#Shallow-cloning\" class=\"headerlink\" title=\"Shallow cloning\"></a>Shallow cloning</h3><blockquote>\n<p>GitLab 8.9 以实验性功能引入。在将来的版本中有可能改变或者完全移除。</p>\n</blockquote>\n<p>你可以通过GIT_DEPTH来指定抓取或克隆的深度。它可浅层的克隆仓库，这可以显著加速具有大量提交和旧的大型二进制文件的仓库的克隆。这个设置的值会传递给git fetch和git clone。</p>\n<blockquote>\n<p>注意：如果设置depth=1，并且有一个jobs队列或者是重试jobs，则jobs可能会失败。</p>\n</blockquote>\n<p>由于Git抓取和克隆是基于一个REF，例如分支的名称，所以Runner不能指定克隆一个commit SHA。如果队列中有多个jobs，或者您正在重试旧的job，则需要测试的提交应该在克隆的Git历史记录中存在。设置GIT_DEPTH太小的值可能会导致无法运行哪些旧的commits。在job日志中可以查看unresolved reference。你应该考虑设置GIT_DEPTH为一个更大的值。</p>\n<p>当GIT_DEPTH只设置了部分存在的记录时，哪些依赖于git describe的jobs也许不能正确的工作。</p>\n<p>只抓取或克隆最后的3次commits：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">variables:</span><br><span class=\"line\">  GIT_DEPTH: &quot;3&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hidden-keys\"><a href=\"#Hidden-keys\" class=\"headerlink\" title=\"Hidden keys\"></a>Hidden keys</h3><blockquote>\n<p>GitLab 8.6 和 GitLab Runner v1.1.1引入。</p>\n</blockquote>\n<p>Key 是以.开始的，GitLab CI 将不会处理它。你可以使用这个功能来忽略jobs，或者用Special YAML features 转换隐藏键为模版。</p>\n<p>在下面这个例子中，.key_name将会被忽略：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.key_name:</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - rake spec</span><br></pre></td></tr></table></figure>\n\n<p>Hidden keys 可以是像普通CI jobs一样的哈希值，但你也可以利用special YAMLfeatures来使用不同类型的结构。</p>\n<h3 id=\"Special-YAML-features\"><a href=\"#Special-YAML-features\" class=\"headerlink\" title=\"Special YAML features\"></a>Special YAML features</h3><p>使用special YAML features 像anchors(&amp;)，aliases(*)和map merging(&lt;&lt;)，这将使您可以大大降低.gitlab-ci.yml的复杂性。</p>\n<p>查看更多YAML features。</p>\n<h3 id=\"Anchors\"><a href=\"#Anchors\" class=\"headerlink\" title=\"Anchors\"></a>Anchors</h3><p>GitLab 8.6 和 GitLab Runner v1.1.1引入。<br>YAML有个方便的功能称为”锚”,它可以让你轻松的在文档中复制内容。Anchors可用于复制/继承属性，并且是使用hidden keys来提供模版的完美示例。</p>\n<p>下面这个例子使用了anchors和map merging。它将会创建两个jobs，test1和test2，该jobs将集成.job_template的参数，每个job都自定义脚本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">.job_template: &amp;job_definition  # Hidden key that defines an anchor named &#x27;job_definition&#x27;</span><br><span class=\"line\">  image: ruby:2.1</span><br><span class=\"line\">  services:</span><br><span class=\"line\">    - postgres</span><br><span class=\"line\">    - redis</span><br><span class=\"line\"></span><br><span class=\"line\">test1:</span><br><span class=\"line\">  &lt;&lt;: *job_definition           # Merge the contents of the &#x27;job_definition&#x27; alias</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - test1 project</span><br><span class=\"line\"></span><br><span class=\"line\">test2:</span><br><span class=\"line\">  &lt;&lt;: *job_definition           # Merge the contents of the &#x27;job_definition&#x27; alias</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - test2 project</span><br></pre></td></tr></table></figure>\n\n<p><code>&amp;</code>在anchor的名称(<code>job_definition</code>)前设置，&lt;&lt;表示”merge the given hash into the current one”，*包括命名的anchor(<code>job_definition</code>)。扩展版本如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.job_template:</span><br><span class=\"line\">  image: ruby:2.1</span><br><span class=\"line\">  services:</span><br><span class=\"line\">    - postgres</span><br><span class=\"line\">    - redis</span><br><span class=\"line\"></span><br><span class=\"line\">test1:</span><br><span class=\"line\">  image: ruby:2.1</span><br><span class=\"line\">  services:</span><br><span class=\"line\">    - postgres</span><br><span class=\"line\">    - redis</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - test1 project</span><br><span class=\"line\"></span><br><span class=\"line\">test2:</span><br><span class=\"line\">  image: ruby:2.1</span><br><span class=\"line\">  services:</span><br><span class=\"line\">    - postgres</span><br><span class=\"line\">    - redis</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - test2 project</span><br></pre></td></tr></table></figure>\n\n<p>让我们来看另外一个例子。这一次我们将用anchors来定义两个服务。两个服务会创建两个job，test:postgres和test:mysql，他们会在.job_template中共享定义的script指令，以及分别在.postgres_services和.mysql_services中定义的service指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">.job_template: &amp;job_definition</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - test project</span><br><span class=\"line\"></span><br><span class=\"line\">.postgres_services:</span><br><span class=\"line\">  services: &amp;postgres_definition</span><br><span class=\"line\">    - postgres</span><br><span class=\"line\">    - ruby</span><br><span class=\"line\"></span><br><span class=\"line\">.mysql_services:</span><br><span class=\"line\">  services: &amp;mysql_definition</span><br><span class=\"line\">    - mysql</span><br><span class=\"line\">    - ruby</span><br><span class=\"line\"></span><br><span class=\"line\">test:postgres:</span><br><span class=\"line\">  &lt;&lt;: *job_definition</span><br><span class=\"line\">  services: *postgres_definition</span><br><span class=\"line\"></span><br><span class=\"line\">test:mysql:</span><br><span class=\"line\">  &lt;&lt;: *job_definition</span><br><span class=\"line\">  services: *mysql_definition</span><br></pre></td></tr></table></figure>\n\n<p>扩展版本如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">.job_template:</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - test project</span><br><span class=\"line\"></span><br><span class=\"line\">.postgres_services:</span><br><span class=\"line\">  services:</span><br><span class=\"line\">    - postgres</span><br><span class=\"line\">    - ruby</span><br><span class=\"line\"></span><br><span class=\"line\">.mysql_services:</span><br><span class=\"line\">  services:</span><br><span class=\"line\">    - mysql</span><br><span class=\"line\">    - ruby</span><br><span class=\"line\"></span><br><span class=\"line\">test:postgres:</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - test project</span><br><span class=\"line\">  services:</span><br><span class=\"line\">    - postgres</span><br><span class=\"line\">    - ruby</span><br><span class=\"line\"></span><br><span class=\"line\">test:mysql:</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - test project</span><br><span class=\"line\">  services:</span><br><span class=\"line\">    - mysql</span><br><span class=\"line\">    - ruby</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到hidden keys被方便的用作模版。</p>\n<h3 id=\"Triggers\"><a href=\"#Triggers\" class=\"headerlink\" title=\"Triggers\"></a>Triggers</h3><p>Triggers 可用于强制使用API调用重建特定分支，tag或commits。</p>\n<p>在triggers文档中查看更多。</p>\n<h3 id=\"pages\"><a href=\"#pages\" class=\"headerlink\" title=\"pages\"></a>pages</h3><p>pages是一个特殊的job，用于将静态的内容上传到GitLab，可用于为您的网站提供服务。它有特殊的语法，因此必须满足以下两个要求：</p>\n<p>任何静态内容必须放在public/目录下<br>artifacts必须定义在public/目录下<br>下面的这个例子是将所有文件从项目根目录移动到public/目录。.public工作流是cp，并且它不会循环复制public/本身。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pages:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  script:</span><br><span class=\"line\">  - mkdir .public</span><br><span class=\"line\">  - cp -r * .public</span><br><span class=\"line\">  - mv .public public</span><br><span class=\"line\">  artifacts:</span><br><span class=\"line\">    paths:</span><br><span class=\"line\">    - public</span><br><span class=\"line\">  only:</span><br><span class=\"line\">  - master</span><br></pre></td></tr></table></figure>\n\n<p>更多内容请查看GitLab Pages用户文档。</p>\n<h3 id=\"Validate-the-gitlab-ci-yml\"><a href=\"#Validate-the-gitlab-ci-yml\" class=\"headerlink\" title=\"Validate the .gitlab-ci.yml\"></a>Validate the .gitlab-ci.yml</h3><p>GitLab CI的每个实例都有一个名为Lint的嵌入式调试工具。 你可以在gitlab实例的/ci/lint下找到该链接。</p>\n<h3 id=\"Skipping-jobs\"><a href=\"#Skipping-jobs\" class=\"headerlink\" title=\"Skipping jobs\"></a>Skipping jobs</h3><p>如果你的commit信息中包含[ci skip]或者[skip ci]，不论大小写，那么这个commit将会创建但是jobs也会跳过。</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><p>访问<a href=\"https://docs.gitlab.com/ce/ci/examples/README.html\">examples README</a>来查看各种语言的GitLab CI用法示例。</p>\n","categories":["OPS"],"tags":["Git","GitLab","OPS","CI/CD"]},{"title":"Golang-指针、类型自定义、类型别名、结构体、json序列化、面向对象、包","url":"/forward/b17eefd4.html","content":"<h1 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h1><p>指针地址、指针类型、指针取值</p>\n<p><strong>指针概念：</strong>任何程序数据载入内存后，在内存都有他们的地址，这就是指针。而为了保存一个数据在内存中的地址，我们就需要指针变量。</p>\n<p>指针和地址的区别：</p>\n<ul>\n<li><p>地址：就是内存地址(用字节来描述的内存地址)</p>\n</li>\n<li><p>指针：指针是带类型的</p>\n</li>\n</ul>\n<p>Go语言中的指针不能进行偏移和运算，因此Go语言中的指针操作非常简单，我们只需要记住两个符号：<code>&amp;</code>（取地址）和<code>*</code>（根据地址取值）。</p>\n<p>Go语言中使用<code>&amp;</code>字符放在变量前面对变量进行“取地址”操作。 Go语言中的值类型（int、float、bool、string、array、struct）都有对应的指针类型，如：<code>*int</code>、<code>*int64</code>、<code>*string</code>等。</p>\n<h2 id=\"指针取值\"><a href=\"#指针取值\" class=\"headerlink\" title=\"指针取值\"></a>指针取值</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"type\">int</span> = <span class=\"number\">2</span></span><br><span class=\"line\">\tb := &amp;a <span class=\"comment\">//取变量a的内存地址</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T,%v\\n&quot;</span>,b,b)</span><br><span class=\"line\"><span class=\"comment\">//*int,0xc00000a0b0</span></span><br><span class=\"line\">\tfmt.Println(*b)</span><br><span class=\"line\"> <span class=\"comment\">//根据内存地址取值 //2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong> 取地址操作符<code>&amp;</code>和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值。</p>\n<h2 id=\"指针传递\"><a href=\"#指针传递\" class=\"headerlink\" title=\"指针传递\"></a>指针传递</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(A1 [4]<span class=\"type\">int</span>)</span></span>&#123;</span><br><span class=\"line\">\tA1[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tArray := [<span class=\"number\">4</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125; <span class=\"comment\">//定义一个数组，数组为值类型</span></span><br><span class=\"line\">\tfmt.Println(Array) <span class=\"comment\">//[1 2 3 4]</span></span><br><span class=\"line\">\tmodify(Array)</span><br><span class=\"line\">\tfmt.Println(Array) <span class=\"comment\">//[1 2 3 4]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(A1 *[4]<span class=\"type\">int</span>)</span></span>&#123; <span class=\"comment\">//对指针变量进行取值（*）操作，可以获得指针变量指向的原变量的值。</span></span><br><span class=\"line\">\tA1[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\"> <span class=\"comment\">//语法糖简易写法</span></span><br><span class=\"line\">    <span class=\"comment\">//(*a1)[0] = 100 //正规写法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tArray := [<span class=\"number\">4</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125; <span class=\"comment\">//定义一个数组，数组为值类型</span></span><br><span class=\"line\">\tfmt.Println(Array) <span class=\"comment\">//[1 2 3 4]</span></span><br><span class=\"line\">\tmodify(&amp;Array) <span class=\"comment\">//对变量进行取地址（&amp;）操作，可以获得这个变量的指针变量。</span></span><br><span class=\"line\">\tfmt.Println(Array) <span class=\"comment\">//[100 2 3 4]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"new-和make\"><a href=\"#new-和make\" class=\"headerlink\" title=\"new()和make()\"></a>new()和make()</h2><p><code>new()</code>是用来初始化<strong>值类型</strong>指针，来得到一个指定类型的指针</p>\n<p>它的函数签名如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">new</span><span class=\"params\">(Type)</span></span> *Type</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<ul>\n<li><p>Type表示类型，new函数只接受一个参数，这个参数是一个类型</p>\n</li>\n<li><p>*Type表示类型指针，new函数返回一个指向该类型内存地址的指针。</p>\n</li>\n</ul>\n<p><code>make()</code>是用来初始化<strong>引用类型</strong>指针的，如slice、map、chan</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t<span class=\"comment\">//a *int //a是一个int类型的指针，错误写法</span></span><br><span class=\"line\">\ta = <span class=\"built_in\">new</span>(<span class=\"type\">int</span>) <span class=\"comment\">//得到一个int类型的指针</span></span><br><span class=\"line\">\tb = <span class=\"built_in\">new</span>([<span class=\"number\">3</span>]<span class=\"type\">int</span>) <span class=\"comment\">//得到一个切片类型的指针</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T,%v,%v \\n&quot;</span>,a,a,*a) <span class=\"comment\">//*int,0xc00000a0b0,0</span></span><br><span class=\"line\">\t*a = <span class=\"number\">10</span> <span class=\"comment\">//对指针中内存地址中的值进行修改</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T,%v,%v \\n&quot;</span>,a,a,*a) <span class=\"comment\">//*int,0xc00000a0b0,10</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(*b) <span class=\"comment\">//[0 0 0]</span></span><br><span class=\"line\">\t(*b)[<span class=\"number\">0</span>] = <span class=\"number\">100</span> <span class=\"comment\">//对指针中内存地址中的值进行修改</span></span><br><span class=\"line\">\tfmt.Println(*b) <span class=\"comment\">//[100 0 0]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"panic和recover\"><a href=\"#panic和recover\" class=\"headerlink\" title=\"panic和recover\"></a>panic和recover</h1><p>程序运行期间<code>f1</code>中引发了<code>panic</code>导致程序崩溃，异常退出了。这个时候我们就可以通过<code>recover</code>将程序恢复回来，继续往后执行。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;捕获错误&quot;</span>,err)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a []<span class=\"type\">int</span></span><br><span class=\"line\">\ta[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tf1()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;这是main函数&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//捕获错误 runtime error: index out of range [0] with length 0</span></span><br><span class=\"line\"><span class=\"comment\">//这是main函数</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自定义类型和类型别名\"><a href=\"#自定义类型和类型别名\" class=\"headerlink\" title=\"自定义类型和类型别名\"></a>自定义类型和类型别名</h1><p><strong>自定义类型：</strong></p>\n<p> Go语言中可以使用<code>type</code>关键字来定义自定义类型。通过<code>type</code>关键字的定义，<code>MyInt</code>就是一种新的类型，它具有<code>int</code>的特性。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将MyInt定义为int类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>类型别名：</strong></p>\n<p>内置：byte[字节] 实际是<code>uint8</code>，rune 实际是<code>int32</code>，分别代表ASCII码和UTF8编码，用于处理英文和其他语言。</p>\n<p>TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。只存在代码编写过程中，增加代码可读性。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义TypeAlias为Type类型的别名</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> TypeAlias = Type</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h1><p>Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称<code>struct</code>。 也就是我们可以通过<code>struct</code>来定义自己的类型了。</p>\n<p>Go语言中通过<code>struct</code>来实现面向对象。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建新的类型要使用type关键字</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//定义一个结构体</span></span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage <span class=\"type\">int</span></span><br><span class=\"line\">\tgender <span class=\"type\">bool</span></span><br><span class=\"line\">\thobby []<span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> felix = Employee&#123;</span><br><span class=\"line\"> <span class=\"comment\">//声明一个结构体的变量，并赋值</span></span><br><span class=\"line\">\t\tname : <span class=\"string\">&quot;felix&quot;</span>,</span><br><span class=\"line\">\t\tage : <span class=\"number\">19</span>,</span><br><span class=\"line\">\t\tgender: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\thobby: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;游戏&quot;</span>,<span class=\"string\">&quot;pipix&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(felix) <span class=\"comment\">//&#123;felix 19 true [游戏 pipix]&#125;</span></span><br><span class=\"line\">\tfmt.Println(felix.name) <span class=\"comment\">//felix</span></span><br><span class=\"line\">\tfmt.Println(felix.gender) <span class=\"comment\">//true</span></span><br><span class=\"line\">\tfelix.gender=<span class=\"literal\">false</span></span><br><span class=\"line\">\tfmt.Println(felix.gender) <span class=\"comment\">//felix</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体的实例化\"><a href=\"#结构体的实例化\" class=\"headerlink\" title=\"结构体的实例化\"></a>结构体的实例化</h2><p>只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</p>\n<p>结构体本身也是一种类型，我们可以像声明内置类型一样使用<code>var</code>关键字声明结构体类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 结构体实例 结构体类型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本实例化\"><a href=\"#基本实例化\" class=\"headerlink\" title=\"基本实例化\"></a>基本实例化</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> pop <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage <span class=\"type\">int</span></span><br><span class=\"line\">\tid <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//以下方法的到的是结构体</span></span><br><span class=\"line\">\t<span class=\"comment\">//基本实例化</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p1 pop</span><br><span class=\"line\">\tp1.name = <span class=\"string\">&quot;mafei&quot;</span></span><br><span class=\"line\">\tp1.age = <span class=\"number\">30</span></span><br><span class=\"line\">\tp1.id = <span class=\"string\">&quot;10211&quot;</span></span><br><span class=\"line\">\tfmt.Println(p1) <span class=\"comment\">//&#123;mafei 30 10211&#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">//我们通过.来访问结构体的字段（成员变量）,例如p1.name和p1.age等。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//实例化方法2（声明后直接赋值,即实例化又初始化）</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p2 = pop&#123;</span><br><span class=\"line\">\t\tname : <span class=\"string\">&quot;feifeima&quot;</span>,</span><br><span class=\"line\">\t\tage : <span class=\"number\">17</span>,</span><br><span class=\"line\">\t\tid : <span class=\"string\">&quot;10212&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p2) <span class=\"comment\">//&#123;feifeima 17 10212&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//实例化方法2.1（简单写法）</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p3 = pop&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;feifeima2&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">18</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;10213&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p3) <span class=\"comment\">//&#123;feifeima2 18 10213&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//实例化方法3（只进行实例化，不赋值）</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p4 = pop&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(p4) <span class=\"comment\">//&#123; 0 &#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果初始化是没有给属性设置对应的初始值，那个对应属性就是其数据类型的默认值</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"匿名结构体\"><a href=\"#匿名结构体\" class=\"headerlink\" title=\"匿名结构体\"></a>匿名结构体</h3><p>在定义一些临时数据结构等场景下还可以使用匿名结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user <span class=\"keyword\">struct</span>&#123;Name <span class=\"type\">string</span>; Age <span class=\"type\">int</span>&#125;</span><br><span class=\"line\">    user.Name = <span class=\"string\">&quot;小王子&quot;</span></span><br><span class=\"line\">    user.Age = <span class=\"number\">18</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, user)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指针类型结构体（）\"><a href=\"#指针类型结构体（）\" class=\"headerlink\" title=\"指针类型结构体（）\"></a>指针类型结构体（）</h3><p>通过使用<code>new</code>关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以下方法的到的是结构体的指针，因为结构体是值类型，得到指针后就可以修改对应的值</span></span><br><span class=\"line\">\t<span class=\"comment\">//实例化方法4（利用结构体指针实例化）</span></span><br><span class=\"line\">\t<span class=\"comment\">//由于struct是值类型的，可以通过new(T)，T代表类型。初始化struct的指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p5 = <span class=\"built_in\">new</span>(pop)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>,p5) <span class=\"comment\">//*main.pop</span></span><br><span class=\"line\">\t<span class=\"comment\">//(*p5).name,直接修改内存地址中的值</span></span><br><span class=\"line\">\tp5.name = <span class=\"string\">&quot;feip5&quot;</span></span><br><span class=\"line\">\tp5.age = <span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(p5.name,p5.age) <span class=\"comment\">//feip5 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//实例化方法4.1（同上）</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p6 = &amp;pop&#123;&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>,p6) <span class=\"comment\">//*main.pop</span></span><br></pre></td></tr></table></figure>\n\n<p>方法4.1.3中 使用<code>&amp;</code>对结构体进行取地址操作相当于对该结构体类型进行了一次<code>new</code>实例化操作。修改值而不是修改副本</p>\n<p><code>p5.name = &quot;feip5&quot;</code>其实在底层是<code>(*p5).name = &quot;feip5&quot;</code>，这是Go语言实现的语法糖。结构体指针直接使用<code>.</code>来访问结构体的成员。</p>\n<p>4.1.3 使用<code>&amp;</code>对结构体进行取地址操作相当于对该结构体类型进行了一次<code>new</code>实例化操作。</p>\n<h2 id=\"结构体的初始化\"><a href=\"#结构体的初始化\" class=\"headerlink\" title=\"结构体的初始化\"></a>结构体的初始化</h2><p>没有初始化的结构体，其成员变量都是对应其类型的零值。</p>\n<h3 id=\"使用键值对初始化\"><a href=\"#使用键值对初始化\" class=\"headerlink\" title=\"使用键值对初始化\"></a>使用键值对初始化</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> trainee <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tid <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tT1 := trainee&#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">&quot;felix&quot;</span>,</span><br><span class=\"line\">\t\tid:<span class=\"number\">001</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(T1) <span class=\"comment\">//&#123;felix 1&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体指针键值对初始化\"><a href=\"#结构体指针键值对初始化\" class=\"headerlink\" title=\"结构体指针键值对初始化\"></a>结构体指针键值对初始化</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    T2 := &amp;trainee&#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">&quot;felix2&quot;</span>,</span><br><span class=\"line\">\t\tid:<span class=\"number\">002</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(T2) <span class=\"comment\">//&amp;&#123;felix2 2&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tfmt.Println(T2) <span class=\"comment\">//&amp;&#123;felix2 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tT3 := &amp;trainee&#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">&quot;felix2&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(T3) <span class=\"comment\">//&amp;&#123;felix2 0&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用值的列表初始化\"><a href=\"#使用值的列表初始化\" class=\"headerlink\" title=\"使用值的列表初始化\"></a>使用值的列表初始化</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p3 = pop&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;feifeima2&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">003</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p3) <span class=\"comment\">//&#123;feifeima2 003&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种格式初始化时，需要<strong>注意</strong>：</p>\n<ol>\n<li><p>必须初始化结构体的所有字段。</p>\n</li>\n<li><p>初始值的填充顺序必须与字段在结构体中的声明顺序一致。</p>\n</li>\n<li><p>该方式不能和键值初始化方式混用。</p>\n</li>\n</ol>\n<h2 id=\"结构体的内存布局\"><a href=\"#结构体的内存布局\" class=\"headerlink\" title=\"结构体的内存布局\"></a>结构体的内存布局</h2><p>结构体占用一块连续的内存。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> test <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ta <span class=\"type\">int8</span></span><br><span class=\"line\">\tb <span class=\"type\">int8</span></span><br><span class=\"line\">\tc <span class=\"type\">int8</span></span><br><span class=\"line\">\td <span class=\"type\">int8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n := test&#123;</span><br><span class=\"line\">\t<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.a %p\\n&quot;</span>, &amp;n.a)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.b %p\\n&quot;</span>, &amp;n.b)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.c %p\\n&quot;</span>, &amp;n.c)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.d %p\\n&quot;</span>, &amp;n.d)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">n.a <span class=\"number\">0xc0000a0060</span></span><br><span class=\"line\">n.b <span class=\"number\">0xc0000a0061</span></span><br><span class=\"line\">n.c <span class=\"number\">0xc0000a0062</span></span><br><span class=\"line\">n.d <span class=\"number\">0xc0000a0063</span></span><br></pre></td></tr></table></figure>\n\n<p>【进阶知识点】关于Go语言中的内存对齐推荐阅读:<a href=\"https://segmentfault.com/a/1190000017527311?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com\">在 Go 中恰到好处的内存对齐</a></p>\n<p>结构体是值类型，将结构体的内存指针赋值给其他变量，如：stu01 := &amp;stu02。那么他们俩底层指向同一个内存地址</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> practice <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage <span class=\"type\">int</span></span><br><span class=\"line\">\tgender <span class=\"type\">string</span></span><br><span class=\"line\">\thobby []<span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newpractice</span><span class=\"params\">(n <span class=\"type\">string</span>,a <span class=\"type\">int</span>,g <span class=\"type\">string</span>,h []<span class=\"type\">string</span>)</span></span> *practice &#123; <span class=\"comment\">//结构体是值类型，值拷贝性能开销会比较大，所以返回值返回指针节约内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;practice&#123;</span><br><span class=\"line\">\t\tname : n,</span><br><span class=\"line\">\t\tage : a,</span><br><span class=\"line\">\t\tgender : g,</span><br><span class=\"line\">\t\thobby : h,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfelix := newpractice(<span class=\"string\">&quot;felix&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;男&quot;</span>,[]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;篮球&quot;</span>,<span class=\"string\">&quot;网吧&quot;</span>&#125;)</span><br><span class=\"line\">\tfmt.Println(felix) <span class=\"comment\">//&amp;&#123;felix 20 男 [篮球 网吧]&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图书管理作业\"><a href=\"#图书管理作业\" class=\"headerlink\" title=\"图书管理作业\"></a>图书管理作业</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> book <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttitle <span class=\"type\">string</span></span><br><span class=\"line\">\tauthor <span class=\"type\">string</span></span><br><span class=\"line\">\tprice <span class=\"type\">float32</span></span><br><span class=\"line\">\tpublish <span class=\"type\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tbookslice = <span class=\"built_in\">make</span>([]book,<span class=\"number\">0</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断是否有</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ifbook</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(bookslice) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;仓库为空&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(bookslice)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取用户输入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">input</span><span class=\"params\">()</span></span> (t,a <span class=\"type\">string</span>,p <span class=\"type\">float32</span>,pu <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;请输入书名:&quot;</span>)</span><br><span class=\"line\">\tfmt.Scanln(&amp;t)</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;请输入作者:&quot;</span>)</span><br><span class=\"line\">\tfmt.Scanln(&amp;a)</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;请输入价格:&quot;</span>)</span><br><span class=\"line\">\tfmt.Scanln(&amp;p)</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;是否上市[true/false]:&quot;</span>)</span><br><span class=\"line\">\tfmt.Scanln(&amp;pu)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加书籍</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addbook</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    t,a,p,pu:=input()</span><br><span class=\"line\">\tnewBook := book&#123;</span><br><span class=\"line\">\t\tt,</span><br><span class=\"line\">\t\ta,</span><br><span class=\"line\">\t\tp,</span><br><span class=\"line\">\t\tpu,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,b := <span class=\"keyword\">range</span> bookslice &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> b.title == newBook.title &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;《%s》书籍以存在！\\n&quot;</span>,newBook.title)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbookslice = <span class=\"built_in\">append</span>(bookslice, newBook)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改书籍</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modifybook</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ifbook() == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;请输入需要修改书籍的id:&quot;</span>)</span><br><span class=\"line\">\tfmt.Scanln(&amp;id)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index,_ := <span class=\"keyword\">range</span> bookslice &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> id == index &#123;</span><br><span class=\"line\">\t\t\tt,a,p,pu:=input()</span><br><span class=\"line\">\t\t\tbookslice[id] = book&#123;</span><br><span class=\"line\">\t\t\t\tt,</span><br><span class=\"line\">\t\t\t\ta,</span><br><span class=\"line\">\t\t\t\tp,</span><br><span class=\"line\">\t\t\t\tpu,</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;此书不存在&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//展示所有书籍</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">lookbook</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tifbook()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x,y := <span class=\"keyword\">range</span> bookslice &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;编号:%d|书名:《%s》|作者:%s|价格:%.2f|是否上架:%t\\n&quot;</span>,x,y.title,y.author,y.price,y.publish)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Scanln()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">上海市图书馆BMS系统:</span></span><br><span class=\"line\"><span class=\"string\">\t1.添加书籍</span></span><br><span class=\"line\"><span class=\"string\">\t2.展示书籍</span></span><br><span class=\"line\"><span class=\"string\">\t3.修改书籍</span></span><br><span class=\"line\"><span class=\"string\">\t4.EXIT</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\t\toptions <span class=\"type\">int</span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\tshow()</span><br><span class=\"line\">\t\tfmt.Scanln(&amp;options)</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> options &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">     \t    addbook()</span><br><span class=\"line\">\t\t\tlookbook()</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tlookbook()</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\tlookbook()</span><br><span class=\"line\">\t\t\tmodifybook()</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tos.Exit(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法和接收者\"><a href=\"#方法和接收者\" class=\"headerlink\" title=\"方法和接收者\"></a>方法和接收者</h2><p>Go语言中的<code>方法（Method）</code>是一种__作用于特定类型变量的函数__。这种特定类型变量叫做<code>接收者（Receiver）</code>。接收者的概念就类似于其他语言中的<code>this</code>或者 <code>self</code>。</p>\n<p>方法的定义格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(接收者变量 接收者类型)</span></span> 方法名(参数列表) (返回参数) &#123;</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<ul>\n<li><p>接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是<code>self</code>、<code>this</code>之类的命名。例如，<code>Person</code>类型的接收者变量应该命名为 <code>p</code>，<code>Connector</code>类型的接收者变量应该命名为<code>c</code>等。</p>\n</li>\n<li><p>接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</p>\n</li>\n<li><p>方法名、参数列表、返回参数：具体格式与函数定义相同。</p>\n</li>\n</ul>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> people <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage <span class=\"type\">int</span></span><br><span class=\"line\">\tgender <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个方法的接收者，或此方法只能作用于特点类型的变量，这里指代people</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *people)</span></span>transsexual() &#123; <span class=\"comment\">//结构体为值类型所以要将该结构体的内存指针传进来</span></span><br><span class=\"line\">\tp.gender = <span class=\"string\">&quot;女&quot;</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s的梦想是当一条咸鱼\\n&quot;</span>,p.name)</span><br><span class=\"line\"> <span class=\"comment\">//felix的梦想是当一条咸鱼</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> felix = people &#123; <span class=\"comment\">//实例化一个结构体</span></span><br><span class=\"line\">\t\tname: <span class=\"string\">&quot;felix&quot;</span>,</span><br><span class=\"line\">\t\tage:<span class=\"number\">18</span>,</span><br><span class=\"line\">\t\tgender: <span class=\"string\">&quot;男&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfelix.transsexual()</span><br><span class=\"line\"> <span class=\"comment\">//()</span></span><br><span class=\"line\">\tfmt.Println(felix.gender)</span><br><span class=\"line\"> <span class=\"comment\">//&quot;女&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</p>\n<h3 id=\"指针类型的接收者★\"><a href=\"#指针类型的接收者★\" class=\"headerlink\" title=\"指针类型的接收者★\"></a>指针类型的接收者★</h3><p>指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的<code>this</code>或者<code>self</code>。 例如我们为<code>Person</code>添加一个<code>SetAge</code>方法，来修改实例变量的年龄。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SetAge 设置p的年龄</span></span><br><span class=\"line\"><span class=\"comment\">// 使用指针接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span></span> SetAge(newAge <span class=\"type\">int8</span>) &#123;</span><br><span class=\"line\">\tp.age = newAge</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用该方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := NewPerson(<span class=\"string\">&quot;小王子&quot;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 25</span></span><br><span class=\"line\">\tp1.SetAge(<span class=\"number\">30</span>)</span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 30</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"值类型的接收者\"><a href=\"#值类型的接收者\" class=\"headerlink\" title=\"值类型的接收者\"></a>值类型的接收者</h3><p>当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SetAge2 设置p的年龄</span></span><br><span class=\"line\"><span class=\"comment\">// 使用值接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span></span> SetAge2(newAge <span class=\"type\">int8</span>) &#123;</span><br><span class=\"line\">\tp.age = newAge</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := NewPerson(<span class=\"string\">&quot;小王子&quot;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">\tp1.Dream()</span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 25</span></span><br><span class=\"line\">\tp1.SetAge2(<span class=\"number\">30</span>) <span class=\"comment\">// (*p1).SetAge2(30)</span></span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 25</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么时候应该使用指针类型接收者\"><a href=\"#什么时候应该使用指针类型接收者\" class=\"headerlink\" title=\"什么时候应该使用指针类型接收者\"></a>什么时候应该使用指针类型接收者</h3><ol>\n<li><p>需要修改接收者中的值</p>\n</li>\n<li><p>接收者是拷贝代价比较大的大对象</p>\n</li>\n<li><p>保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。</p>\n</li>\n</ol>\n<h2 id=\"任意类型追加方法\"><a href=\"#任意类型追加方法\" class=\"headerlink\" title=\"任意类型追加方法\"></a>任意类型追加方法</h2><p>Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，__任何类型都可以拥有方法__。 举个例子，我们基于内置的<code>int</code>类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyInt 将int定义为自定义MyInt类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Myint <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SayHello 为MyInt添加一个SayHello的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Myint)</span></span> seyHellol(Newint Myint) &#123;</span><br><span class=\"line\">\t*m = Newint</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Hello Myint%v\\n&quot;</span>,*m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f Myint</span><br><span class=\"line\">\tfmt.Println(f)</span><br><span class=\"line\"> <span class=\"comment\">//0</span></span><br><span class=\"line\">\tf.seyHellol(<span class=\"number\">21</span>)</span><br><span class=\"line\"> <span class=\"comment\">//Hello Myint21</span></span><br><span class=\"line\">\tfmt.Println(f)</span><br><span class=\"line\"> <span class=\"comment\">//21</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。</strong></p>\n<h2 id=\"结构体的匿名字段\"><a href=\"#结构体的匿名字段\" class=\"headerlink\" title=\"结构体的匿名字段\"></a>结构体的匿名字段</h2><p>结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person 结构体Person类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">string</span></span><br><span class=\"line\">\t<span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := Person&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;小王子&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">18</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, p1)        <span class=\"comment\">//main.Person&#123;string:&quot;北京&quot;, int:18&#125;</span></span><br><span class=\"line\">\tfmt.Println(p1.<span class=\"type\">string</span>, p1.<span class=\"type\">int</span>) <span class=\"comment\">//北京 18</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>这里匿名字段的说法并不代表没有字段名，而是默认会__采用类型名作为字段名__，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p>\n<h2 id=\"嵌套结构体\"><a href=\"#嵌套结构体\" class=\"headerlink\" title=\"嵌套结构体\"></a>嵌套结构体</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> adderss <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//结构体存储地址</span></span><br><span class=\"line\">    province <span class=\"type\">string</span></span><br><span class=\"line\">    village <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> user <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//结构体存储用户</span></span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage <span class=\"type\">int</span></span><br><span class=\"line\">\tadder adderss</span><br><span class=\"line\"> <span class=\"comment\">//用户结构体中嵌套了地址结构体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tuser1 := user&#123;</span><br><span class=\"line\">\t\tname: <span class=\"string\">&quot;feili&quot;</span>,</span><br><span class=\"line\">\t\tage: <span class=\"number\">18</span>,</span><br><span class=\"line\">\t\tadder: adderss&#123;</span><br><span class=\"line\"> <span class=\"comment\">//嵌套结构体初始化</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;shanghai&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;zhangjiang&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(user1)</span><br><span class=\"line\"> <span class=\"comment\">//&#123;feili 18 &#123;shanghai zhangjiang&#125;&#125;</span></span><br><span class=\"line\">\tfmt.Println(user1.name,user1.age,user1.adder.village)</span><br><span class=\"line\"> <span class=\"comment\">//feili 18 zhangjiang</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"嵌套匿名结构体\"><a href=\"#嵌套匿名结构体\" class=\"headerlink\" title=\"嵌套匿名结构体\"></a>嵌套匿名结构体</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> adder <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tcountry <span class=\"type\">string</span></span><br><span class=\"line\">\tprovince <span class=\"type\">string</span></span><br><span class=\"line\">\tcity <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> employee <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage <span class=\"type\">int</span></span><br><span class=\"line\">\tgender <span class=\"type\">string</span></span><br><span class=\"line\">\tadder <span class=\"comment\">//嵌套了匿名结构体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> felix = employee&#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">&quot;felix&quot;</span>,</span><br><span class=\"line\">\t\tage:<span class=\"number\">18</span>,</span><br><span class=\"line\">\t\tgender:<span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">\t\tadder:adder &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;中国&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;安徽&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;上海&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(felix)</span><br><span class=\"line\">\tfmt.Println(felix.city) <span class=\"comment\">//直接寻找adder结构体中的city 上海</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体的继承\"><a href=\"#结构体的继承\" class=\"headerlink\" title=\"结构体的继承\"></a>结构体的继承</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *animal)</span></span> move() &#123; <span class=\"comment\">//为动物定义一个方法</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会动\\n&quot;</span>,m.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tfoot <span class=\"type\">int</span></span><br><span class=\"line\">\t*animal <span class=\"comment\">//dog结构体嵌套了动物结构体，所以dog也继承了动物的方法move</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *Dog)</span></span> wang()&#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会汪汪汪&quot;</span>,w.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wangcai = Dog&#123;</span><br><span class=\"line\">\t\tfoot: <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\tanimal: &amp;animal &#123; <span class=\"comment\">//dog中嵌套了动物结构体，也继承了动物的方法</span></span><br><span class=\"line\">\t\t\tname: <span class=\"string\">&quot;旺财&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twangcai.move() <span class=\"comment\">//旺财会动</span></span><br><span class=\"line\">\twangcai.wang() <span class=\"comment\">//旺财会汪汪汪</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体字段的可见性\"><a href=\"#结构体字段的可见性\" class=\"headerlink\" title=\"结构体字段的可见性\"></a>结构体字段的可见性</h2><p>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。</p>\n<h1 id=\"JSON序列化\"><a href=\"#JSON序列化\" class=\"headerlink\" title=\"JSON序列化\"></a>JSON序列化</h1><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Learngod <span class=\"keyword\">struct</span> &#123; <span class=\"comment\">//josn包能访问到字段必须为大写</span></span><br><span class=\"line\">\tID <span class=\"type\">int</span> <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\"> <span class=\"comment\">//定义元数据，当json包进行序列化操作时，key为小写</span></span><br><span class=\"line\">\tGender <span class=\"type\">string</span> <span class=\"string\">`json:&quot;gender&quot;`</span></span><br><span class=\"line\">\tName <span class=\"type\">string</span><span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlearngod1 := Learngod&#123;</span><br><span class=\"line\">\t\tID:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tGender: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;Felix&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//序列化：吧编程语言里的数据转换成 JSON格式的字符串</span></span><br><span class=\"line\">\tv ,err := json.Marshal(learngod1) <span class=\"comment\">//返回一个[]byte类型的返回值和error错误信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;Json序列化失败%s&quot;</span>,err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(v) <span class=\"comment\">//[]byte</span></span><br><span class=\"line\">\t<span class=\"comment\">//[123 34 73 68 34 58 49 44 34 71 101 110 100 101 114 34 58 34 231 148 183 34 44 34 78 97 109 101 34 58 34 70 101 108 105 120 34 125]</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>,<span class=\"type\">string</span>(v)) <span class=\"comment\">//string</span></span><br><span class=\"line\">\t<span class=\"comment\">//&quot;&#123;\\&quot;ID\\&quot;:1,\\&quot;Gender\\&quot;:\\&quot;男\\&quot;,\\&quot;Name\\&quot;:\\&quot;Felix\\&quot;&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstr := <span class=\"string\">&quot;&#123;\\&quot;ID\\&quot;:1,\\&quot;Gender\\&quot;:\\&quot;男\\&quot;,\\&quot;Name\\&quot;:\\&quot;Felix\\&quot;&#125;&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">//反序列化：吧满足JSON格式的字符串转换成 当前编程语言里的对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> learngod2 = &amp;Learngod&#123;&#125;</span><br><span class=\"line\">\tjson.Unmarshal([]<span class=\"type\">byte</span>(str),learngod2)</span><br><span class=\"line\"> <span class=\"comment\">//将json字符串转换为[]byte类型的切片，并赋给learngod2</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T\\n%v&quot;</span>,learngod2,learngod2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体标签（Tag）\"><a href=\"#结构体标签（Tag）\" class=\"headerlink\" title=\"结构体标签（Tag）\"></a>结构体标签（Tag）</h2><p><code>Tag</code>是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 <code>Tag</code>在结构体字段的后方定义，由一对<strong>反引号</strong>包裹起来，具体的格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">`key1:<span class=\"string\">&quot;value1&quot;</span> key2:<span class=\"string\">&quot;value2&quot;</span>`</span><br></pre></td></tr></table></figure>\n\n<p>结构体tag由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。同一个结构体字段可以设置多个键值对tag，不同的键值对之间使用空格分隔。</p>\n<p><strong>注意事项：</strong> 为结构体编写<code>Tag</code>时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。例如我们为<code>Student</code>结构体的每个字段定义json序列化时使用的Tag</p>\n<h1 id=\"SMS-面向对象\"><a href=\"#SMS-面向对象\" class=\"headerlink\" title=\"SMS[面向对象]\"></a>SMS[面向对象]</h1><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学员结构体，面向对象</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId <span class=\"type\">int</span> <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge <span class=\"type\">int</span> <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">\tClass <span class=\"type\">string</span> <span class=\"string\">`json:&quot;class&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学院结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> College <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAllStudent []*Student</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学员构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStudent</span><span class=\"params\">(id <span class=\"type\">int</span>,name <span class=\"type\">string</span>,age <span class=\"type\">int</span>,class <span class=\"type\">string</span>)</span></span> *Student &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Student&#123;</span><br><span class=\"line\">\t\tId :id,</span><br><span class=\"line\">\t\tName : name,</span><br><span class=\"line\">\t\tAge : age,</span><br><span class=\"line\">\t\tClass: class,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学院构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewCollege</span><span class=\"params\">()</span></span> *College &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;College&#123;</span><br><span class=\"line\">\t\tAllStudent: <span class=\"built_in\">make</span>([]*Student,<span class=\"number\">0</span>,<span class=\"number\">100</span>),</span><br><span class=\"line\"> <span class=\"comment\">//初始化结构体中的切片</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加学生</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *College)</span></span> add(s *Student) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,v := <span class=\"keyword\">range</span> c.AllStudent &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> v.Name == s.Name &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;%v已存在&quot;</span>,s.Name)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.AllStudent = <span class=\"built_in\">append</span>(c.AllStudent,s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除学生</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *College)</span></span> del(s *Student) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index ,v := <span class=\"keyword\">range</span> c.AllStudent &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> v.Name == s.Name &#123;</span><br><span class=\"line\">\t\t\tc.AllStudent = <span class=\"built_in\">append</span>(c.AllStudent[:index],c.AllStudent[index+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%v不存在&quot;</span>,s.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改学生</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *College)</span></span> modify(s *Student) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index,v := <span class=\"keyword\">range</span> c.AllStudent &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> v.Name == s.Name &#123;</span><br><span class=\"line\">\t\t\tc.AllStudent[index] = s</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%v不存在&quot;</span>,s.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询学生</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *College)</span></span> show() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,v := <span class=\"keyword\">range</span> c.AllStudent&#123;</span><br><span class=\"line\">\t\tjson,err:=json.Marshal(v)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;json序列化失败&quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"type\">string</span>(json))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取用户输入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">input</span><span class=\"params\">()</span></span> *Student &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tid <span class=\"type\">int</span></span><br><span class=\"line\">\t\tname <span class=\"type\">string</span></span><br><span class=\"line\">\t\tage <span class=\"type\">int</span></span><br><span class=\"line\">\t\tclass <span class=\"type\">string</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;请输入学员学号: &quot;</span>)</span><br><span class=\"line\">\tfmt.Scanln(&amp;id)</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;请输入学员姓名: &quot;</span>)</span><br><span class=\"line\">\tfmt.Scanln(&amp;name)</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;请输入学员年龄: &quot;</span>)</span><br><span class=\"line\">\tfmt.Scanln(&amp;age)</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;请输入学员班级: &quot;</span>)</span><br><span class=\"line\">\tfmt.Scanln(&amp;class)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> NewStudent(id,name,age,class)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">showMenu</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t1.添加学生</span></span><br><span class=\"line\"><span class=\"string\">\t2.删除学生</span></span><br><span class=\"line\"><span class=\"string\">\t3.查看学生</span></span><br><span class=\"line\"><span class=\"string\">\t4.修改学生</span></span><br><span class=\"line\"><span class=\"string\">\t5.Exit</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstuMar := NewCollege()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tshowMenu()</span><br><span class=\"line\">\t\tSelect := <span class=\"number\">0</span></span><br><span class=\"line\">\t\tfmt.Print(<span class=\"string\">&quot;请输入指令: &quot;</span>)</span><br><span class=\"line\">\t\tfmt.Scanln(&amp;Select)</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> Select &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tstuMar.add(input())</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tstuMar.del(input())</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\tstuMar.show()</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\tstuMar.modify(input())</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tos.Exit(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;输入无效&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"return执行原理和defer执行时机\"><a href=\"#return执行原理和defer执行时机\" class=\"headerlink\" title=\"return执行原理和defer执行时机\"></a>return执行原理和defer执行时机</h1><p>在Go语言的函数中<code>return</code>语句在底层并不是原子操作，它分为给返回值赋值和RET指令两步。而<code>defer</code>语句执行的时机就在返回值赋值操作后，RET指令（结束一段代码）执行前。具体如下图所示：</p>\n<p><img src=\"/images/pasted-3.png\" alt=\"return执行原理和defer执行时机\"></p>\n<h2 id=\"defer经典案例\"><a href=\"#defer经典案例\" class=\"headerlink\" title=\"defer经典案例\"></a>defer经典案例</h2><p>阅读下面的代码，写出最后的打印结果。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f1</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tx := <span class=\"number\">5</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//返回5，1.返回值=5 2.x++ 3.RET指令 ==&gt; 5</span></span><br><span class=\"line\">\t\tx++</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span><span class=\"params\">()</span></span> (x <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tx++</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">5</span> <span class=\"comment\">// 返回6，1.返回值=x(5) 2.x++ 3.RET指令 ==&gt; 6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f3</span><span class=\"params\">()</span></span> (y <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tx := <span class=\"number\">5</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tx++</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x <span class=\"comment\">// 返回5，1.返回值=y=x(5) 2.x++ 3.RET指令 ==&gt; 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f4</span><span class=\"params\">()</span></span> (x <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\tx++</span><br><span class=\"line\">\t&#125;(x)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">5</span> <span class=\"comment\">// 返回5，1.返回值=x(5) 2.匿名函数内x++ 3.RET指令 ==&gt; 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(f1())</span><br><span class=\"line\">\tfmt.Println(f2())</span><br><span class=\"line\">\tfmt.Println(f3())</span><br><span class=\"line\">\tfmt.Println(f4())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"golang中的包\"><a href=\"#golang中的包\" class=\"headerlink\" title=\"golang中的包\"></a>golang中的包</h1><p>在工程化的Go语言开发项目中，Go语言的源码复用是建立在包（package）基础之上的。本文介绍了Go语言中如何定义包、如何导出包的内容及如何导入其他包。</p>\n<p>Go语言的包（package）</p>\n<h2 id=\"包介绍\"><a href=\"#包介绍\" class=\"headerlink\" title=\"包介绍\"></a>包介绍</h2><p><code>包（package）</code>是多个Go源码的集合，是一种高级的代码复用方案，Go语言为我们提供了很多内置包，如<code>fmt</code>、<code>os</code>、<code>io</code>等。</p>\n<h2 id=\"定义包\"><a href=\"#定义包\" class=\"headerlink\" title=\"定义包\"></a>定义包</h2><p>我们还可以根据自己的需要创建自己的包。一个包可以简单理解为一个存放<code>.go</code>文件的文件夹。 该文件夹下面的所有go文件都要在代码的第一行添加如下代码，声明该文件归属的包。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> 包名</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<ul>\n<li><p>一个文件夹下面直接包含的文件只能归属一个<code>package</code>，同样一个<code>package</code>的文件不能在多个文件夹下。</p>\n</li>\n<li><p>包名可以不和文件夹的名字一样，包名不能包含 <code>-</code> 符号。</p>\n</li>\n<li><p>包名为<code>main</code>的包为应用程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含<code>main</code>包的源代码则不会得到可执行文件。</p>\n</li>\n</ul>\n<h2 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h2><p>如果想在一个包中引用另外一个包里的标识符（如变量、常量、类型、函数等）时，该标识符必须是对外可见的（public）。在Go语言中只需要将标识符的首字母大写就可以让标识符对外可见了。</p>\n<p>举个例子， 我们定义一个包名为<code>pkg2</code>的包，代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> pkg2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包变量可见性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span> <span class=\"comment\">// 首字母小写，外部包不可见，只能在当前包内使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首字母大写外部包可见，可在其他包中使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Mode = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123; <span class=\"comment\">// 首字母小写，外部包不可见，只能在当前包内使用</span></span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首字母大写，外部包可见，可在其他包中使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(x, y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">age</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">// 首字母小写，外部包不可见，只能在当前包内使用</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> Age = <span class=\"number\">18</span> <span class=\"comment\">// 函数局部变量，外部包不可见，只能在当前函数内使用</span></span><br><span class=\"line\">\tfmt.Println(Age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结构体中的字段名和接口中的方法名如果首字母都是大写，外部包可以访问这些字段和方法。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"type\">string</span> <span class=\"comment\">//可在包外访问的方法</span></span><br><span class=\"line\">\tclass <span class=\"type\">string</span> <span class=\"comment\">//仅限包内访问的字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Payer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tinit() <span class=\"comment\">//仅限包内访问的方法</span></span><br><span class=\"line\">\tPay()  <span class=\"comment\">//可在包外访问的方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包的导入\"><a href=\"#包的导入\" class=\"headerlink\" title=\"包的导入\"></a>包的导入</h2><p>要在代码中引用其他包的内容，需要使用<code>import</code>关键字导入使用的包。具体语法如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;包的路径&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<ul>\n<li><p>import导入语句通常放在文件开头包声明语句的下面。</p>\n</li>\n<li><p>导入的包名需要使用双引号包裹起来。</p>\n</li>\n<li><p>包名是从<code>$GOPATH/src/</code>后开始计算的，使用<code>/</code>进行路径分隔。</p>\n</li>\n<li><p>Go语言中禁止循环导入包。</p>\n</li>\n</ul>\n<h3 id=\"单行导入\"><a href=\"#单行导入\" class=\"headerlink\" title=\"单行导入\"></a>单行导入</h3><p>单行导入的格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;包1&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;包2&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多行导入\"><a href=\"#多行导入\" class=\"headerlink\" title=\"多行导入\"></a>多行导入</h3><p>多行导入的格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;包1&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;包2&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义包名\"><a href=\"#自定义包名\" class=\"headerlink\" title=\"自定义包名\"></a>自定义包名</h2><p>在导入包名的时候，我们还可以为导入的包设置别名。通常用于导入的包名太长或者导入的包名冲突的情况。具体语法格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> 别名 <span class=\"string\">&quot;包的路径&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>单行导入方式定义别名：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> m <span class=\"string\">&quot;github.com/Q1mi/studygo/pkg_test&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(m.Add(<span class=\"number\">100</span>, <span class=\"number\">200</span>))</span><br><span class=\"line\">\tfmt.Println(m.Mode)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多行导入方式定义别名：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    m <span class=\"string\">&quot;github.com/Q1mi/studygo/pkg_test&quot;</span></span><br><span class=\"line\"> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(m.Add(<span class=\"number\">100</span>, <span class=\"number\">200</span>))</span><br><span class=\"line\">\tfmt.Println(m.Mode)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匿名导入包\"><a href=\"#匿名导入包\" class=\"headerlink\" title=\"匿名导入包\"></a>匿名导入包</h2><p>如果只希望导入包，而不使用包内部的数据时，可以使用匿名导入包。具体的格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">&quot;包的路径&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>匿名导入的包与其他方式导入的包一样都会被编译到可执行文件中。</p>\n<h2 id=\"init-初始化函数\"><a href=\"#init-初始化函数\" class=\"headerlink\" title=\"init()初始化函数\"></a>init()初始化函数</h2><h3 id=\"init-函数介绍\"><a href=\"#init-函数介绍\" class=\"headerlink\" title=\"init()函数介绍\"></a>init()函数介绍</h3><p>在Go语言程序执行时导入包语句会自动触发包内部<code>init()</code>函数的调用。需要注意的是： <code>init()</code>函数没有参数也没有返回值。 <code>init()</code>函数在程序运行时自动被调用执行，不能在代码中主动调用它。</p>\n<p>包初始化执行的顺序如下图所示：</p>\n<p><img src=\"/images/pasted-4.png\" alt=\"包初始化\"></p>\n<h3 id=\"init-函数执行顺序\"><a href=\"#init-函数执行顺序\" class=\"headerlink\" title=\"init()函数执行顺序\"></a>init()函数执行顺序</h3><p>Go语言包会从<code>main</code>包开始检查其导入的所有包，每个包中又可能导入了其他的包。Go编译器由此构建出一个树状的包引用关系，再根据引用顺序决定编译顺序，依次编译这些包的代码。在运行时，被最后导入的包会最先初始化并调用其<code>init()</code>函数， 如下图示：</p>\n<p><img src=\"/images/pasted-5.png\" alt=\"包初始化\"></p>\n<h2 id=\"time包\"><a href=\"#time包\" class=\"headerlink\" title=\"time包\"></a>time包</h2><p>time包提供了时间的显示和测量用的函数。日历的计算采用的是公历。</p>\n<h3 id=\"时间类型\"><a href=\"#时间类型\" class=\"headerlink\" title=\"时间类型\"></a>时间类型</h3><p><code>time.Time</code>类型表示时间类型。我们可以通过<code>time.Now()</code>函数获取当前的时间对象，然后获取时间对象的年月日时分秒等信息。示例代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnow := time.Now() <span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;current time:%v\\n&quot;</span>, now)</span><br><span class=\"line\"></span><br><span class=\"line\">\tyear := now.Year()     <span class=\"comment\">//年</span></span><br><span class=\"line\">\tmonth := now.Month()   <span class=\"comment\">//月</span></span><br><span class=\"line\">\tday := now.Day()       <span class=\"comment\">//日</span></span><br><span class=\"line\">\thour := now.Hour()     <span class=\"comment\">//小时</span></span><br><span class=\"line\">\tminute := now.Minute() <span class=\"comment\">//分钟</span></span><br><span class=\"line\">\tsecond := now.Second() <span class=\"comment\">//秒</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%d-%02d-%02d %02d:%02d:%02d\\n&quot;</span>, year, month, day, hour, minute, second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h3><p>时间戳是自1970年1月1日（08:00:00GMT）至当前时间的总毫秒数。它也被称为Unix时间戳（UnixTimestamp）。</p>\n<p>基于时间对象获取时间戳的示例代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timestampDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnow := time.Now()            <span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\">\ttimestamp1 := now.Unix()     <span class=\"comment\">//时间戳</span></span><br><span class=\"line\">\ttimestamp2 := now.UnixNano() <span class=\"comment\">//纳秒时间戳</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;current timestamp1:%v\\n&quot;</span>, timestamp1)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;current timestamp2:%v\\n&quot;</span>, timestamp2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>time.Unix()</code>函数可以将时间戳转为时间格式。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timestampDemo2</span><span class=\"params\">(timestamp <span class=\"type\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">\ttimeObj := time.Unix(timestamp, <span class=\"number\">0</span>) <span class=\"comment\">//将时间戳转为时间格式</span></span><br><span class=\"line\">\tfmt.Println(timeObj)</span><br><span class=\"line\">\tyear := timeObj.Year()     <span class=\"comment\">//年</span></span><br><span class=\"line\">\tmonth := timeObj.Month()   <span class=\"comment\">//月</span></span><br><span class=\"line\">\tday := timeObj.Day()       <span class=\"comment\">//日</span></span><br><span class=\"line\">\thour := timeObj.Hour()     <span class=\"comment\">//小时</span></span><br><span class=\"line\">\tminute := timeObj.Minute() <span class=\"comment\">//分钟</span></span><br><span class=\"line\">\tsecond := timeObj.Second() <span class=\"comment\">//秒</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%d-%02d-%02d %02d:%02d:%02d\\n&quot;</span>, year, month, day, hour, minute, second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"时间间隔\"><a href=\"#时间间隔\" class=\"headerlink\" title=\"时间间隔\"></a>时间间隔</h3><p><code>time.Duration</code>是<code>time</code>包定义的一个类型，它代表两个时间点之间经过的时间，以纳秒为单位。<code>time.Duration</code>表示一段时间间隔，可表示的最长时间段大约290年。</p>\n<p>time包中定义的时间间隔类型的常量如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    Nanosecond  Duration = <span class=\"number\">1</span></span><br><span class=\"line\">    Microsecond          = <span class=\"number\">1000</span> * Nanosecond</span><br><span class=\"line\">    Millisecond          = <span class=\"number\">1000</span> * Microsecond</span><br><span class=\"line\">    Second               = <span class=\"number\">1000</span> * Millisecond</span><br><span class=\"line\">    Minute               = <span class=\"number\">60</span> * Second</span><br><span class=\"line\">    Hour                 = <span class=\"number\">60</span> * Minute</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>例如：<code>time.Duration</code>表示1纳秒，<code>time.Second</code>表示1秒。</p>\n<h3 id=\"时间操作\"><a href=\"#时间操作\" class=\"headerlink\" title=\"时间操作\"></a>时间操作</h3><h3 id=\"Add\"><a href=\"#Add\" class=\"headerlink\" title=\"Add\"></a>Add</h3><p>我们在日常的编码过程中可能会遇到要求时间+时间间隔的需求，Go语言的时间对象有提供Add方法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Time)</span></span> Add(d Duration) Time</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>举个例子，求一个小时之后的时间：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnow := time.Now()</span><br><span class=\"line\">\tlater := now.Add(time.Hour) <span class=\"comment\">// 当前时间加1小时后的时间</span></span><br><span class=\"line\">\tfmt.Println(later)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sub\"><a href=\"#Sub\" class=\"headerlink\" title=\"Sub\"></a>Sub</h3><p>求两个时间之间的差值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Time)</span></span> Sub(u Time) Duration</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>返回一个时间段t-u。如果结果超出了Duration可以表示的最大值/最小值，将返回最大值/最小值。要获取时间点t-d（d为Duration），可以使用t.Add(-d)。</p>\n<h3 id=\"Equal\"><a href=\"#Equal\" class=\"headerlink\" title=\"Equal\"></a>Equal</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Time)</span></span> Equal(u Time) <span class=\"type\">bool</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>判断两个时间是否相同，会考虑时区的影响，因此不同时区标准的时间也可以正确比较。本方法和用t==u不同，这种方法还会比较地点和时区信息。</p>\n<h3 id=\"Before\"><a href=\"#Before\" class=\"headerlink\" title=\"Before\"></a>Before</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Time)</span></span> Before(u Time) <span class=\"type\">bool</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果t代表的时间点在u之前，返回真；否则返回假。</p>\n<h3 id=\"After\"><a href=\"#After\" class=\"headerlink\" title=\"After\"></a>After</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Time)</span></span> After(u Time) <span class=\"type\">bool</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果t代表的时间点在u之后，返回真；否则返回假。</p>\n<h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><p>使用<code>time.Tick(时间间隔)</code>来设置定时器，定时器的本质上是一个通道（channel）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tickDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tticker := time.Tick(time.Second) <span class=\"comment\">//定义一个1秒间隔的定时器</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> ticker &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)<span class=\"comment\">//每秒都会执行的任务</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"时间格式化\"><a href=\"#时间格式化\" class=\"headerlink\" title=\"时间格式化\"></a>时间格式化</h3><p>时间类型有一个自带的方法<code>Format</code>进行格式化，需要注意的是Go语言中格式化时间模板不是常见的<code>Y-m-d H:M:S</code>而是使用Go的诞生时间2006年1月2号15点04分（记忆口诀为2006 1 2 3 4）。也许这就是技术人员的浪漫吧。补充：如果想格式化为12小时方式，需指定<code>PM</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">formatDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnow := time.Now()</span><br><span class=\"line\">\t<span class=\"comment\">// 格式化的模板为Go的出生时间2006年1月2号15点04分 Mon Jan</span></span><br><span class=\"line\">\t<span class=\"comment\">// 24小时制</span></span><br><span class=\"line\">\tfmt.Println(now.Format(<span class=\"string\">&quot;2006-01-02 15:04:05.000 Mon Jan&quot;</span>))</span><br><span class=\"line\">\t<span class=\"comment\">// 12小时制</span></span><br><span class=\"line\">\tfmt.Println(now.Format(<span class=\"string\">&quot;2006-01-02 03:04:05.000 PM Mon Jan&quot;</span>))</span><br><span class=\"line\">\tfmt.Println(now.Format(<span class=\"string\">&quot;2006/01/02 15:04&quot;</span>))</span><br><span class=\"line\">\tfmt.Println(now.Format(<span class=\"string\">&quot;15:04 2006/01/02&quot;</span>))</span><br><span class=\"line\">\tfmt.Println(now.Format(<span class=\"string\">&quot;2006/01/02&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解析字符串格式的时间</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">now := time.Now()</span><br><span class=\"line\">fmt.Println(now)</span><br><span class=\"line\"><span class=\"comment\">// 加载时区</span></span><br><span class=\"line\">loc, err := time.LoadLocation(<span class=\"string\">&quot;Asia/Shanghai&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 按照指定时区和指定格式解析字符串时间</span></span><br><span class=\"line\">timeObj, err := time.ParseInLocation(<span class=\"string\">&quot;2006/01/02 15:04:05&quot;</span>, <span class=\"string\">&quot;2019/08/04 14:15:20&quot;</span>, loc)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(timeObj)</span><br><span class=\"line\">fmt.Println(timeObj.Sub(now))</span><br></pre></td></tr></table></figure>\n\n","categories":["DEV"],"tags":["Golang"]},{"title":"MySQL-数据备份&恢复&迁移","url":"/forward/5c41384a.html","content":"<h2 id=\"知识点回顾：\"><a href=\"#知识点回顾：\" class=\"headerlink\" title=\"知识点回顾：\"></a>知识点回顾：</h2><h3 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a><a href=\"https://cakepanit.com/forward/3053135c.html#4-InnoDB-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7%EF%BC%9A\">存储引擎</a></h3><h4 id=\"1-InnoDB（默认使用引擎，也是企业常用的）\"><a href=\"#1-InnoDB（默认使用引擎，也是企业常用的）\" class=\"headerlink\" title=\"(1)InnoDB（默认使用引擎，也是企业常用的）\"></a>(1)<a href=\"https://cakepanit.com/forward/3053135c.html#8-0-InnoDB%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0\">InnoDB</a>（默认使用引擎，也是企业常用的）</h4><ul>\n<li>热备</li>\n<li><a href=\"https://cakepanit.com/forward/3053135c.html#6-1-3-%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4\">独立表空间</a>（每个表一个表空间）</li>\n<li><a href=\"https://cakepanit.com/forward/bc8a646.html#3-2-redo-log\">redo</a>：重做日志，用来前滚</li>\n<li><a href=\"https://cakepanit.com/forward/bc8a646.html#3-2-undo-%E5%9B%9E%E6%BB%9A%E6%97%A5%E5%BF%97\">undo</a>：回滚日志，用来回滚（未提交的事务）</li>\n<li><a href=\"https://cakepanit.com/forward/49de8711.html#1-2InnoDB%E9%94%81%E7%BA%A7%E5%88%AB\">行级别锁</a>，基于索引来实现的，GAP锁</li>\n<li><a href=\"https://cakepanit.com/forward/bc8a646.html#%E4%BA%8B%E5%8A%A1%E7%9A%84ACID%E7%89%B9%E6%80%A7\">支持事务</a>。</li>\n</ul>\n<h4 id=\"2-MyISAM\"><a href=\"#2-MyISAM\" class=\"headerlink\" title=\"(2)MyISAM\"></a>(2)MyISAM</h4><ul>\n<li>温备</li>\n<li>三个文件构成</li>\n<li>表级锁</li>\n</ul>\n<h3 id=\"2、二进制日志\"><a href=\"#2、二进制日志\" class=\"headerlink\" title=\"2、二进制日志\"></a>2、<a href=\"https://cakepanit.com/forward/663d93c2.html\">二进制日志</a></h3><h4 id=\"1-记录的是什么？\"><a href=\"#1-记录的是什么？\" class=\"headerlink\" title=\"(1)记录的是什么？\"></a>(1)记录的是什么？</h4><ul>\n<li><a href=\"https://cakepanit.com/forward/3c4a0863.html#3-%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80DDL\">DDL</a>、<a href=\"https://cakepanit.com/forward/3c4a0863.html#4-%E6%95%B0%E6%8D%AE%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80DCL\">DCL</a>这些种类语句，记录的就是操作语句</li>\n<li><a href=\"https://cakepanit.com/forward/3c4a0863.html#2-%E6%95%B0%E6%8D%AE%E6%93%8D%E7%BA%B5%E8%AF%AD%E8%A8%80DML\">DML</a>：他记录的已提交的事务日志，并支持多种格式记录（row、statement、mixed）</li>\n</ul>\n<h4 id=\"2-事件\"><a href=\"#2-事件\" class=\"headerlink\" title=\"(2)事件\"></a>(2)<a href=\"https://cakepanit.com/forward/663d93c2.html#1-2-4-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E4%BA%8B%E4%BB%B6%EF%BC%88event%EF%BC%89\">事件</a></h4><ul>\n<li>开始位置（at xxx）</li>\n<li>结束位置(下一个at)</li>\n<li>一个事务，有多个事件做成（begin到commit）</li>\n</ul>\n<h4 id=\"3-截取二进制日志\"><a href=\"#3-截取二进制日志\" class=\"headerlink\" title=\"(3)截取二进制日志\"></a>(3)<a href=\"https://cakepanit.com/forward/663d93c2.html#1-2-6-%E5%9F%BA%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%A1%88%E4%BE%8B\">截取二进制日志</a></h4><ul>\n<li>1、分析二进制日志<ul>\n<li>找到要截取日志的开始位置（start-position）和结束位置（stop-position）</li>\n<li>解码查看：mysqlbinlog –base64-output=decode=rows -vvv</li>\n</ul>\n</li>\n<li>2、截取日志<ul>\n<li>mysqlbinlog –start-position=xxx –stop-position=xxx。//<a href=\"https://cakepanit.com/forward/663d93c2.html#%E6%8C%89%E9%9C%80%E6%88%AA%E5%8F%96%E6%97%A5%E5%BF%97\">基于position号截取</a></li>\n<li>mysqlbinlog –skip-gtids –include-gtids=’UUID:gitd号’ //<a href=\"https://cakepanit.com/forward/93ea067.html#1-5%E5%9F%BA%E4%BA%8EGTDI%E6%88%AA%E5%8F%96\">基于gtid号截取</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"运维DBA-在数据库备份恢复方面的职责\"><a href=\"#运维DBA-在数据库备份恢复方面的职责\" class=\"headerlink\" title=\"运维DBA 在数据库备份恢复方面的职责\"></a>运维DBA 在数据库备份恢复方面的职责</h2><h3 id=\"设计备份策略\"><a href=\"#设计备份策略\" class=\"headerlink\" title=\"设计备份策略\"></a>设计备份策略</h3><p><strong>全备/增量</strong>：</p>\n<ul>\n<li>数据量大：<ul>\n<li>定期全量+每天增量的方式</li>\n</ul>\n</li>\n<li>数据量小：<ul>\n<li>可直接每天全量</li>\n</ul>\n</li>\n</ul>\n<p><strong>时间</strong>：触发时间，业务低谷。一般为晚上<br><strong>自动</strong>：可crontab+rersync</p>\n<h3 id=\"日常备份检查\"><a href=\"#日常备份检查\" class=\"headerlink\" title=\"日常备份检查\"></a>日常备份检查</h3><ul>\n<li><strong>备份存在性</strong></li>\n<li><strong>备份空间够用否</strong></li>\n</ul>\n<h3 id=\"定期恢复演练（测试库）\"><a href=\"#定期恢复演练（测试库）\" class=\"headerlink\" title=\"定期恢复演练（测试库）\"></a>定期恢复演练（测试库）</h3><p>一季度 或 半年</p>\n<h3 id=\"故障恢复\"><a href=\"#故障恢复\" class=\"headerlink\" title=\"故障恢复\"></a>故障恢复</h3><p>通过现有备份,能够将数据库恢复到故障之前的时间点</p>\n<h3 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h3><ol>\n<li>停机时间</li>\n<li>回退方案</li>\n</ol>\n<h3 id=\"备份是为了什么？\"><a href=\"#备份是为了什么？\" class=\"headerlink\" title=\"备份是为了什么？\"></a>备份是为了什么？</h3><p>为了防止数据库损坏</p>\n<h3 id=\"数据库损坏\"><a href=\"#数据库损坏\" class=\"headerlink\" title=\"数据库损坏\"></a>数据库损坏</h3><ul>\n<li>物理损坏<ul>\n<li>高可用架构可以很好解决</li>\n</ul>\n</li>\n<li>逻辑损坏<ul>\n<li>只能用备份就解决</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"备份类型\"><a href=\"#备份类型\" class=\"headerlink\" title=\"备份类型\"></a>备份类型</h2><ul>\n<li>冷备份<ul>\n<li>在数据库未工作时进行备份。数据一致性高，可靠性高。影响所有读写。</li>\n</ul>\n</li>\n<li>温备份<ul>\n<li>数据库不停止工作，只是在备份时对表进行加锁，不影响读，但是影响写操作。（myisam）</li>\n</ul>\n</li>\n<li>热备份<ul>\n<li>数据库不停止工作，基于事务的特点进行数据库在线备份，读写影响小。受限于存储引擎类型（innoDB）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"备份工具介绍\"><a href=\"#备份工具介绍\" class=\"headerlink\" title=\"备份工具介绍\"></a>备份工具介绍</h2><h3 id=\"逻辑备份工具\"><a href=\"#逻辑备份工具\" class=\"headerlink\" title=\"逻辑备份工具\"></a>逻辑备份工具</h3><p>基于SQL语句进行备份</p>\n<ul>\n<li>mysqldump（MDP）</li>\n<li>mysqlbinlog</li>\n</ul>\n<h3 id=\"物理备份工具\"><a href=\"#物理备份工具\" class=\"headerlink\" title=\"物理备份工具\"></a>物理备份工具</h3><p>基于磁盘数据文件备份</p>\n<ul>\n<li>xtrabackup(XBK) ：Percona 第三方  </li>\n<li>MySQL Enterprise Backup（MEB）</li>\n</ul>\n<h2 id=\"备份策略\"><a href=\"#备份策略\" class=\"headerlink\" title=\"备份策略\"></a>备份策略</h2><h3 id=\"逻辑备份和物理备份比较\"><a href=\"#逻辑备份和物理备份比较\" class=\"headerlink\" title=\"逻辑备份和物理备份比较\"></a>逻辑备份和物理备份比较</h3><h4 id=\"mysqldump（MDP）\"><a href=\"#mysqldump（MDP）\" class=\"headerlink\" title=\"mysqldump（MDP）\"></a>mysqldump（MDP）</h4><p><strong>优点</strong>：</p>\n<ol>\n<li>不需要单独下载安装</li>\n<li>备份出来的是SQL脚本，文本格式。可读性高，便于备份处理</li>\n<li>压缩比较高，节省备份的磁盘空间</li>\n</ol>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>依赖于数据库引擎，需要从磁盘把数据读出，然后转换成SQL进行转储，比较耗费资源，数据量大的话效率较低</li>\n</ol>\n<p><strong>建议</strong>：</p>\n<ul>\n<li>100G以内的数据量级，可以使用mysqldump</li>\n<li>超过TB以上，我们也可能选择的是mysqldump，配合分布式的系统<ul>\n<li>1EB  =1024 PB = 1000000 TB</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"xtrabackup-XBK\"><a href=\"#xtrabackup-XBK\" class=\"headerlink\" title=\"xtrabackup(XBK)\"></a>xtrabackup(XBK)</h4><p><strong>优点</strong>：</p>\n<ol>\n<li>类似于直接cp数据文件，不需要管逻辑结构，相对来说性能较高</li>\n</ol>\n<p><strong>缺点</strong>：<br>2. 可读性差<br>3. 压缩比低，需要更多磁盘空间</p>\n<p><strong>建议</strong>：</p>\n<ul>\n<li><blockquote>\n<p>100G&lt;TB</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"备份方式：\"><a href=\"#备份方式：\" class=\"headerlink\" title=\"备份方式：\"></a>备份方式：</h3><ul>\n<li>全备:全库备份，备份所有数据</li>\n<li>增量:备份变化的数据</li>\n<li>逻辑备份=mysqldump(全备)+mysqlbinlog(增量)</li>\n<li>物理备份=xtrabackup_full(全备)+xtrabackup_incr(增量)+binlog   或者   xtrabackup_full(全备)+binlog(增量)</li>\n</ul>\n<h3 id=\"备份周期\"><a href=\"#备份周期\" class=\"headerlink\" title=\"备份周期\"></a>备份周期</h3><p>根据数据量设计备份周期</p>\n<ul>\n<li>比如：周日全备，周1-周6增量</li>\n<li>其他：通过主从复制备份（实时复制）</li>\n</ul>\n<h3 id=\"逻辑备份工具-mysqldump\"><a href=\"#逻辑备份工具-mysqldump\" class=\"headerlink\" title=\"逻辑备份工具-mysqldump\"></a>逻辑备份工具-mysqldump</h3><h4 id=\"客户端通用参数【和连接有关】\"><a href=\"#客户端通用参数【和连接有关】\" class=\"headerlink\" title=\"客户端通用参数【和连接有关】\"></a>客户端通用参数【和连接有关】</h4><ul>\n<li>-u 用户名</li>\n<li>-p 密码</li>\n<li>-S sock文件</li>\n<li>-h 主机</li>\n<li>-P 端口号</li>\n</ul>\n<h5 id=\"本地备份连接方式\"><a href=\"#本地备份连接方式\" class=\"headerlink\" title=\"本地备份连接方式\"></a>本地备份连接方式</h5><p><code>mysqldump -uroot -pxxx -S /tmp/mysql.sock</code></p>\n<h5 id=\"远程备份的连接方式\"><a href=\"#远程备份的连接方式\" class=\"headerlink\" title=\"远程备份的连接方式\"></a>远程备份的连接方式</h5><p><code>mysqldump -uroot -pxxx -S /tmp/mysql.sock</code></p>\n<h4 id=\"基本备份参数\"><a href=\"#基本备份参数\" class=\"headerlink\" title=\"基本备份参数\"></a>基本备份参数</h4><ul>\n<li><code>-A</code> 全库备份<br><code>mysqldump -uroot -p123 -A -S /data/3307/mysql.sock &gt; /data/backup/full.sql</code></li>\n<li><code>-B</code> 单个、多个库备份&lt;注意不能加-B，-B后面只能全是数据库&gt;<br><code>mysqldump -uroot -p123 -B oldboy world -S /data/3307/mysql.sock &gt; /data/backup/db.sql</code></li>\n<li> 库名 表名<br><code>mysqldump -uroot -p123 world city country -S /data/3307/mysql.sock &gt; /data/backup/tab.sql</code><br>注意：此种方法只会备份建表+insert语句。所以恢复前需要吧库建好，并提前use到库中进行恢复。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">** 思考并验证以下命令的区别：</span><br><span class=\"line\">mysqldump -uroot -p123 -B world &gt;/backup/world.sql</span><br><span class=\"line\">与</span><br><span class=\"line\">mysqldump -uroot -p123 world &gt;/backup/world1.sql</span><br><span class=\"line\"></span><br><span class=\"line\">vimdiff wordpres.sql world1.sql</span><br><span class=\"line\"></span><br><span class=\"line\">结论：</span><br><span class=\"line\">1、-B 在备份时，会添加create database和use语句</span><br><span class=\"line\">2、-B的备份恢复时，直接<span class=\"built_in\">source</span></span><br><span class=\"line\">3、不加-B备份恢复时，需要事先创建好数据库，use进去进行<span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">如果备份对象下的数据库绝大多数都是myisam类型表，为了保证数据的一致性，备份时需要锁定表</span><br><span class=\"line\">如果是针对innodb的表进行备份由于innodb是事务型的引擎，会话与会话之间是隔离的，所以备份的时候不影响数据库的正常使用，无需锁表</span><br><span class=\"line\"></span><br><span class=\"line\">如果添加了此参数，会自动对备份的表加锁，对于加了--single-transaction参数的时候，</span><br><span class=\"line\">如果是innodb表则会实行“热备”</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"必加参数-lt-1-gt\"><a href=\"#必加参数-lt-1-gt\" class=\"headerlink\" title=\"必加参数&lt;1&gt;\"></a>必加参数&lt;1&gt;</h4><p><code>—R</code>在备份是，同时备份存储过程和函数，如果没有会自动忽略(mysql人为开发的代码块，类系统中shell脚本)<br><code>-E</code>在备份时，同时备份EVENT，如果没有会自动忽略(类系统 crontab)<br><code>--triggers</code> 在备份时，同时备份触发器，如果没有会自动忽略</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -p123 —R -E --triggers world city country -S /data/3307/mysql.sock &gt; /data/backup/tab.sql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"必加参数-lt-2-gt\"><a href=\"#必加参数-lt-2-gt\" class=\"headerlink\" title=\"必加参数&lt;2&gt;\"></a>必加参数&lt;2&gt;</h4><ul>\n<li><code>--master-data=1</code> //记录增加binlog日志文件名和 对应的位置点可执行的语句</li>\n<li><code>--master-data=2</code> //记录备份开始时 <code>position</code>号,可作为将来做日志截取的起点<br>配合-F参数，备份时前滚一个binlog<br>二者区别：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">30 CHANGE MASTER TO MASTER_LOG_FILE=<span class=\"string\">&#x27;mysql-bin.000014&#x27;</span>, MASTER_LOG_POS=194;|30 -- CHANGE MASTER TO MASTER_LOG_FILE=<span class=\"string\">&#x27;mysql-bin.000013&#x27;</span>, MASTER_LOG_POS=194; </span><br><span class=\"line\">1：表示前滚一个日志，写入到备份文件中</span><br><span class=\"line\">2：以注释的方式写入</span><br></pre></td></tr></table></figure>\n功能： </li>\n</ul>\n<ol>\n<li>记录备份时的<code>position</code> </li>\n<li>自动锁表 </li>\n<li>配合<code>--single-transaction</code>，减少锁的时间(innodb引擎不锁表)</li>\n</ol>\n<p><code>--single-transaction</code> //针对innodb表，在备份时生成一个事务生成原始数据的快照（undo技术），备份的是快照不是原表数据。不锁表（快照备份”热备份”）<br>例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ll /data/3307/mysql-bin.0* | wc -l</span></span><br><span class=\"line\">11</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqldump -uroot -p123 -S /data/3307/mysql.sock -A -R --triggers --master-data=2 --single-transaction  -F |gzip &gt;/tmp/alL_$(date +%F).sql.gz</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ll /data/3307/mysql-bin.0* | wc -l</span></span><br><span class=\"line\">12</span><br><span class=\"line\">[root@db01 /tmp]<span class=\"comment\"># ll /data/3307/mysql-bin.0* | wc -l13</span></span><br><span class=\"line\">[root@db01 /tmp]<span class=\"comment\"># gzip -d alL_2020-04-16.sql.gz </span></span><br><span class=\"line\">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class=\"string\">&#x27;mysql-bin.000013&#x27;</span>, MASTER_LOG_POS=194;</span><br><span class=\"line\">//加上-F --master-data=2 后向后滚动了一个日志，最后一个事务的结束position就是将来日常恢复要找的第一个postition起点</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 /tmp]<span class=\"comment\"># mysqlbinlog /data/3307/mysql-bin.000013</span></span><br><span class=\"line\">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;</span><br><span class=\"line\">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;</span><br><span class=\"line\">DELIMITER /*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 4</span></span><br><span class=\"line\"><span class=\"comment\">#200416 23:11:20 server id 7  end_log_pos 123 CRC32 0x32b19ec2  Start: binlog v 4, server v 5.7.26-log created 200416 23:11:20</span></span><br><span class=\"line\"><span class=\"comment\"># Warning: this binlog is either in use or was not closed properly.</span></span><br><span class=\"line\">BINLOG <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">mHWYXg8HAAAAdwAAAHsAAAABAAQANS43LjI2LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class=\"line\"><span class=\"string\">AAAAAAAAAAAAAAAAAAAAAAAAEzgNAAgAEgAEBAQEEgAAXwAEGggAAAAICAgCAAAACgoKKioAEjQA</span></span><br><span class=\"line\"><span class=\"string\">AcKesTI=</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>/*!*/;</span><br><span class=\"line\"><span class=\"comment\"># at 123</span></span><br><span class=\"line\"><span class=\"comment\">#200416 23:11:20 server id 7  end_log_pos 194 CRC32 0x7213cfc8  Previous-GTIDs</span></span><br><span class=\"line\"><span class=\"comment\"># cca7bb3f-687e-11ea-b0d9-0800273e0795:1-14</span></span><br><span class=\"line\">SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;AUTOMATIC&#x27;</span> /* added by mysqlbinlog */ /*!*/;</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"><span class=\"comment\"># End of log file</span></span><br><span class=\"line\">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;</span><br><span class=\"line\">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;</span><br></pre></td></tr></table></figure>\n<p>mysqldump 热备的实现原理是什么？<br>1、热备的前提是，只能对innodb表才能实现的<br>2、热备的实现原理，基于时间点的的快照<br>3、我的理解是，给全体员工（mysql数据）拍个照（快照），对照片上的人数进行统计（备份）。</p>\n<h4 id=\"其他参数\"><a href=\"#其他参数\" class=\"headerlink\" title=\"其他参数\"></a>其他参数</h4><p><code>-F</code> //前滚binlog，默认按库的个数进行前滚</p>\n<p><code>--set-gtid-purged=auto</code>|auto|on|off :忽略或打开gtid</p>\n<p><code>--max-allowed-packet=128M</code><br>使用场景:</p>\n<ol>\n<li>–set-gtid-purged=OFF,可以使用在日常备份参数中.</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -p123 -S /data/3307/mysql.sock -A -R -E -F --triggers --master-data=2  --max-allowed-packet=128M --single-transaction --set-gtid-purged=OFF  |gzip &gt;/tmp/alL_$(<span class=\"built_in\">date</span> +%F)2.sql.gz</span><br><span class=\"line\">参数解释</span><br><span class=\"line\">-A：全量备份     </span><br><span class=\"line\">-R：同时备份数据库中的代码块     </span><br><span class=\"line\">-E：同时备份事件</span><br><span class=\"line\">-F：备份时前滚日志</span><br><span class=\"line\">--triggers：同时备份触发器    </span><br><span class=\"line\">--master-data=2：备份当前时刻字节偏移量，即最后一个position号    </span><br><span class=\"line\">--max-allowed-packet=128M：备份大表时调整数据包的阀值</span><br><span class=\"line\">--single-transaction：针对innodb引擎，减少锁表时间&amp;开启快照备份（“热备”）</span><br><span class=\"line\">--set-gtid-purged=OFF：普通环境下备份时忽略gtid，可不加。即恢复时对恢复的数据产生新的gtid和position号</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>auto , on:在构建主从复制环境时需要的参数配置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -p123 -S /data/3307/mysql.sock -A -R -E -F --triggers --master-data=2  --max-allowed-packet=128M --single-transaction --set-gtid-purged=ON  |gzip &gt;/tmp/alL_$(<span class=\"built_in\">date</span> +%F)2.sql.gz</span><br><span class=\"line\">参数解释</span><br><span class=\"line\">-A：全量备份     </span><br><span class=\"line\">-R：同时备份数据库中的代码块     </span><br><span class=\"line\">-E：同时备份事件</span><br><span class=\"line\">-F：备份时前滚日志</span><br><span class=\"line\">--triggers：同时备份触发器 </span><br><span class=\"line\">--master-data=2：备份当前时刻字节偏移量，即最后一个position号  </span><br><span class=\"line\">--max-allowed-packet=128M：备份大表时调整数据包的阀值</span><br><span class=\"line\">--single-transaction：针对innodb引擎，减少锁表时间&amp;开启快照备份（“热备”）</span><br><span class=\"line\">--set-gtid-purged=ON：针对主从环境下的数据备份，必须设置成ON，备份GTID号.在恢复数据时采用原有的GTID和position号。确保主从环境中数据的一致性</span><br></pre></td></tr></table></figure>\n\n<p>二者备份完成后的区别：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">--set-gtid-purged=ON                                                                                    --set-gtid-purged=OFF</span><br><span class=\"line\">    17 SET @MYSQLDUMP_TEMP_LOG_BIN = @@SESSION.SQL_LOG_BIN;                                      |       ------------------------------------------------------------------------------------------</span><br><span class=\"line\">    18 SET @@SESSION.SQL_LOG_BIN= 0;                                                             |       ------------------------------------------------------------------------------------------</span><br><span class=\"line\">    19                                                                                           |       ------------------------------------------------------------------------------------------</span><br><span class=\"line\">    20 --                                                                                        |       ------------------------------------------------------------------------------------------</span><br><span class=\"line\">    21 -- GTID state at the beginning of the backup                                              |       ------------------------------------------------------------------------------------------</span><br><span class=\"line\">    22 --                                                                                        |       ------------------------------------------------------------------------------------------</span><br><span class=\"line\">    23                                                                                           |       ------------------------------------------------------------------------------------------</span><br><span class=\"line\">    24 SET @@GLOBAL.GTID_PURGED=<span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:1-14&#x27;</span>;                     |       ------------------------------------------------------------------------------------------</span><br><span class=\"line\">    </span><br><span class=\"line\">    1623 SET @@SESSION.SQL_LOG_BIN = @MYSQLDUMP_TEMP_LOG_BIN;                                    |       ------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"企业备份恢复案例（mysqldump-binlog）：\"><a href=\"#企业备份恢复案例（mysqldump-binlog）：\" class=\"headerlink\" title=\"企业备份恢复案例（mysqldump+binlog）：\"></a>企业备份恢复案例（mysqldump+binlog）：</h2><h3 id=\"frm误删除\"><a href=\"#frm误删除\" class=\"headerlink\" title=\"frm误删除\"></a>frm误删除</h3><h4 id=\"有全备情况下\"><a href=\"#有全备情况下\" class=\"headerlink\" title=\"有全备情况下\"></a>有全备情况下</h4><ol>\n<li>找出建表语句，在测试库中进行恢复。</li>\n<li>拷贝恢复好的frm文件到误删的数据库中进行恢复。</li>\n<li><code>chmod mysql.mysql /data/3307/data/world/*</code> 不要忘记授权</li>\n</ol>\n<h4 id=\"没有全备情况下\"><a href=\"#没有全备情况下\" class=\"headerlink\" title=\"没有全备情况下\"></a>没有全备情况下</h4><p>参照：<a href=\"https://cakepanit.com/forward/3053135c.html#7-0-%E8%A1%A8%E7%A9%BA%E9%97%B4%E8%BF%81%E7%A7%BB\">表空间迁移</a><br>思路：找到建表语句，测试库恢复表结构。–&gt;恢复数据</p>\n<h3 id=\"年终故障恢复演练。\"><a href=\"#年终故障恢复演练。\" class=\"headerlink\" title=\"年终故障恢复演练。\"></a>年终故障恢复演练。</h3><p><strong>案例背景</strong>： 某中小型互联网公司。MySQL 5.7.26 ，Centos 7.6 ，数据量级80G，每日数据增量5-6M，开启了<a href=\"https://cakepanit.com/forward/93ea067.html\">GTID</a>。<br><strong>备份策略</strong>： 每天mysqldump全备+binlog备份，每天23:00进行。<br><strong>故障描述</strong>： 周三下午2点，数据由于某原因数据损坏。<br><strong>处理思路</strong>： </p>\n<ol>\n<li>挂出维护页</li>\n<li>评估一下数据损坏状态</li>\n</ol>\n<ul>\n<li>2.1 全部丢失–&gt;推荐直接生产恢复</li>\n<li>2.2 部分丢失<ul>\n<li>(1)从备份中导出单表数据  </li>\n<li>(2)测试库进行全备恢复</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li> 恢复全备，将数据追溯到周二晚上23:00状态</li>\n<li> 截取并恢复从备份时刻，到下午两点误删除之前binlog。</li>\n<li> 校验数据一致性</li>\n<li> 撤维护页，恢复生产。</li>\n</ol>\n<p><strong>处理结果</strong>：</p>\n<ol>\n<li> 经过30-40分钟处理，业务恢复</li>\n<li> 评估此次故障的处理的合理性和实用性</li>\n</ol>\n<h4 id=\"灾后恢复具体过程：\"><a href=\"#灾后恢复具体过程：\" class=\"headerlink\" title=\"灾后恢复具体过程：\"></a>灾后恢复具体过程：</h4><ol>\n<li><strong>模拟前一天全备[参数解释见：<a href=\"https://cakepanit.com/forward/7cf8b47.html#3-4%E9%80%BB%E8%BE%91%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7-mysqldump\">mysqldump</a>]</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">show master status;</span><br><span class=\"line\">    mysql-bin.000021</span><br><span class=\"line\"></span><br><span class=\"line\">mysqldump -uroot -p123 -S /data/3307/mysql.sock -A -R -E -F --triggers --master-data=2  --max-allowed-packet=128M --single-transaction |gzip &gt;/tmp/alL_$(<span class=\"built_in\">date</span> +%F).sql.gz</span><br><span class=\"line\"></span><br><span class=\"line\">show master status;</span><br><span class=\"line\">    mysql-bin.000022 //执行完成后binlog向前滚动了一个日志</span><br></pre></td></tr></table></figure>\n\n<p>2.<strong>查看备份数据</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gzip -d /tmp/alL_2020-04-20.sql.gz </span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># vim /tmp/alL_2020-04-20.sql </span></span><br><span class=\"line\">SET @@GLOBAL.GTID_PURGED=<span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:1-14&#x27;</span>;   //记录了备份数据时刻最后的gtid号</span><br><span class=\"line\">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class=\"string\">&#x27;mysql-bin.000022&#x27;</span>, MASTER_LOG_POS=194;    //记录了binlog在备份时刻使用的日志文件和结束位置的position号</span><br></pre></td></tr></table></figure>\n\n<p>3.<strong>全备之后到下午两点前业务操作</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database mdp charset utf8mb4;</span><br><span class=\"line\">mysql&gt; use mdp</span><br><span class=\"line\">mysql&gt; create table t1(<span class=\"built_in\">id</span> int);</span><br><span class=\"line\">mysql&gt; insert into t1 values(1),(2),(3);</span><br><span class=\"line\">mysql&gt; commit;</span><br><span class=\"line\">mysql&gt; insert into t1 values(11),(12),(13);</span><br><span class=\"line\">mysql&gt; commit;</span><br><span class=\"line\">mysql&gt; update t1 <span class=\"built_in\">set</span> <span class=\"built_in\">id</span>=20 <span class=\"built_in\">where</span> <span class=\"built_in\">id</span>&gt;10;</span><br><span class=\"line\">mysql&gt; commit;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from t1;</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>   |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">|    1 |</span><br><span class=\"line\">|    2 |</span><br><span class=\"line\">|    3 |</span><br><span class=\"line\">|   20 |</span><br><span class=\"line\">|   20 |</span><br><span class=\"line\">|   20 |</span><br><span class=\"line\">+------+</span><br></pre></td></tr></table></figure>\n\n<p>4.<strong>模拟数据库被删</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 /data/3307/data]<span class=\"comment\"># ls</span></span><br><span class=\"line\">111    auto.cnf  binlog    ff              ibdata1      ib_logfile1  mdp    oldboy  performance_schema  sys    world</span><br><span class=\"line\">aa_bb  _bb       db01.pid  ib_buffer_pool  ib_logfile0  ibtmp1       mysql  oldguo  school              test1  xyz</span><br><span class=\"line\">[root@db01 /data/3307/data]<span class=\"comment\"># \\rm -rf *</span></span><br><span class=\"line\">[root@db01 /data/3307/data]<span class=\"comment\"># pkill mysqld</span></span><br><span class=\"line\">[root@db01 /data/3307/data]<span class=\"comment\"># ls</span></span><br><span class=\"line\">ib_buffer_pool</span><br><span class=\"line\">[root@db01 /data/3307/data]<span class=\"comment\"># \\rm -rf *</span></span><br></pre></td></tr></table></figure>\n\n<p>5.<strong>开始恢复</strong><br>5.1 重新初始化数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld --initialize-insecure  --user=mysql --datadir=/data/3307/data --basedir=/application/mysql</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ls /data/3307/data/</span></span><br><span class=\"line\">auto.cnf  ib_buffer_pool  ibdata1  ib_logfile0  ib_logfile1  mysql  performance_schema  sys</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart mysqld3307</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl status mysqld3307</span></span><br><span class=\"line\">● mysqld3307.service - MySQL Server</span><br><span class=\"line\">   Loaded: loaded (/etc/systemd/system/mysqld3307.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since 一 2020-04-20 16:00:59 CST; 12s ago</span><br><span class=\"line\">     Docs: man:mysqld(8)</span><br><span class=\"line\">           http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class=\"line\"> Main PID: 1488 (mysqld)</span><br><span class=\"line\">   CGroup: /system.slice/mysqld3307.service</span><br><span class=\"line\">           └─1488 /application/mysql/bin/mysqld --defaults-file=/data/3307/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">4月 20 16:00:59 db01 systemd[1]: Started MySQL Server.</span><br></pre></td></tr></table></figure>\n\n<p>5.2 前一天全备恢复</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -S /data/3307/mysql.sock</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> sql_log_bin=0;  //临时关闭当前会话二进制日志记录</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /tmp/alL_2020-04-20.sql</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| 111                |</span><br><span class=\"line\">| _bb                |</span><br><span class=\"line\">| aa_bb              |</span><br><span class=\"line\">| binlog             |</span><br><span class=\"line\">| ff                 |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| oldboy             |</span><br><span class=\"line\">| oldguo             |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| school             |</span><br><span class=\"line\">| sys                |</span><br><span class=\"line\">| test1              |</span><br><span class=\"line\">| world              |</span><br><span class=\"line\">| xyz                |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges; <span class=\"comment\">#刷新权限</span></span><br><span class=\"line\">mysql&gt; ^DBye</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -uroot -h 192.168.56.2 -P3307 -p //再次登陆就需要账号密码了</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n\n<p>5.3 截取备份时刻到宕机之前的binlog<br><a href=\"https://cakepanit.com/forward/93ea067.html#1-5%E5%9F%BA%E4%BA%8EGTDI%E6%88%AA%E5%8F%96\">基于GTDI截取</a>：<br><a href=\"https://cakepanit.com/forward/663d93c2.html#%E6%8C%89%E9%9C%80%E6%88%AA%E5%8F%96%E6%97%A5%E5%BF%97\">基于Position截取</a>：查看备份文件的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show binlog events <span class=\"keyword\">in</span> <span class=\"string\">&quot;mysql-bin.000022&quot;</span>;</span><br><span class=\"line\">根据全备中的binlog日志文件，和gtid号，找到全备之后到宕机之前的日志</span><br><span class=\"line\">应当是：GTID=15开始 到最后结尾</span><br><span class=\"line\"></span><br><span class=\"line\">mysqlbinlog --skip-gtids --include-gtids=<span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:15-19&#x27;</span> /data/3307/mysql-bin.000022 &gt;/tmp/binlog-000022.sql</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">mysqlbinlog --skip-gtids --start-position=194 --stop-position=1325 /data/3307/mysql-bin.000022 &gt;/tmp/bin.sql</span><br></pre></td></tr></table></figure>\n\n<p>5.4 binlog.sql恢复</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> sql_log_bin=0;</span><br><span class=\"line\"><span class=\"built_in\">source</span> /tmp/binlog-000022.sql</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; use mdp;</span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+---------------+</span><br><span class=\"line\">| Tables_in_mdp |</span><br><span class=\"line\">+---------------+</span><br><span class=\"line\">| t1            |</span><br><span class=\"line\">+---------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from t1;</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>   |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">|    1 |</span><br><span class=\"line\">|    2 |</span><br><span class=\"line\">|    3 |</span><br><span class=\"line\">|   20 |</span><br><span class=\"line\">|   20 |</span><br><span class=\"line\">|   20 |</span><br><span class=\"line\">+------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单表恢复具体过程：\"><a href=\"#单表恢复具体过程：\" class=\"headerlink\" title=\"单表恢复具体过程：\"></a>单表恢复具体过程：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; use world;</span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| Tables_in_world |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| city            |</span><br><span class=\"line\">| city1           |</span><br><span class=\"line\">| country         |</span><br><span class=\"line\">| countrylanguage |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">mysql&gt; drop table city1;</span><br></pre></td></tr></table></figure>\n\n<p>思路：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">从全备获取获取单库以及所有表的备份</span><br><span class=\"line\"><span class=\"comment\"># sed -n &#x27;/^-- Current Database: `world`/,/^-- Current Database: `/p&#x27; all.sql &gt;world.sql</span></span><br><span class=\"line\">只截取db1库的二进制日志</span><br><span class=\"line\"><span class=\"comment\"># mysqlbinlog -d db1 --stop-position=974 /data/mysql/mysql-bin.000003 &gt;/tmp/part.sql</span></span><br><span class=\"line\">获得表结构</span><br><span class=\"line\"><span class=\"comment\"># sed -e&#x27;/./&#123;H;$!d;&#125;&#x27; -e &#x27;x;/CREATE TABLE `city1`/!d;q&#x27;  alL_2020-04-20.sql&gt;city1.sql</span></span><br><span class=\"line\">获得INSERT INTO 语句，用于数据的恢复</span><br><span class=\"line\"><span class=\"comment\"># grep -i &#x27;INSERT INTO `city1`&#x27;  alL_2020-04-20.sql &gt;city1_data.sql</span></span><br></pre></td></tr></table></figure>\n\n<p>恢复：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> sql_log_bin=0;</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /tmp/city1.sql;</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /tmp/city1_data.sql</span><br><span class=\"line\">Query OK, 20395 rows affected (0.25 sec)</span><br><span class=\"line\">Records: 20395  Duplicates: 0  Warnings: 0</span><br><span class=\"line\">mysql&gt; select * from city1;</span><br><span class=\"line\">+-------+------------------------------------+-------------+------------------------+------------+</span><br><span class=\"line\">| ID    | Name                               | CountryCode | District               | Population |</span><br><span class=\"line\">+-------+------------------------------------+-------------+------------------------+------------+</span><br><span class=\"line\">|     1 | Kabul                              | AFG         | Kabol                  |    1780000 |</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"XtraBackup简介及安装\"><a href=\"#XtraBackup简介及安装\" class=\"headerlink\" title=\"XtraBackup简介及安装\"></a>XtraBackup简介及安装</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装依赖包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class=\"line\">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL libev</span><br></pre></td></tr></table></figure>\n<p>安装rpm包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CentOS7:</span><br><span class=\"line\">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.12/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span><br><span class=\"line\">CentOS6:</span><br><span class=\"line\">https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.4/binary/redhat/6/x86_64/percona-xtrabackup-24-2.4.4-1.el6.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># yum -y install percona-xtrabackup-24-2.4.4-1.el6.x86_64.rpm </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"备份命令介绍\"><a href=\"#备份命令介绍\" class=\"headerlink\" title=\"备份命令介绍:\"></a>备份命令介绍:</h3><p>xtrabackup<br>innobackupex    ******</p>\n<h3 id=\"备份方式——物理备份\"><a href=\"#备份方式——物理备份\" class=\"headerlink\" title=\"备份方式——物理备份\"></a>备份方式——物理备份</h3><p>（1）对于非Innodb表（比如 myisam）是，锁表cp数据文件，属于一种温备份。<br>（2）对于Innodb的表（支持事务的），不锁表，拷贝数据页(触发<a href=\"https://cakepanit.com/forward/bc8a646.html\">CKPT</a>将脏页也刷写到磁盘)，最终以数据文件的方式保存下来，把一部分redo和undo一并备走，属于热备方式。</p>\n<p><strong>面试题</strong>： xbk 在innodb表备份恢复的流程<br>0、xbk备份执行的瞬间,立即触发ckpt,已提交的数据脏页,从内存刷写到磁盘,并记录此时的LSN号<br>1、备份时，拷贝磁盘数据页，并且记录备份过程中产生的redo和undo一起拷贝走,也就是checkpoint LSN之后的日志<br>2、在恢复之前，模拟Innodb“自动故障恢复”的过程，将redo（前滚）与undo（回滚）进行应用<br>3、恢复过程是cp 备份到原来数据目录下</p>\n<p><strong>备份过程</strong>：</p>\n<ol>\n<li>ckpt ，记录ckpt后LSN ,to  lsn</li>\n<li>拷贝数据页 ，保存为数据文件</li>\n<li>自动将备份过程redo，会一并备份走，提取redo当中最后的last LSN</li>\n</ol>\n<p><strong>恢复</strong>： </p>\n<ol>\n<li>其实就是模拟了<a href=\"https://cakepanit.com/forward/bc8a646.html\">CSR</a>过程</li>\n<li>对比LAST LSN ,to lsn</li>\n<li>使用redo进行前滚，对未提交的事务进行回滚</li>\n<li>最后得到一个一致性备份</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">物理备份，类型<span class=\"built_in\">cp</span> 数据目录下的数据文件到备份路径</span><br><span class=\"line\">MyIsam，进行锁表备份</span><br><span class=\"line\">innodb，进行热备，备份数据的同时，会将备份过程中产生的数据变化(redo+undo)。</span><br><span class=\"line\">在恢复时，提前进行备份准备，“合并”redo和undo到全备数据文件，前滚和回滚的过程。</span><br><span class=\"line\">模拟的MySQL的CSR</span><br></pre></td></tr></table></figure>\n<h3 id=\"innobackupex使用\"><a href=\"#innobackupex使用\" class=\"headerlink\" title=\"innobackupex使用\"></a>innobackupex使用</h3><h3 id=\"全备\"><a href=\"#全备\" class=\"headerlink\" title=\"全备\"></a>全备</h3><p><code>[root@db01 backup]# innobackupex --user=root --password=123  /data/bak</code><br>//依赖于mysql的配置文件，否则需要手工指定</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mkdir -p /tmp/my_bak/</span></span><br><span class=\"line\"></span><br><span class=\"line\">vim /data/3307/my.cnf</span><br><span class=\"line\">注意：</span><br><span class=\"line\">备份工具是依赖于/etc/my.cnf   </span><br><span class=\"line\">[mysqld] </span><br><span class=\"line\">[client]</span><br><span class=\"line\">socket=/data/3307/mysql.sock //依赖</span><br><span class=\"line\">或</span><br><span class=\"line\">[innobackupex]</span><br><span class=\"line\">socket=/data/3307/mysql.sock</span><br></pre></td></tr></table></figure>\n\n<p>如果说配置文件没有在/etc  ，可以如下操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># innobackupex --defaults-file=/data/3307/my.cnf --user=root --password=123  /tmp/my_bak/</span></span><br><span class=\"line\">200422 11:15:33 completed OK!</span><br></pre></td></tr></table></figure>\n<p>自主定制备份路径名<br><code>[root@db01 backup]# innobackupex --defaults-file=/data/3307/my.cnf --user=root --password=123 --no-timestamp /data/bak/full_$(date +%F)</code></p>\n<p>备份文件说明：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 /tmp/my_bak/2020-04-22_11-15-31]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 12344</span><br><span class=\"line\">-rw-r----- 1 root root       63 4月  22 11:15 xtrabackup_binlog_info</span><br><span class=\"line\">mysql-bin.000024        194     cca7bb3f-687e-11ea-b0d9-0800273e0795:1-19</span><br><span class=\"line\">//二进制日志文件        position号    GTID</span><br><span class=\"line\">//记录的是备份时刻，binlog的文件名字和当时的结束的position，可以用来作为截取binlog时的起点。</span><br><span class=\"line\"></span><br><span class=\"line\">-rw-r----- 1 root root      115 4月  22 11:15 xtrabackup_checkpoints</span><br><span class=\"line\">backup_type = full-backuped</span><br><span class=\"line\">from_lsn = 0    //上次所到达的LSN号(对于全备就是从0开始,对于增量有别的显示方法)</span><br><span class=\"line\">to_lsn = 11690217    //备份开始时间(ckpt)点数据页的LSN  </span><br><span class=\"line\">last_lsn = 11690226    //备份结束后，redo日志最终的LSN（前后差9个，其实是一样的。被gtid占用。在5.7以后的版本）</span><br><span class=\"line\">compact = 0</span><br><span class=\"line\">recover_binlog_info = 0</span><br><span class=\"line\">//LSN号的记录，用于恢复后进行CSR。保证恢复后数据的一致性</span><br><span class=\"line\"></span><br><span class=\"line\">-rw-r----- 1 root root      574 4月  22 11:15 xtrabackup_info</span><br><span class=\"line\">uuid = 86e77f87-8447-11ea-a606-0800273e0795</span><br><span class=\"line\">name = </span><br><span class=\"line\">tool_name = innobackupex</span><br><span class=\"line\">tool_command = --defaults-file=/data/3307/my.cnf --user=root --password=... /tmp/my_bak/</span><br><span class=\"line\">tool_version = 2.4.12</span><br><span class=\"line\">ibbackup_version = 2.4.12</span><br><span class=\"line\">server_version = 5.7.26-<span class=\"built_in\">log</span></span><br><span class=\"line\">start_time = 2020-04-22 11:15:31</span><br><span class=\"line\">end_time = 2020-04-22 11:15:32</span><br><span class=\"line\">lock_time = 0</span><br><span class=\"line\">binlog_pos = filename <span class=\"string\">&#x27;mysql-bin.000024&#x27;</span>, position <span class=\"string\">&#x27;194&#x27;</span>, GTID of the last change <span class=\"string\">&#x27;cca7bb3f-687e-11ea-b0d9-0800273e0795:1-19&#x27;</span></span><br><span class=\"line\">innodb_from_lsn = 0</span><br><span class=\"line\">innodb_to_lsn = 11690217</span><br><span class=\"line\">partial = N</span><br><span class=\"line\">incremental = N</span><br><span class=\"line\">format = file</span><br><span class=\"line\">compact = N</span><br><span class=\"line\">compressed = N</span><br><span class=\"line\">encrypted = N</span><br><span class=\"line\">//总体信息</span><br><span class=\"line\"></span><br><span class=\"line\">-rw-r----- 1 root root     2560 4月  22 11:15 xtrabackup_logfile</span><br><span class=\"line\">//部分rudo的数据，在备份过程中产生的新的数据变化</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全备恢复\"><a href=\"#全备恢复\" class=\"headerlink\" title=\"全备恢复\"></a>全备恢复</h3><p>利用xtrabackup工具进行全备恢复的过程：</p>\n<ul>\n<li> 恢复了全备</li>\n<li> CSR利用备份中以备份好的部分redo和undo日志对备份进行前滚和回滚操作<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># pkill mysqld</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -uroot -h 192.168.56.2 -P3307 -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">ERROR 2003 (HY000): Can<span class=\"string\">&#x27;t connect to MySQL server on &#x27;</span>192.168.56.2<span class=\"string\">&#x27; (111)</span></span><br><span class=\"line\"><span class=\"string\">[root@db01 ~]# \\rm -rf /data/3307/data/*</span></span><br><span class=\"line\"><span class=\"string\">[root@db01 ~]# ls /data/3307/data/</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>prepare阶段：</p>\n<ul>\n<li>在备份完成后，数据不能直接用于生产恢复操作，因为备份的数据中可能会包含尚未提交的事务或已经提交但尚未同步至数据文件中的事务。</li>\n<li>因此，此时数据文件仍处于不一致状态。“准备”的主要作用正是通过回滚未提交的事务及同步已经提交的事务至数据文件也使得数据文件处于一致性状态（追平LSN号）。</li>\n<li>将redo进行重做，已提交的写到数据文件，未提交的使用undo回滚掉。模拟了CSR的过程<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># innobackupex --apply-log /tmp/my_bak/2020-04-22_11-15-31/</span></span><br><span class=\"line\">200422 14:12:27 completed OK!</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>恢复备份</strong><br>前提：</p>\n<ul>\n<li>被恢复的目录是空</li>\n<li>被恢复的数据库的实例是关闭<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cp -a /tmp/my_bak/2020-04-22_11-15-31/* /data/3307/data/</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># chown -R mysql.mysql /data/3307/data/</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart mysqld3307</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -uroot -h 192.168.56.2 -P3307 -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">mysql&gt; show databases;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"XBK增量备份\"><a href=\"#XBK增量备份\" class=\"headerlink\" title=\"XBK增量备份\"></a>XBK增量备份</h3><p><strong>备份方式</strong>：基于上次的备份的增量<br><strong>恢复方式</strong>：增量备份不能单独恢复，必须合并到全备中，一起恢复</p>\n<h4 id=\"周日全备\"><a href=\"#周日全备\" class=\"headerlink\" title=\"周日全备\"></a>周日全备</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innobackupex --defaults-file=/data/3307/my.cnf --user=root --password=123 --no-timestamp /tmp/my_bak/full_$(<span class=\"built_in\">date</span> +%F)</span><br><span class=\"line\">200422 15:00:24 completed OK!</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟周一变化\"><a href=\"#模拟周一变化\" class=\"headerlink\" title=\"模拟周一变化\"></a>模拟周一变化</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database xbk charset utf8mb4;\t</span><br><span class=\"line\">use xbk</span><br><span class=\"line\">create table t1(<span class=\"built_in\">id</span> int);</span><br><span class=\"line\">insert into t1 values(1),(2),(3);</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模拟周一晚上的增量备份\"><a href=\"#模拟周一晚上的增量备份\" class=\"headerlink\" title=\"模拟周一晚上的增量备份\"></a>模拟周一晚上的增量备份</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innobackupex --defaults-file=/data/3307/my.cnf --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/tmp/my_bak/full_2020-04-22/ /tmp/my_bak/inc1_$(<span class=\"built_in\">date</span> +%F)</span><br><span class=\"line\">200422 15:06:36 completed OK!</span><br><span class=\"line\">--no-timestamp //备份目录不带时间戳</span><br><span class=\"line\">--incremental //增量备份</span><br><span class=\"line\">--incremental-basedir //指定上一次备份的路径</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模拟周二变化\"><a href=\"#模拟周二变化\" class=\"headerlink\" title=\"模拟周二变化\"></a>模拟周二变化</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use xbk</span><br><span class=\"line\">create table t2(<span class=\"built_in\">id</span> int);</span><br><span class=\"line\">insert into t2 values(1),(2),(3);</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模拟周二晚上的增量备份\"><a href=\"#模拟周二晚上的增量备份\" class=\"headerlink\" title=\"模拟周二晚上的增量备份\"></a>模拟周二晚上的增量备份</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innobackupex --defaults-file=/data/3307/my.cnf --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/tmp/my_bak/inc1_2020-04-22/ /tmp/my_bak/inc2_$(<span class=\"built_in\">date</span> +%F)</span><br><span class=\"line\">200422 15:12:38 completed OK!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查备份\"><a href=\"#检查备份\" class=\"headerlink\" title=\"检查备份\"></a>检查备份</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /tmp/my_bak/full_2020-04-22/xtrabackup_checkpoints /tmp/my_bak/inc1_2020-04-22/xtrabackup_checkpoints /tmp/my_bak/inc2_2020-04-22/xtrabackup_checkpoints</span></span><br><span class=\"line\">backup_type = full-backuped</span><br><span class=\"line\">from_lsn = 0</span><br><span class=\"line\">to_lsn = 11692091</span><br><span class=\"line\">last_lsn = 11692100 //减9 比较下一个from_lsn</span><br><span class=\"line\">compact = 0</span><br><span class=\"line\">recover_binlog_info = 0</span><br><span class=\"line\"></span><br><span class=\"line\">backup_type = incremental</span><br><span class=\"line\">from_lsn = 11692091 //加9 比较上一个last_lsn</span><br><span class=\"line\">to_lsn = 11707474</span><br><span class=\"line\">last_lsn = 11707483  //减9 比较下一个from_lsn</span><br><span class=\"line\">compact = 0</span><br><span class=\"line\">recover_binlog_info = 0</span><br><span class=\"line\">backup_type = incremental</span><br><span class=\"line\"></span><br><span class=\"line\">from_lsn = 11707474  //加9 比较上一个last_lsn</span><br><span class=\"line\">to_lsn = 11713070</span><br><span class=\"line\">last_lsn = 11713079</span><br><span class=\"line\">compact = 0</span><br><span class=\"line\">recover_binlog_info = 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"XBK增量恢复\"><a href=\"#XBK增量恢复\" class=\"headerlink\" title=\"XBK增量恢复\"></a>XBK增量恢复</h3><p><strong>思路</strong>：合并所以增量到全备，每个XBK备份都需要恢复准备（prepare）<br>–apply-log（该回滚的回滚，该前滚的前滚）   –redo-only（防止LSN号出现断点，防止回滚）</p>\n<h4 id=\"整理全备：\"><a href=\"#整理全备：\" class=\"headerlink\" title=\"整理全备：\"></a>整理全备：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># innobackupex --apply-log --redo-only /tmp/my_bak/full_2020-04-22/</span></span><br><span class=\"line\">200422 15:44:55 completed OK!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"合并周一增量并整理到全备\"><a href=\"#合并周一增量并整理到全备\" class=\"headerlink\" title=\"合并周一增量并整理到全备\"></a>合并周一增量并整理到全备</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># innobackupex --apply-log --redo-only --incremental-dir=/tmp/my_bak/inc1_2020-04-22/ /tmp/my_bak/full_2020-04-22/</span></span><br><span class=\"line\">                               追平LSN。   防止UNDO     需要合并的增备                                  合并到哪里</span><br><span class=\"line\">200422 16:32:04 completed OK!</span><br><span class=\"line\">此时 5.4.2中 block1的last_lsn应该等于block2的last_lsn</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"合并周二增量并整理到全备\"><a href=\"#合并周二增量并整理到全备\" class=\"headerlink\" title=\"合并周二增量并整理到全备\"></a>合并周二增量并整理到全备</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># innobackupex --apply-log --incremental-dir=/tmp/my_bak/inc2_2020-04-22/ /tmp/my_bak/full_2020-04-22/</span></span><br><span class=\"line\">200422 16:38:30 completed OK!</span><br><span class=\"line\">最后一次合并不需要加--redo-only</span><br><span class=\"line\"></span><br><span class=\"line\">此时 5.4.2中 block1的last_lsn应该等于block3的last_lsn</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再次整理全备\"><a href=\"#再次整理全备\" class=\"headerlink\" title=\"再次整理全备\"></a>再次整理全备</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innobackupex --apply-log /tmp/my_bak/full_2020-04-22/</span><br><span class=\"line\">200422 16:42:39 completed OK!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"全备-增量恢复\"><a href=\"#全备-增量恢复\" class=\"headerlink\" title=\"全备+增量恢复\"></a>全备+增量恢复</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">恢复：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># innobackupex --defaults-file=/data/3307/my.cnf --copy-back /tmp/my_bak/full_2020-04-22/</span></span><br><span class=\"line\">                             这个参数必须放第一位</span><br><span class=\"line\">200422 16:47:40 completed OK!</span><br><span class=\"line\">授权：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># chown -R mysql.mysql /data/3307/data/</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># systemctl restart mysqld3307</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -uroot -h 192.168.56.2 -P3307 -p</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"企业备份恢复案例（XBK-full-inc-binlog）\"><a href=\"#企业备份恢复案例（XBK-full-inc-binlog）\" class=\"headerlink\" title=\"企业备份恢复案例（XBK full+inc+binlog）\"></a>企业备份恢复案例（XBK full+inc+binlog）</h3><p><strong>案例背景</strong>： 某中型互联网公司。MySQL 5.7.26 ，Centos 7.6 ，数据量级600G，每日数据增量15-50M<br><strong>备份策略</strong>： 周日XBK全备+周一到周六inc增量+binlog备份，每天23:00进行。<br><strong>故障描述</strong>： 周三下午2点，数据由于某原因数据损坏。<br><strong>处理思路</strong>： </p>\n<ol>\n<li>挂出维护页</li>\n<li>评估一下数据损坏状态</li>\n</ol>\n<ul>\n<li>2.1 全部丢失–&gt;推荐直接生产恢复</li>\n<li>2.2 部分丢失</li>\n</ul>\n<ol start=\"3\">\n<li>整理合并所有备份：full+inc1+inc2 </li>\n<li>截取 周二晚上到周三下午午故障点的binlog日志</li>\n<li>恢复全备，恢复binlog</li>\n<li>检查数据完整性</li>\n<li>恢复业务</li>\n</ol>\n<p><strong>处理结果</strong>：</p>\n<ol>\n<li>经过70-80分钟处理，业务恢复</li>\n<li>评估此次故障的处理的合理性和实用性</li>\n</ol>\n<p><strong>案例模拟</strong>：</p>\n<h4 id=\"模拟周日的全备\"><a href=\"#模拟周日的全备\" class=\"headerlink\" title=\"模拟周日的全备\"></a>模拟周日的全备</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innobackupex --defaults-file=/data/3307/my.cnf --user=root --password=123 --no-timestamp /tmp/my_bak/full //全备</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /tmp/my_bak/full/xtrabackup_checkpoints //检查备份</span><br><span class=\"line\">backup_type = full-backuped</span><br><span class=\"line\">from_lsn = 0</span><br><span class=\"line\">to_lsn = 11713915</span><br><span class=\"line\">last_lsn = 11713924</span><br><span class=\"line\">compact = 0</span><br><span class=\"line\">recover_binlog_info = 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟周一的数据变化\"><a href=\"#模拟周一的数据变化\" class=\"headerlink\" title=\"模拟周一的数据变化\"></a>模拟周一的数据变化</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database hisoss charset utf8mb4;</span><br><span class=\"line\">mysql&gt; use hisoss</span><br><span class=\"line\">mysql&gt; create table his_order(<span class=\"built_in\">id</span> int);</span><br><span class=\"line\">mysql&gt; insert into his_order values(1),(2),(3);</span><br><span class=\"line\">mysql&gt; commit;</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟周一晚上增量备份\"><a href=\"#模拟周一晚上增量备份\" class=\"headerlink\" title=\"模拟周一晚上增量备份\"></a>模拟周一晚上增量备份</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innobackupex --defaults-file=/data/3307/my.cnf --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/tmp/my_bak/full/ /tmp/my_bak/inc1</span><br><span class=\"line\"></span><br><span class=\"line\">检查备份：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /tmp/my_bak/full/xtrabackup_checkpoints </span></span><br><span class=\"line\">backup_type = full-backuped</span><br><span class=\"line\">from_lsn = 0</span><br><span class=\"line\">to_lsn = 11713915</span><br><span class=\"line\">last_lsn = 11713924 //</span><br><span class=\"line\">compact = 0</span><br><span class=\"line\">recover_binlog_info = 0</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /tmp/my_bak/inc1/xtrabackup_checkpoints </span></span><br><span class=\"line\">backup_type = incremental</span><br><span class=\"line\">from_lsn = 11713915 //</span><br><span class=\"line\">to_lsn = 11720266</span><br><span class=\"line\">last_lsn = 11720275</span><br><span class=\"line\">compact = 0</span><br><span class=\"line\">recover_binlog_info = 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟周二的数据变化\"><a href=\"#模拟周二的数据变化\" class=\"headerlink\" title=\"模拟周二的数据变化\"></a>模拟周二的数据变化</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into his_order values(11),(22),(33);</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟周二晚上增量备份\"><a href=\"#模拟周二晚上增量备份\" class=\"headerlink\" title=\"模拟周二晚上增量备份\"></a>模拟周二晚上增量备份</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innobackupex --defaults-file=/data/3307/my.cnf --user=root --password=123 --no-timestamp --incremental --incremental-basedir=/tmp/my_bak/inc1 /tmp/my_bak/inc2</span><br><span class=\"line\"></span><br><span class=\"line\">检查备份：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /tmp/my_bak/full/xtrabackup_checkpoints backup_type = full-backuped</span></span><br><span class=\"line\">from_lsn = 0</span><br><span class=\"line\">to_lsn = 11713915</span><br><span class=\"line\">last_lsn = 11713924 //</span><br><span class=\"line\">compact = 0</span><br><span class=\"line\">recover_binlog_info = 0</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /tmp/my_bak/inc1/xtrabackup_checkpoints backup_type = incremental</span></span><br><span class=\"line\">from_lsn = 11713915  //</span><br><span class=\"line\">to_lsn = 11720266</span><br><span class=\"line\">last_lsn = 11720275  //</span><br><span class=\"line\">compact = 0</span><br><span class=\"line\">recover_binlog_info = 0</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /tmp/my_bak/inc2/xtrabackup_checkpoints </span></span><br><span class=\"line\">backup_type = incremental</span><br><span class=\"line\">from_lsn = 11720266  //</span><br><span class=\"line\">to_lsn = 11722449</span><br><span class=\"line\">last_lsn = 11722458</span><br><span class=\"line\">compact = 0</span><br><span class=\"line\">recover_binlog_info = 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟周三的数据变化\"><a href=\"#模拟周三的数据变化\" class=\"headerlink\" title=\"模拟周三的数据变化\"></a>模拟周三的数据变化</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into his_order values(111),(222),(333);</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"有一个傻子，把数据库data目录给rm掉了\"><a href=\"#有一个傻子，把数据库data目录给rm掉了\" class=\"headerlink\" title=\"有一个傻子，把数据库data目录给rm掉了\"></a>有一个傻子，把数据库data目录给rm掉了</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pkill mysqld</span><br><span class=\"line\">\\<span class=\"built_in\">rm</span> -rf /data/3307/data/*</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"整理-合并-备份\"><a href=\"#整理-合并-备份\" class=\"headerlink\" title=\"整理 合并 备份\"></a>整理 合并 备份</h4><p>（1）整理全备 <code>innobackupex --apply-log --redo-only /tmp/my_bak/full/</code><br>（2）inc1 合并并整理到full <code>innobackupex --apply-log --redo-only --incremental-dir=/tmp/my_bak/inc1 /tmp/my_bak/full/</code><br>（3）inc2 合并并整理到full <code>innobackupex --apply-log --redo-only --incremental-dir=/tmp/my_bak/inc2 /tmp/my_bak/full/</code><br>（4）检查备份是否整理完整</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /tmp/my_bak/full/xtrabackup_checkpoints /tmp/my_bak/inc2/xtrabackup_checkpoints</span><br><span class=\"line\"></span><br><span class=\"line\">last_lsn = 11722458</span><br><span class=\"line\"></span><br><span class=\"line\">last_lsn = 11722458</span><br></pre></td></tr></table></figure>\n<p>（5）整体整理在做一次<code>innobackupex --apply-log /tmp/my_bak/full/</code></p>\n<h4 id=\"恢复备份数据\"><a href=\"#恢复备份数据\" class=\"headerlink\" title=\"恢复备份数据\"></a>恢复备份数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -na /tmp/my_bak/full/* /data/3307/data/  拷贝</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R mysql.mysql /data/3307/data/* 授权</span><br><span class=\"line\">systemctl restart mysqld3307</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"从最后一次增备中查看binlog起点\"><a href=\"#从最后一次增备中查看binlog起点\" class=\"headerlink\" title=\"从最后一次增备中查看binlog起点\"></a>从最后一次增备中查看binlog起点</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /tmp/my_bak/inc2/xtrabackup_binlog_info </span></span><br><span class=\"line\">mysql-bin.000027        1136    bd623560-8476-11ea-ba73-0800273e0795:1-4, //看这个，在数据库中也是这个UUID:GTID</span><br><span class=\"line\">cca7bb3f-687e-11ea-b0d9-0800273e0795:1-19,</span><br><span class=\"line\">dd4ce0c3-8463-11ea-9af9-0800273e0795:1-8</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysql -uroot -h 192.168.56.2 -P3307 -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">mysql&gt; show binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.000027&#x27;</span>;</span><br><span class=\"line\">| mysql-bin.000027 | 1136 | Gtid           |         7 |        1201 | SET @@SESSION.GTID_NEXT= <span class=\"string\">&#x27;bd623560-8476-11ea-ba73-0800273e0795:5&#x27;</span>                  </span><br><span class=\"line\">| mysql-bin.000027 | 1201 | Query          |         7 |        1275 | BEGIN                                                                               </span><br><span class=\"line\">| mysql-bin.000027 | 1275 | Table_map      |         7 |        1329 | table_id: 482 (hisoss.his_order)                                                    </span><br><span class=\"line\">| mysql-bin.000027 | 1329 | Write_rows     |         7 |        1379 | table_id: 482 flags: STMT_END_F                                                     </span><br><span class=\"line\">| mysql-bin.000027 | 1379 | Xid            |         7 |        1410 | COMMIT /* xid=91 */                                                                 </span><br><span class=\"line\">| mysql-bin.000027 | 1410 | Stop           |         7 |        1433 |                                                                                     </span><br><span class=\"line\"></span><br><span class=\"line\">//分析：通过检查最后一次增备中记录的binlog日志文件（000027）信息，和最后一个GTID号为4。所以我们只需要截取 GTID=4 往后的日志内容。这里只有一个事务 GTID=5. </span><br><span class=\"line\"></span><br><span class=\"line\">截取日志：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># mysqlbinlog --skip-gtids --include-gtids=&#x27;bd623560-8476-11ea-ba73-0800273e0795:5&#x27; /data/3307/mysql-bin.000027 &gt; /tmp/my_bak/bin.sql</span></span><br><span class=\"line\"></span><br><span class=\"line\">恢复：</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> sql_log_bin=0;</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /tmp/my_bak/bin.sql</span><br><span class=\"line\"></span><br><span class=\"line\">检查：</span><br><span class=\"line\">mysql&gt; use hisoss;</span><br><span class=\"line\">Reading table information <span class=\"keyword\">for</span> completion of table and column names</span><br><span class=\"line\">You can turn off this feature to get a quicker startup with -A</span><br><span class=\"line\"></span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| Tables_in_hisoss |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">| his_order        |</span><br><span class=\"line\">+------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from his_order;</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| <span class=\"built_in\">id</span>   |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">|    1 |</span><br><span class=\"line\">|    2 |</span><br><span class=\"line\">|    3 |//周一</span><br><span class=\"line\">|   11 |</span><br><span class=\"line\">|   22 |</span><br><span class=\"line\">|   33 |//周二</span><br><span class=\"line\">|  111 |</span><br><span class=\"line\">|  222 |</span><br><span class=\"line\">|  333 |//周三</span><br><span class=\"line\">+------+</span><br><span class=\"line\">9 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h4 id=\"部分数据丢失处理方法\"><a href=\"#部分数据丢失处理方法\" class=\"headerlink\" title=\"部分数据丢失处理方法\"></a>部分数据丢失处理方法</h4><p>假如，只是少量数据被损坏，以上方法有哪些不妥的地方？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">处理方法：</span><br><span class=\"line\">    找到表结构，建表语句。</span><br><span class=\"line\">    从备份中提取指定表的ibd文件</span><br><span class=\"line\">进行表空间迁移</span><br><span class=\"line\">alter table t1  discard tablespace</span><br><span class=\"line\">alter table t1  import  tablespace</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innobackupex --user=root --password=123 --defaults-file=/etc/my.cnf --no-timestamp --stream=tar --use-memory=256M  --parallel=8 /data/mysql_backup | gzip | ssh root@10.0.0.52 <span class=\"string\">&quot; cat - &gt; /data/mysql_backup.tar.gz&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> --stream=tar //启用流的压缩方式进行备份</span><br><span class=\"line\"> --use-memory=256M  //指定划分部分内存大小</span><br><span class=\"line\"> --parallel=8  //开启并发备份</span><br><span class=\"line\"> --ssh root@10.0.0.52 <span class=\"string\">&quot; cat - &gt; /data/mysql_backup.tar.gz&quot;</span>  //将本地备份好的备份，推送到远程服务器上</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySQL数据迁移\"><a href=\"#MySQL数据迁移\" class=\"headerlink\" title=\"MySQL数据迁移\"></a>MySQL数据迁移</h2><h3 id=\"技术方面\"><a href=\"#技术方面\" class=\"headerlink\" title=\"技术方面\"></a>技术方面</h3><ul>\n<li>工具选择，MDP/XBK<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3></li>\n<li>停机时间</li>\n<li>回退方案</li>\n</ul>\n<h3 id=\"更换服务器\"><a href=\"#更换服务器\" class=\"headerlink\" title=\"更换服务器\"></a>更换服务器</h3><h4 id=\"数据量小\"><a href=\"#数据量小\" class=\"headerlink\" title=\"数据量小\"></a>数据量小</h4><p>思路：</p>\n<ol>\n<li>在线进行 MDP，XBK备份处理，scp到目标进行恢复</li>\n<li>追加所有备份后的binlog日志</li>\n<li>申请停机</li>\n<li>剩余部分的binlog继续恢复（搭建主从的方式替代）</li>\n<li>校验数据，进行业务各界割接</li>\n</ol>\n<h4 id=\"数据量大\"><a href=\"#数据量大\" class=\"headerlink\" title=\"数据量大\"></a>数据量大</h4><ol>\n<li>XBK备份处理，scp到目标进行恢复</li>\n<li>搭建主从的方式</li>\n<li>申请停机15分钟</li>\n<li>校验数据，进行业务各界割接</li>\n</ol>\n<h3 id=\"换版本升级（如5-6–-gt-5-7）\"><a href=\"#换版本升级（如5-6–-gt-5-7）\" class=\"headerlink\" title=\"换版本升级（如5.6–&gt;5.7）\"></a>换版本升级（如5.6–&gt;5.7）</h3><ol>\n<li>安装新版本 </li>\n<li>替换旧的环境变量</li>\n<li>mysqld_safe //启动到维护模式拉起数据</li>\n<li>mysql_upgrade //重建数据字典<br>或：</li>\n<li>建议使用mysqldump逻辑备份方式，按业务库为单位进行备份（排除：information_schema,performance_schema,sys）。</li>\n<li>mysql_upgrade //重建数据字典</li>\n<li>追加日志<br>或：<br>不同版本进行主从复制，进行过滤复制，（排除：information_schema,performance_schema,sys）</li>\n</ol>\n<h3 id=\"异构迁移（win-gt-linux）\"><a href=\"#异构迁移（win-gt-linux）\" class=\"headerlink\" title=\"异构迁移（win-&gt;linux）\"></a>异构迁移（win-&gt;linux）</h3><p>只能用逻辑备份！</p>\n<h3 id=\"异构迁移（数据库产品不同）\"><a href=\"#异构迁移（数据库产品不同）\" class=\"headerlink\" title=\"异构迁移（数据库产品不同）\"></a>异构迁移（数据库产品不同）</h3><p>Oracle –OGG–&gt; MySQL<br>MySQL–到处为CSV格式–&gt;MongoDB<br>MySQL–JSON–&gt;MongoDB</p>\n","categories":["DBA"],"tags":["MySQL","日志管理","数据备份"]},{"title":"MySQL终章-系列优化","url":"/forward/14a32ee2.html","content":"<h2 id=\"环境准备：\"><a href=\"#环境准备：\" class=\"headerlink\" title=\"环境准备：\"></a>环境准备：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">准备100w行数据包，留作压力测试。</span><br><span class=\"line\">db03 [(none)]&gt;create database oldboy;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [(none)]&gt;use oldboy;</span><br><span class=\"line\">Database changed</span><br><span class=\"line\">db03 [oldboy]&gt;create table t100w (</span><br><span class=\"line\">    -&gt; <span class=\"built_in\">id</span> int,num int,</span><br><span class=\"line\">    -&gt; k1 char(2),</span><br><span class=\"line\">    -&gt; k2 char(4),</span><br><span class=\"line\">    -&gt; dt timestamp) charset utf8mb4 collate utf8mb4_bin;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [oldboy]&gt;delimiter //</span><br><span class=\"line\">db03 [oldboy]&gt;create  procedure rand_data(<span class=\"keyword\">in</span> num int)</span><br><span class=\"line\">    -&gt; begin</span><br><span class=\"line\">    -&gt; <span class=\"built_in\">declare</span> str char(62) default <span class=\"string\">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class=\"line\">    -&gt; <span class=\"built_in\">declare</span> str2 char(2);</span><br><span class=\"line\">    -&gt; <span class=\"built_in\">declare</span> str4 char(4);</span><br><span class=\"line\">    -&gt; <span class=\"built_in\">declare</span> i int default 0;</span><br><span class=\"line\">    -&gt; <span class=\"keyword\">while</span> i&lt;num <span class=\"keyword\">do</span></span><br><span class=\"line\">    -&gt; <span class=\"built_in\">set</span> str2=concat(substring(str,1+floor(rand()*61),1),substring(str,1+floor(rand()*61),1));</span><br><span class=\"line\">    -&gt; <span class=\"built_in\">set</span> str4=concat(substring(str,1+floor(rand()*61),2),substring(str,1+floor(rand()*61),2));</span><br><span class=\"line\">    -&gt; <span class=\"built_in\">set</span> i=i+1;</span><br><span class=\"line\">    -&gt; insert into t100w values (i,floor(rand()*num),str2,str4,now());</span><br><span class=\"line\">    -&gt; end <span class=\"keyword\">while</span>;</span><br><span class=\"line\">    -&gt; end;</span><br><span class=\"line\">    -&gt; //</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [oldboy]&gt;delimiter ;</span><br><span class=\"line\">db03 [oldboy]&gt;call rand_data(1000000);</span><br><span class=\"line\">Query OK, 1 row affected (26.40 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">测试：</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># mysqlslap --defaults-file=/etc/my.cnf --socket /tmp/mysql.sock \\</span></span><br><span class=\"line\">&gt; --concurrency=100 --iterations=1 --create-schema=<span class=\"string\">&#x27;oldboy&#x27;</span> \\</span><br><span class=\"line\">&gt; --query=<span class=\"string\">&quot;select * from oldboy.t100w where k2=&#x27;GHvw&#x27;&quot;</span> engine=innodb \\</span><br><span class=\"line\">&gt; --number-of-queries=2000 -verbose</span><br><span class=\"line\">Benchmark</span><br><span class=\"line\">        Running <span class=\"keyword\">for</span> engine rbose</span><br><span class=\"line\">        Average number of seconds to run all queries: 191.950 seconds</span><br><span class=\"line\">        Minimum number of seconds to run all queries: 191.950 seconds</span><br><span class=\"line\">        Maximum number of seconds to run all queries: 191.950 seconds</span><br><span class=\"line\">        Number of clients running queries: 100</span><br><span class=\"line\">        Average number of queries per client: 20</span><br><span class=\"line\">//191秒</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># mysqlslap --defaults-file=/etc/my.cnf --socket /tmp/mysql.sock --concurrency=1000 --iterations=1 --create-schema=&#x27;oldboy&#x27; --query=&quot;select * from oldboy.t100w where k2=&#x27;GHvw&#x27;&quot; engine=innodb --number-of-queries=20000 -verbose</span></span><br><span class=\"line\">mysqlslap: Error when connecting to server: 2000 Unknown MySQL error</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//并发连接数改为1000，报错</span><br><span class=\"line\">top:</span><br><span class=\"line\">Tasks: 117 total,   1 running, 116 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu0  : 99.7 us,  0.0 sy,  0.0 ni,  0.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.3 si,  0.0 st</span><br><span class=\"line\">%Cpu1  :100.0 us,  0.0 sy,  0.0 ni,  0.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu2  :100.0 us,  0.0 sy,  0.0 ni,  0.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu3  : 99.7 us,  0.3 sy,  0.0 ni,  0.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化范围：\"><a href=\"#优化范围：\" class=\"headerlink\" title=\"优化范围：\"></a>优化范围：</h2><ul>\n<li>存储、主机和操作系统:<ul>\n<li>主机架构稳定性</li>\n<li>I/O规划及配置</li>\n<li>Swap</li>\n<li>OS内核参数</li>\n<li>网络问题</li>\n</ul>\n</li>\n<li>应用程序:（Index，lock，session）<ul>\n<li>应用程序稳定性和性能</li>\n<li>SQL语句性能</li>\n<li>串行访问资源</li>\n<li>性能欠佳会话管理</li>\n</ul>\n</li>\n<li>数据库优化:（内存、数据库设计、参数）<ul>\n<li>内存</li>\n<li>数据库结构(物理&amp;逻辑)</li>\n<li>实例配置</li>\n</ul>\n</li>\n<li>架构设计 :  <ul>\n<li>性能  : 读写分离,分布式</li>\n<li>安全  : 主备,多活</li>\n<li>安全&amp;性能 : 分布式,NewSQL</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/img-98.png\" alt=\"优化\"></p>\n<h2 id=\"操作系统层面优化工具介绍\"><a href=\"#操作系统层面优化工具介绍\" class=\"headerlink\" title=\"操作系统层面优化工具介绍\"></a>操作系统层面优化工具介绍</h2><h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CPU：</span><br><span class=\"line\">%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">KiB Mem :  3880016 total,  3699388 free,   102612 used,    78016 buff/cache</span><br><span class=\"line\">KiB Swap:  2097148 total,  2097148 free,        0 used.  3615864 avail Mem</span><br><span class=\"line\"></span><br><span class=\"line\">按1键展开</span><br><span class=\"line\">%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu2  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu3  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\"><span class=\"built_in\">id</span> 空闲的CPU时间片占比</span><br><span class=\"line\"></span><br><span class=\"line\">wa CPU用来等待的时间片占比</span><br><span class=\"line\">    等待IO：全表扫描 </span><br><span class=\"line\">    等待大的处理事件</span><br><span class=\"line\">    锁</span><br><span class=\"line\"></span><br><span class=\"line\">us 用户程序工作所占有的时间片占比</span><br><span class=\"line\"></span><br><span class=\"line\">sy 内核工作花费的CPU时间片占比</span><br><span class=\"line\">    bug，中病毒 </span><br><span class=\"line\">    各种资源的调度和分配</span><br><span class=\"line\">    高并发连接</span><br><span class=\"line\">    锁</span><br><span class=\"line\"></span><br><span class=\"line\">%CPU 如果出现%过高的情况，属于正常现象。多核利用率的总和</span><br><span class=\"line\"></span><br><span class=\"line\">内存：</span><br><span class=\"line\">KiB Mem :  3880016 total,  3479320 free,   281328 used,   119368 buff/cache</span><br><span class=\"line\">KiB Swap:  2097148 total,  2097148 free,        0 used.  3416472 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">3416472 avail Mem //操作系统层面可用容量</span><br><span class=\"line\"></span><br><span class=\"line\">swap：</span><br><span class=\"line\">Linux 6操作系统，默认回收策略（buffer cache），不立即回收策略</span><br><span class=\"line\">内存使用达到100%-60%时候，40% 会使用swap</span><br><span class=\"line\"></span><br><span class=\"line\">Linux 7操作系统</span><br><span class=\"line\">内存使用达到100%-30%（70%）时候，才会时候swap</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/sys/vm/swappiness </span><br><span class=\"line\">30  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> 0 &gt;/proc/sys/vm/swappiness    的内容改成0（临时）</span><br><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\">添加:</span><br><span class=\"line\">vm.swappiness=0 //此参数告诉系统，在内存不够用时。使用内存回收机制解决，而不是倾向于使用swap</span><br><span class=\"line\">sysctl -p </span><br></pre></td></tr></table></figure>\n<h3 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y sysstat</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># df -Th</span></span><br><span class=\"line\">文件系统                类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">/dev/sdb1               xfs       5.0G  166M  4.9G    4% /data</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># iostat -dk 1 //每秒实时读写性能 kb为单位</span></span><br><span class=\"line\">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class=\"line\">sdb               0.00         0.00         0.00          0          0</span><br><span class=\"line\">sda               0.00         0.00         0.00          0          0</span><br><span class=\"line\">dm-0              0.00         0.00         0.00          0          0</span><br><span class=\"line\"></span><br><span class=\"line\">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class=\"line\">sdb               0.00         0.00         0.00          0          0</span><br><span class=\"line\">sda               0.00         0.00         0.00          0          0</span><br><span class=\"line\">dm-0              0.00         0.00         0.00          0          0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># dd if=/dev/zero of=/data/bigfile bs=1M count=2048 //持续写入判断当前硬盘io吞吐量</span></span><br><span class=\"line\">记录了2048+0 的读入</span><br><span class=\"line\">记录了2048+0 的写出</span><br><span class=\"line\">2147483648字节(2.1 GB)已复制，4.08114 秒，526 MB/秒</span><br></pre></td></tr></table></figure>\n<h3 id=\"综合判断\"><a href=\"#综合判断\" class=\"headerlink\" title=\"综合判断\"></a>综合判断</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">一般情况下，CPU高，IO也应该高。</span><br><span class=\"line\">如果：CPU 高   ，IO 比较低</span><br><span class=\"line\"><span class=\"built_in\">wait</span> 高：  有可以能IO出问题了（Raid损坏,过度条带化）</span><br><span class=\"line\">SyS  高：  有可能是锁的问题，需要进一步去数据库中判断</span><br></pre></td></tr></table></figure>\n<h3 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db03 ~]<span class=\"comment\"># vmstat 1 //综合探测，内存，swap，io，system，cpu实时指标</span></span><br><span class=\"line\">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class=\"line\"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class=\"keyword\">in</span>   cs us sy <span class=\"built_in\">id</span> wa st</span><br><span class=\"line\"> 1  0      0 1302256   5208 2284188    0    0     5    88   16   29  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 1302208   5208 2284188    0    0     0     4   56   67  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 1302264   5208 2284188    0    0     0     0   31   56  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 1302264   5208 2284188    0    0     0     0   32   66  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 1302264   5208 2284188    0    0     0     0   25   53  0  0 100  0  0</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据库优化工具介绍\"><a href=\"#数据库优化工具介绍\" class=\"headerlink\" title=\"数据库优化工具介绍\"></a>数据库优化工具介绍</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    show status  </span><br><span class=\"line\">    show variables </span><br><span class=\"line\">    show index  </span><br><span class=\"line\">    show processlist </span><br><span class=\"line\">    show slave status</span><br><span class=\"line\">    show engine innodb status </span><br><span class=\"line\">    desc /explain </span><br><span class=\"line\">    slowlog</span><br><span class=\"line\">扩展类深度优化:</span><br><span class=\"line\">    pt系列（pt-query-digest pt-osc pt-index 等）</span><br><span class=\"line\">    mysqlslap </span><br><span class=\"line\">    sysbench </span><br><span class=\"line\">    information_schema （I_S）</span><br><span class=\"line\">    performance_schema (P_S)</span><br><span class=\"line\">    sys </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化思路分解\"><a href=\"#优化思路分解\" class=\"headerlink\" title=\"优化思路分解\"></a>优化思路分解</h2><h3 id=\"硬件优化\"><a href=\"#硬件优化\" class=\"headerlink\" title=\"硬件优化\"></a>硬件优化</h3><h4 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h4><ul>\n<li><strong>真实的硬件（PC Server）</strong>：<ul>\n<li>DELL  R系列 </li>\n<li>华为</li>\n<li>浪潮</li>\n<li>HP</li>\n<li>联想</li>\n</ul>\n</li>\n<li><strong>云产品</strong>：<ul>\n<li>ECS</li>\n<li>数据库RDS</li>\n<li>DRDS</li>\n<li>polarDB</li>\n</ul>\n</li>\n</ul>\n<p><strong>IBM 小型机</strong> P6  570  595   P7 720  750 780     P8 </p>\n<ul>\n<li><strong>CPU根据数据库类型</strong><ul>\n<li>OLTP  //在线事务处理</li>\n<li>OLAP  //查询类很多，仓库类</li>\n</ul>\n</li>\n</ul>\n<p><strong>业务类型：</strong><br><strong>IO密集型</strong>：线上系统，OLTP主要是IO密集型的业务，高并发<br><strong>CPU密集型</strong>：数据分析数据处理，OLAP，cpu密集型的，需要CPU高计算能力（i系列，IBM power系列）</p>\n<p><strong>根据业务选型：</strong><br><strong>CPU密集型</strong>： I 系列的，主频很高，核心少<br><strong>IO密集型</strong>：  E系列（至强），主频相对低，核心数量多</p>\n<h4 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h4><p>建议2-3倍cpu核心数量 （ECC版）</p>\n<h4 id=\"磁盘选择\"><a href=\"#磁盘选择\" class=\"headerlink\" title=\"磁盘选择\"></a>磁盘选择</h4><ul>\n<li>SATA-III&lt;SAS&lt;Fc(光纤盘)&lt;SSD（sata）&lt;pci-e ssd&lt;Flash</li>\n<li>主机 RAID卡的BBU主机备用电池单元(Battery Backup Unit)关闭</li>\n</ul>\n<h4 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h4><p>根据存储数据种类的不同，选择不同的存储设备<br>配置合理的RAID级别(raid5、raid10、热备盘)   </p>\n<ul>\n<li>r0 :条带化 ,性能高</li>\n<li>r1 :镜像，安全</li>\n<li>r5 :校验+条带化，安全较高+性能较高（读），写性能较低 （适合于读多写少）</li>\n<li>r10：安全+性能都很高，最少四块盘，浪费一半的空间（高IO要求）</li>\n</ul>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><ul>\n<li>1、硬件买好的（单卡单口）</li>\n<li>2、网卡绑定（bonding），交换机堆叠</li>\n</ul>\n<p>以上问题，提前规避掉。</p>\n<h2 id=\"操作系统优化\"><a href=\"#操作系统优化\" class=\"headerlink\" title=\"操作系统优化\"></a>操作系统优化</h2><h3 id=\"Swap调整\"><a href=\"#Swap调整\" class=\"headerlink\" title=\"Swap调整\"></a>Swap调整</h3><p><code>echo 0 &gt;/proc/sys/vm/swappiness</code>的内容改成0（临时），<br><code>vim /etc/sysctl.conf</code><br>上添加<code>vm.swappiness=0</code>（永久）<br><code>sysctl -p</code><br>这个参数决定了Linux是倾向于使用swap，还是倾向于释放文件系统cache。在内存紧张的情况下，数值越低越倾向于释放文件系统cache。<br>当然，这个参数只能减少使用swap的概率，并不能避免Linux使用swap。</p>\n<p>修改MySQL的配置参数<code>innodb_flush_method，开启O_DIRECT</code>模式<br>这种情况下，InnoDB的<code>buffer pool</code>会直接绕过文件系统cache来访问磁盘，但是<code>redo log</code>依旧会使用文件系统cache。值得注意的是，Redo log是覆写模式的，即使使用了文件系统的cache，也不会占用太多</p>\n<p>IO调度策略<br>centos 7 默认是deadline<br><code>cat   /sys/block/sda/queue/scheduler</code></p>\n<p>#临时修改为deadline(centos6)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> deadline &gt;/sys/block/sda/queue/scheduler </span><br><span class=\"line\">vi /boot/grub/grub.conf</span><br></pre></td></tr></table></figure>\n<p>更改到如下内容:<br><code>kernel /boot/vmlinuz-2.6.18-8.el5 ro root=LABEL=/ elevator=deadline rhgb quiet</code></p>\n<p>IO ：</p>\n<ul>\n<li>raid</li>\n<li>no lvm<code>安全性</code></li>\n<li>ext4或xfs<code>并发高</code></li>\n<li>ssd</li>\n<li>IO调度策略<br>提前规划好以上所有问题，减轻MySQL优化的难度。</li>\n</ul>\n<h2 id=\"应用端\"><a href=\"#应用端\" class=\"headerlink\" title=\"应用端\"></a>应用端</h2><ol>\n<li>开发过程规范,标准。做好审核。</li>\n<li>减少烂SQL:不走索引,复杂逻辑,切割大事务.</li>\n<li>避免业务逻辑错误,避免锁争用.<br>这个阶段,需要我们DBA深入业务,或者要和开发人员\\业务人员配合实现</li>\n</ol>\n<h2 id=\"参数优化\"><a href=\"#参数优化\" class=\"headerlink\" title=\"参数优化\"></a>参数优化</h2><h3 id=\"max-connections-最大连接数\"><a href=\"#max-connections-最大连接数\" class=\"headerlink\" title=\"max_connections 最大连接数\"></a>max_connections 最大连接数</h3><p>（1）简介<br>Mysql的最大连接数，如果服务器的并发请求量比较大，可以调高这个值，当然这是要建立在机器能够支撑的情况下，因为如果连接数越来越多，mysql会为每个连接提供缓冲区，就会开销的越多的内存，所以需要适当的调整该值，不能随便去提高设值。<br>（2）判断依据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">show variables like <span class=\"string\">&#x27;max_connections&#x27;</span>; //最大连接数</span><br><span class=\"line\">    +-----------------+-------+</span><br><span class=\"line\">    | Variable_name   | Value |</span><br><span class=\"line\">    +-----------------+-------+</span><br><span class=\"line\">    | max_connections | 151   |</span><br><span class=\"line\">    +-----------------+-------+</span><br><span class=\"line\">show status like <span class=\"string\">&#x27;Max_used_connections&#x27;</span>; //最大使用过的连接数</span><br><span class=\"line\">    +----------------------+-------+</span><br><span class=\"line\">    | Variable_name        | Value |</span><br><span class=\"line\">    +----------------------+-------+</span><br><span class=\"line\">    | Max_used_connections | 152   |</span><br><span class=\"line\">    +----------------------+-------+</span><br></pre></td></tr></table></figure>\n<p>（3）修改方式举例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf </span><br><span class=\"line\">max_connections=1024</span><br></pre></td></tr></table></figure>\n<p>补充:</p>\n<ul>\n<li>1.开启数据库时,我们可以临时设置一个比较大的测试值</li>\n<li>2.观察show status like ‘Max_used_connections’;变化</li>\n<li>3.如果max_used_connections跟max_connections相同,<br>  那么就是max_connections设置过低或者超过服务器的负载上限了，CPU低于10%则设置过大. </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">再次运行压力测试：</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># mysqlslap --defaults-file=/etc/my.cnf --socket /tmp/mysql.sock --concurrency=1000 --iterations=1 --create-schema=&#x27;oldboy&#x27; --query=&quot;select * from oldboy.t100w where k2=&#x27;GHvw&#x27;&quot; engine=innodb --number-of-queries=20000 -verbose</span></span><br><span class=\"line\">    </span><br><span class=\"line\">%Cpu0  : 99.3 us,  0.7 sy,  0.0 ni,  0.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu1  : 99.3 us,  0.7 sy,  0.0 ni,  0.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu2  : 99.3 us,  0.7 sy,  0.0 ni,  0.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">%Cpu3  : 99.7 us,  0.3 sy,  0.0 ni,  0.0 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">KiB Mem :  3880016 total,   510428 free,   743280 used,  2626308 buff/cache</span><br><span class=\"line\">KiB Swap:  2097148 total,  2097148 free,        0 used.  2881592 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                         </span><br><span class=\"line\"> 6129 mysql     20   0 2898540 436412  11212 S 399.3 11.2   6:27.35 mysqld  </span><br><span class=\"line\">//CPU压力过高，说明最大连接数还是得调低。</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [(none)]&gt;show variables like <span class=\"string\">&#x27;max_connections&#x27;</span>;</span><br><span class=\"line\">+-----------------+-------+</span><br><span class=\"line\">| Variable_name   | Value |</span><br><span class=\"line\">+-----------------+-------+</span><br><span class=\"line\">| max_connections | 1024  |</span><br><span class=\"line\">+-----------------+-------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">db03 [(none)]&gt;show status like <span class=\"string\">&#x27;Max_used_connections&#x27;</span>;</span><br><span class=\"line\">+----------------------+-------+</span><br><span class=\"line\">| Variable_name        | Value |</span><br><span class=\"line\">+----------------------+-------+</span><br><span class=\"line\">| Max_used_connections | 1002  |</span><br><span class=\"line\">+----------------------+-------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"back-log-预备连接数\"><a href=\"#back-log-预备连接数\" class=\"headerlink\" title=\"back_log 预备连接数\"></a>back_log 预备连接数</h3><p>（1）简介<br>mysql能暂存的连接数量，当主要mysql线程在一个很短时间内得到非常多的连接请求时候它就会起作用，如果mysql的连接数据达到max_connections时候，新来的请求将会被存在堆栈中，等待某一连接释放资源，该推栈的数量及back_log,如果等待连接的数量超过back_log，将不被授予连接资源。<br>back_log值指出在mysql暂时停止回答新请求之前的短时间内有多少个请求可以被存在推栈中，只有如果期望在一个短时间内有很多连接的时候需要增加它<br>（2）判断依据<br><code>show full processlist</code><br>发现大量的待连接进程时，就需要加大back_log或者加大<code>max_connections</code>的值<br>（3）修改方式举例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf </span><br><span class=\"line\">back_log=1024 //额外的1024个进程等待资源释放后立即工作。减少报错</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"wait-timeout和interactive-timeout-会话超时\"><a href=\"#wait-timeout和interactive-timeout-会话超时\" class=\"headerlink\" title=\"wait_timeout和interactive_timeout  会话超时\"></a>wait_timeout和interactive_timeout  会话超时</h3><p>（1）简介<br><code>wait_timeout：</code>指的是mysql在关闭一个非交互的连接之前所要等待的秒数<br><code>interactive_timeout：</code>指的是mysql在关闭一个交互的连接之前所需要等待的秒数，比如我们在终端上进行mysql管理，使用的即使交互的连接，这时候，如果没有操作的时间超过了interactive_time设置的时间就会自动的断开，默认的是28800，可调优为7200。<br>wait_timeout:如果设置太小，那么连接关闭的就很快，从而使一些持久的连接不起作用<br>（2）设置建议<br>如果设置太大，容易造成连接打开时间过长，在show processlist时候，能看到很多的连接 ，一般希望wait_timeout尽可能低<br>（3）修改方式举例<br><code>wait_timeout=60</code> //空闲60s自动断开√<br><code>interactive_timeout=1200</code> //1200s自动断开<br>长连接的应用，为了不去反复的回收和分配资源，降低额外的开销</p>\n<p>注意：一般我们会将<code>wait_timeout</code>设定比较小，<code>interactive_timeout</code>要和应用开发人员沟通长链接的应用是否很多。如果他需要长链接，那么这个值可以不需要调整。<br>另外还可以使用类外的参数弥补。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db03 [(none)]&gt;show variables like <span class=\"string\">&#x27;%timeout%&#x27;</span></span><br><span class=\"line\">    -&gt; ;</span><br><span class=\"line\">+-----------------------------+----------+</span><br><span class=\"line\">| Variable_name               | Value    |</span><br><span class=\"line\">+-----------------------------+----------+</span><br><span class=\"line\">| connect_timeout             | 10       |</span><br><span class=\"line\">| delayed_insert_timeout      | 300      |</span><br><span class=\"line\">| have_statement_timeout      | YES      |</span><br><span class=\"line\">| innodb_flush_log_at_timeout | 1        |</span><br><span class=\"line\">| innodb_lock_wait_timeout    | 50       |</span><br><span class=\"line\">| innodb_rollback_on_timeout  | OFF      |</span><br><span class=\"line\">| interactive_timeout         | 28800    | //会话超时每8小时</span><br><span class=\"line\">| lock_wait_timeout           | 31536000 |</span><br><span class=\"line\">| net_read_timeout            | 30       |</span><br><span class=\"line\">| net_write_timeout           | 60       |</span><br><span class=\"line\">| rpl_stop_slave_timeout      | 31536000 |</span><br><span class=\"line\">| slave_net_timeout           | 60       |</span><br><span class=\"line\">| wait_timeout                | 28800    | //默认8小时</span><br><span class=\"line\">+-----------------------------+----------+</span><br><span class=\"line\">13 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"key-buffer-size-临时表相关\"><a href=\"#key-buffer-size-临时表相关\" class=\"headerlink\" title=\"key_buffer_size 临时表相关\"></a>key_buffer_size 临时表相关</h3><p>（1）简介<br>key_buffer_size指定索引缓冲区的大小，它决定索引处理的速度，尤其是索引读的速度<br>《1》此参数与myisam表的索引有关(几乎不用)<br>《2》临时表的创建有关（多表链接、子查询中、union）<br>     在有以上查询语句出现的时候，需要创建临时表，用完之后会被丢弃<br>     临时表有两种创建方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">内存中-------&gt;key_buffer_size</span><br><span class=\"line\">磁盘上-------&gt;ibdata1(5.6)</span><br><span class=\"line\">              ibtmp1 (5.7）</span><br></pre></td></tr></table></figure>\n<p>（2）设置依据<br>通过key_read_requests和key_reads可以直到key_baffer_size设置是否合理。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like <span class=\"string\">&quot;key_buffer_size%&quot;</span>;</span><br><span class=\"line\">+-----------------+---------+</span><br><span class=\"line\">| Variable_name   | Value   |</span><br><span class=\"line\">+-----------------+---------+</span><br><span class=\"line\">| key_buffer_size | 8388608 |//默认为8M</span><br><span class=\"line\">+-----------------+---------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show status like <span class=\"string\">&quot;key_read%&quot;</span>;</span><br><span class=\"line\">+-------------------+-------+</span><br><span class=\"line\">| Variable_name     | Value |</span><br><span class=\"line\">+-------------------+-------+</span><br><span class=\"line\">| Key_read_requests | 10    |</span><br><span class=\"line\">| Key_reads         | 2     |</span><br><span class=\"line\">+-------------------+-------+</span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>一共有10个索引读取请求，有2个请求在内存中没有找到直接从硬盘中读取索引<br>控制在 5%以内 。<br>注：key_buffer_size只对myisam表起作用，即使不使用myisam表，但是内部的临时磁盘表是myisam表，也要使用该值。<br>可以使用检查状态值created_tmp_disk_tables得知：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show status like <span class=\"string\">&quot;created_tmp%&quot;</span>;   //创建临时表的状态信息</span><br><span class=\"line\">+-------------------------+-------+</span><br><span class=\"line\">| Variable_name           | Value |</span><br><span class=\"line\">+-------------------------+-------+</span><br><span class=\"line\">| Created_tmp_disk_tables | 0     | //在磁盘上生成的文件个数</span><br><span class=\"line\">| Created_tmp_files       | 6     | //临时表的个数</span><br><span class=\"line\">| Created_tmp_tables      | 1     | //在内存中生成的个数</span><br><span class=\"line\">+-------------------------+-------+</span><br><span class=\"line\">3 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\">mysql&gt; </span><br></pre></td></tr></table></figure>\n<p>通常地，我们习惯以<br>Created_tmp_tables/(Created_tmp_disk_tables + Created_tmp_tables)   越高越好<br>内存中生成的/(磁盘中生成+内存中生成的)<br>Created_tmp_disk_tables/(Created_tmp_disk_tables + Created_tmp_tables) </p>\n<p>或者已各自的一个时段内的差额计算，来判断基于内存的临时表利用率。所以，我们会比较关注 Created_tmp_disk_tables 是否过多，从而认定当前服务器运行状况的优劣。<br>Created_tmp_disk_tables/(Created_tmp_disk_tables + Created_tmp_tables)<br>控制在5%-10%以内</p>\n<p>看以下例子：<br>在调用mysqldump备份数据时，大概执行步骤如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">180322 17:39:33       7 Connect     root@localhost on</span><br><span class=\"line\">7 Query       /*!40100 SET @@SQL_MODE=<span class=\"string\">&#x27;&#x27;</span> */</span><br><span class=\"line\">7 Init DB     guo</span><br><span class=\"line\">7 Query       SHOW TABLES LIKE <span class=\"string\">&#x27;guo&#x27;</span></span><br><span class=\"line\">7 Query       LOCK TABLES `guo` READ /*!32311 LOCAL */</span><br><span class=\"line\">7 Query       SET OPTION SQL_QUOTE_SHOW_CREATE=1</span><br><span class=\"line\">7 Query       show create table `guo`</span><br><span class=\"line\">7 Query       show fields from `guo`</span><br><span class=\"line\">7 Query       show table status like <span class=\"string\">&#x27;guo&#x27;</span></span><br><span class=\"line\">7 Query       SELECT /*!40001 SQL_NO_CACHE */ * FROM `guo`</span><br><span class=\"line\">7 Query       UNLOCK TABLES</span><br><span class=\"line\">7 Quit</span><br></pre></td></tr></table></figure>\n<p>其中，有一步是：show fields from <code>guo</code>。从slow query记录的执行计划中，可以知道它也产生了 Tmp_table_on_disk。</p>\n<p>所以说，以上公式并不能真正反映到mysql里临时表的利用率，有些情况下产生的 Tmp_table_on_disk 我们完全不用担心，因此没必要过分关注 Created_tmp_disk_tables，但如果它的值大的离谱的话，那就好好查一下，你的服务器到底都在执行什么查询了。 zabbix在监控时，应避开备份时段。否则在备份时临时表在硬盘中生成的比例会大大增加。<br>（3）配置方法<br>key_buffer_size=64M</p>\n<hr>\n<h3 id=\"query-cache-size-查询缓存\"><a href=\"#query-cache-size-查询缓存\" class=\"headerlink\" title=\"query_cache_size 查询缓存\"></a>query_cache_size 查询缓存</h3><p>（1）简介：<br>查询缓存简称QC，使用查询缓冲，mysql将查询结果存放在缓冲区中，今后对于同样的select语句（区分大小写）,将直接从缓冲区中读取结果。</p>\n<p>SQL层：<br>select * from t1 where name=:NAME;<br>select * from t1 where name=:NAME;</p>\n<p>1、查询完结果之后，会对SQL语句进行hash运算，得出hash值,我们把他称之为SQL_ID<br>2、会将存储引擎返回的结果+SQL_ID存储到缓存中。</p>\n<p>存储方式：<br>例子：select * from t1  where id=10;      100次</p>\n<p>1、将select * from t1  where id=10; 进行hash运算计算出一串hash值，我们把它称之为“SQL_ID”<br>2、将存储引擎返回上来的表的内容+SQLID存储到查询缓存中</p>\n<p>使用方式：<br>1、一条SQL执行时，进行hash运算，得出SQLID，去找query cache<br>2、如果cache中有，则直接返回数据行，如果没有，就走原有的SQL执行流程</p>\n<p>一个sql查询如果以select开头，那么mysql服务器将尝试对其使用查询缓存。<br>注：两个sql语句，只要想差哪怕是一个字符（列如大小写不一样；多一个空格等）,那么这两个sql将使用不同的一个cache。</p>\n<p>（2）判断依据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show status like <span class=\"string\">&quot;%Qcache%&quot;</span>;</span><br><span class=\"line\">+-------------------------+---------+</span><br><span class=\"line\">| Variable_name           | Value   |</span><br><span class=\"line\">+-------------------------+---------+</span><br><span class=\"line\">| Qcache_free_blocks      | 1       |</span><br><span class=\"line\">| Qcache_free_memory      | 1031360 |</span><br><span class=\"line\">| Qcache_hits             | 0       |</span><br><span class=\"line\">| Qcache_inserts          | 0       |</span><br><span class=\"line\">| Qcache_lowmem_prunes    | 0       |</span><br><span class=\"line\">| Qcache_not_cached       | 2002    |</span><br><span class=\"line\">| Qcache_queries_in_cache | 0       |</span><br><span class=\"line\">| Qcache_total_blocks     | 1       |</span><br><span class=\"line\">+-------------------------+---------+</span><br><span class=\"line\">8 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>———————状态说明——————–<br><code>Qcache_free_blocks：</code>缓存中相邻内存块的个数。<br>如果该值显示较大，则说明Query Cache 中的内存碎片较多了，FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。<br>注：当一个表被更新之后，和它相关的cache<br>blocks将被free。但是这个block依然可能存在队列中，除非是在队列的尾部。可以用FLUSH QUERY CACHE语句来清空free blocks</p>\n<p><code>Qcache_free_memory：</code>Query Cache 中目前剩余的内存大小。通过这个参数我们可以较为准确的观察出当前系统中的Query Cache 内存大小是否足够，是需要增加还是过多了。</p>\n<p><code>Qcache_hits：</code>表示有多少次命中缓存。我们主要可以通过该值来验证我们的查询缓存的效果。数字越大，缓存效果越理想。</p>\n<p><code>Qcache_inserts：</code>表示多少次未命中然后插入，意思是新来的SQL请求在缓存中未找到，不得不执行查询处理，执行查询处理后把结果insert到查询缓存中。这样的情况的次数越多，表示查询缓存应用到的比较少，效果也就不理想。当然系统刚启动后，查询缓存是空的，这很正常。</p>\n<p><code>Qcache_lowmem_prunes：</code><br>多少条Query因为内存不足而被清除出QueryCache。通过“Qcache_lowmem_prunes”和“Qcache_free_memory”相互结合，能够更清楚的了解到我们系统中Query Cache 的内存大小是否真的足够，是否非常频繁的出现因为内存不足而有Query 被换出。这个数字最好长时间来看；如果这个数字在不断增长，就表示可能碎片非常严重，或者内存很少。（上面的free_blocks和free_memory可以告诉您属于哪种情况）</p>\n<p><code>Qcache_not_cached：</code>不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。</p>\n<p><code>Qcache_queries_in_cache：</code>当前<code>Query Cache </code>中<code>cache</code> 的<code>Query </code>数量；<br>Qcache_total_blocks：当前Query Cache 中的block 数量；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Qcache_hits / (Qcache_inserts+Qcache_not_cached+Qcache_hits) </span><br><span class=\"line\">    90/         10000             0             90</span><br></pre></td></tr></table></figure>\n<p>如果出现hits比例过低，其实就可以关闭查询缓存了。使用redis专门缓存数据库</p>\n<p><code>Qcache_free_blocks</code>    来判断碎片<br><code>Qcache_free_memory</code>   +   <code>Qcache_lowmem_prunes </code> 来判断内存够不够<br><code>Qcache_hits</code> 多少次命中  <code>Qcache_hits / (Qcache_inserts+Qcache_not_cached+Qcache_hits) </code> </p>\n<p>（3）配置示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like <span class=\"string\">&#x27;%query_cache%&#x27;</span> ;</span><br><span class=\"line\">+------------------------------+---------+</span><br><span class=\"line\">| Variable_name                | Value   |</span><br><span class=\"line\">+------------------------------+---------+</span><br><span class=\"line\">| have_query_cache             | YES     |</span><br><span class=\"line\">| query_cache_limit            | 1048576 |</span><br><span class=\"line\">| query_cache_min_res_unit     | 4096    |</span><br><span class=\"line\">| query_cache_size             | 1048576 |</span><br><span class=\"line\">| query_cache_type             | OFF     |</span><br><span class=\"line\">| query_cache_wlock_invalidate | OFF     |</span><br><span class=\"line\">+------------------------------+---------+</span><br><span class=\"line\">6 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; </span><br></pre></td></tr></table></figure>\n<p>——————-配置说明——————————-<br>以上信息可以看出<code>query_cache_type</code>为off表示不缓存任何查询</p>\n<p>各字段的解释：<br><code>query_cache_limit：</code>超过此大小的查询将不缓存<br><code>query_cache_min_res_unit：</code>缓存块的最小大小，<code>query_cache_min_res_unit</code>的配置是一柄”双刃剑”，默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。<br><code>query_cache_size：</code>查询缓存大小 (注：QC存储的最小单位是1024byte，所以如果你设定了一个不是1024的倍数的值，这个值会被四舍五入到最接近当前值的等于1024的倍数的值。)</p>\n<p><code>query_cache_type：</code>缓存类型，决定缓存什么样的查询，注意这个值不能随便设置，必须设置为数字，可选项目以及说明如下：<br>如果设置为0，那么可以说，你的缓存根本就没有用，相当于禁用了。<br>如果设置为1，将会缓存所有的结果，除非你的select语句使用SQL_NO_CACHE禁用了查询缓存。<br>如果设置为2，则只缓存在select语句中通过SQL_CACHE指定需要缓存的查询。</p>\n<p>修改/etc/my.cnf,配置完后的部分文件如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">query_cache_size=128M</span><br><span class=\"line\">query_cache_type=1</span><br><span class=\"line\">max_connect_errors ***</span><br></pre></td></tr></table></figure>\n<p><code>max_connect_errors</code>是一个mysql中与安全有关的计数器值，它负责阻止过多尝试失败的客户端以防止暴力破解密码等情况，当超过指定次数，mysql服务器将禁止host的连接请求，直到mysql服务器重启或通过flush hosts命令清空此host的相关信息 max_connect_errors的值与性能并无太大关系。<br>修改<code>/etc/my.cnf</code>文件，在[mysqld]下面添加如下内容<br><code>max_connect_errors=2000</code></p>\n<hr>\n<h3 id=\"sort-buffer-size-会话排序缓冲区\"><a href=\"#sort-buffer-size-会话排序缓冲区\" class=\"headerlink\" title=\"sort_buffer_size 会话排序缓冲区\"></a>sort_buffer_size 会话排序缓冲区</h3><p>（1）简介：<br>每个需要进行排序的线程分配该大小的一个缓冲区。增加这值加速<br>ORDER BY<br>GROUP BY<br>distinct<br>union<br>（2）配置依据<br>Sort_Buffer_Size并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。<br>列如：500个连接将会消耗 500*sort_buffer_size（2M）=1G内</p>\n<p>计算公式：<code>16*1024/1024/8</code></p>\n<p>（3）配置方法<br> 修改/etc/my.cnf文件，在[mysqld]下面添加如下：<br><code>sort_buffer_size=1M</code></p>\n<hr>\n<h3 id=\"max-allowed-packet-接收最大数据包大小\"><a href=\"#max-allowed-packet-接收最大数据包大小\" class=\"headerlink\" title=\"max_allowed_packet 接收最大数据包大小\"></a>max_allowed_packet 接收最大数据包大小</h3><p>（1）简介：<br>mysql根据配置文件会限制，server接受的数据包大小。<br>（2）配置依据：<br>有时候大的插入和更新会受max_allowed_packet参数限制，导致写入或者更新失败，更大值是1GB，必须设置1024的倍数。在mysqldump备份时会用到<br>（3）配置方法：<br><code>max_allowed_packet=256M</code></p>\n<hr>\n<h3 id=\"join-buffer-size-关联表缓存大小\"><a href=\"#join-buffer-size-关联表缓存大小\" class=\"headerlink\" title=\"join_buffer_size 关联表缓存大小\"></a>join_buffer_size 关联表缓存大小</h3><p>select a.name,b.name from   a  join b on a.id=b.id where xxxx</p>\n<ul>\n<li>数据量级小的表放在左边，通过<code>left join</code>强制指定驱动表</li>\n</ul>\n<p>作用：用于表间关联缓存的大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享，计算公式类似于7.6。<br>尽量在SQL与方面进行优化，效果较为明显。<br>优化的方法：在on条件列加索引，至少应当是有MUL索引</p>\n<hr>\n<h3 id=\"thread-cache-size-预分配保留线程\"><a href=\"#thread-cache-size-预分配保留线程\" class=\"headerlink\" title=\"thread_cache_size 预分配保留线程\"></a>thread_cache_size 预分配保留线程</h3><p>（1）简介<br>服务器线程缓存，这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时,那么客户端的线程将被放到缓存中以响应下一个客户而不是销毁(前提是缓存数未达上限),如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能.<br>（2）配置依据</p>\n<ul>\n<li>通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。</li>\n<li>设置规则如下：1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。</li>\n<li>服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)</li>\n</ul>\n<p>试图连接到MySQL(不管是否连接成功)的连接数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db03 [(none)]&gt;show variables like <span class=\"string\">&quot;thread_cache_size&quot;</span>;</span><br><span class=\"line\">+-------------------+-------+</span><br><span class=\"line\">| Variable_name     | Value |</span><br><span class=\"line\">+-------------------+-------+</span><br><span class=\"line\">| thread_cache_size | 18    | //可重用线程数量</span><br><span class=\"line\">+-------------------+-------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.01 sec)</span><br><span class=\"line\">db03 [(none)]&gt;show status like <span class=\"string\">&#x27;threads_%&#x27;</span>;</span><br><span class=\"line\">+-------------------+-------+</span><br><span class=\"line\">| Variable_name     | Value |</span><br><span class=\"line\">+-------------------+-------+</span><br><span class=\"line\">| Threads_cached    | 17    | //空闲线程</span><br><span class=\"line\">| Threads_connected | 1     | //已建立连接的数量</span><br><span class=\"line\">| Threads_created   | 1002  | //新创建的线程,正常情况下不会持续上升</span><br><span class=\"line\">| Threads_running   | 1     |</span><br><span class=\"line\">+-------------------+-------+</span><br><span class=\"line\">4 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p><code>Threads_cached </code>:代表当前此时此刻线程缓存中有多少空闲线程。<br><code>Threads_connected</code>:代表当前已建立连接的数量，因为一个连接就需要一个线程，所以也可以看成当前被使用的线程数。<br><code>Threads_created</code>:代表从最近一次服务启动，已创建线程的数量，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗cpu SYS资源，可以适当增加配置文件中thread_cache_size值。<br><code>Threads_running</code> :代表当前激活的（非睡眠状态）线程数。并不是代表正在使用的线程数，有时候连接已建立，但是连接处于sleep状态。<br>（3）配置方法：<br><code>thread_cache_size=32</code></p>\n<p>整理：<br>Threads_created  ：</p>\n<ul>\n<li>一般在架构设计阶段，会设置一个测试值，做压力测试。</li>\n<li>结合zabbix监控，看一段时间内此状态的变化。</li>\n<li>如果在一段时间内，Threads_created趋于平稳，说明对应参数设定是OK。</li>\n<li>如果一直陡峭的增长，或者出现大量峰值，那么继续增加此值的大小，在系统资源够用的情况下（内存）</li>\n</ul>\n<hr>\n<h3 id=\"innodb-buffer-pool-size-数据页索引缓冲大小\"><a href=\"#innodb-buffer-pool-size-数据页索引缓冲大小\" class=\"headerlink\" title=\"innodb_buffer_pool_size 数据页索引缓冲大小\"></a>innodb_buffer_pool_size 数据页索引缓冲大小</h3><p>（1）简介<br>对于InnoDB表来说，<code>innodb_buffer_pool_size</code>的作用就相当于<code>key_buffer_size</code>对于MyISAM表的作用一样。<br>（2）配置依据：<br>InnoDB使用该参数指定大小的内存来缓冲数据和索引。<br>对于单独的MySQL数据库服务器，最大可以把该值设置成物理内存的80%,一般我们建议不要超过物理内存的70%。<br>（3）配置方法<br><code>innodb_buffer_pool_size=2048M</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">db03 [(none)]&gt;select @@innodb_buffer_pool_size;</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| @@innodb_buffer_pool_size |</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">|                 134217728 |//默认大小/字节</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">db03 [(none)]&gt;show engine innodb status\\G</span><br><span class=\"line\">----------------------</span><br><span class=\"line\">BUFFER POOL AND MEMORY</span><br><span class=\"line\">----------------------</span><br><span class=\"line\">Total large memory allocated 137428992 <span class=\"comment\"># 分配给InnoDB缓存池的内存(字节)换算成MB 为128M</span></span><br><span class=\"line\">Dictionary memory allocated 120758 <span class=\"comment\"># 分配给InnoDB数据字典的内存(字节)</span></span><br><span class=\"line\">Buffer pool size   8191 //最多可缓存的数据页数量 8191x16kb=131056kb=127.984375兆字节(mb)</span><br><span class=\"line\">Free buffers       4891 // 缓存池空闲链表的页数目 &lt;==观察剩余，剩余10%考虑增加buffer_pool大小</span><br><span class=\"line\">Database pages     3300 // 缓存池LRU链表的页数目</span><br><span class=\"line\">Old database pages 1238 // 修改过的页数目</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"innodb-flush-log-at-trx-commit-控制redo-buffer-刷写策略\"><a href=\"#innodb-flush-log-at-trx-commit-控制redo-buffer-刷写策略\" class=\"headerlink\" title=\"innodb_flush_log_at_trx_commit 控制redo buffer 刷写策略\"></a>innodb_flush_log_at_trx_commit 控制redo buffer 刷写策略</h3><p>（1）简介<br>主要控制了innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个。<br>0，表示当事务提交时，不做日志写入操作，而是每秒钟将log buffer中的数据写入日志文件并flush磁盘一次；<br>1，每次事务的提交都会引起redo日志文件写入、flush磁盘的操作，确保了事务的ACID；<br>2，每次事务提交引起写入日志文件的动作,但每秒钟完成一次flush磁盘操作。</p>\n<p>（2）配置依据<br>实际测试发现，该值对插入数据的速度影响非常大，设置为2时插入10000条记录只需要2秒，设置为0时只需要1秒，而设置为1时则需要229秒。因此，MySQL手册也建议尽量将插入操作合并成一个事务，这样可以大幅提高速度。<br>根据MySQL官方文档，在允许丢失最近部分事务的危险的前提下，可以把该值设为0或2。</p>\n<p>（3）配置方法<br><code>innodb_flush_log_at_trx_commit=1</code>双1标准中的一个1<br>参见：<a href=\"https://cakepanit.com/forward/3053135c.html#8-0-InnoDB%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0\">https://cakepanit.com/forward/3053135c.html#8-0-InnoDB%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0</a></p>\n<hr>\n<h3 id=\"innodb-thread-concurrency-多核并发处理控制\"><a href=\"#innodb-thread-concurrency-多核并发处理控制\" class=\"headerlink\" title=\"innodb_thread_concurrency 多核并发处理控制\"></a>innodb_thread_concurrency 多核并发处理控制</h3><p>（1）简介<br>此参数用来设置innodb线程的并发数量，默认值为0表示不限制。</p>\n<p>（2）配置依据<br>在官方doc上，对于<code>innodb_thread_concurrency</code>的使用，也给出了一些建议，如下：<br>如果一个工作负载中，并发用户线程的数量小于64，建议设置<code>innodb_thread_concurrency=0</code>；<br>如果工作负载一直较为严重甚至偶尔达到顶峰，建议先设置<code>innodb_thread_concurrency=128</code>，<br>并通过不断的降低这个参数，96, 80, 64等等，直到发现能够提供最佳性能的线程数，<br>例如，假设系统通常有40到50个用户，但定期的数量增加至60，70，甚至200。你会发现，<br>性能在80个并发用户设置时表现稳定，如果高于这个数，性能反而下降。在这种情况下，<br>建议设置innodb_thread_concurrency参数为80，以避免影响性能。<br>如果你不希望InnoDB使用的虚拟CPU数量比用户线程使用的虚拟CPU更多（比如20个虚拟CPU），<br>建议通过设置innodb_thread_concurrency 参数为这个值（也可能更低，这取决于性能体现），<br>如果你的目标是将MySQL与其他应用隔离，你可以l考虑绑定mysqld进程到专有的虚拟CPU。<br>但是需 要注意的是，这种绑定，在myslqd进程一直不是很忙的情况下，可能会导致非最优的硬件使用率。在这种情况下，<br>你可能会设置mysqld进程绑定的虚拟 CPU，允许其他应用程序使用虚拟CPU的一部分或全部。<br>在某些情况下，最佳的innodb_thread_concurrency参数设置可以比虚拟CPU的数量小。<br>定期检测和分析系统，负载量、用户数或者工作环境的改变可能都需要对innodb_thread_concurrency参数的设置进行调整。</p>\n<p>128   —–&gt; top  cpu<br>设置标准：</p>\n<ul>\n<li>1、当前系统cpu使用情况，均不均匀<br>top</li>\n<li>2、当前的连接数，有没有达到顶峰<br><code>show statusg like &#39;threads_%&#39;;</code><br><code>show processlist;</code><br>（3）配置方法：<br><code>innodb_thread_concurrency=8</code><br>方法:</li>\n</ul>\n<ol>\n<li>看top ,观察每个cpu的各自的负载情况</li>\n<li>发现不平均,先设置参数为cpu个数,然后不断增加(一倍)这个数值</li>\n<li>一直观察top状态,直到达到比较均匀时,说明已经到位了</li>\n</ol>\n<hr>\n<h3 id=\"innodb-log-buffer-size-redo缓冲区大小控制\"><a href=\"#innodb-log-buffer-size-redo缓冲区大小控制\" class=\"headerlink\" title=\"innodb_log_buffer_size  redo缓冲区大小控制\"></a>innodb_log_buffer_size  redo缓冲区大小控制</h3><p>此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，对于较大的事务，可以增大缓存大小。<br><code>innodb_log_buffer_size=128M</code>到256M之间<br>设定依据：<br>1、大事务： 存储过程调用 CALL<br>2、多事务</p>\n<hr>\n<h3 id=\"innodb-log-file-size-100M-redo日志个数控制\"><a href=\"#innodb-log-file-size-100M-redo日志个数控制\" class=\"headerlink\" title=\"innodb_log_file_size = 100M redo日志个数控制\"></a>innodb_log_file_size = 100M redo日志个数控制</h3><p>设置 ib_logfile0  ib_logfile1<br>此参数确定数据日志文件的大小，以M为单位，更大的设置可以提高性能.<br>innodb_log_file_size = 100M<br><code>innodb_log_files_in_group = 3</code>到5组<br>为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</p>\n<hr>\n<h3 id=\"read-buffer-size-1M-顺序查询缓冲区\"><a href=\"#read-buffer-size-1M-顺序查询缓冲区\" class=\"headerlink\" title=\"read_buffer_size = 1M 顺序查询缓冲区\"></a>read_buffer_size = 1M 顺序查询缓冲区</h3><p>MySql读入缓冲区大小（会话级别的参数）。对表进行顺序扫描（如走索引）的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。和 sort_buffer_size一样，该参数对应的分配内存也是每个连接独享</p>\n<hr>\n<h3 id=\"read-rnd-buffer-size-1M-随机查询缓冲区\"><a href=\"#read-rnd-buffer-size-1M-随机查询缓冲区\" class=\"headerlink\" title=\"read_rnd_buffer_size = 1M 随机查询缓冲区\"></a>read_rnd_buffer_size = 1M 随机查询缓冲区</h3><p>MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时（不走索引）(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。<br>注：顺序读是指根据索引的叶节点数据就能顺序地读取所需要的行数据。随机读是指一般需要根据辅助索引叶节点中的主键寻找实际行数据，而辅助索引和主键所在的数据段不同，因此访问方式是随机的。</p>\n<hr>\n<h3 id=\"bulk-insert-buffer-size-8M-插入缓冲区大小\"><a href=\"#bulk-insert-buffer-size-8M-插入缓冲区大小\" class=\"headerlink\" title=\"bulk_insert_buffer_size = 8M 插入缓冲区大小\"></a>bulk_insert_buffer_size = 8M 插入缓冲区大小</h3><p>批量插入数据缓存大小，可以有效提高插入效率，默认为8M</p>\n<ul>\n<li>tokuDB    percona</li>\n<li>myrocks   </li>\n<li>RocksDB</li>\n<li>TiDB</li>\n<li>MongoDB</li>\n</ul>\n<hr>\n<h3 id=\"binary-log-binlog相关参数\"><a href=\"#binary-log-binlog相关参数\" class=\"headerlink\" title=\"binary log binlog相关参数\"></a>binary log binlog相关参数</h3><p><code>log-bin=/data/mysql-bin</code><br><code>binlog_cache_size = 2M</code> //为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存, 提高记录bin-log的效率。没有什么大事务，dml也不是很频繁的情况下可以设置小一点，如果事务大而且多，dml操作也频繁，则可以适当的调大一点。前者建议是–1M，后者建议是：即 2–4M<br><code>max_binlog_cache_size = 8M</code> //表示的是binlog 能够使用的最大cache 内存大小<br><code>max_binlog_size= 512M </code><br>//指定binlog日志文件的大小，如果当前的日志大小达到max_binlog_size，还会自动创建新的二进制日志。你不能将该变量设置为大于1GB或小于4096字节。默认值是1GB。在导入大容量的sql文件时，建议关闭sql_log_bin，否则硬盘扛不住，而且建议定期做删除。</p>\n<p><code>expire_logs_days = 7</code> //定义了mysql清除过期日志的时间。<br>二进制日志自动删除的天数。默认值为0,表示“没有自动删除”。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">log-bin=/data/mysql-bin</span><br><span class=\"line\">binlog_format=row </span><br><span class=\"line\">sync_binlog=1</span><br></pre></td></tr></table></figure>\n<p>双1标准(基于安全的控制)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sync_binlog=1   什么时候刷新binlog到磁盘，每次事务commit</span><br><span class=\"line\">innodb_flush_log_at_trx_commit=1</span><br><span class=\"line\"><span class=\"built_in\">set</span> sql_log_bin=0;</span><br><span class=\"line\">show status like <span class=\"string\">&#x27;com_%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"安全参数\"><a href=\"#安全参数\" class=\"headerlink\" title=\"安全参数\"></a>安全参数</h3><p><code>Innodb_flush_method=(O_DIRECT, fsync) </code><br>1、fsync：<br>（1）在数据页需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘<br>（2）在redo buffuer需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘<br>但，如果<code>innodb_flush_log_at_trx_commit=1</code>的话，日志还是直接每次commit直接写入磁盘<br>2、 Innodb_flush_method=O_DIRECT<br>（1）在数据页需要持久化时，直接写入磁盘<br>（2）在redo buffuer需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘<br>但，如果<code>innodb_flush_log_at_trx_commit=1</code>的话，日志还是直接每次commit直接写入磁盘</p>\n<p>最安全模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innodb_flush_log_at_trx_commit=1</span><br><span class=\"line\">innodb_flush_method=O_DIRECT</span><br></pre></td></tr></table></figure>\n<p>最高性能模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innodb_flush_log_at_trx_commit=0</span><br><span class=\"line\">innodb_flush_method=fsync</span><br></pre></td></tr></table></figure>\n<p>一般情况下，我们更偏向于安全。<br>“双一标准”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">innodb_flush_log_at_trx_commit=1        ***************</span><br><span class=\"line\">sync_binlog=1                           ***************</span><br><span class=\"line\">innodb_flush_method=O_DIRECT</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"参数优化结果\"><a href=\"#参数优化结果\" class=\"headerlink\" title=\"参数优化结果\"></a>参数优化结果</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/data/mysql</span><br><span class=\"line\">datadir=/data/mysql/data</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br><span class=\"line\">log-error=/var/log/mysql.log</span><br><span class=\"line\">log_bin=/data/binlog/mysql-bin</span><br><span class=\"line\">binlog_format=row</span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\">server-id=52</span><br><span class=\"line\">gtid-mode=on</span><br><span class=\"line\">enforce-gtid-consistency=<span class=\"literal\">true</span></span><br><span class=\"line\">log-slave-updates=1</span><br><span class=\"line\">relay_log_purge=0</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections=1024</span><br><span class=\"line\">back_log=128</span><br><span class=\"line\">wait_timeout=60</span><br><span class=\"line\">interactive_timeout=7200</span><br><span class=\"line\">key_buffer_size=16M</span><br><span class=\"line\">query_cache_size=64M</span><br><span class=\"line\">query_cache_type=1</span><br><span class=\"line\">query_cache_limit=50M</span><br><span class=\"line\">max_connect_errors=20</span><br><span class=\"line\">sort_buffer_size=2M</span><br><span class=\"line\">max_allowed_packet=32M</span><br><span class=\"line\">join_buffer_size=2M</span><br><span class=\"line\">thread_cache_size=200</span><br><span class=\"line\">innodb_buffer_pool_size=1024M</span><br><span class=\"line\">innodb_flush_log_at_trx_commit=1</span><br><span class=\"line\">innodb_log_buffer_size=32M</span><br><span class=\"line\">innodb_log_file_size=128M</span><br><span class=\"line\">innodb_log_files_in_group=3</span><br><span class=\"line\">binlog_cache_size=2M</span><br><span class=\"line\">max_binlog_cache_size=8M</span><br><span class=\"line\">max_binlog_size=512M</span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\">read_buffer_size=2M</span><br><span class=\"line\">read_rnd_buffer_size=2M</span><br><span class=\"line\">bulk_insert_buffer_size=8M</span><br><span class=\"line\">[client]</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">优化前：</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># mysqlslap --defaults-file=/etc/my.cnf --socket /tmp/mysql.sock --concurrency=100 --iterations=1 --create-schema=&#x27;oldboy&#x27; --query=&quot;select * from oldboy.t100w where k2=&#x27;GHvw&#x27;&quot; engine=innodb --number-of-queries=2000 -verbose</span></span><br><span class=\"line\">Benchmark</span><br><span class=\"line\">        Running <span class=\"keyword\">for</span> engine rbose</span><br><span class=\"line\">        Average number of seconds to run all queries: 184.616 seconds</span><br><span class=\"line\">        Minimum number of seconds to run all queries: 184.616 seconds</span><br><span class=\"line\">        Maximum number of seconds to run all queries: 184.616 seconds</span><br><span class=\"line\">        Number of clients running queries: 100</span><br><span class=\"line\">        Average number of queries per client: 20</span><br><span class=\"line\">//184秒</span><br><span class=\"line\"></span><br><span class=\"line\">优化后：</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># mysqlslap --defaults-file=/etc/my.cnf --socket /tmp/mysql.sock --concurrency=100 --iterations=1 --create-schema=&#x27;oldboy&#x27; --query=&quot;select * from oldboy.t100w where k2=&#x27;GHvw&#x27;&quot; engine=innodb --number-of-queries=2000 -verbose</span></span><br><span class=\"line\">Benchmark</span><br><span class=\"line\">        Running <span class=\"keyword\">for</span> engine rbose</span><br><span class=\"line\">        Average number of seconds to run all queries: 9.411 seconds</span><br><span class=\"line\">        Minimum number of seconds to run all queries: 9.411 seconds</span><br><span class=\"line\">        Maximum number of seconds to run all queries: 9.411 seconds</span><br><span class=\"line\">        Number of clients running queries: 100</span><br><span class=\"line\">        Average number of queries per client: 20</span><br><span class=\"line\">//9秒</span><br><span class=\"line\"></span><br><span class=\"line\">建立索引后：</span><br><span class=\"line\">db03 [(none)]&gt;alter table oldboy.t100w add index idx_k2(k2);</span><br><span class=\"line\">Query OK, 0 rows affected (1.66 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">再次测试：</span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># mysqlslap --defaults-file=/etc/my.cnf --socket /tmp/mysql.sock --concurrency=100 --iterations=1 --create-schema=&#x27;oldboy&#x27; --query=&quot;select * from oldboy.t100w where k2=&#x27;GHvw&#x27;&quot; engine=innodb --number-of-queries=2000 -verbose</span></span><br><span class=\"line\">Benchmark</span><br><span class=\"line\">        Running <span class=\"keyword\">for</span> engine rbose</span><br><span class=\"line\">        Average number of seconds to run all queries: 0.083 seconds</span><br><span class=\"line\">        Minimum number of seconds to run all queries: 0.083 seconds</span><br><span class=\"line\">        Maximum number of seconds to run all queries: 0.083 seconds</span><br><span class=\"line\">        Number of clients running queries: 100</span><br><span class=\"line\">        Average number of queries per client: 20</span><br><span class=\"line\">//0.083秒</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"锁的监控及处理\"><a href=\"#锁的监控及处理\" class=\"headerlink\" title=\"锁的监控及处理\"></a>锁的监控及处理</h2><h3 id=\"锁等待模拟\"><a href=\"#锁等待模拟\" class=\"headerlink\" title=\"锁等待模拟\"></a>锁等待模拟</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">innodb_lock_wait_timeout=28800</span><br><span class=\"line\"></span><br><span class=\"line\">tx1:</span><br><span class=\"line\">USE oldboy</span><br><span class=\"line\">UPDATE t_100w SET k1=<span class=\"string\">&#x27;av&#x27;</span> WHERE <span class=\"built_in\">id</span>=10;</span><br><span class=\"line\"><span class=\"comment\">## tx2:</span></span><br><span class=\"line\">USE oldboy </span><br><span class=\"line\">UPDATE  t_100w SET k1=<span class=\"string\">&#x27;az&#x27;</span> WHERE <span class=\"built_in\">id</span>=10;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/img-99.png\" alt=\"锁等待\"></p>\n<h3 id=\"看有没有锁等待\"><a href=\"#看有没有锁等待\" class=\"headerlink\" title=\"看有没有锁等待\"></a>看有没有锁等待</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW  STATUS LIKE <span class=\"string\">&#x27;innodb_row_lock%&#x27;</span>;</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| Variable_name                 | Value |</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">| Innodb_row_lock_current_waits | 1     | //当前多少个锁等待</span><br><span class=\"line\">| Innodb_row_lock_time          | 0     |</span><br><span class=\"line\">| Innodb_row_lock_time_avg      | 0     |</span><br><span class=\"line\">| Innodb_row_lock_time_max      | 0     |</span><br><span class=\"line\">| Innodb_row_lock_waits         | 1     | //历史</span><br><span class=\"line\">+-------------------------------+-------+</span><br><span class=\"line\">5 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看哪个事务在等待-被阻塞了\"><a href=\"#查看哪个事务在等待-被阻塞了\" class=\"headerlink\" title=\"查看哪个事务在等待(被阻塞了)\"></a>查看哪个事务在等待(被阻塞了)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE information_schema</span><br><span class=\"line\">SELECT * FROM information_schema.INNODB_TRX WHERE trx_state=<span class=\"string\">&#x27;LOCK WAIT&#x27;</span>;</span><br><span class=\"line\">trx_query: update  t100w <span class=\"built_in\">set</span> k1=<span class=\"string\">&#x27;az&#x27;</span> WHERE <span class=\"built_in\">id</span>=10: 被阻塞的语句是谁 </span><br><span class=\"line\">                          trx_mysql_thread_id: 5: 被阻塞的会话ID</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看锁源-谁锁的我\"><a href=\"#查看锁源-谁锁的我\" class=\"headerlink\" title=\"查看锁源,谁锁的我!\"></a>查看锁源,谁锁的我!</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM sys.innodb_lock_waits;     <span class=\"comment\">## ====&gt;被锁的和锁定它的之间关系</span></span><br><span class=\"line\"><span class=\"comment\">##                 waiting_pid: 5 等待的会话线程号</span></span><br><span class=\"line\"><span class=\"comment\">##               waiting_query: update  t100w set k1=&#x27;az&#x27; WHERE id=10 等待的语句 </span></span><br><span class=\"line\"><span class=\"comment\">##                blocking_pid: 4 锁源的线程号</span></span><br><span class=\"line\"><span class=\"comment\">##     sql_kill_blocking_query: KILL QUERY 4 处理建议</span></span><br><span class=\"line\"><span class=\"comment\">##sql_kill_blocking_connection: KILL 4处理建议</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"找到锁源的thread-id\"><a href=\"#找到锁源的thread-id\" class=\"headerlink\" title=\"找到锁源的thread_id\"></a>找到锁源的thread_id</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM performance_schema.threads WHERE processlist_id=4\\G;</span><br><span class=\"line\"><span class=\"comment\">## THREAD_ID: 29</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"找到锁源的SQL语句\"><a href=\"#找到锁源的SQL语句\" class=\"headerlink\" title=\"找到锁源的SQL语句\"></a>找到锁源的SQL语句</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-- 当前在执行的语句</span><br><span class=\"line\">SELECT * FROM performance_schema.`events_statements_current` WHERE thread_id=29;</span><br><span class=\"line\">SQL_TEXT: UPDATE t100w SET k1=<span class=\"string\">&#x27;av&#x27;</span> WHERE <span class=\"built_in\">id</span>=10</span><br><span class=\"line\">-- 执行语句的历史</span><br><span class=\"line\">SELECT * FROM performance_schema.`events_statements_history` WHERE thread_id=29;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主从优化：\"><a href=\"#主从优化：\" class=\"headerlink\" title=\"主从优化：\"></a>主从优化：</h2><h3 id=\"5-7-从库多线程MTS\"><a href=\"#5-7-从库多线程MTS\" class=\"headerlink\" title=\"5.7 从库多线程MTS\"></a>5.7 从库多线程MTS</h3><p>问题：<a href=\"https://cakepanit.com/forward/2c1ca365.html#6-%E4%B8%BB%E4%BB%8E%E5%BB%B6%E6%97%B6-%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90\">主从延时</a><br>基本要求:</p>\n<ul>\n<li>5.7以上的版本(忘记小版本)，必须开启GTID </li>\n<li>binlog必须是row模式  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gtid_mode=ON</span><br><span class=\"line\">enforce_gtid_consistency=ON</span><br><span class=\"line\">log_slave_updates=ON</span><br><span class=\"line\">slave-parallel-type=LOGICAL_CLOCK</span><br><span class=\"line\">slave-parallel-workers=16 //并发sql线程数量</span><br><span class=\"line\">master_info_repository=TABLE //master_info 已表的形式存放</span><br><span class=\"line\">relay_log_info_repository=TABLE /relay_info 已表的形式存放</span><br><span class=\"line\">relay_log_recovery=ON</span><br></pre></td></tr></table></figure>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">slave-parallel-type=LOGICAL_CLOCK</span><br><span class=\"line\">slave-parallel-workers=8</span><br><span class=\"line\">cpu核心数作为标准</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CHANGE MASTER TO</span><br><span class=\"line\">  MASTER_HOST=<span class=\"string\">&#x27;10.0.0.128&#x27;</span>,</span><br><span class=\"line\">  MASTER_USER=<span class=\"string\">&#x27;repl&#x27;</span>,</span><br><span class=\"line\">  MASTER_PASSWORD=<span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">  MASTER_PORT=3307,</span><br><span class=\"line\">  MASTER_AUTO_POSITION=1;</span><br><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["DBA"],"tags":["MySQL","数据库优化"]},{"title":"Redis-Cluster 分布式高可用集群","url":"/forward/58eea07e.html","content":"<h2 id=\"redis-cluster-分布式集群介绍\"><a href=\"#redis-cluster-分布式集群介绍\" class=\"headerlink\" title=\"redis cluster 分布式集群介绍\"></a>redis cluster 分布式集群介绍</h2><h3 id=\"高性能：\"><a href=\"#高性能：\" class=\"headerlink\" title=\"高性能：\"></a>高性能：</h3><ul>\n<li>在多分片节点中，将16384个槽位，均匀分布到多个分片节点中</li>\n<li>存数据时，将key做crc16(key)，然后和16384进行取模，得出槽位（0-16383）</li>\n<li>根据计算得出的槽位值，找到想对应的分片节点的主节点，存储到相应槽位上</li>\n<li>如果客户端当时连接的节点不是将来要存储的分片节点，分片集群会将客户端连接却换至真正存储节点进行数据存储</li>\n</ul>\n<h3 id=\"高可用：\"><a href=\"#高可用：\" class=\"headerlink\" title=\"高可用：\"></a>高可用：</h3><p>在搭建集群时，会为每一个分片的主节点，对应一个从节点，实现slaveof的功能，同时当主节点down，实现类似于sentinel的自动fileover的功能。</p>\n<ul>\n<li>redis会为多组分片构成（3组）</li>\n<li>redis cluster 使用固定个数的slot存储数据（一个16384slot）</li>\n<li>每组分片分得1/3 slot个数（0-5500 5501-11000 11001-16383）</li>\n<li>基于CRC16（key）% 16384 –&gt; 值 （槽位号）</li>\n</ul>\n<h3 id=\"分布式架构部署\"><a href=\"#分布式架构部署\" class=\"headerlink\" title=\"分布式架构部署\"></a>分布式架构部署</h3><p>6个redis实例，一般会放到3台硬件服务器</p>\n<table>\n<tr>\n    <td>Role</td>\n    <td>IP</td>\n    <td>Port</td>\n    <td>Server</td>\n\n</tr>\n<tr>\n    <td>Master</td>\n    <td rowspan=\"2\">10.0.0.51</td>\n    <td>6380</td>\n    <td rowspan=\"2\">db01</td>\n</tr>\n<tr>\n    <td>Slave</td>\n    <td>6381</td>\n</tr>\n<tr>\n    <td>Master</td>\n    <td rowspan=\"2\">10.0.0.52</td>\n    <td>6380</td>\n    <td rowspan=\"2\">db02</td>\n</tr>\n<tr>\n    <td>Slave</td>\n    <td>6381</td>\n</tr>\n<tr>\n    <td>Master</td>\n    <td rowspan=\"2\">10.0.0.53</td>\n    <td>6380</td>\n    <td rowspan=\"3\">db03</td>\n</tr>\n<tr>\n    <td>Slave</td>\n    <td>6381</td>\n\n</tr>\n</table>\n注：在生产规划中，一个分片的两个分到不同的物理服务器，防止硬件主机宕机造成的整个分片数据丢失。\n\n<h3 id=\"架构图：\"><a href=\"#架构图：\" class=\"headerlink\" title=\"架构图：\"></a>架构图：</h3><p><img src=\"/images/img-108.png\" alt=\"架构图\"></p>\n<h2 id=\"手动搭建部署集群\"><a href=\"#手动搭建部署集群\" class=\"headerlink\" title=\"手动搭建部署集群\"></a>手动搭建部署集群</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路:\"></a>思路:</h3><ul>\n<li>1)部署一台服务器上的 2 个集群节点</li>\n<li>2)使用 ansible 批量部署</li>\n</ul>\n<h3 id=\"db01操作步骤\"><a href=\"#db01操作步骤\" class=\"headerlink\" title=\"db01操作步骤:\"></a>db01操作步骤:</h3><h4 id=\"创建必要目录：\"><a href=\"#创建必要目录：\" class=\"headerlink\" title=\"创建必要目录：\"></a>创建必要目录：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /application/redis_cluster/redis_&#123;6380,6381&#125;/&#123;conf,logs,pid&#125;</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> –p /data/redis_cluster/redis_&#123;6380,6381&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加db01主节点配置文件\"><a href=\"#添加db01主节点配置文件\" class=\"headerlink\" title=\"添加db01主节点配置文件\"></a>添加db01主节点配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;/application/redis_cluster/redis_6380/conf/redis_6380.conf&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">bind 10.0.0.51</span></span><br><span class=\"line\"><span class=\"string\">port 6380</span></span><br><span class=\"line\"><span class=\"string\">daemonize yes</span></span><br><span class=\"line\"><span class=\"string\">pidfile &quot;/application/redis_cluster/redis_6380/pid/redis_6380.pid&quot;</span></span><br><span class=\"line\"><span class=\"string\">logfile &quot;/application/redis_cluster/redis_6380/logs/redis_6380.log&quot;</span></span><br><span class=\"line\"><span class=\"string\">dbfilename &quot;redis_6380.rdb&quot;</span></span><br><span class=\"line\"><span class=\"string\">dir &quot;/data/redis_cluster/redis_6380/&quot;</span></span><br><span class=\"line\"><span class=\"string\">cluster-enabled yes</span></span><br><span class=\"line\"><span class=\"string\">#以集群模式启动redis</span></span><br><span class=\"line\"><span class=\"string\">cluster-config-file nodes_6380.conf</span></span><br><span class=\"line\"><span class=\"string\">#定义集群配置文件名</span></span><br><span class=\"line\"><span class=\"string\">cluster-node-timeout 15000</span></span><br><span class=\"line\"><span class=\"string\">#超时时间</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加db01从节点配置文件：\"><a href=\"#添加db01从节点配置文件：\" class=\"headerlink\" title=\"添加db01从节点配置文件：\"></a>添加db01从节点配置文件：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /application/redis_cluster/</span><br><span class=\"line\"><span class=\"built_in\">cp</span> redis_6380/conf/redis_6380.conf redis_6381/conf/redis_6381.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s#6380#6381#g&#x27;</span> redis_6381/conf/redis_6381.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"推送配置文件到其余服务器：\"><a href=\"#推送配置文件到其余服务器：\" class=\"headerlink\" title=\"推送配置文件到其余服务器：\"></a>推送配置文件到其余服务器：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -avz /application/redis_cluster/redis_638* db02:/application/redis_cluster/</span><br><span class=\"line\">rsync -avz /application/redis_cluster/redis_638* db03:/application/redis_cluster/</span><br><span class=\"line\">redis-server /application/redis_cluster/redis_6380/conf/redis_6380.conf</span><br><span class=\"line\">redis-server /application/redis_cluster/redis_6381/conf/redis_6381.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 /application/redis_cluster]<span class=\"comment\"># tree redis_638*</span></span><br><span class=\"line\">redis_6380</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">│   └── redis_6380.conf</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">└── pid</span><br><span class=\"line\">redis_6381</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">│   └── redis_6381.conf</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">└── pid</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># ps -ef | grep redis</span></span><br><span class=\"line\">root       926     1  0 12:14 ?        00:00:00 redis-server 10.0.0.51:6380 [cluster]</span><br><span class=\"line\">root       931     1  0 12:14 ?        00:00:00 redis-server 10.0.0.51:6381 [cluster]</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># netstat -lntup | grep redis-server</span></span><br><span class=\"line\">tcp        0      0 10.0.0.51:16380         0.0.0.0:*               LISTEN      926/redis-server 10 </span><br><span class=\"line\">tcp        0      0 10.0.0.51:16381         0.0.0.0:*               LISTEN      931/redis-server 10 </span><br><span class=\"line\">tcp        0      0 10.0.0.51:6380          0.0.0.0:*               LISTEN      926/redis-server 10 </span><br><span class=\"line\">tcp        0      0 10.0.0.51:6381          0.0.0.0:*               LISTEN      931/redis-server 10 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"db02-操作：\"><a href=\"#db02-操作：\" class=\"headerlink\" title=\"db02 操作：\"></a>db02 操作：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find /application/redis_cluster/redis_638* -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*.conf&quot;</span>|xargs sed -i <span class=\"string\">&quot;/bind/s#51#52#g&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> –p /data/redis_cluster/redis_&#123;6380,6381&#125;</span><br><span class=\"line\">redis-server /application/redis_cluster/redis_6380/conf/redis_6380.conf</span><br><span class=\"line\">redis-server /application/redis_cluster/redis_6381/conf/redis_6381.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># ps -ef | grep redis</span></span><br><span class=\"line\">root       965     1  0 12:16 ?        00:00:00 redis-server 10.0.0.52:6380 [cluster]</span><br><span class=\"line\">root       975     1  0 12:16 ?        00:00:00 redis-server 10.0.0.52:6381 [cluster]</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\">#  netstat -lntup | grep redis-server</span></span><br><span class=\"line\">tcp        0      0 10.0.0.52:16380         0.0.0.0:*               LISTEN      965/redis-server 10 </span><br><span class=\"line\">tcp        0      0 10.0.0.52:16381         0.0.0.0:*               LISTEN      975/redis-server 10 </span><br><span class=\"line\">tcp        0      0 10.0.0.52:6380          0.0.0.0:*               LISTEN      965/redis-server 10 </span><br><span class=\"line\">tcp        0      0 10.0.0.52:6381          0.0.0.0:*               LISTEN      975/redis-server 10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"db03-操作：\"><a href=\"#db03-操作：\" class=\"headerlink\" title=\"db03 操作：\"></a>db03 操作：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find /application/redis_cluster/redis_638* -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*.conf&quot;</span>|xargs sed -i <span class=\"string\">&quot;/bind/s#51#53#g&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> –p /data/redis_cluster/redis_&#123;6380,6381&#125;</span><br><span class=\"line\">redis-server /application/redis_cluster/redis_6380/conf/redis_6380.conf</span><br><span class=\"line\">redis-server /application/redis_cluster/redis_6381/conf/redis_6381.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#当把所有节点都启动后查看进程会有 cluster 的字样</span></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># ps -ef | grep redis</span></span><br><span class=\"line\">root       936     1  0 12:17 ?        00:00:00 redis-server 10.0.0.53:6380 [cluster]</span><br><span class=\"line\">root       941     1  0 12:17 ?        00:00:00 redis-server 10.0.0.53:6381 [cluster]</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># netstat -lntup | grep redis-server</span></span><br><span class=\"line\">tcp        0      0 10.0.0.53:16380         0.0.0.0:*               LISTEN      936/redis-server 10 </span><br><span class=\"line\">tcp        0      0 10.0.0.53:16381         0.0.0.0:*               LISTEN      941/redis-server 10 </span><br><span class=\"line\">tcp        0      0 10.0.0.53:6380          0.0.0.0:*               LISTEN      936/redis-server 10 </span><br><span class=\"line\">tcp        0      0 10.0.0.53:6381          0.0.0.0:*               LISTEN      941/redis-server 10</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>集群通讯端口为配置文件里的port加10000，比如6380，通讯端口就是16380</p>\n<h3 id=\"启动后观察配置文件：\"><a href=\"#启动后观察配置文件：\" class=\"headerlink\" title=\"启动后观察配置文件：\"></a>启动后观察配置文件：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">还未发现集群内其他节点</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /data/redis_cluster/redis_6380/nodes_6380.conf </span></span><br><span class=\"line\">8e94563f580c0cf12a14a0b04dce3aac36332545 :0@0 myself,master - 0 0 0 connected</span><br><span class=\"line\">vars currentEpoch 0 lastVoteEpoch 0</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat /data/redis_cluster/redis_6381/nodes_6381.conf </span></span><br><span class=\"line\">3af4c1f67e95906cf7863bfcc998540dbf9813b6 :0@0 myself,master - 0 0 0 connected</span><br><span class=\"line\">vars currentEpoch 0 lastVoteEpoch 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写redis维护脚本：\"><a href=\"#编写redis维护脚本：\" class=\"headerlink\" title=\"编写redis维护脚本：\"></a>编写redis维护脚本：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"comment\"># File Name: redis_shell.sh</span></span><br><span class=\"line\"><span class=\"comment\"># Created Time: 2019年05月12日 星期二 12时54分39秒</span></span><br><span class=\"line\"><span class=\"comment\"># Version: V1.0</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Felix</span></span><br><span class=\"line\"><span class=\"comment\"># Organization: 360JR OPS</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">USAG</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;sh <span class=\"variable\">$0</span> &#123;start|stop|restart|login|ps|tail&#125; PORT&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> = 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    REDIS_PORT=<span class=\"string\">&#x27;6379&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> </span><br><span class=\"line\">    [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> = 2 -a -z <span class=\"string\">&quot;<span class=\"subst\">$(echo <span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span>|sed &#x27;s#[0-9]##g&#x27;)</span>&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    REDIS_PORT=<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    USAG</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">REDIS_IP=$(ip addr show enp0s8|sed -nr <span class=\"string\">&#x27;3s#^.*inet (.*)/.*$#\\1#gp&#x27;</span>)</span><br><span class=\"line\">PATH_DIR=/application/redis_cluster/redis_<span class=\"variable\">$&#123;REDIS_PORT&#125;</span>/</span><br><span class=\"line\">PATH_CONF=/application/redis_cluster/redis_<span class=\"variable\">$&#123;REDIS_PORT&#125;</span>/conf/redis_<span class=\"variable\">$&#123;REDIS_PORT&#125;</span>.conf</span><br><span class=\"line\">PATH_LOG=/application/redis_cluster/redis_<span class=\"variable\">$&#123;REDIS_PORT&#125;</span>/logs/redis_<span class=\"variable\">$&#123;REDIS_PORT&#125;</span>.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_START</span></span>()&#123;</span><br><span class=\"line\">    redis-server <span class=\"variable\">$&#123;PATH_CONF&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_SHUTDOWN</span></span>()&#123;</span><br><span class=\"line\">    redis-cli -c -h <span class=\"variable\">$&#123;REDIS_IP&#125;</span> -p <span class=\"variable\">$&#123;REDIS_PORT&#125;</span> shutdown</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_LOGIN</span></span>()&#123;</span><br><span class=\"line\">    redis-cli -c -h <span class=\"variable\">$&#123;REDIS_IP&#125;</span> -p <span class=\"variable\">$&#123;REDIS_PORT&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_PS</span></span>()&#123;</span><br><span class=\"line\">    ps -ef|grep redis</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_TAIL</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">tail</span> -f <span class=\"variable\">$&#123;PATH_LOG&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CMD_STATUS</span></span>()&#123;</span><br><span class=\"line\">    redis-cli -c -h <span class=\"variable\">$&#123;REDIS_IP&#125;</span> -p <span class=\"variable\">$&#123;REDIS_PORT&#125;</span> CLUSTER INFO|grep -Ew <span class=\"string\">&quot;cluster_state|cluster_known_nodes|cluster_slots_assigned&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\nSlots state:&quot;</span></span><br><span class=\"line\">    redis-cli -c -h <span class=\"variable\">$&#123;REDIS_IP&#125;</span> -p <span class=\"variable\">$&#123;REDIS_PORT&#125;</span> CLUSTER NODES|awk <span class=\"string\">&#x27;&#123;print $2,$3,$NF&#125;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        CMD_START</span><br><span class=\"line\">        CMD_PS</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        CMD_SHUTDOWN</span><br><span class=\"line\">        CMD_PS</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">        CMD_SHUTDOWN</span><br><span class=\"line\">        CMD_START</span><br><span class=\"line\">        CMD_PS</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    login)</span><br><span class=\"line\">        CMD_LOGIN</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    ps)</span><br><span class=\"line\">        CMD_PS</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    <span class=\"built_in\">tail</span>)</span><br><span class=\"line\">        CMD_TAIL</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    csstatus)</span><br><span class=\"line\">        CMD_STATUS</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">      USAG</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># scp redis_shell.sh db02:/root/</span></span><br><span class=\"line\">redis_shell.sh                                                                     100% 1121     1.3MB/s   00:00    </span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># scp redis_shell.sh db03:/root/</span></span><br><span class=\"line\">redis_shell.sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集群配置文件（不要手动修改）\"><a href=\"#集群配置文件（不要手动修改）\" class=\"headerlink\" title=\"集群配置文件（不要手动修改）\"></a>集群配置文件（不要手动修改）</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#但是登录后执行 CLUSTER NODES 命令会发现只有每个节点自己的 ID,目前集群内的节点还没有互相发现,所以搭建 redis 集群我们第一步要做的就是让集群内的节点互相发现.</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh login 6380</span></span><br><span class=\"line\">10.0.0.51:6380&gt; CLUSTER NODES</span><br><span class=\"line\">8e94563f580c0cf12a14a0b04dce3aac36332545 :6380@16380 myself,master - 0 0 0 connected</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># sh redis_shell.sh login 6380</span></span><br><span class=\"line\">10.0.0.52:6380&gt; CLUSTER NODES</span><br><span class=\"line\">255c069d63375b3cb537006584c7a02d64b1162e :6380@16380 myself,master - 0 0 0 connected</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># sh redis_shell.sh login 6380</span></span><br><span class=\"line\">10.0.0.53:6380&gt; CLUSTER NODES</span><br><span class=\"line\">5c49f33f4fa7debeb8665e345adf47c16c079c07 :6380@16380 myself,master - 0 0 0 connected</span><br><span class=\"line\"></span><br><span class=\"line\">//在执行节点发现命令之前我们先查看一下集群的数据目录会发现有生成集群的配置文件</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># tree /data/redis_cluster/redis_638*</span></span><br><span class=\"line\">/data/redis_cluster/redis_6380</span><br><span class=\"line\">└── nodes_6380.conf</span><br><span class=\"line\">/data/redis_cluster/redis_6381</span><br><span class=\"line\">└── nodes_6381.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//查看后发现只有自己的节点内容,等节点全部发现后会把所发现的节点 ID 写入这个文件</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># cat //data/redis_cluster/redis_6380/nodes_6380.conf </span></span><br><span class=\"line\">8e94563f580c0cf12a14a0b04dce3aac36332545 :0@0 myself,master - 0 0 0 connected</span><br><span class=\"line\">vars currentEpoch 0 lastVoteEpoch 0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh login 6380</span></span><br><span class=\"line\">10.0.0.51:6380&gt; CLUSTER NODES</span><br><span class=\"line\">8e94563f580c0cf12a14a0b04dce3aac36332545 :6380@16380 myself,master - 0 0 0 connected</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>集群模式的 Redis 除了原有的配置文件之外又加了一份集群配置文件.</li>\n<li>当集群内节点信息发生变化,如添加节点,节点下线,故障转移等.</li>\n<li>节点会自动保存集群状态到配置文件.</li>\n<li>需要注意的是,Redis 自动维护集群配置文件,不需要手动修改,防止节点重启时产生错乱.</li>\n</ul>\n<p><img src=\"/images/img-105.png\" alt=\"集群配置文件\"></p>\n<h2 id=\"集群内节点的互相发现\"><a href=\"#集群内节点的互相发现\" class=\"headerlink\" title=\"集群内节点的互相发现\"></a>集群内节点的互相发现</h2><h3 id=\"遵循redis集群原则：\"><a href=\"#遵循redis集群原则：\" class=\"headerlink\" title=\"遵循redis集群原则：\"></a>遵循redis集群原则：</h3><ol>\n<li>集群内消息传递是同步的</li>\n<li>集群内的所有已经发现的节点配置文件是自动更新的</li>\n</ol>\n<p>根据如上原则，可知。只需在任意集群内单节点执行发现操作，可将节点信息同步至集群内所有节点的集群配置文件中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">任意单节点执行：</span><br><span class=\"line\">redis-cli -h db01 -p 6380 cluster meet 10.0.0.51 6381</span><br><span class=\"line\">redis-cli -h db01 -p 6380 cluster meet 10.0.0.52 6380</span><br><span class=\"line\">redis-cli -h db01 -p 6380 cluster meet 10.0.0.52 6381</span><br><span class=\"line\">redis-cli -h db01 -p 6380 cluster meet 10.0.0.53 6380</span><br><span class=\"line\">redis-cli -h db01 -p 6380 cluster meet 10.0.0.53 6381</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查：\"><a href=\"#检查：\" class=\"headerlink\" title=\"检查：\"></a>检查：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db01 -p 6380 CLUSTER NODES</span></span><br><span class=\"line\">9f7a4d2aef1a9538c49113419adf554548d38d95 10.0.0.53:6381@16381 master - 0 1589269179222 3 connected</span><br><span class=\"line\">5c49f33f4fa7debeb8665e345adf47c16c079c07 10.0.0.53:6380@16380 master - 0 1589269178138 1 connected</span><br><span class=\"line\">ef6a5f1343ed4bfbda5cd21ee68d7e4d98201d97 10.0.0.52:6381@16381 master - 0 1589269179000 0 connected</span><br><span class=\"line\">3af4c1f67e95906cf7863bfcc998540dbf9813b6 10.0.0.51:6381@16381 master - 0 1589269180228 5 connected</span><br><span class=\"line\">255c069d63375b3cb537006584c7a02d64b1162e 10.0.0.52:6380@16380 master - 0 1589269176000 4 connected</span><br><span class=\"line\">8e94563f580c0cf12a14a0b04dce3aac36332545 10.0.0.51:6380@16380 myself,master - 0 1589269178000 2 connected</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 -p 6380 CLUSTER NODES</span></span><br><span class=\"line\">8e94563f580c0cf12a14a0b04dce3aac36332545 10.0.0.51:6380@16380 master - 0 1589269185661 2 connected</span><br><span class=\"line\">9f7a4d2aef1a9538c49113419adf554548d38d95 10.0.0.53:6381@16381 master - 0 1589269187858 3 connected</span><br><span class=\"line\">5c49f33f4fa7debeb8665e345adf47c16c079c07 10.0.0.53:6380@16380 master - 0 1589269186000 1 connected</span><br><span class=\"line\">ef6a5f1343ed4bfbda5cd21ee68d7e4d98201d97 10.0.0.52:6381@16381 master - 0 1589269187000 0 connected</span><br><span class=\"line\">3af4c1f67e95906cf7863bfcc998540dbf9813b6 10.0.0.51:6381@16381 master - 0 1589269187000 5 connected</span><br><span class=\"line\">255c069d63375b3cb537006584c7a02d64b1162e 10.0.0.52:6380@16380 myself,master - 0 1589269183000 4 connected</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 -p 6380 CLUSTER NODES</span></span><br><span class=\"line\">8e94563f580c0cf12a14a0b04dce3aac36332545 10.0.0.51:6380@16380 master - 0 1589269189463 2 connected</span><br><span class=\"line\">255c069d63375b3cb537006584c7a02d64b1162e 10.0.0.52:6380@16380 master - 0 1589269187314 4 connected</span><br><span class=\"line\">5c49f33f4fa7debeb8665e345adf47c16c079c07 10.0.0.53:6380@16380 myself,master - 0 1589269188000 1 connected</span><br><span class=\"line\">9f7a4d2aef1a9538c49113419adf554548d38d95 10.0.0.53:6381@16381 master - 0 1589269188321 3 connected</span><br><span class=\"line\">3af4c1f67e95906cf7863bfcc998540dbf9813b6 10.0.0.51:6381@16381 master - 0 1589269187000 5 connected</span><br><span class=\"line\">ef6a5f1343ed4bfbda5cd21ee68d7e4d98201d97 10.0.0.52:6381@16381 master - 0 1589269190646 0 connected</span><br><span class=\"line\"></span><br><span class=\"line\">//节点互相发现已完成</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis-Cluster-通讯流程\"><a href=\"#Redis-Cluster-通讯流程\" class=\"headerlink\" title=\"Redis Cluster 通讯流程\"></a>Redis Cluster 通讯流程</h2><p>在分布式存储中需要提供维护节点元数据信息的机制，所谓元数据是指：节点负责哪些数据，是否出现故障灯状态信息，<code>redis</code> 集群采用 <code>Gossip</code>(流言)协议，<code>Gossip</code> 协议工作原理就是节点彼此不断交换信息，一段时间后所有的节点都会知道集群完整信息，这种方式类似流言传播。</p>\n<h3 id=\"通信过程：\"><a href=\"#通信过程：\" class=\"headerlink\" title=\"通信过程：\"></a>通信过程：</h3><ul>\n<li>1)集群中的每一个节点都会单独开辟一个 <code>Tcp</code> 通道，用于节点之间彼此通信， 通信端口在基础端口上家 <code>10000</code>.</li>\n<li>2)每个节点在固定周期内通过特定规则选择结构节点发送 <code>ping</code> 消息</li>\n<li>3)接收到 <code>ping</code> 消息的节点用 <code>pong</code> 消息作为响应。集群中每个节点通过一定规则挑选要通信的节点，每个节点可能知道全部节点，也可能仅知道部分节点，只要这些节点彼此可以正常通信，最终他们会打成一致的状态，当节点出现故障，新节点加入，主从角色变化等，它能够给不断的 <code>ping/pong</code> 消息，从而达到同步目的。</li>\n</ul>\n<h3 id=\"通讯消息类型：\"><a href=\"#通讯消息类型：\" class=\"headerlink\" title=\"通讯消息类型：\"></a>通讯消息类型：</h3><h3 id=\"Gossip\"><a href=\"#Gossip\" class=\"headerlink\" title=\"Gossip\"></a>Gossip</h3><p><code>Gossip</code> 协议职责就是信息交换，信息交换的载体就是节点间彼此发送 <code>Gossip</code> 消息。<br>常见 <code>Gossip</code> 消息分为：<code>ping、 pong、 meet、 fail</code> 等</p>\n<ul>\n<li><p>meet<br><code>meet</code> 消息：用于通知新节点加入，消息发送者通知接受者加入到当前集群，<code>meet</code>消息通信正常完成后，接收节点会加入到集群中并进行 <code>ping、 pong</code> 消息交换</p>\n</li>\n<li><p>ping<br><code>ping</code>消息：集群内交换最频繁的消息，集群内每个节点每秒想多个其他节点发送 <code>ping</code> 消息，用于检测节点是否<br>在线和交换彼此信息。</p>\n</li>\n<li><p>pong<br><code>pong</code> 消息：当接收到 <code>ping，meet</code> 消息时，作为相应消息回复给发送方确认消息正常通信，节点也可以向集群内<br>广播自身的 <code>pong</code> 消息来通知整个集群对自身状态进行更新。</p>\n</li>\n<li><p>fail<br><code>fail</code> 消息：当节点判定集群内另一个节点下线时，回向集群内广播一个 <code>fail</code> 消息，其他节点收到 <code>fail</code> 消息之<br>后把对应节点更新为下线状态。</p>\n</li>\n</ul>\n<h3 id=\"通讯示意图：\"><a href=\"#通讯示意图：\" class=\"headerlink\" title=\"通讯示意图：\"></a>通讯示意图：</h3><p><img src=\"/images/img-106.png\" alt=\"通讯示意图\"></p>\n<h2 id=\"分配槽位\"><a href=\"#分配槽位\" class=\"headerlink\" title=\"分配槽位\"></a>分配槽位</h2><h3 id=\"要点：\"><a href=\"#要点：\" class=\"headerlink\" title=\"要点：\"></a>要点：</h3><ul>\n<li>redis集群一共有16384个槽,所有的槽都必须分配完毕，</li>\n<li>有一个槽没分配整个集群都不可用,每个节点上槽位的顺序无所谓，重点是槽位的个数,</li>\n<li>hash分片算法足够随机，足够平均</li>\n<li>不要去手动修改集群的配置文件</li>\n</ul>\n<h3 id=\"为什么是16384-2-14-个槽位？\"><a href=\"#为什么是16384-2-14-个槽位？\" class=\"headerlink\" title=\"为什么是16384(2^14)个槽位？\"></a>为什么是16384(2^14)个槽位？</h3><p>参见：<a href=\"https://www.php.cn/redis/423851.html\">https://www.php.cn/redis/423851.html</a></p>\n<h3 id=\"为什么要分配槽位\"><a href=\"#为什么要分配槽位\" class=\"headerlink\" title=\"为什么要分配槽位\"></a>为什么要分配槽位</h3><ul>\n<li>虽然节点之间已经互相发现了,但是此时集群还是不可用的状态,因为并没有给节点分配槽位,而且必须是所有的槽位都分配完毕后整个集群才是可用的状态.</li>\n<li>反之,也就是说只要有一个槽位没有分配,那么整个集群就是不可用的.</li>\n</ul>\n<h4 id=\"测试命令：\"><a href=\"#测试命令：\" class=\"headerlink\" title=\"测试命令：\"></a>测试命令：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh login 6380 </span></span><br><span class=\"line\">10.0.0.51:6380&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">(error) CLUSTERDOWN Hash slot not served</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看状态：\"><a href=\"#查看状态：\" class=\"headerlink\" title=\"查看状态：\"></a>查看状态：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//CLUSTER INFO查看</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh csstatus 6380</span></span><br><span class=\"line\">cluster_state:fail</span><br><span class=\"line\">cluster_slots_assigned:0</span><br><span class=\"line\">cluster_known_nodes:6</span><br></pre></td></tr></table></figure>\n<p>根据架构图，6个redis节点，其中3个是主节点「db01:6380 | db02:6380 | bd03:6380」，另外三个是从节点「db01:6381 | db02:6381 | bd03:6381」</p>\n<h3 id=\"槽位分配方法：\"><a href=\"#槽位分配方法：\" class=\"headerlink\" title=\"槽位分配方法：\"></a>槽位分配方法：</h3><p>分配槽位需要在每个主节点上来配置,此时有 2 种方法执行:</p>\n<ol>\n<li>分别登录到每个主节点的客户端来执行命令</li>\n<li>在其中一台机器上用 redis 客户端远程登录到其他机器的主节点上执行命令</li>\n</ol>\n<h3 id=\"槽位规划和分配-有的版本有坑-会报错-需要注意-：\"><a href=\"#槽位规划和分配-有的版本有坑-会报错-需要注意-：\" class=\"headerlink\" title=\"槽位规划和分配(有的版本有坑,会报错,需要注意)：\"></a>槽位规划和分配(有的版本有坑,会报错,需要注意)：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db01 -p 6380 cluster addslots &#123;0..5461&#125;</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 -p 6380 cluster addslots &#123;5462..10922&#125;</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 -p 6380 cluster addslots &#123;10923..16383&#125;</span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查槽位和集群状态\"><a href=\"#检查槽位和集群状态\" class=\"headerlink\" title=\"检查槽位和集群状态\"></a>检查槽位和集群状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//执行脚本查看或者</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh csstatus 6380</span></span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\"></span><br><span class=\"line\">Slots state:</span><br><span class=\"line\">10.0.0.53:6381@16381 connected</span><br><span class=\"line\">10.0.0.53:6380@16380 10923-16383</span><br><span class=\"line\">10.0.0.52:6381@16381 connected</span><br><span class=\"line\">10.0.0.51:6381@16381 connected</span><br><span class=\"line\">10.0.0.52:6380@16380 5462-10922</span><br><span class=\"line\">10.0.0.51:6380@16380 0-5461</span><br><span class=\"line\"></span><br><span class=\"line\">手动查看：</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh login 6380</span></span><br><span class=\"line\">10.0.0.51:6380&gt; CLUSTER NODES</span><br><span class=\"line\">9f7a4d2aef1a9538c49113419adf554548d38d95 10.0.0.53:6381@16381 master - 0 1589273873963 3 connected</span><br><span class=\"line\">5c49f33f4fa7debeb8665e345adf47c16c079c07 10.0.0.53:6380@16380 master - 0 1589273872940 1 connected 10923-16383</span><br><span class=\"line\">ef6a5f1343ed4bfbda5cd21ee68d7e4d98201d97 10.0.0.52:6381@16381 master - 0 1589273875978 0 connected</span><br><span class=\"line\">3af4c1f67e95906cf7863bfcc998540dbf9813b6 10.0.0.51:6381@16381 master - 0 1589273872000 5 connected</span><br><span class=\"line\">255c069d63375b3cb537006584c7a02d64b1162e 10.0.0.52:6380@16380 master - 0 1589273875000 4 connected 5462-10922</span><br><span class=\"line\">8e94563f580c0cf12a14a0b04dce3aac36332545 10.0.0.51:6380@16380 myself,master - 0 1589273874000 2 connected 0-5461</span><br><span class=\"line\">10.0.0.51:6380&gt; CLUSTER INFO</span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_slots_ok:16384</span><br><span class=\"line\">cluster_slots_pfail:0</span><br><span class=\"line\">cluster_slots_fail:0</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\">cluster_size:3</span><br><span class=\"line\">cluster_current_epoch:5</span><br><span class=\"line\">cluster_my_epoch:2</span><br><span class=\"line\">cluster_stats_messages_ping_sent:4593</span><br><span class=\"line\">cluster_stats_messages_pong_sent:4694</span><br><span class=\"line\">cluster_stats_messages_meet_sent:7</span><br><span class=\"line\">cluster_stats_messages_sent:9294</span><br><span class=\"line\">cluster_stats_messages_ping_received:4694</span><br><span class=\"line\">cluster_stats_messages_pong_received:4600</span><br><span class=\"line\">cluster_stats_messages_received:9294</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis-Cluster-ASK路由介绍\"><a href=\"#Redis-Cluster-ASK路由介绍\" class=\"headerlink\" title=\"Redis Cluster ASK路由介绍\"></a>Redis Cluster ASK路由介绍</h2><ul>\n<li>在集群模式下,Redis接受任何键相关命令时首先会计算键对应的槽,再根据槽找出所对应的节点 如果节点是自身,则处理键命令;</li>\n<li>否则回复MOVED重定向错误,通知客户端请求正确的节点,这个过程称为Mover重定向.</li>\n</ul>\n<p><img src=\"/images/img-107.png\" alt=\"Redis Cluster ASK路由\"></p>\n<p>知道了ask路由后,我们使用-c选项批量插入一些数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@redis01 ~]<span class=\"comment\"># cat input_key.sh </span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(<span class=\"built_in\">seq</span> 1 1000)</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    redis-cli -c -h 10.0.0.51 -p 6380 <span class=\"built_in\">set</span> k_<span class=\"variable\">$&#123;i&#125;</span> v_<span class=\"variable\">$&#123;i&#125;</span> &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;set k_<span class=\"variable\">$&#123;i&#125;</span> is ok&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>写入后我们同样使用-c选项来读取刚才插入的键值,然后查看下redis集群中1000个key数据分布情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">10.0.0.51:6380&gt; </span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h 10.0.0.51 -p 6380 -c</span></span><br><span class=\"line\">db01:6380&gt; DBSIZE</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 339</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># redis-cli -h 10.0.0.52 -p 6380 </span></span><br><span class=\"line\">10.0.0.52:6380&gt; DBSIZE</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 326</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db03 ~]<span class=\"comment\"># redis-cli -h 10.0.0.53 -p 6380 </span></span><br><span class=\"line\">10.0.0.53:6380&gt; DBSIZE</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 335</span><br></pre></td></tr></table></figure>\n<p>由此可以看出-c选项就会帮我们执行了要去跳转到另一台机器执行</p>\n<h2 id=\"高可用构建：\"><a href=\"#高可用构建：\" class=\"headerlink\" title=\"高可用构建：\"></a>高可用构建：</h2><p>虽然这时候集群是可用的了,但是整个集群只要有一台机器坏掉了,那么整个集群都是不可用的.所以这时候需要用到其他三个节点分别作为现在三个主节点的从节点,以应对集群主节点故障时可以进行自动故障转移以保证集群持续可用.<br>注意:</p>\n<ul>\n<li>1.不要让复制节点复制本机器的主节点, 因为如果那样的话机器挂了集群还是不可用状态, 所以复制节点要复制其他服务器的主节点.</li>\n<li>2.使用 redis-trid 工具自动分配的时候会出现复制节点和主节点在同一台机器上的情况,需要注意</li>\n</ul>\n<p>主从高可用关系如图：</p>\n<p><img src=\"/images/img-108.png\" alt=\"架构图\"></p>\n<p><strong>思路：</strong>这一次我们采用在一台机器上使用 redis 客户端远程操作集群其他节点<br><strong>注意:</strong></p>\n<ol>\n<li>需要执行命令的是每个服务器的从节点</li>\n<li>注意主从的 ID 不要搞混了.</li>\n</ol>\n<h3 id=\"过滤出所有主节点的ID号\"><a href=\"#过滤出所有主节点的ID号\" class=\"headerlink\" title=\"过滤出所有主节点的ID号\"></a>过滤出所有主节点的ID号</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -c -h db01 -p 6381 cluster nodes|grep -v &quot;6381&quot;|awk &#x27;&#123;print $1,$2&#125;&#x27;</span></span><br><span class=\"line\">5c49f33f4fa7debeb8665e345adf47c16c079c07 10.0.0.53:6380@16380</span><br><span class=\"line\">8e94563f580c0cf12a14a0b04dce3aac36332545 10.0.0.51:6380@16380</span><br><span class=\"line\">255c069d63375b3cb537006584c7a02d64b1162e 10.0.0.52:6380@16380</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"需要在所有从节点-6381-执行-构建和主节点的主从关系\"><a href=\"#需要在所有从节点-6381-执行-构建和主节点的主从关系\" class=\"headerlink\" title=\"需要在所有从节点(6381)执行,构建和主节点的主从关系\"></a>需要在所有从节点(6381)执行,构建和主节点的主从关系</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//如图db01:6381 ----&gt;db02:6380</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db01 -p 6381 CLUSTER REPLICATE 255c069d63375b3cb537006584c7a02d64b1162e</span></span><br><span class=\"line\"></span><br><span class=\"line\">//如图db02:6381 ----&gt;db03:6380</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db02 -p 6381 CLUSTER REPLICATE 5c49f33f4fa7debeb8665e345adf47c16c079c07</span></span><br><span class=\"line\"></span><br><span class=\"line\">//如图db03:6381 ----&gt;db01:6380</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli -h db03 -p 6381 CLUSTER REPLICATE 8e94563f580c0cf12a14a0b04dce3aac36332545</span></span><br></pre></td></tr></table></figure>\n<p>结果：<br><img src=\"/images/img-109.png\" alt=\"m-s\"></p>\n<h2 id=\"模拟故障转移\"><a href=\"#模拟故障转移\" class=\"headerlink\" title=\"模拟故障转移\"></a>模拟故障转移</h2><p>至此,我们已经手动的把一个 redis 高可用的集群部署完毕了, 但是还没有模拟过故障<br>这里我们就模拟故障,停掉期中一台主机的 redis 节点,然后查看一下集群的变化我们使用暴力的 kill -9 杀掉 db02 上的 redis 集群节点,然后观察节点状态。<br>根据规划图，应该是 db01 上的 6381 从节点升级为主节点：<br><img src=\"/images/img-110.png\" alt=\"kill\"><br><strong>检查集群状态：</strong><br><img src=\"/images/img-111.png\" alt=\"status\"></p>\n<h2 id=\"故障节点修复上线\"><a href=\"#故障节点修复上线\" class=\"headerlink\" title=\"故障节点修复上线\"></a>故障节点修复上线</h2><p>观察db01:6381、db02:6380日志</p>\n<h3 id=\"修复db02-6380\"><a href=\"#修复db02-6380\" class=\"headerlink\" title=\"修复db02:6380\"></a>修复db02:6380</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># sh redis_shell.sh start 6380</span></span><br><span class=\"line\">root       890     1  0 5月12 ?       00:00:29 /application/redis_cluster/redis/src/redis-server 10.0.0.52:6379</span><br><span class=\"line\">root       975     1  0 5月12 ?       00:00:26 redis-server 10.0.0.52:6381 [cluster]</span><br><span class=\"line\">root      2460  2437  0 02:13 pts/0    00:00:00 sh redis_shell.sh <span class=\"built_in\">tail</span> 6380</span><br><span class=\"line\">root      2467  2460  0 02:13 pts/0    00:00:00 <span class=\"built_in\">tail</span> -f /application/redis_cluster/redis_6380/logs/redis_6380.<span class=\"built_in\">log</span></span><br><span class=\"line\">root      2468  2068  0 02:14 pts/1    00:00:00 sh redis_shell.sh start 6380</span><br><span class=\"line\">root      2476     1  0 02:14 ?        00:00:00 redis-server 10.0.0.52:6380 [cluster]</span><br><span class=\"line\">root      2478  2468  0 02:14 pts/1    00:00:00 grep redis</span><br></pre></td></tr></table></figure>\n<p>db01日志：<br><img src=\"/images/img-112.png\" alt=\"db01log\"></p>\n<p>db02日志：<br><img src=\"/images/img-113.png\" alt=\"db02log\"><br>此时，db02:6380成为了db01:6381的从节点。并进行数据同步。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh csstatus 6380</span></span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\"></span><br><span class=\"line\">Slots state:</span><br><span class=\"line\">10.0.0.53:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.53:6380@16380 master 10923-16383</span><br><span class=\"line\">10.0.0.52:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.51:6381@16381 master 5462-10922</span><br><span class=\"line\">10.0.0.52:6380@16380 slave connected &lt;===</span><br><span class=\"line\">10.0.0.51:6380@16380 myself,master 0-5461</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据同步完成后我们需要将db02-6380提升为主库\"><a href=\"#数据同步完成后我们需要将db02-6380提升为主库\" class=\"headerlink\" title=\"数据同步完成后我们需要将db02:6380提升为主库\"></a>数据同步完成后我们需要将db02:6380提升为主库</h3><ul>\n<li>在db02:6380中执行命令<code>CLUSTER FAILOVER</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh csstatus 6380</span></span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\"></span><br><span class=\"line\">Slots state:</span><br><span class=\"line\">10.0.0.53:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.53:6380@16380 master 10923-16383</span><br><span class=\"line\">10.0.0.52:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.51:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.52:6380@16380 master 5462-10922. &lt;===</span><br><span class=\"line\">10.0.0.51:6380@16380 myself,master 0-5461</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"利用工具部署集群：\"><a href=\"#利用工具部署集群：\" class=\"headerlink\" title=\"利用工具部署集群：\"></a>利用工具部署集群：</h2><p><strong>简介：</strong>手动搭建集群便于理解集群创建的流程和细节，不过手动搭建集群需要很多步骤，当集群节点众多<br>时，必然会加大搭建集群的复杂度和运维成本，因此官方提供了 redis-trib.rb 的工具方便我们快速搭<br>建集群。</p>\n<p>redis-trib.rb 是采用 Ruby 实现的 redis 集群管理工具，内部通过 Cluster 相关命令帮我们简化集群<br>创建、检查、槽迁移和均衡等常见运维操作，使用前要安装 ruby 依赖环境。</p>\n<h3 id=\"环境准备：\"><a href=\"#环境准备：\" class=\"headerlink\" title=\"环境准备：\"></a>环境准备：</h3><h4 id=\"EPEL源安装ruby管理包支持\"><a href=\"#EPEL源安装ruby管理包支持\" class=\"headerlink\" title=\"EPEL源安装ruby管理包支持\"></a>EPEL源安装ruby管理包支持</h4><p><code>yum install ruby rubygems -y</code></p>\n<h4 id=\"配置gem源，并安装驱动\"><a href=\"#配置gem源，并安装驱动\" class=\"headerlink\" title=\"配置gem源，并安装驱动\"></a>配置gem源，并安装驱动</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//gem安装需要repo源</span><br><span class=\"line\">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\">更新ruby的“yum”</span><br><span class=\"line\">gem sources -l</span><br><span class=\"line\">gem sources -a http://mirrors.aliyun.com/rubygems/ </span><br><span class=\"line\">gem sources  --remove https://rubygems.org/</span><br><span class=\"line\">gem update -system </span><br><span class=\"line\">gem install redis -v 3.3.5</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"环境初始化\"><a href=\"#环境初始化\" class=\"headerlink\" title=\"环境初始化\"></a>环境初始化</h4><p>停掉所有的节点，然后清空数据，恢复成一个全新的集群，所有机器执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">所有节点执行：</span><br><span class=\"line\">pkill redis</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /data/redis_cluster/redis_&#123;6380,6381&#125;/*</span><br></pre></td></tr></table></figure>\n<p>全部清空之后启动所有的节点，所有机器执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh redis_shell.sh start 6380</span><br><span class=\"line\">sh redis_shell.sh start 6381</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh csstatus 6380</span></span><br><span class=\"line\">cluster_state:fail</span><br><span class=\"line\">cluster_slots_assigned:0</span><br><span class=\"line\">cluster_known_nodes:1</span><br><span class=\"line\"></span><br><span class=\"line\">Slots state:</span><br><span class=\"line\">10.0.0.51:6380@16380 myself,master connected</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh csstatus 6381</span></span><br><span class=\"line\">cluster_state:fail</span><br><span class=\"line\">cluster_slots_assigned:0</span><br><span class=\"line\">cluster_known_nodes:1</span><br><span class=\"line\"></span><br><span class=\"line\">Slots state:</span><br><span class=\"line\">10.0.0.51:6381@16381 myself,master connected</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"db01-执行创建集群命令\"><a href=\"#db01-执行创建集群命令\" class=\"headerlink\" title=\"db01 执行创建集群命令\"></a>db01 执行创建集群命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">利用ruby脚本 创建 副本为1</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># which redis-trib.rb</span></span><br><span class=\"line\">/application/redis_cluster/redis/src/redis-trib.rb</span><br><span class=\"line\"></span><br><span class=\"line\">旧版本调用redis-trib.rb脚本：</span><br><span class=\"line\">redis-trib.rb create --replicas 1 10.0.0.51:6380 10.0.0.52:6380 10.0.0.53:6380 \\</span><br><span class=\"line\">10.0.0.53:6381 10.0.0.51:6381 10.0.0.52:6381</span><br><span class=\"line\">... 敲<span class=\"built_in\">yes</span></span><br><span class=\"line\">注：0，1，2说主节点，3，4，5是对应的从节点。主从节点不能在同一台主机.</span><br><span class=\"line\">-replicas 1 表示每个主库拥有一个从节点。</span><br><span class=\"line\"></span><br><span class=\"line\">新版本redis-cli --cluster：</span><br><span class=\"line\">redis-cli --cluster create 10.0.0.51:6380 10.0.0.52:6380 10.0.0.53:6380 10.0.0.53:6381 10.0.0.51:6381 10.0.0.52:6381 --cluster-replicas 1</span><br><span class=\"line\"></span><br><span class=\"line\">M: f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 10.0.0.51:6380</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">M: e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a 10.0.0.52:6380</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">M: e26fe5d0fc1276abca61ad2998756dd90ede9fda 10.0.0.53:6380</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">S: 6d1572a7349c21e8f70b34ee0b13f536acaa680b 10.0.0.53:6381</span><br><span class=\"line\">   replicates e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a</span><br><span class=\"line\">S: 84a0719464b3cae31e9c85e25a02c8748a169c44 10.0.0.51:6381</span><br><span class=\"line\">   replicates e26fe5d0fc1276abca61ad2998756dd90ede9fda</span><br><span class=\"line\">S: 804af32bdeeeaf89303406b198346bc539ef0d48 10.0.0.52:6381</span><br><span class=\"line\">   replicates f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d</span><br><span class=\"line\"></span><br><span class=\"line\">理想对应关系：</span><br><span class=\"line\">10.0.0.51:6381 --&gt; 10.0.0.52:6380</span><br><span class=\"line\">10.0.0.52:6381 --&gt; 10.0.0.53:6380</span><br><span class=\"line\">10.0.0.53:6381 --&gt; 10.0.0.51:6380</span><br><span class=\"line\"></span><br><span class=\"line\">此时对应关系：</span><br><span class=\"line\">10.0.0.53:6381 --&gt; 10.0.0.52:6380</span><br><span class=\"line\">10.0.0.52:6381 --&gt; 10.0.0.51:6380</span><br><span class=\"line\">10.0.0.51:6381 --&gt; 10.0.0.53:6380</span><br><span class=\"line\"></span><br><span class=\"line\">//搭建好后，可以根据需要进行复制关系的调整。调整方法，登陆各个从库手动执行</span><br><span class=\"line\">CLUSTER REPLICATE master_id</span><br></pre></td></tr></table></figure>\n<h3 id=\"集群检查：\"><a href=\"#集群检查：\" class=\"headerlink\" title=\"集群检查：\"></a>集群检查：</h3><p>检查集群状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-trib.rb check 10.0.0.51:6380  //旧版本</span><br><span class=\"line\">redis-cli --cluster check 10.0.0.51:6380  //新版本</span><br></pre></td></tr></table></figure>\n<p>检查槽位误差：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-trib.rb rebalance 10.0.0.51:6380 //旧版本</span><br><span class=\"line\">redis-cli --cluster rebalance 10.0.0.51:6380 //新版本</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 10.0.0.51:6380)</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">*** No rebalancing needed! All nodes are within the 2.00% threshold.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工具构建集群要点\"><a href=\"#工具构建集群要点\" class=\"headerlink\" title=\"工具构建集群要点\"></a>工具构建集群要点</h3><ul>\n<li>正确安装gem和ruby环境</li>\n<li>所有节点必须数据为空，且没有分配任何槽位才能用脚本创建集群</li>\n<li>所有节点必须全部在线且能连接上才能用脚本创建集群</li>\n</ul>\n<h2 id=\"集群扩容\"><a href=\"#集群扩容\" class=\"headerlink\" title=\"集群扩容\"></a>集群扩容</h2><p>逻辑架构：<br><img src=\"/images/img-114.png\" alt=\"扩容\"><br>槽位变化：<br><img src=\"/images/img-115.png\" alt=\"槽位\"></p>\n<p>步骤：<br>Redis 集群的扩容操作可分为以下几个步骤</p>\n<ul>\n<li>1)准备新节点</li>\n<li>2)加入集群</li>\n<li>3)迁移槽和数据</li>\n</ul>\n<h3 id=\"环境准备：-1\"><a href=\"#环境准备：-1\" class=\"headerlink\" title=\"环境准备：\"></a>环境准备：</h3><p>这里我在db01上开启两个新的实例替代db04上的新节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">10.0.0.51:6390 new master</span><br><span class=\"line\">10.0.0.51:6391 new slave</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /application/redis_cluster/redis_&#123;6390,6391&#125;/&#123;conf,logs,pid&#125;</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/redis_cluster/redis_&#123;6390,6391&#125;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /application/redis_cluster/</span><br><span class=\"line\"><span class=\"built_in\">cp</span> redis_6380/conf/redis_6380.conf redis_6390/conf/redis_6390.conf</span><br><span class=\"line\"><span class=\"built_in\">cp</span> redis_6380/conf/redis_6380.conf redis_6391/conf/redis_6391.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s#6380#6390#g&#x27;</span> redis_6390/conf/redis_6390.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s#6380#6391#g&#x27;</span> redis_6391/conf/redis_6391.conf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动节点\"><a href=\"#启动节点\" class=\"headerlink\" title=\"启动节点\"></a>启动节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash redis_shell.sh start 6390</span><br><span class=\"line\">bash redis_shell.sh start 6391</span><br></pre></td></tr></table></figure>\n<h3 id=\"发现节点\"><a href=\"#发现节点\" class=\"headerlink\" title=\"发现节点\"></a>发现节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//手动:</span><br><span class=\"line\">redis-cli -c -h db01 -p 6380 cluster meet 10.0.0.51 6390</span><br><span class=\"line\">redis-cli -c -h db01 -p 6380 cluster meet 10.0.0.51 6391</span><br><span class=\"line\"></span><br><span class=\"line\">//工具</span><br><span class=\"line\">新版本：</span><br><span class=\"line\">redis-cli --cluster add-node 10.0.0.51:6390 10.0.0.51:6380</span><br><span class=\"line\">redis-cli --cluster add-node 10.0.0.51:6391 10.0.0.51:6380</span><br><span class=\"line\">                        新节点         集群内任意节点</span><br><span class=\"line\"></span><br><span class=\"line\">旧版本：</span><br><span class=\"line\">redis-trib.rb add-node 10.0.0.51:6390 10.0.0.51:6380</span><br><span class=\"line\">redis-trib.rb add-node 10.0.0.51:6391 10.0.0.51:6380</span><br><span class=\"line\">                        新节点         集群内任意节点</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发现完成后检查集群状态\"><a href=\"#发现完成后检查集群状态\" class=\"headerlink\" title=\"发现完成后检查集群状态\"></a>发现完成后检查集群状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh csstatus 6390</span></span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_known_nodes:8 //6==&gt;8个节点</span><br><span class=\"line\"></span><br><span class=\"line\">Slots state:</span><br><span class=\"line\">10.0.0.52:6380@16380 master 5461-10922</span><br><span class=\"line\">10.0.0.51:6391@16391 master connected</span><br><span class=\"line\">10.0.0.51:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.52:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.53:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.53:6380@16380 master 10923-16383</span><br><span class=\"line\">10.0.0.51:6380@16380 master 0-5460</span><br><span class=\"line\">10.0.0.51:6390@16390 myself,master connected</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行槽位迁移\"><a href=\"#执行槽位迁移\" class=\"headerlink\" title=\"执行槽位迁移\"></a>执行槽位迁移</h3><p>首先计算总共16384个槽位</p>\n<ul>\n<li>扩容前：16384/3=5461.33333333333333</li>\n<li>扩容后：16384/4=4096</li>\n</ul>\n<p>在 db01 上使用工具扩容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//旧版redis</span><br><span class=\"line\">连接集群内任意节点：redis-trib.rb reshard 10.0.0.51:6380</span><br><span class=\"line\"></span><br><span class=\"line\">//新版redis</span><br><span class=\"line\">连接集群内任意节点：redis-cli --cluster reshard 10.0.0.51:6380</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli --cluster reshard 10.0.0.51:6380</span></span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 10.0.0.51:6380)</span><br><span class=\"line\">M: f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 10.0.0.51:6380</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 3aea2183787f583888b581946cbeb5fb9135bcdc 10.0.0.51:6391</span><br><span class=\"line\">   slots: (0 slots) master</span><br><span class=\"line\">M: 2611fddb9194b38e45e301b7ae835cf09c6cd4c6 10.0.0.51:6390</span><br><span class=\"line\">   slots: (0 slots) master</span><br><span class=\"line\">M: e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a 10.0.0.52:6380</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 804af32bdeeeaf89303406b198346bc539ef0d48 10.0.0.52:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d</span><br><span class=\"line\">M: e26fe5d0fc1276abca61ad2998756dd90ede9fda 10.0.0.53:6380</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 84a0719464b3cae31e9c85e25a02c8748a169c44 10.0.0.51:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates e26fe5d0fc1276abca61ad2998756dd90ede9fda</span><br><span class=\"line\">S: 6d1572a7349c21e8f70b34ee0b13f536acaa680b 10.0.0.53:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">//打印出集群每个节点信息后,reshard 命令需要确认迁移的槽数量,这里我们输入 4096 个:</span><br><span class=\"line\">How many slots <span class=\"keyword\">do</span> you want to move (from 1 to 16384)? 4096 </span><br><span class=\"line\"></span><br><span class=\"line\">//输入 new_master 的节点 ID 作为目标节点,也就是要扩容的节点,目标节点只能指定一个</span><br><span class=\"line\">What is the receiving node ID? 2611fddb9194b38e45e301b7ae835cf09c6cd4c6 </span><br><span class=\"line\"></span><br><span class=\"line\">//之后输入源节点的 ID,这里分别输入每个主节点的 ID 最后输入 <span class=\"keyword\">done</span>,或者直接输入 all</span><br><span class=\"line\">Please enter all the <span class=\"built_in\">source</span> node IDs.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;all&#x27;</span> to use all the nodes as <span class=\"built_in\">source</span> nodes <span class=\"keyword\">for</span> the <span class=\"built_in\">hash</span> slots. //从所有节点进行分拆</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;done&#x27;</span> once you entered all the <span class=\"built_in\">source</span> nodes IDs. //选择需要分拆的节点，结束时输入<span class=\"keyword\">done</span></span><br><span class=\"line\">Source node <span class=\"comment\">#1: all </span></span><br><span class=\"line\"></span><br><span class=\"line\">Ready to move 4096 slots.</span><br><span class=\"line\">  Source nodes:</span><br><span class=\"line\">    M: f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 10.0.0.51:6380</span><br><span class=\"line\">       slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">       1 additional replica(s)</span><br><span class=\"line\">    M: 3aea2183787f583888b581946cbeb5fb9135bcdc 10.0.0.51:6391</span><br><span class=\"line\">       slots: (0 slots) master</span><br><span class=\"line\">    M: e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a 10.0.0.52:6380</span><br><span class=\"line\">       slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">       1 additional replica(s)</span><br><span class=\"line\">    M: e26fe5d0fc1276abca61ad2998756dd90ede9fda 10.0.0.53:6380</span><br><span class=\"line\">       slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">       1 additional replica(s)</span><br><span class=\"line\">  Destination node:</span><br><span class=\"line\">    M: 2611fddb9194b38e45e301b7ae835cf09c6cd4c6 10.0.0.51:6390</span><br><span class=\"line\">       slots: (0 slots) master</span><br><span class=\"line\">  Resharding plan:</span><br><span class=\"line\">    Moving slot 5461 from e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a</span><br><span class=\"line\">    Moving slot 5462 from e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    Do you want to proceed with the proposed reshard plan (<span class=\"built_in\">yes</span>/no)? <span class=\"built_in\">yes</span></span><br><span class=\"line\">    .....</span><br><span class=\"line\">Moving slot 12286 from 10.0.0.53:6380 to 10.0.0.51:6390: </span><br><span class=\"line\">Moving slot 12287 from 10.0.0.53:6380 to 10.0.0.51:6390:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查槽位迁移结果\"><a href=\"#检查槽位迁移结果\" class=\"headerlink\" title=\"检查槽位迁移结果\"></a>检查槽位迁移结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//旧版本</span><br><span class=\"line\">redis-trib.rb rebalance 10.0.0.51:6380</span><br><span class=\"line\"></span><br><span class=\"line\">//新版本</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli --cluster rebalance 10.0.0.51:6380</span></span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 10.0.0.51:6380)</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">*** No rebalancing needed! All nodes are within the 2.00% threshold.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"根据扩容逻辑图，对新加入的节点做主从高可用\"><a href=\"#根据扩容逻辑图，对新加入的节点做主从高可用\" class=\"headerlink\" title=\"根据扩容逻辑图，对新加入的节点做主从高可用\"></a>根据扩容逻辑图，对新加入的节点做主从高可用</h3><p><img src=\"/images/img-114.png\" alt=\"扩容\"><br>理想状态：<br>db04:6381 —-&gt;db01:6380<br>db03:6381 —-&gt;db04:6380</p>\n<p>实际状态：<br>db01:6391 —-&gt;db01:6380<br>db03:6381 —-&gt;db01:6390</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//登陆db03:6381构建到db01:6390的主从</span><br><span class=\"line\">10.0.0.53:6381&gt; CLUSTER NODES</span><br><span class=\"line\">6d1572a7349c21e8f70b34ee0b13f536acaa680b 10.0.0.53:6381@16381 myself,slave f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 0 1589349091000 4 connected</span><br><span class=\"line\">f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 10.0.0.51:6380@16380 master - 0 1589349092000 1 connected 1365-5460</span><br><span class=\"line\">...</span><br><span class=\"line\">2611fddb9194b38e45e301b7ae835cf09c6cd4c6 10.0.0.51:6390@16390 master - 0 1589349095417 7 connected 0-1364 5461-6826 10923-12287</span><br><span class=\"line\"></span><br><span class=\"line\">10.0.0.53:6381&gt; CLUSTER REPLICATE 2611fddb9194b38e45e301b7ae835cf09c6cd4c6</span><br><span class=\"line\"></span><br><span class=\"line\">10.0.0.53:6381&gt; CLUSTER NODES</span><br><span class=\"line\">6d1572a7349c21e8f70b34ee0b13f536acaa680b 10.0.0.53:6381@16381 myself,slave 2611fddb9194b38e45e301b7ae835cf09c6cd4c6 0 1589349144000 4 connected</span><br><span class=\"line\">...</span><br><span class=\"line\">2611fddb9194b38e45e301b7ae835cf09c6cd4c6 10.0.0.51:6390@16390 master - 0 1589349141000 7 connected 0-1364 5461-6826 10923-12287</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">登陆db01:6391构建到db01:6380的主从</span><br><span class=\"line\">10.0.0.51:6391&gt; CLUSTER NODES</span><br><span class=\"line\">...</span><br><span class=\"line\">f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 10.0.0.51:6380@16380 master - 0 1589349368591 1 connected 1365-5460</span><br><span class=\"line\">...</span><br><span class=\"line\">3aea2183787f583888b581946cbeb5fb9135bcdc 10.0.0.51:6391@16391 myself,master - 0 1589349368000 0 connected</span><br><span class=\"line\"></span><br><span class=\"line\">10.0.0.51:6391&gt; CLUSTER NODES</span><br><span class=\"line\">...</span><br><span class=\"line\">f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 10.0.0.51:6380@16380 master - 0 1589349465615 1 connected 1365-5460</span><br><span class=\"line\">...</span><br><span class=\"line\">3aea2183787f583888b581946cbeb5fb9135bcdc 10.0.0.51:6391@16391 myself,slave f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 0 1589349458000 0 connected</span><br></pre></td></tr></table></figure>\n<h2 id=\"集群修复命令\"><a href=\"#集群修复命令\" class=\"headerlink\" title=\"集群修复命令\"></a>集群修复命令</h2><p><strong>目前fix命令能修复两种异常</strong></p>\n<ol>\n<li>节点中存在处于迁移中（importing或migrating状态）的slot。</li>\n<li>节点中存在未分配的slot。</li>\n</ol>\n<ul>\n<li>旧版本：redis-trib.rb fix 10.0.0.51:6380</li>\n<li>新版本：redis-cli –cluster fix 10.0.0.51 6380</li>\n</ul>\n<p>其它异常不能通过fix命令修复。</p>\n<h2 id=\"集群缩容\"><a href=\"#集群缩容\" class=\"headerlink\" title=\"集群缩容\"></a>集群缩容</h2><p><strong>流程说明:</strong><br>1).首先需要确定下线节点是否有负责的槽,如果是,需要把槽迁移到其他节点,保证节点下线后整个集群槽节点映射的完整性.<br>2).当下线节点不再负责槽或者本身是从节点时,就可以通知集群内其他节点忘记下线节点,当所有的节点忘记该节点后可以正常关闭.</p>\n<p><img src=\"/images/img-116.png\" alt=\"缩容\"><br><img src=\"/images/img-117.png\" alt=\"槽位\"></p>\n<p>这里我们准备将刚才新添加的节点下线,也就是 6390 和 6391</p>\n<ul>\n<li>收缩和扩容迁移的方向相反,6390 变为源节点,其他节点变为目标节点,源节点把自己负责的 4096 个槽均匀的迁移到其他节点上,.</li>\n<li>由于 redis-trib..rb reshard 命令只能有一个目标节点,因此需要执行 3 次 reshard 命令,分别迁移1365,1365,1366 个槽.</li>\n</ul>\n<h3 id=\"计算：\"><a href=\"#计算：\" class=\"headerlink\" title=\"计算：\"></a>计算：</h3><p>4096/3=1365…..<br>持有槽位数/剩余master数量=需归还每节点数量</p>\n<p>持有槽位数量查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli --cluster fix 10.0.0.51 6390</span></span><br><span class=\"line\">10.0.0.51:6390 (2611fddb...) -&gt; 0 keys | 4096 slots | 1 slaves. &lt;==获得槽位数</span><br><span class=\"line\">10.0.0.52:6380 (e6225763...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br><span class=\"line\">10.0.0.53:6380 (e26fe5d0...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br><span class=\"line\">10.0.0.51:6380 (f3ac33eb...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缩容-槽位迁移：\"><a href=\"#缩容-槽位迁移：\" class=\"headerlink\" title=\"缩容-槽位迁移：\"></a>缩容-槽位迁移：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//新版本：</span><br><span class=\"line\">redis-cli --cluster reshard 10.0.0.51:6380</span><br><span class=\"line\">                             集群内任意节点</span><br><span class=\"line\"></span><br><span class=\"line\">//旧版本：</span><br><span class=\"line\">redis-trib.rb reshard 10.0.0.51:6380</span><br><span class=\"line\"></span><br><span class=\"line\">归还db01:6390-&gt;db01:6380</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli --cluster reshard 10.0.0.51:6380</span></span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 10.0.0.51:6380)</span><br><span class=\"line\">M: f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 10.0.0.51:6380</span><br><span class=\"line\">   slots:[1365-5460] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">...</span><br><span class=\"line\">M: 2611fddb9194b38e45e301b7ae835cf09c6cd4c6 10.0.0.51:6390</span><br><span class=\"line\">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">...</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">How many slots <span class=\"keyword\">do</span> you want to move (from 1 to 16384)? 1365 //每节点归还数量</span><br><span class=\"line\">What is the receiving node ID? f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d //接受者<span class=\"built_in\">id</span></span><br><span class=\"line\">Please enter all the <span class=\"built_in\">source</span> node IDs.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;all&#x27;</span> to use all the nodes as <span class=\"built_in\">source</span> nodes <span class=\"keyword\">for</span> the <span class=\"built_in\">hash</span> slots.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;done&#x27;</span> once you entered all the <span class=\"built_in\">source</span> nodes IDs.</span><br><span class=\"line\">Source node <span class=\"comment\">#1: 2611fddb9194b38e45e301b7ae835cf09c6cd4c6 //发送者id</span></span><br><span class=\"line\">Source node <span class=\"comment\">#2: done</span></span><br><span class=\"line\"></span><br><span class=\"line\">归还db01:6390-&gt;db02:6380</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli --cluster reshard 10.0.0.51:6380</span></span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 10.0.0.51:6380)</span><br><span class=\"line\">...</span><br><span class=\"line\">M: 2611fddb9194b38e45e301b7ae835cf09c6cd4c6 10.0.0.51:6390</span><br><span class=\"line\">   slots:[5461-6826],[10923-12287] (2731 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a 10.0.0.52:6380</span><br><span class=\"line\">   slots:[6827-10922] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">...</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">How many slots <span class=\"keyword\">do</span> you want to move (from 1 to 16384)? 1365</span><br><span class=\"line\">What is the receiving node ID? e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a</span><br><span class=\"line\">Please enter all the <span class=\"built_in\">source</span> node IDs.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;all&#x27;</span> to use all the nodes as <span class=\"built_in\">source</span> nodes <span class=\"keyword\">for</span> the <span class=\"built_in\">hash</span> slots.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;done&#x27;</span> once you entered all the <span class=\"built_in\">source</span> nodes IDs.</span><br><span class=\"line\">Source node <span class=\"comment\">#1: 2611fddb9194b38e45e301b7ae835cf09c6cd4c6</span></span><br><span class=\"line\">Source node <span class=\"comment\">#2: done</span></span><br><span class=\"line\"></span><br><span class=\"line\">归还db01:6390-&gt;db03:6380</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli --cluster reshard 10.0.0.51:6380</span></span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 10.0.0.51:6380)</span><br><span class=\"line\">...</span><br><span class=\"line\">M: 2611fddb9194b38e45e301b7ae835cf09c6cd4c6 10.0.0.51:6390</span><br><span class=\"line\">   slots:[6826],[10923-12287] (1366 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">...</span><br><span class=\"line\">M: e26fe5d0fc1276abca61ad2998756dd90ede9fda 10.0.0.53:6380</span><br><span class=\"line\">   slots:[12288-16383] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">...</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">How many slots <span class=\"keyword\">do</span> you want to move (from 1 to 16384)? 1366</span><br><span class=\"line\">What is the receiving node ID? e26fe5d0fc1276abca61ad2998756dd90ede9fda</span><br><span class=\"line\">Please enter all the <span class=\"built_in\">source</span> node IDs.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;all&#x27;</span> to use all the nodes as <span class=\"built_in\">source</span> nodes <span class=\"keyword\">for</span> the <span class=\"built_in\">hash</span> slots.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;done&#x27;</span> once you entered all the <span class=\"built_in\">source</span> nodes IDs.</span><br><span class=\"line\">Source node <span class=\"comment\">#1: 2611fddb9194b38e45e301b7ae835cf09c6cd4c6</span></span><br><span class=\"line\">Source node <span class=\"comment\">#2: done</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检查状态：\"><a href=\"#检查状态：\" class=\"headerlink\" title=\"检查状态：\"></a>检查状态：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db01 ~]# sh redis_shell.sh csstatus 6380</span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_known_nodes:8</span><br><span class=\"line\"></span><br><span class=\"line\">Slots state:</span><br><span class=\"line\">10.0.0.51:6391@16391 slave connected</span><br><span class=\"line\">10.0.0.51:6390@16390 master connected //全没了</span><br><span class=\"line\">10.0.0.52:6380@16380 master 6827-10922</span><br><span class=\"line\">10.0.0.52:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.53:6380@16380 master 10923-16383</span><br><span class=\"line\">10.0.0.51:6381@16381 slave connected</span><br><span class=\"line\">10.0.0.51:6380@16380 myself,master 0-5460</span><br><span class=\"line\">10.0.0.53:6381@16381 slave connected</span><br><span class=\"line\"></span><br><span class=\"line\">槽位分布：</span><br><span class=\"line\">[root@db01 ~]# redis-cli --cluster rebalance 10.0.0.51:6380</span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 10.0.0.51:6380)</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check for open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">*** No rebalancing needed! All nodes are within the 2.00% threshold.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缩容-删除节点\"><a href=\"#缩容-删除节点\" class=\"headerlink\" title=\"缩容-删除节点\"></a>缩容-删除节点</h3><p><strong>工具删除节点</strong></p>\n<ol>\n<li>从库可以直接删除</li>\n<li>主库必须是没有槽位并且没有数据</li>\n</ol>\n<p>命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//旧版本</span><br><span class=\"line\">./redis-trib.rb  del-node 10.0.0.51:6390 2611fddb9194b38e45e301b7ae835cf09c6cd4c6</span><br><span class=\"line\"></span><br><span class=\"line\">//新版本                                     目标节点ip:port  目标节点<span class=\"built_in\">id</span></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli --cluster del-node 10.0.0.51:6390 2611fddb9194b38e45e301b7ae835cf09c6cd4c6</span></span><br><span class=\"line\">&gt;&gt;&gt; Removing node 2611fddb9194b38e45e301b7ae835cf09c6cd4c6 from cluster 10.0.0.51:6390</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class=\"line\">&gt;&gt;&gt; SHUTDOWN the node.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># redis-cli --cluster del-node 10.0.0.51:6391 3aea2183787f583888b581946cbeb5fb9135bcdc</span></span><br><span class=\"line\">&gt;&gt;&gt; Removing node 3aea2183787f583888b581946cbeb5fb9135bcdc from cluster 10.0.0.51:6391</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class=\"line\">&gt;&gt;&gt; SHUTDOWN the node.</span><br><span class=\"line\"></span><br><span class=\"line\">//检查</span><br><span class=\"line\">[root@db01 ~]<span class=\"comment\"># sh redis_shell.sh login 6380</span></span><br><span class=\"line\">10.0.0.51:6380&gt; CLUSTER NODES</span><br><span class=\"line\">e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a 10.0.0.52:6380@16380 master - 0 1589354349000 9 connected 5461-6825 6827-10922</span><br><span class=\"line\">804af32bdeeeaf89303406b198346bc539ef0d48 10.0.0.52:6381@16381 slave e26fe5d0fc1276abca61ad2998756dd90ede9fda 0 1589354349915 10 connected</span><br><span class=\"line\">e26fe5d0fc1276abca61ad2998756dd90ede9fda 10.0.0.53:6380@16380 master - 0 1589354348735 10 connected 6826 10923-16383</span><br><span class=\"line\">84a0719464b3cae31e9c85e25a02c8748a169c44 10.0.0.51:6381@16381 slave e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a 0 1589354350000 9 connected</span><br><span class=\"line\">f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 10.0.0.51:6380@16380 myself,master - 0 1589354349000 8 connected 0-5460</span><br><span class=\"line\"></span><br><span class=\"line\">6d1572a7349c21e8f70b34ee0b13f536acaa680b 10.0.0.53:6381@16381 slave e26fe5d0fc1276abca61ad2998756dd90ede9fda 0 1589354351282 10 connected</span><br><span class=\"line\">//db03:6381复制关系不正确</span><br></pre></td></tr></table></figure>\n<h3 id=\"缩容-调整复制关系\"><a href=\"#缩容-调整复制关系\" class=\"headerlink\" title=\"缩容-调整复制关系\"></a>缩容-调整复制关系</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//登陆db03</span><br><span class=\"line\">10.0.0.53:6381&gt; CLUSTER REPLICATE f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d</span><br><span class=\"line\">OK</span><br><span class=\"line\">10.0.0.53:6381&gt; CLUSTER NODES</span><br><span class=\"line\">6d1572a7349c21e8f70b34ee0b13f536acaa680b 10.0.0.53:6381@16381 myself,slave f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 0 1589354735000 4 connected</span><br><span class=\"line\">f3ac33ebbbbfd8078f32f269c7d2a32e4e86bd5d 10.0.0.51:6380@16380 master - 0 1589354737640 8 connected 0-5460</span><br><span class=\"line\">e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a 10.0.0.52:6380@16380 master - 0 1589354735420 9 connected 5461-6825 6827-10922</span><br><span class=\"line\">84a0719464b3cae31e9c85e25a02c8748a169c44 10.0.0.51:6381@16381 slave e6225763f9f8f4e2ce715e2161f5e9bac74ccd6a 0 1589354735000 9 connected</span><br><span class=\"line\">e26fe5d0fc1276abca61ad2998756dd90ede9fda 10.0.0.53:6380@16380 master - 0 1589354737000 10 connected 6826 10923-16383</span><br><span class=\"line\">804af32bdeeeaf89303406b198346bc539ef0d48 10.0.0.52:6381@16381 slave e26fe5d0fc1276abca61ad2998756dd90ede9fda 0 1589354736513 10 connected</span><br></pre></td></tr></table></figure>\n<p>至此，redis分布式集群，以及集群的扩容缩容，故障转移等全部完成。</p>\n","categories":["DBA"],"tags":["NoSQL","主从复制","高可用","分布式","Redis"]},{"title":"k8s企业级DevOps实践-Prometheus监控k8s集群、事件收集告警","url":"/forward/dc57d8c5.html","content":"<h2 id=\"服务监控\"><a href=\"#服务监控\" class=\"headerlink\" title=\"服务监控\"></a>服务监控</h2><p>对于运维开发人员来说，不管是哪个平台服务，监控都是非常关键重要的。在传统服务里面，我们通常会到zabbix、open-falcon、netdata来做服务的监控，但对于目前主流的K8s平台来说，由于服务pod会被调度到任何机器上运行，且pod挂掉后会被自动重启，并且我们也需要有更好的自动服务发现功能来实现服务报警的自动接入，实现更高效的运维报警，这里需要用到K8s的监控实现Prometheus，它是基于Google内部监控系统的开源实现。</p>\n<h2 id=\"Prometheus介绍\"><a href=\"#Prometheus介绍\" class=\"headerlink\" title=\"Prometheus介绍\"></a>Prometheus介绍</h2><p><img src=\"/images/pasted-60.png\" alt=\"Prometheus架构图\"><br>Prometheus是由golang语言编写，这样它的部署实际上是比较简单的，就一个服务的二进制包加上对应的配置文件即可运行，然而这种方式的部署过程繁琐并且效率低下，这里不以这种传统的形式来部署Prometheus来实现K8s集群的监控，而是用到Prometheus-Operator来进行Prometheus监控服务的安装，这也是生产中常用的安装方式。</p>\n<p>从本质上来讲Prometheus属于是典型的有状态应用，而其有包含了一些自身特有的运维管理和配置管理方式。而这些都无法通过Kubernetes原生提供的应用管理概念实现自动化。为了简化这类应用程序的管理复杂度，CoreOS率先引入了Operator的概念，并且首先推出了针对在Kubernetes下运行和管理Etcd的Etcd Operator。并随后推出了Prometheus Operator。</p>\n<h3 id=\"Prometheus-Operator工作原理\"><a href=\"#Prometheus-Operator工作原理\" class=\"headerlink\" title=\"Prometheus Operator工作原理\"></a>Prometheus Operator工作原理</h3><p>从概念上来讲Operator就是针对管理特定应用程序的，在Kubernetes基本的Resource和Controller的概念上，以扩展Kubernetes api的形式。帮助用户创建，配置和管理复杂的有状态应用程序。从而实现特定应用程序的常见操作以及运维自动化。</p>\n<p>在Kubernetes中我们使用Deployment、DamenSet，StatefulSet来管理应用Workload，使用Service，Ingress来管理应用的访问方式，使用ConfigMap和Secret来管理应用配置。我们在集群中对这些资源的创建，更新，删除的动作都会被转换为事件(Event)，Kubernetes的Controller Manager负责监听这些事件并触发相应的任务来满足用户的期望。这种方式我们成为声明式，用户只需要关心应用程序的最终状态，其它的都通过Kubernetes来帮助我们完成，通过这种方式可以大大简化应用的配置管理复杂度。</p>\n<p>而除了这些原生的Resource资源以外，Kubernetes还允许用户添加自己的自定义资源(Custom Resource)。并且通过实现自定义Controller来实现对Kubernetes的扩展。</p>\n<p>如下所示，是Prometheus Operator的架构示意图：</p>\n<p><img src=\"/images/pasted-61.png\" alt=\"Prometheus Operator\"></p>\n<p>Prometheus的本质就是一组用户自定义的CRD资源以及Controller的实现，Prometheus Operator负责监听这些自定义资源的变化，并且根据这些资源的定义自动化地完成如Prometheus Server自身以及配置的自动化管理工作。</p>\n<h3 id=\"Prometheus-Operator能做什么\"><a href=\"#Prometheus-Operator能做什么\" class=\"headerlink\" title=\"Prometheus Operator能做什么\"></a>Prometheus Operator能做什么</h3><p>要了解Prometheus Operator能做什么，其实就是要了解Prometheus Operator为我们提供了哪些自定义的Kubernetes资源，列出了Prometheus Operator目前提供的️4类资源：</p>\n<ul>\n<li>Prometheus：声明式创建和管理Prometheus Server实例；</li>\n<li>ServiceMonitor：负责声明式的管理监控配置；</li>\n<li>PrometheusRule：负责声明式的管理告警配置；</li>\n<li>Alertmanager：声明式的创建和管理Alertmanager实例。</li>\n</ul>\n<p>简言之，Prometheus Operator能够帮助用户自动化的创建以及管理Prometheus Server以及其相应的配置。</p>\n<h2 id=\"Prometheus-Operator部署\"><a href=\"#Prometheus-Operator部署\" class=\"headerlink\" title=\"Prometheus Operator部署\"></a>Prometheus Operator部署</h2><p>这里用prometheus-operator来安装整套prometheus服务，建议直接用master分支即可，这也是官方所推荐的</p>\n<p><a href=\"https://github.com/prometheus-operator/kube-prometheus\">https://github.com/prometheus-operator/kube-prometheus</a></p>\n<h3 id=\"解压下载安装包\"><a href=\"#解压下载安装包\" class=\"headerlink\" title=\"解压下载安装包\"></a>解压下载安装包</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip kube-prometheus-master.zip</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -f kube-prometheus-master.zip &amp;&amp; <span class=\"built_in\">cd</span> kube-prometheus-master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提前导入镜像\"><a href=\"#提前导入镜像\" class=\"headerlink\" title=\"提前导入镜像\"></a>提前导入镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">这里建议先看下有哪些镜像，便于在下载镜像快的节点上先收集好所有需要的离线docker镜像</span><br><span class=\"line\"><span class=\"comment\"># find ./ -type f |xargs grep &#x27;image: &#x27;|sort|uniq|awk &#x27;&#123;print $3&#125;&#x27;|grep ^[a-zA-Z]|grep -Evw &#x27;error|kubeRbacProxy&#x27;|sort -rn|uniq</span></span><br><span class=\"line\"></span><br><span class=\"line\">quay.io/prometheus/prometheus:v2.15.2</span><br><span class=\"line\">quay.io/prometheus/node-exporter:v0.18.1</span><br><span class=\"line\">quay.io/prometheus/alertmanager:v0.20.0</span><br><span class=\"line\">quay.io/fabxc/prometheus_demo_service</span><br><span class=\"line\">quay.io/coreos/prometheus-operator:v0.38.1</span><br><span class=\"line\">quay.io/coreos/kube-state-metrics:v1.9.5</span><br><span class=\"line\">quay.io/coreos/kube-rbac-proxy:v0.4.1</span><br><span class=\"line\">quay.io/coreos/k8s-prometheus-adapter-amd64:v0.5.0</span><br><span class=\"line\">grafana/grafana:6.6.0</span><br><span class=\"line\">gcr.io/google_containers/metrics-server-amd64:v0.2.0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-node001 kube-prometheus-release-0.5]<span class=\"comment\"># pwd</span></span><br><span class=\"line\">/root/prometheus/kube-prometheus-release-0.5</span><br><span class=\"line\"></span><br><span class=\"line\">在测试的几个node上把这些离线镜像包都导入 docker load -i xxx.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#批量导入当前目录所有本地镜像</span></span><br><span class=\"line\">ll *.tar|awk <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span>|sed -r <span class=\"string\">&#x27;s#(.*)#docker load -i \\1#&#x27;</span> | bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建所有服务\"><a href=\"#创建所有服务\" class=\"headerlink\" title=\"创建所有服务\"></a>创建所有服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create -f manifests/setup</span><br><span class=\"line\">kubectl create -f manifests/</span><br><span class=\"line\">过一会查看创建结果：</span><br><span class=\"line\">kubectl -n monitoring get all</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>附：清空上面部署的prometheus所有服务：<br>kubectl delete –ignore-not-found=true -f manifests/ -f manifests/setup</p>\n</blockquote>\n<p>访问下prometheus的UI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改下prometheus UI的service模式，便于访问</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring patch svc prometheus-k8s -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;type&quot;:&quot;NodePort&quot;&#125;&#125;&#x27;</span></span><br><span class=\"line\">service/prometheus-k8s patched</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring get svc prometheus-k8s </span></span><br><span class=\"line\">NAME             TYPE       CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE</span><br><span class=\"line\">prometheus-k8s   NodePort   10.0.0.11    &lt;none&gt;        9090:32736/TCP   72m</span><br></pre></td></tr></table></figure>\n<p>点击上方菜单栏Status — Targets ，发现kube-controller-manager和kube-scheduler未发现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">monitoring/kube-controller-manager/0 (0/0 up) </span><br><span class=\"line\">monitoring/kube-scheduler/0 (0/0 up) </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-62.png\" alt=\"error01\"><br>接下来解决下这个碰到的问题吧</p>\n<p>注：如果发现下面不是监控的127.0.0.1，并且通过下面地址可以获取metric指标输出，那么这个改IP这一步可以不用操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl 172.19.244.101:10251/metrics</span><br><span class=\"line\">curl 172.19.244.102:10251/metrics</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里发现这两服务监听的IP是127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># ss -tlnp|egrep &#x27;controller|schedule&#x27;</span></span><br><span class=\"line\">LISTEN     0      4096   127.0.0.1:10257                    *:*                   <span class=\"built_in\">users</span>:((&quot;kube-controller&quot;,pid=<span class=\"number\">7224</span>,fd=<span class=\"number\">7</span>))</span><br><span class=\"line\">LISTEN     0      4096   127.0.0.1:10259                    *:*                   <span class=\"built_in\">users</span>:((&quot;kube-scheduler&quot;,pid=<span class=\"number\">7269</span>,fd=<span class=\"number\">7</span>))</span><br></pre></td></tr></table></figure>\n<p>问题定位到了，接下来先把两个组件的监听地址改为0.0.0.0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果大家前面是按我设计的4台NODE节点，其中2台作master的话，那就在这2台master上把systemcd配置改一下</span></span><br><span class=\"line\"><span class=\"comment\"># 我这里第一台master  172.19.244.101</span></span><br><span class=\"line\"><span class=\"comment\"># vi /opt/kubernetes/cfg/kube-scheduler.conf</span></span><br><span class=\"line\"><span class=\"comment\"># vi /opt/kubernetes/cfg/kube-controller-manager.conf</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl daemon-reload</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl restart kube-controller-manager.service</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl restart kube-scheduler.service </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我这里第二台master  172.19.244.102</span></span><br><span class=\"line\"><span class=\"comment\"># vi /opt/kubernetes/cfg/kube-scheduler.conf</span></span><br><span class=\"line\"><span class=\"comment\"># vi /opt/kubernetes/cfg/kube-controller-manager.conf</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl daemon-reload</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl restart kube-controller-manager.service</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl restart kube-scheduler.service </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取下metrics指标看看</span></span><br><span class=\"line\">curl 172.19.244.101:10251/metrics</span><br><span class=\"line\">curl 172.19.244.102:10251/metrics</span><br></pre></td></tr></table></figure>\n\n<p>因为K8s的这两上核心组件我们是以二进制形式部署的，为了能让K8s上的prometheus能发现，我们还需要来创建相应的service和endpoints来将其关联起来</p>\n<p>注意：我们需要将endpoints里面的NODE IP换成我们实际情况的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-controller-manager</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">kube-controller-manager</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http-metrics</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">10252</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">10252</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Endpoints</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">kube-controller-manager</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-controller-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">subsets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">addresses:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">ip:</span> <span class=\"number\">172.19</span><span class=\"number\">.244</span><span class=\"number\">.101</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">ip:</span> <span class=\"number\">172.19</span><span class=\"number\">.244</span><span class=\"number\">.102</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http-metrics</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">10252</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-scheduler</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">kube-scheduler</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http-metrics</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">10251</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">10251</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Endpoints</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">kube-scheduler</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-scheduler</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">subsets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">addresses:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">ip:</span> <span class=\"number\">172.19</span><span class=\"number\">.244</span><span class=\"number\">.101</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">ip:</span> <span class=\"number\">172.19</span><span class=\"number\">.244</span><span class=\"number\">.102</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http-metrics</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">10251</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br></pre></td></tr></table></figure>\n<p>将上面的yaml配置保存为repair-prometheus.yaml，然后创建它<br><code>kubectl apply -f repair-prometheus.yaml</code></p>\n<p>还需要修改一个地方</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring edit servicemonitors.monitoring.coreos.com kube-scheduler </span></span><br><span class=\"line\"><span class=\"comment\"># 将下面两个地方的https换成http</span></span><br><span class=\"line\">    port: https-metrics</span><br><span class=\"line\">    scheme: https</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring edit servicemonitors.monitoring.coreos.com kube-controller-manager</span></span><br><span class=\"line\"><span class=\"comment\"># 将下面两个地方的https换成http</span></span><br><span class=\"line\">    port: https-metrics</span><br><span class=\"line\">    scheme: https</span><br></pre></td></tr></table></figure>\n<p>然后再返回prometheus UI处，耐心等待几分钟，就能看到已经被发现了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">monitoring/kube-controller-manager/0 (2/2 up) </span><br><span class=\"line\">monitoring/kube-scheduler/0 (2/2 up) </span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-63.png\" alt=\"INFO\"></p>\n<h2 id=\"监控ingress-nginx\"><a href=\"#监控ingress-nginx\" class=\"headerlink\" title=\"监控ingress-nginx\"></a>监控ingress-nginx</h2><p>前面部署过ingress-nginx，这个是整个K8s上所有服务的流量入口组件很关键，因此把它的metrics指标收集到prometheus来做好相关监控至关重要，因为前面ingress-nginx服务是以daemonset形式部署的，并且映射了自己的端口到宿主机上，那么我可以直接用pod运行NODE上的IP来看下metrics</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl 172.19.244.103:10254/metrics</span><br><span class=\"line\">curl 172.19.244.104:10254/metrics</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n ingress-nginx get pod -l app.kubernetes.io/name=ingress-nginx</span></span><br><span class=\"line\">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-ingress-controller-7f4c44d946-bhhgr   1/1     Running   0          8d</span><br><span class=\"line\">nginx-ingress-controller-7f4c44d946-zvhlx   1/1     Running   2          8d</span><br></pre></td></tr></table></figure>\n<p>创建 servicemonitor配置让prometheus能发现ingress-nginx的metrics</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim servicemonitor-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">monitoring.coreos.com/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceMonitor</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">ingress</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-scraping</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">interval:</span> <span class=\"string\">30s</span> <span class=\"comment\"># 每30s获取一次信息</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/metrics</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"string\">http-metrics</span> <span class=\"comment\"># 对应service的端口名</span></span><br><span class=\"line\">  <span class=\"attr\">jobLabel:</span> <span class=\"string\">app</span></span><br><span class=\"line\">  <span class=\"attr\">namespaceSelector:</span> <span class=\"comment\"># 表示去匹配某一命名空间中的service，如果想从所有的namespace中匹配用any: true</span></span><br><span class=\"line\">    <span class=\"attr\">matchNames:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"comment\"># 匹配的 Service 的labels，如果使用mathLabels，则下面的所有标签都匹配时才会匹配该service，如果使用matchExpressions，则至少匹配一个标签的service都会被选择</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">k8s-app:</span> <span class=\"string\">ingress-nginx-metrics</span> <span class=\"comment\">#匹配对应的Service</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-nginx-metrics</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">ingress-nginx-metrics</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http-metrics</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">10254</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">10254</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">ingress-nginx</span></span><br></pre></td></tr></table></figure>\n<p>创建它</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node001 ingress-ps]<span class=\"comment\"># kubectl create -f servicemonitor.yaml</span></span><br><span class=\"line\">servicemonitor.monitoring.coreos.com/nginx-ingress-scraping created</span><br><span class=\"line\">[root@node001 ingress-ps]<span class=\"comment\"># kubectl -n ingress-nginx get servicemonitors.monitoring.coreos.com </span></span><br><span class=\"line\">NAME                     AGE</span><br><span class=\"line\">nginx-ingress-scraping   16s</span><br></pre></td></tr></table></figure>\n<p>指标没有收集，检查proemtheus错误日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring logs prometheus-k8s-0 -c prometheus |grep error</span></span><br><span class=\"line\">level=error ts=2021-06-23T10:39:34.158Z <span class=\"built_in\">caller</span>=klog.go:94 component=k8s_client_runtime func=ErrorDepth msg=<span class=\"string\">&quot;/app/discovery/kubernetes/kubernetes.go:263: Failed to list *v1.Pod: pods is forbidden: User \\&quot;system:serviceaccount:monitoring:prometheus-k8s\\&quot; cannot list resource \\&quot;pods\\&quot; in API group \\&quot;\\&quot; in the namespace \\&quot;ingress-nginx\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>需要修改prometheus的clusterrole</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl edit clusterrole prometheus-k8s</span></span><br><span class=\"line\"><span class=\"string\">---原始</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes/metrics</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">nonResourceURLs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">/metrics</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"string\">---修改后</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">services</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes/proxy</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes/metrics</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">nonResourceURLs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">/metrics</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br></pre></td></tr></table></figure>\n<p>结果：<br><img src=\"/images/pasted-64.png\" alt=\"info\"></p>\n<h2 id=\"监控ETCD集群\"><a href=\"#监控ETCD集群\" class=\"headerlink\" title=\"监控ETCD集群\"></a>监控ETCD集群</h2><p>作为K8s所有资源存储的关键服务ETCD，也有必要把它给监控起来，正好借这个机会，完整的演示利用Prometheus来监控非K8s集群服务的步骤</p>\n<p>在前面部署K8s集群的时候，是用二进制的方式部署的ETCD集群，并且利用自签证书来配置访问ETCD，现在关键的服务基本都会留有指标metrics接口支持prometheus的监控，利用下面命令，我们可以看到ETCD都暴露出了哪些监控指标出来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl --cacert /opt/etcd/ssl/ca.pem --cert /opt/etcd/ssl/server.pem --key /opt/etcd/ssl/server-key.pem https://172.19.244.101:2379/metrics</span><br><span class=\"line\">curl --cacert /opt/etcd/ssl/ca.pem --cert /opt/etcd/ssl/server.pem --key /opt/etcd/ssl/server-key.pem https://172.19.244.102:2379/metrics</span><br><span class=\"line\">curl --cacert /opt/etcd/ssl/ca.pem --cert /opt/etcd/ssl/server.pem --key /opt/etcd/ssl/server-key.pem https://172.19.244.103:2379/metrics</span><br></pre></td></tr></table></figure>\n<p>上面查看没问题后，接下来我们开始进行配置使ETCD能被prometheus发现并监控</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先把ETCD的证书创建为secret</span></span><br><span class=\"line\">kubectl -n monitoring create secret generic etcd-certs --from-file=/opt/etcd/ssl/server.pem   --from-file=/opt/etcd/ssl/server-key.pem   --from-file=/opt/etcd/ssl/ca.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接着在prometheus里面引用这个secrets</span></span><br><span class=\"line\">kubectl -n monitoring edit prometheus k8s </span><br><span class=\"line\"></span><br><span class=\"line\">spec:</span><br><span class=\"line\">...</span><br><span class=\"line\">  secrets:</span><br><span class=\"line\">  - etcd-certs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存退出后，prometheus会自动重启服务pod以加载这个secret配置，过一会，我们进pod来查看下是不是已经加载到ETCD的证书了</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring exec -it prometheus-k8s-0 -c prometheus  -- sh</span></span><br><span class=\"line\">/prometheus $ <span class=\"built_in\">ls</span> /etc/prometheus/secrets/etcd-certs/</span><br><span class=\"line\">ca.pem          server-key.pem  server.pem</span><br></pre></td></tr></table></figure>\n<p>接下来准备创建service、endpoints以及ServiceMonitor的yaml配置</p>\n<blockquote>\n<p>注意替换下面的NODE节点IP为实际ETCD所在NODE内网IP</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim prometheus-etcd.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">etcd-k8s</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">etcd</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">api</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">2379</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Endpoints</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">etcd-k8s</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">etcd</span></span><br><span class=\"line\"><span class=\"attr\">subsets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">addresses:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">ip:</span> <span class=\"number\">172.19</span><span class=\"number\">.244</span><span class=\"number\">.101</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">ip:</span> <span class=\"number\">172.19</span><span class=\"number\">.244</span><span class=\"number\">.102</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">ip:</span> <span class=\"number\">172.19</span><span class=\"number\">.244</span><span class=\"number\">.103</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">api</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">2379</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">monitoring.coreos.com/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceMonitor</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">etcd-k8s</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">etcd-k8s</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">jobLabel:</span> <span class=\"string\">k8s-app</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"string\">api</span></span><br><span class=\"line\">    <span class=\"attr\">interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">    <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">    <span class=\"attr\">tlsConfig:</span></span><br><span class=\"line\">      <span class=\"attr\">caFile:</span> <span class=\"string\">/etc/prometheus/secrets/etcd-certs/ca.pem</span></span><br><span class=\"line\">      <span class=\"attr\">certFile:</span> <span class=\"string\">/etc/prometheus/secrets/etcd-certs/server.pem</span></span><br><span class=\"line\">      <span class=\"attr\">keyFile:</span> <span class=\"string\">/etc/prometheus/secrets/etcd-certs/server-key.pem</span></span><br><span class=\"line\">      <span class=\"comment\">#use insecureSkipVerify only if you cannot use a Subject Alternative Name</span></span><br><span class=\"line\">      <span class=\"attr\">insecureSkipVerify:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">k8s-app:</span> <span class=\"string\">etcd</span></span><br><span class=\"line\">  <span class=\"attr\">namespaceSelector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchNames:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">monitoring</span></span><br></pre></td></tr></table></figure>\n<p>开始创建上面的资源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl apply -f prometheus-etcd.yaml</span></span><br><span class=\"line\">service/etcd-k8s created</span><br><span class=\"line\">endpoints/etcd-k8s created</span><br><span class=\"line\">servicemonitor.monitoring.coreos.com/etcd-k8s created</span><br></pre></td></tr></table></figure>\n<p>过一会，就可以在prometheus UI上面看到ETCD集群被监控了<br><img src=\"/images/pasted-65.png\" alt=\"info\"></p>\n<p>接下来我们用grafana来展示被监控的ETCD指标</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vi manifests/grafana-service.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: grafana</span><br><span class=\"line\">  name: grafana</span><br><span class=\"line\">  namespace: monitoring</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - name: http</span><br><span class=\"line\">    port: 3000</span><br><span class=\"line\">    targetPort: http</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: grafana</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: NodePort</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f manifests/grafana-service.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring get svc | grep grafana</span></span><br><span class=\"line\">grafana                 NodePort    10.0.0.95    &lt;none&gt;        3000:32216/TCP               2d6h</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-66.png\" alt=\"grafana\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 在grafana官网模板中心搜索etcd，下载这个json格式的模板文件</span><br><span class=\"line\">https://grafana.com/dashboards/3070</span><br><span class=\"line\"></span><br><span class=\"line\">2.然后打开自己先部署的grafana首页，</span><br><span class=\"line\">点击左边菜单栏四个小正方形方块HOME --- Manage</span><br><span class=\"line\">再点击右边 Import dashboard --- </span><br><span class=\"line\">点击Upload .json File 按钮，上传上面下载好的json文件 etcd_rev3.json，</span><br><span class=\"line\">然后在prometheus选择数据来源</span><br><span class=\"line\">点击Import，即可显示etcd集群的图形监控信息</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-67.png\" alt=\"grafana\"></p>\n<p><img src=\"/images/pasted-68.png\" alt=\"etcd by prometheus\"></p>\n<h2 id=\"监控数据的持久化\"><a href=\"#监控数据的持久化\" class=\"headerlink\" title=\"监控数据的持久化\"></a>监控数据的持久化</h2><p>配置prometheus以及grafana的数据持久化。</p>\n<h3 id=\"Prometheus数据持久化配置\"><a href=\"#Prometheus数据持久化配置\" class=\"headerlink\" title=\"Prometheus数据持久化配置\"></a>Prometheus数据持久化配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意这下面的statefulset服务就是我们需要做数据持久化的地方</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring get statefulset,pod|grep prometheus-k8s</span></span><br><span class=\"line\">statefulset.apps/prometheus-k8s      2/2     2d18h</span><br><span class=\"line\">pod/prometheus-k8s-0                       3/3     Running   1          12h</span><br><span class=\"line\">pod/prometheus-k8s-1                       3/3     Running   1          12h</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为什么需要volumeClaimTemplate？<br>对于有状态的副本集都会用到持久存储，对于分布式系统来讲，它的最大特点是数据是不一样的，所以各个节点不能使用同一存储卷，每个节点有自已的专用存储，但是如果在Deployment中的Pod template里定义的存储卷，是所有副本集共用一个存储卷，数据是相同的，因为是基于模板来的 ，而statefulset中每个Pod都要自已的专有存储卷，所以statefulset的存储卷就不能再用Pod模板来创建了，于是statefulSet使用volumeClaimTemplate，称为卷申请模板，它会为每个Pod生成不同的pvc，并绑定pv， 从而实现各pod有专用存储。这就是为什么要用volumeClaimTemplate的原因。</p>\n</blockquote>\n<blockquote>\n<p>如果集群中没有StorageClass的动态供应PVC的机制，也可以提前手动创建多个PV、PVC，手动创建的PVC名称必须符合之后创建的StatefulSet命名规则：(volumeClaimTemplates.name)-(pod_name)</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如上所说，我们就需要为两个副本创建两个pvc，命名分别为</span></span><br><span class=\"line\"><span class=\"string\">prometheus-k8s-db-prometheus-k8s-0</span></span><br><span class=\"line\"><span class=\"string\">prometheus-k8s-db-prometheus-k8s-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">mkdir</span> <span class=\"string\">-p</span> <span class=\"string\">prometheus/&#123;prometheus-k8s-db-prometheus-k8s-0,prometheus-k8s-db-prometheus-k8s-1&#125;</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">chmod</span> <span class=\"string\">-R</span> <span class=\"number\">777</span> <span class=\"string\">/data/prometheus/</span></span><br><span class=\"line\"><span class=\"comment\"># 创建两个pv-pvc存储卷</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus-k8s-db-prometheus-k8s-&#123;1,0&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">prometheus-k8s-db-prometheus-k8s-&#123;1,0&#125;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">1Pi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/prometheus/prometheus-k8s-db-prometheus-k8s-&#123;1,0&#125;/</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">3xxxxxxxxnghai.nas.aliyuncs.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus-k8s-db-prometheus-k8s-&#123;1,0&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">1Pi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">prometheus-k8s-db-prometheus-k8s-&#123;1,0&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">root@node001</span> <span class=\"string\">~</span>]<span class=\"comment\"># kubectl -n monitoring get pvc</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>                                 <span class=\"string\">STATUS</span>   <span class=\"string\">VOLUME</span>                               <span class=\"string\">CAPACITY</span>   <span class=\"string\">ACCESS</span> <span class=\"string\">MODES</span>   <span class=\"string\">STORAGECLASS</span>   <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">prometheus-k8s-db-prometheus-k8s-0</span>   <span class=\"string\">Bound</span>    <span class=\"string\">prometheus-k8s-db-prometheus-k8s-0</span>   <span class=\"string\">1Pi</span>        <span class=\"string\">RWX</span>            <span class=\"string\">nfs</span>            <span class=\"string\">10m</span></span><br><span class=\"line\"><span class=\"string\">prometheus-k8s-db-prometheus-k8s-1</span>   <span class=\"string\">Bound</span>    <span class=\"string\">prometheus-k8s-db-prometheus-k8s-1</span>   <span class=\"string\">1Pi</span>        <span class=\"string\">RWX</span>            <span class=\"string\">nfs</span>            <span class=\"string\">9m25s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备prometheus持久化的pvc配置</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring edit prometheus k8s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\">  <span class=\"attr\">storage:</span></span><br><span class=\"line\">    <span class=\"attr\">volumeClaimTemplate:</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span> [ <span class=\"string\">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;nfs&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">1Pi</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">root@node001</span> <span class=\"string\">~</span>]<span class=\"comment\"># kubectl -n monitoring exec -it prometheus-k8s-0 -c prometheus -- sh</span></span><br><span class=\"line\"><span class=\"string\">/prometheus</span> <span class=\"string\">$</span> <span class=\"string\">df</span> <span class=\"string\">-Th</span></span><br><span class=\"line\"><span class=\"string\">Filesystem</span>           <span class=\"string\">Type</span>            <span class=\"string\">Size</span>      <span class=\"string\">Used</span> <span class=\"string\">Available</span> <span class=\"string\">Use%</span> <span class=\"string\">Mounted</span> <span class=\"string\">on</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">39c39494bb-ctc52.cn-shanghai.nas.aliyuncs.com:/prometheus/prometheus-k8s-db-prometheus-k8s-0/prometheus-db</span></span><br><span class=\"line\">                     <span class=\"string\">nfs4</span>            <span class=\"number\">1.</span><span class=\"string\">0P</span>    <span class=\"number\">990.</span><span class=\"string\">0M</span>   <span class=\"number\">1024.</span><span class=\"string\">0T</span>   <span class=\"number\">0</span><span class=\"string\">%</span> <span class=\"string\">/prometheus</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-69.png\" alt=\"持久化\"></p>\n<h3 id=\"Grafana数据持久化配置\"><a href=\"#Grafana数据持久化配置\" class=\"headerlink\" title=\"Grafana数据持久化配置\"></a>Grafana数据持久化配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">mkdir</span> <span class=\"string\">/data/prometheus/grafana</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">chmod</span> <span class=\"string\">-R</span> <span class=\"number\">777</span> <span class=\"string\">/data/prometheus/grafana/</span></span><br><span class=\"line\"><span class=\"comment\"># 保存pvc为grafanapv-pvc.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">grafanapv</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">grafanapv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">1Pi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/prometheus/grafana/</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">3xxxxxxxxnghai.nas.aliyuncs.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">1Pi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">grafanapv</span></span><br></pre></td></tr></table></figure>\n<p>查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 看下创建的pvc</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring get pvc</span></span><br><span class=\"line\">NAME                                 STATUS   VOLUME                               CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">grafana                              Bound    grafanapv                            1Pi        RWX            nfs            7m51s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑grafana的deployment资源配置</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring edit deployments.apps grafana </span></span><br><span class=\"line\"><span class=\"comment\"># 旧配置：</span></span><br><span class=\"line\">    528       volumes:</span><br><span class=\"line\">    529       - emptyDir: &#123;&#125;</span><br><span class=\"line\">    530         name: grafana-storage</span><br><span class=\"line\"><span class=\"comment\"># 替换成新的配置</span></span><br><span class=\"line\">    528       volumes:</span><br><span class=\"line\">    529       - name: grafana-storage</span><br><span class=\"line\">    530         persistentVolumeClaim:</span><br><span class=\"line\">    531           claimName: grafana</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先别慌保存退出！密码设置一下防止重启密码被重置</span></span><br><span class=\"line\"><span class=\"comment\"># 同时加入下面的env环境变量，将登陆密码进行固定修改</span></span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      ......</span><br><span class=\"line\">    462         <span class=\"built_in\">env</span>:</span><br><span class=\"line\">    463         - name: GF_SECURITY_ADMIN_USER</span><br><span class=\"line\">    464           value: admin</span><br><span class=\"line\">    465         - name: GF_SECURITY_ADMIN_PASSWORD</span><br><span class=\"line\">    466           value: Wikifx2021</span><br></pre></td></tr></table></figure>\n<p>查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node001 prometheus]<span class=\"comment\"># ll /data/prometheus/grafana/</span></span><br><span class=\"line\">total 1401</span><br><span class=\"line\">-rw-r--r-- 1 nfsnobody nfsnobody 1433600 Jun 24 15:46 grafana.db</span><br><span class=\"line\">drwxr-xr-x 2 nfsnobody nfsnobody    4096 Jun 24 15:45 plugins</span><br><span class=\"line\">drwx------ 2 nfsnobody nfsnobody    4096 Jun 24 15:45 png</span><br><span class=\"line\">[root@node001 prometheus]<span class=\"comment\"># kubectl -n monitoring get pod</span></span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">grafana-6c6cddc7b7-lqxq2               1/1     Running   0          56s</span><br></pre></td></tr></table></figure>\n<h2 id=\"prometheus发送报警\"><a href=\"#prometheus发送报警\" class=\"headerlink\" title=\"prometheus发送报警\"></a>prometheus发送报警</h2><p>早期经常用邮箱接收报警邮件，但是报警不及时，而且目前各云平台对邮件发送限制还比较严格，所以目前在生产中用得更为多的是基于webhook来转发报警内容到企业中用的聊天工具中，比如钉钉、企业微信、飞书等。</p>\n<p>prometheus的报警组件是Alertmanager，它支持自定义webhook的方式来接受它发出的报警，它发出的日志json字段比较多，我们需要根据需要接收的app来做相应的日志清洗转发。</p>\n<p>首先看下报警规则及报警发送配置是什么样的</p>\n<p>prometheus-operator的规则非常齐全，基本属于开箱即用类型，可以根据日常收到的报警，对里面的rules报警规则作针对性的调整，比如把报警观察时长缩短一点等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">监控报警规划修改   vim ./manifests/prometheus-rules.yaml</span><br><span class=\"line\">修改完成记得更新   kubectl apply -f ./manifests/prometheus-rules.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过这里可以获取需要创建的报警配置secret名称</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring edit statefulsets.apps alertmanager-main</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">      - name: config-volume</span><br><span class=\"line\">        secret:</span><br><span class=\"line\">          defaultMode: 420</span><br><span class=\"line\">          secretName: alertmanager-main</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring get secrets alertmanager-main</span></span><br><span class=\"line\">NAME                TYPE     DATA   AGE</span><br><span class=\"line\">alertmanager-main   Opaque   1      3d1h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n monitoring delete secrets alertmanager-main</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意事先在配置文件 alertmanager.yaml 里面编辑好收件人等信息，再执行下面的命令</span></span><br><span class=\"line\">kubectl create secret generic  alertmanager-main --from-file=alertmanager.yaml -n monitoring</span><br></pre></td></tr></table></figure>\n<p>报警配置文件 alertmanager.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># global块配置下的配置选项在本配置文件内的所有配置项下可见</span></span><br><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\">  <span class=\"comment\"># 在Alertmanager内管理的每一条告警均有两种状态: &quot;resolved&quot;或者&quot;firing&quot;. 在altermanager首次发送告警通知后, 该告警会一直处于firing状态,设置resolve_timeout可以指定处于firing状态的告警间隔多长时间会被设置为resolved状态, 在设置为resolved状态的告警后,altermanager不会再发送firing的告警通知.</span></span><br><span class=\"line\"><span class=\"comment\">#  resolve_timeout: 1h</span></span><br><span class=\"line\">  <span class=\"attr\">resolve_timeout:</span> <span class=\"string\">10m</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 告警通知模板</span></span><br><span class=\"line\"><span class=\"attr\">templates:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;/etc/altermanager/config/*.tmpl&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># route: 根路由,该模块用于该根路由下的节点及子路由routes的定义. 子树节点如果不对相关配置进行配置，则默认会从父路由树继承该配置选项。每一条告警都要进入route，即要求配置选项group_by的值能够匹配到每一条告警的至少一个labelkey(即通过POST请求向altermanager服务接口所发送告警的labels项所携带的&lt;labelname&gt;)，告警进入到route后，将会根据子路由routes节点中的配置项match_re或者match来确定能进入该子路由节点的告警(由在match_re或者match下配置的labelkey: labelvalue是否为告警labels的子集决定，是的话则会进入该子路由节点，否则不能接收进入该子路由节点).</span></span><br><span class=\"line\"><span class=\"attr\">route:</span></span><br><span class=\"line\">  <span class=\"comment\"># 例如所有labelkey:labelvalue含cluster=A及altertname=LatencyHigh labelkey的告警都会被归入单一组中</span></span><br><span class=\"line\">  <span class=\"attr\">group_by:</span> [<span class=\"string\">&#x27;job&#x27;</span>, <span class=\"string\">&#x27;altername&#x27;</span>, <span class=\"string\">&#x27;cluster&#x27;</span>, <span class=\"string\">&#x27;service&#x27;</span>,<span class=\"string\">&#x27;severity&#x27;</span>]</span><br><span class=\"line\">  <span class=\"comment\"># 若一组新的告警产生，则会等group_wait后再发送通知，该功能主要用于当告警在很短时间内接连产生时，在group_wait内合并为单一的告警后再发送</span></span><br><span class=\"line\"><span class=\"comment\">#  group_wait: 30s</span></span><br><span class=\"line\">  <span class=\"attr\">group_wait:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">  <span class=\"comment\"># 再次告警时间间隔</span></span><br><span class=\"line\"><span class=\"comment\">#  group_interval: 5m</span></span><br><span class=\"line\">  <span class=\"attr\">group_interval:</span> <span class=\"string\">20s</span></span><br><span class=\"line\">  <span class=\"comment\"># 如果一条告警通知已成功发送，且在间隔repeat_interval后，该告警仍然未被设置为resolved，则会再次发送该告警通知</span></span><br><span class=\"line\"><span class=\"comment\">#  repeat_interval: 12h</span></span><br><span class=\"line\">  <span class=\"attr\">repeat_interval:</span> <span class=\"string\">1m</span></span><br><span class=\"line\">  <span class=\"comment\"># 默认告警通知接收者，凡未被匹配进入各子路由节点的告警均被发送到此接收者</span></span><br><span class=\"line\">  <span class=\"attr\">receiver:</span> <span class=\"string\">&#x27;webhook&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># 上述route的配置会被传递给子路由节点，子路由节点进行重新配置才会被覆盖</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 子路由树</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">  <span class=\"comment\"># 该配置选项使用正则表达式来匹配告警的labels，以确定能否进入该子路由树</span></span><br><span class=\"line\">  <span class=\"comment\"># match_re和match均用于匹配labelkey为service,labelvalue分别为指定值的告警，被匹配到的告警会将通知发送到对应的receiver</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">match_re:</span></span><br><span class=\"line\">      <span class=\"attr\">service:</span> <span class=\"string\">^(foo1|foo2|baz)$</span></span><br><span class=\"line\">    <span class=\"attr\">receiver:</span> <span class=\"string\">&#x27;webhook&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># 在带有service标签的告警同时有severity标签时，他可以有自己的子路由，同时具有severity != critical的告警则被发送给接收者team-ops-wechat,对severity == critical的告警则被发送到对应的接收者即team-ops-pager</span></span><br><span class=\"line\">    <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">match:</span></span><br><span class=\"line\">        <span class=\"attr\">severity:</span> <span class=\"string\">critical</span></span><br><span class=\"line\">      <span class=\"attr\">receiver:</span> <span class=\"string\">&#x27;webhook&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># 比如关于数据库服务的告警，如果子路由没有匹配到相应的owner标签，则都默认由team-DB-pager接收</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">match:</span></span><br><span class=\"line\">      <span class=\"attr\">service:</span> <span class=\"string\">database</span></span><br><span class=\"line\">    <span class=\"attr\">receiver:</span> <span class=\"string\">&#x27;webhook&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># 我们也可以先根据标签service:database将数据库服务告警过滤出来，然后进一步将所有同时带labelkey为database</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">match:</span></span><br><span class=\"line\">      <span class=\"attr\">severity:</span> <span class=\"string\">critical</span></span><br><span class=\"line\">    <span class=\"attr\">receiver:</span> <span class=\"string\">&#x27;webhook&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 抑制规则，当出现critical告警时 忽略warning</span></span><br><span class=\"line\"><span class=\"attr\">inhibit_rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">source_match:</span></span><br><span class=\"line\">    <span class=\"attr\">severity:</span> <span class=\"string\">&#x27;critical&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">target_match:</span></span><br><span class=\"line\">    <span class=\"attr\">severity:</span> <span class=\"string\">&#x27;warning&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># Apply inhibition if the alertname is the same.</span></span><br><span class=\"line\">  <span class=\"comment\">#   equal: [&#x27;alertname&#x27;, &#x27;cluster&#x27;, &#x27;service&#x27;]</span></span><br><span class=\"line\">  <span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 收件人配置</span></span><br><span class=\"line\"><span class=\"attr\">receivers:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&#x27;webhook&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">webhook_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">&#x27;http://alertmanaer-dingtalk-svc.kube-system/1bdc0637/prometheus/feishu&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">send_resolved:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>附：监控其他服务的prometheus规则配置<br><a href=\"https://github.com/samber/awesome-prometheus-alerts\">https://github.com/samber/awesome-prometheus-alerts</a></p>\n</blockquote>\n<p>构建转发程序：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:<span class=\"number\">3.13</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> cakepanit.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> TZ <span class=\"string\">&quot;Asia/Shanghai&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -ri <span class=\"string\">&#x27;s+dl-cdn.alpinelinux.org+mirrors.aliyun.com+g&#x27;</span> /etc/apk/repositories \\</span></span><br><span class=\"line\"><span class=\"language-bash\"> &amp;&amp; apk add --no-cache curl tzdata ca-certificates \\</span></span><br><span class=\"line\"><span class=\"language-bash\"> &amp;&amp; <span class=\"built_in\">cp</span> -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\</span></span><br><span class=\"line\"><span class=\"language-bash\"> &amp;&amp; apk upgrade \\</span></span><br><span class=\"line\"><span class=\"language-bash\"> &amp;&amp; <span class=\"built_in\">rm</span> -rf /var/cache/apk/*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> mycli /usr/local/bin/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +x /usr/local/bin/mycli</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;mycli&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;-h&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker build -t registry.cn-shanghai.aliyuncs.com/xxxxx/base:alertmanaer-webhookv1.0 .</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: alertmanaer-dingtalk-svc</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: alertmanaer-webhook</span><br><span class=\"line\">    model: dingtalk</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 9999</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: ClusterIP</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: alertmanaer-webhook</span><br><span class=\"line\">    model: dingtalk</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: alertmanaer-webhook</span><br><span class=\"line\">    model: dingtalk</span><br><span class=\"line\">  name: alertmanaer-dingtalk-dp</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: alertmanaer-webhook</span><br><span class=\"line\">      model: dingtalk</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: alertmanaer-webhook</span><br><span class=\"line\">        model: dingtalk</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: alertmanaer-webhook</span><br><span class=\"line\">        image: registry.cn-shanghai.aliyuncs.com/wikifx/base:alertmanaer-webhookv1.0 </span><br><span class=\"line\">        <span class=\"built_in\">env</span>:</span><br><span class=\"line\">          - name: TZ</span><br><span class=\"line\">            value: Asia/Shanghai</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 9999</span><br><span class=\"line\">        <span class=\"comment\"># kubectl create secret docker-registry boge-secret --docker-server=harbor.boge.com --docker-username=admin --docker-password=boge666 --docker-email=admin@boge.com</span></span><br><span class=\"line\">     <span class=\"comment\"># imagePullSecrets:</span></span><br><span class=\"line\">     <span class=\"comment\"># - name: boge-secret</span></span><br><span class=\"line\">        args:</span><br><span class=\"line\">          - web</span><br><span class=\"line\">          - <span class=\"string\">&quot;https://open.feishu.cn/open-apis/bot/v2/hook/beb78afe-0658-47ef-a2d9-29b396425b88&quot;</span></span><br><span class=\"line\">          - <span class=\"string\">&quot;9999&quot;</span></span><br><span class=\"line\">          - <span class=\"string\">&quot;serviceA,DeadMansSnitch&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[GIN-debug] GET    /status                   --&gt; mycli/libs.MyWebServer.func1 (3 handlers)</span><br><span class=\"line\">[GIN-debug] POST   /b01bdc063/boge/getjson   --&gt; mycli/libs.MyWebServer.func2 (3 handlers)</span><br><span class=\"line\">[GIN-debug] POST   /7332f19/prometheus/dingtalk --&gt; mycli/libs.MyWebServer.func3 (3 handlers)</span><br><span class=\"line\">[GIN-debug] POST   /1bdc0637/prometheus/feishu --&gt; mycli/libs.MyWebServer.func4 (3 handlers)</span><br><span class=\"line\">[GIN-debug] POST   /5e00fc1a/prometheus/weixin --&gt; mycli/libs.MyWebServer.func5 (3 handlers)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>测试：<br><img src=\"/images/pasted-70.png\" alt=\"INFO\"></p>\n<h2 id=\"事件监控告警\"><a href=\"#事件监控告警\" class=\"headerlink\" title=\"事件监控告警\"></a>事件监控告警</h2><p>在Kubernetes中，事件分为两种，一种是Warning事件，表示产生这个事件的状态转换是在非预期的状态之间产生的；另外一种是Normal事件，表示期望到达的状态，和目前达到的状态是一致的。我们用一个Pod的生命周期进行举例，当创建一个Pod的时候，首先Pod会进入Pending的状态，等待镜像的拉取，当镜像录取完毕并通过健康检查的时候，Pod的状态就变为Running。此时会生成Normal的事件。而如果在运行中，由于OOM或者其他原因造成Pod宕掉，进入Failed的状态，而这种状态是非预期的，那么此时会在Kubernetes中产生Warning的事件。那么针对这种场景而言，如果我们能够通过监控事件的产生就可以非常及时的查看到一些容易被资源监控忽略的问题。</p>\n<p>一个标准的Kubernetes事件有如下几个重要的属性，通过这些属性可以更好地诊断和告警问题。</p>\n<p>Namespace：产生事件的对象所在的命名空间。<br>Kind：绑定事件的对象的类型，例如：Node、Pod、Namespace、Componenet等等。<br>Timestamp：事件产生的时间等等。<br>Reason：产生这个事件的原因。<br>Message: 事件的具体描述。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node001 ~]<span class=\"comment\"># kubectl get event --all-namespaces </span></span><br><span class=\"line\">NAMESPACE     LAST SEEN   TYPE      REASON              OBJECT                               MESSAGE</span><br><span class=\"line\">baseservice   7m26s       Normal    Killing             pod/ipinversion-d64864cf7-m2cvg      Stopping container ipinversion</span><br><span class=\"line\">baseservice   7m20s       Warning   Unhealthy           pod/ipinversion-d64864cf7-m2cvg      Readiness probe failed: Get http://10.244.4.93:8031/swagger/index.html: net/http: request canceled <span class=\"keyword\">while</span> waiting <span class=\"keyword\">for</span> connection (Client.Timeout exceeded <span class=\"keyword\">while</span> awaiting headers)</span><br><span class=\"line\">baseservice   7m26s       Normal    SuccessfulDelete    replicaset/ipinversion-d64864cf7     Deleted pod: ipinversion-d64864cf7-m2cvg</span><br><span class=\"line\">baseservice   7m26s       Normal    ScalingReplicaSet   deployment/ipinversion               Scaled down replica <span class=\"built_in\">set</span> ipinversion-d64864cf7 to 2</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"ali-kube-eventer\"><a href=\"#ali-kube-eventer\" class=\"headerlink\" title=\"ali kube-eventer\"></a>ali kube-eventer</h3><p>针对Kubernetes的事件监控场景，Kuernetes社区在Heapter中提供了简单的事件离线能力，后来随着Heapster的废弃，相关的能力也一起被归档了。为了弥补事件监控场景的缺失，阿里云容器服务发布并开源了kubernetes事件离线工具kube-eventer。支持离线kubernetes事件到钉钉机器人、飞书机器人、SLS日志服务、Kafka开源消息队列、InfluxDB时序数据库等等。</p>\n<p>GitHub地址：<a href=\"https://github.com/AliyunContainerService/kube-eventer\">https://github.com/AliyunContainerService/kube-eventer</a></p>\n<p>Webhook 配置说明：<br><a href=\"https://github.com/AliyunContainerService/kube-eventer/blob/master/docs/en/webhook-sink.md\">https://github.com/AliyunContainerService/kube-eventer/blob/master/docs/en/webhook-sink.md</a></p>\n<p>下面是以飞书机器人告警发送为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">        <span class=\"attr\">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirstWithHostNet</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccount:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">registry.aliyuncs.com/acs/kube-eventer-amd64:v1.2.0-484d9cd-aliyun</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;/kube-eventer&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;--source=kubernetes:https://kubernetes.default&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">## .e.g,dingtalk sink demo</span></span><br><span class=\"line\">            <span class=\"comment\">#- --sink=dingtalk:[your_webhook_url]&amp;label=[your_cluster_id]&amp;level=[Normal or Warning(default)]</span></span><br><span class=\"line\">            <span class=\"comment\">#- --sink=webhook:https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=07055f32-a04e-4ad7-9cb1-d22352769e1c&amp;level=Warning&amp;label=oa-k8s</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--sink=webhook:https://open.feishu.cn/open-apis/bot/v2/hook/beb78afe-0658-47ef-a2d9-2xxxxxxx8?level=Normal&amp;header=Convtent-Type=application/json&amp;custom_body_configmap=custom-webhook-body&amp;custom_body_configmap_namespace=kube-system&amp;method=POST</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">--sink=webhook:https://open.feishu.cn/open-apis/bot/v2/hook/beb78afe-0658-47ef-a2d9-2xxxxxxx8?level=Warning&amp;header=Convtent-Type=application/json&amp;custom_body_configmap=custom-webhook-body&amp;custom_body_configmap_namespace=kube-system&amp;method=POST</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"comment\"># If TZ is assigned, set the TZ value as the time zone</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;Asia/Shanghai&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">localtime</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/localtime</span></span><br><span class=\"line\">              <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">zoneinfo</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/zoneinfo</span></span><br><span class=\"line\">              <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">250Mi</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">localtime</span></span><br><span class=\"line\">          <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/etc/localtime</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">zoneinfo</span></span><br><span class=\"line\">          <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/usr/share/zoneinfo</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">events</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-eventer</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\"><span class=\"string\">    &#123;&quot;msg_type&quot;:&quot;interactive&quot;,&quot;card&quot;:&#123;&quot;config&quot;:&#123;&quot;wide_screen_mode&quot;:true&#125;,&quot;header&quot;:&#123;&quot;title&quot;:&#123;&quot;tag&quot;:&quot;plain_text&quot;,&quot;content&quot;:&quot;EventType:&#123;&#123; .Type &#125;&#125; In Shanghai k8s&quot;&#125;,&quot;template&quot;:&quot;blue&quot;&#125;,&quot;elements&quot;:[&#123;&quot;tag&quot;:&quot;markdown&quot;,&quot;content&quot;:&quot;**EventNamespace**:&#123;&#123; .InvolvedObject.Namespace &#125;&#125; \\n**EventKind**:&#123;&#123; .InvolvedObject.Kind &#125;&#125; \\n**EventObject**:&#123;&#123; .InvolvedObject.Name &#125;&#125; \\n**EventReason**:&#123;&#123; .Reason &#125;&#125; \\n**EventTime**:&#123;&#123; .LastTimestamp &#125;&#125; \\n**EventMessage**:&#123;&#123; .Message &#125;&#125; \\n[k8s面板](https://ops.xxxx.com:4433/)|[Grafana集群监控](https://ops.xxxx.com:4434/login) \\n&lt;at id=6833974120049278977&gt;&lt;/at&gt;&lt;at id=6795355516563357697&gt;&lt;/at&gt;\\n ---&quot;&#125;]&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">custom-webhook-body</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"comment\"># es提交</span></span><br><span class=\"line\"><span class=\"comment\"># --sink=elasticsearch:http://es-cn-0pp16xvo90009zf49.public.elasticsearch.aliyuncs.com:9200?sniff=false&amp;ver=6&amp;index=kubesystem-eventmonitoring&amp;healthCheck=false&amp;cluster_name=sh&amp;esUserName=felix&amp;esUserSecret=felix123</span></span><br></pre></td></tr></table></figure>\n<p>测试：<br><img src=\"/images/pasted-71.png\" alt=\"INFO\"><br>这样我们就能感知k8s集群中的风吹草动了</p>\n","categories":["OPS"],"tags":["OPS","Kubernetes","Prometheus"]},{"title":"k8s企业级DevOps实践-StatefulSet&Helm v3","url":"/forward/7139bb18.html","content":"<h2 id=\"什么是-StatefulSet\"><a href=\"#什么是-StatefulSet\" class=\"headerlink\" title=\"什么是 StatefulSet\"></a>什么是 StatefulSet</h2><p><code>StatefulSet</code> 是用来管理有状态的应用，例如数据库,consul，zookeeper等集群。</p>\n<ol>\n<li>通过<code>Deployment</code>部署的应用，都是不需要存储数据，不需要记住状态且pod之间没有任何依赖关系，可以随意扩充副本，每个副本都是一样的，可替代的。</li>\n<li>而像数据库、Redis、kafka、consul这类有状态的，则不能随意扩充副本。就需要用到<code>StatefulSet</code>这种工作负载类型会固定每个 Pod 的名字</li>\n</ol>\n<h2 id=\"什么是-PDB\"><a href=\"#什么是-PDB\" class=\"headerlink\" title=\"什么是 PDB\"></a>什么是 PDB</h2><p><code>PodDisruptionBudget</code> 这个控制器直译就是[Pod 干扰 预算]，这个控制器主要是通过设置应用 Pod 处于正常状态的最低个数或最低百分比，这样可以保证在主动销毁 Pod 的时候，不会销毁太多的 Pod 导致业务异常中断，从而提高业务的可用性。</p>\n<p>是不是类似于<code>Deployment</code>中的<code>maxUnavailable</code>和<code>RS Controller</code>呢，三者看上去都是有一个保持 Pod 的最低个数或者百分比的设置。其实后两个并不能给你保证集群中始终有几个副本的，他们只是让实际副本数跟你的期望副本数尽快的一致，但这个过程中的副本数量并不关心。所以这个时候就要考虑使用 PDB 了，对那些Voluntary Disruption（自愿中断）做好Budgets（预算）。</p>\n<h3 id=\"Involuntary-AND-Voluntary\"><a href=\"#Involuntary-AND-Voluntary\" class=\"headerlink\" title=\"Involuntary AND Voluntary\"></a>Involuntary AND Voluntary</h3><p>对 Voluntary Disruption 的情况，我们可以使用PDB做预算。哪些情况是 Involuntary Disruption，哪些又是 Voluntary Disruption 呢？</p>\n<p><strong>Involuntary Disruption：</strong></p>\n<ul>\n<li>服务器硬件故障或者内核崩溃导致节点宕了；</li>\n<li>如果节点是 KVM，Xen 虚拟机，虚拟机被删了或者 KVM，Xen 崩了；</li>\n<li>集群网络脑裂；</li>\n<li>某个节点因为不合理的超配导致出现计算资源不足时，触发了 kubelet eviction；<br>这些都是 Kubernetes 不可控的情况，这些情况下不适用于PDB。</li>\n</ul>\n<p><strong>Voluntary Disruption：</strong></p>\n<ul>\n<li>删除 Deployment，RC，StatefulSet控制器</li>\n<li>更新了 Pod 模版，触发 Pod 滚动更新</li>\n<li>批量删除Pod</li>\n<li>清空节点</li>\n<li>下线一个节点</li>\n</ul>\n<h3 id=\"PDB-关键参数与注意事项\"><a href=\"#PDB-关键参数与注意事项\" class=\"headerlink\" title=\"PDB 关键参数与注意事项\"></a>PDB 关键参数与注意事项</h3><ul>\n<li><code>.spec.minAvailable</code>表示发生自愿中断的过程中，要保证至少可用的Pods数或者比例</li>\n<li><code>.spec.maxUnavailable</code>表示发生自愿中断的过程中，要保证最大不可用的Pods数或者比例<br>上面配置只能用来对应 Deployment，RS，RC，StatefulSet的Pods，推荐优先使用 <code>.spec.maxUnavailable</code>。</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>同一个 PDB Object 中<strong>不能同时定义</strong> <code>.spec.minAvailable</code> 和 <code>.spec.maxUnavailable</code>。</li>\n<li>前面提到，应用滚动更新时Pod的delete和unavailable虽然也属于自愿中断，但是实际上滚动更新有自己的策略控制（marSurge 和 maxUnavailable），因此PDB不会干预这个过程。</li>\n<li>PDB 只能保证自愿中断时的副本数，比如 eviction pod过程中刚好满足 <code>.spec.minAvailable</code> 或<code>.spec.maxUnavailable</code>，这时某个本来正常的Pod突然因为Node Down(非自愿中断)挂了，那么这个时候实际Pods数就比PDB中要求的少了，因此PDB不是万能的！</li>\n<li>使用上，如果设置 <code>.spec.minAvailable</code> 为 100% 或者 <code>.spec.maxUnavailable</code> 为 0%，意味着会完全阻止 eviction pods 的过程（ Deployment和StatefulSet的滚动更新除外 ）。</li>\n</ul>\n<h3 id=\"PDB-for-Zookeeper\"><a href=\"#PDB-for-Zookeeper\" class=\"headerlink\" title=\"PDB for Zookeeper\"></a>PDB for Zookeeper</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">policy/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PodDisruptionBudget</span> </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-pdb</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">zk</span></span><br><span class=\"line\">  <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># pod 干扰预算定义的示例，它们与带有 app: zk 标签的 pod 相匹配</span></span><br><span class=\"line\"><span class=\"comment\"># 上面的PDB选择的是一个规格为 3 的 StatefulSet，因为zk三节点集群中。最少需要保证两个节点可用zk集群才可用</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Service和DNS的关系\"><a href=\"#Service和DNS的关系\" class=\"headerlink\" title=\"Service和DNS的关系\"></a>Service和DNS的关系</h2><p>在kubernetes中,所有的Service和Pod都会被分配一条对应的DNS A记录( 通过域名解析到IP地址的记录 )</p>\n<h4 id=\"ClusterIP-Service的DNS分配方式\"><a href=\"#ClusterIP-Service的DNS分配方式\" class=\"headerlink\" title=\"ClusterIP Service的DNS分配方式\"></a>ClusterIP Service的DNS分配方式</h4><p>ClusterIP模式的NormalService 来说,它的 A 记录的格式是:<br><code>myservicename.mynamespace.svc.cluster.local</code> 当你访问这条 A 记录的时候,它解析到的就是该Service的VIP地址</p>\n<h4 id=\"Headliness-Service的DNS分配方式\"><a href=\"#Headliness-Service的DNS分配方式\" class=\"headerlink\" title=\"Headliness Service的DNS分配方式\"></a>Headliness Service的DNS分配方式</h4><p>ClusterIP=None的 HeadlessService 来说,它的 A 记录的格式也是:<br><code>myservicename.mynamespace.svc.cluster.local</code> 当你访问这条A记录的时候,它返回的是所有被代理的Pod的IP地址的集合.当然,如果你的客户端没办法解析这个集合的话,它可能会只会拿到第一个Pod的IP地址</p>\n<p>ClusterIP Service被代理Pod的分配方式<br>对于ClusterIP模式的Service来说,它代理的Pod被自动分配的A记录的格式是:<br><code>PodIP.mynamespace.pod.cluster.local</code>这条记录指向Pod的IP地址</p>\n<p>Headliness Service被代理Pod的分配方式</p>\n<ol>\n<li>对Headless Service 来说,它代理的Pod被自动分配的A记录的格式是:<br><code>mypodname.myservicename.mynamespace.svc.cluster.local</code> 这条记录也指向Pod的IP地址</li>\n<li>如果Pod本身声明了hostname和subdomain字段,那么这时候Pod的A记录就会变成:  <code>podhostname.mysubdomain.mynamespace.svc.cluster.local</code></li>\n</ol>\n<h2 id=\"什么是-HeadLess\"><a href=\"#什么是-HeadLess\" class=\"headerlink\" title=\"什么是 HeadLess\"></a>什么是 HeadLess</h2><h3 id=\"Normal和Headless对比\"><a href=\"#Normal和Headless对比\" class=\"headerlink\" title=\"Normal和Headless对比\"></a>Normal和Headless对比</h3><p>写法方面：<br><img src=\"/images/pasted-147.png\" alt=\"NormalService vs HeadlessService\"></p>\n<h3 id=\"工作方式对比\"><a href=\"#工作方式对比\" class=\"headerlink\" title=\"工作方式对比\"></a>工作方式对比</h3><h4 id=\"NormalService\"><a href=\"#NormalService\" class=\"headerlink\" title=\"NormalService\"></a>NormalService</h4><p>工作方式是通过一个Cluster-ip <code>10.0.0.112:80</code> 来反向代理 endpoints 列表中的 pod 地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">10.244.4.10:80  10.244.6.160:80    10.244.8.32:80</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-150.png\" alt=\"apiA\"><br><img src=\"/images/pasted-148.png\" alt=\"NormalService\"></p>\n<p>此时要访问apiA这个接口只需要访问到这个Cluster-ip，就可以实现对后端POD的负载均衡</p>\n<h4 id=\"HeadlessService\"><a href=\"#HeadlessService\" class=\"headerlink\" title=\"HeadlessService\"></a>HeadlessService</h4><p>工作方式是并不会分配 Cluster IP，kube-proxy 不会处理它们，而且平台也不会为它们进行负载均衡和路由。 DNS 如何实现自动配置，依赖于 Service 是否定义了 selector。<br>如下图：<br><img src=\"/images/pasted-149.png\" alt=\"zookeeper\"></p>\n<p>此时要访问zookeeper这个集群，需要按照<br><code>&lt;pod-name&gt;.&lt;service-name&gt;.&lt;namespace-name&gt;..svc.cluster.local</code>就可以访问到zk集群中指定pod，相当于给pod分配了一个可解析身份，非常适合用作<code>StatefulSet</code>类型工作负载中pod之间进行内部通信。</p>\n<h3 id=\"HeadLess的作用\"><a href=\"#HeadLess的作用\" class=\"headerlink\" title=\"HeadLess的作用\"></a>HeadLess的作用</h3><p>简而言之<code>Headless Service</code>就是没头的Service。有啥用呢？很简单，有时候client想自己来决定使用哪个Real Server时可以通过查询DNS来获取Real Server的信息。Headless Service的对应的每一个Endpoints，即每一个Pod，都会有对应的DNS域名；这样Pod之间就可以互相访问。</p>\n<h2 id=\"Zookeeper容器化部署\"><a href=\"#Zookeeper容器化部署\" class=\"headerlink\" title=\"Zookeeper容器化部署\"></a>Zookeeper容器化部署</h2><h3 id=\"编排PV持久化存储\"><a href=\"#编排PV持久化存储\" class=\"headerlink\" title=\"编排PV持久化存储\"></a>编排PV持久化存储</h3><p>参考文档:<a href=\"https://kubernetes.io/zh/docs/tutorials/stateful-application/zookeeper/\">https://kubernetes.io/zh/docs/tutorials/stateful-application/zookeeper/</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-pv-zk1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span> <span class=\"comment\">#允许一个节点挂载</span></span><br><span class=\"line\">  <span class=\"attr\">mountOptions:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">vers=3</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">nolock,tcp,noresvport</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/zk/zk1</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">71cc1489fb-kmn77.ap-southeast-1.nas.aliyuncs.com</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-pv-zk2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span> <span class=\"comment\">#允许一个节点挂载</span></span><br><span class=\"line\">  <span class=\"attr\">mountOptions:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">vers=3</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">nolock,tcp,noresvport</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Retain</span> <span class=\"comment\">#不清理, 保留 Volume（需要手动清理）</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/zk/zk2</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">71cc1489fb-kmn77.ap-southeast-1.nas.aliyuncs.com</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-pv-zk3</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span> <span class=\"comment\">#允许一个节点挂载</span></span><br><span class=\"line\">  <span class=\"attr\">mountOptions:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">vers=3</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">nolock,tcp,noresvport</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Retain</span> <span class=\"comment\">#不清理, 保留 Volume（需要手动清理）</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/zk/zk3</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">71cc1489fb-kmn77.ap-southeast-1.nas.aliyuncs.com</span></span><br></pre></td></tr></table></figure>\n<p>应用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl apply -f zk-pv.yaml</span></span><br><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl get pv | grep Available</span></span><br><span class=\"line\">k8s-pv-zk1                           5Gi        RWO            Retain           Available                                                   nfs                     23s</span><br><span class=\"line\">k8s-pv-zk2                           5Gi        RWO            Retain           Available                                                   nfs                     23s</span><br><span class=\"line\">k8s-pv-zk3                           5Gi        RWO            Retain           Available                                                   nfs                     23s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署Service-amp-PDB\"><a href=\"#部署Service-amp-PDB\" class=\"headerlink\" title=\"部署Service &amp; PDB\"></a>部署Service &amp; PDB</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-headless</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">leader-election</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span> <span class=\"comment\">#headless模式，用于zk p2p内部选举</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">policy/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PodDisruptionBudget</span> </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-pdb</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">zk</span></span><br><span class=\"line\">  <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span> <span class=\"comment\">#自发干扰时最多允许一个节点宕机</span></span><br></pre></td></tr></table></figure>\n<p>应用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl apply -f svc.yaml</span></span><br><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl get svc -n baseservice | grep zk</span></span><br><span class=\"line\">zk-headless       ClusterIP   None         &lt;none&gt;        2888/TCP,3888/TCP   41s</span><br><span class=\"line\">zk-service        ClusterIP   10.0.0.140   &lt;none&gt;        2181/TCP            41s</span><br><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl get pdb -n baseservice </span></span><br><span class=\"line\">NAME     MIN AVAILABLE   MAX UNAVAILABLE   ALLOWED DISRUPTIONS   AGE</span><br><span class=\"line\">zk-pdb   N/A             1                 0                     64s</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署StatefulSet\"><a href=\"#部署StatefulSet\" class=\"headerlink\" title=\"部署StatefulSet\"></a>部署StatefulSet</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">baseservice</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">zk</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">zk-headless</span> <span class=\"comment\">#必须关联到一个无头服务商</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span> <span class=\"comment\">#更新策略: 滚动更新</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">OrderedReady</span> <span class=\"comment\">#串行启动pod即一个一个启动</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">zk</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-zookeeper</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span> <span class=\"comment\">#拉取策略</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">&quot;k8s.gcr.io/kubernetes-zookeeper:1.0-3.4.10&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> <span class=\"comment\">#资源限制</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;500Mi&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;0.5&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">leader-election</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;start-zookeeper \\</span></span><br><span class=\"line\"><span class=\"string\">          --servers=3 \\</span></span><br><span class=\"line\"><span class=\"string\">          --data_dir=/var/lib/zookeeper/data \\</span></span><br><span class=\"line\"><span class=\"string\">          --data_log_dir=/var/lib/zookeeper/data/log \\</span></span><br><span class=\"line\"><span class=\"string\">          --conf_dir=/opt/zookeeper/conf \\</span></span><br><span class=\"line\"><span class=\"string\">          --client_port=2181 \\</span></span><br><span class=\"line\"><span class=\"string\">          --election_port=3888 \\</span></span><br><span class=\"line\"><span class=\"string\">          --server_port=2888 \\</span></span><br><span class=\"line\"><span class=\"string\">          --tick_time=2000 \\</span></span><br><span class=\"line\"><span class=\"string\">          --init_limit=10 \\</span></span><br><span class=\"line\"><span class=\"string\">          --sync_limit=5 \\</span></span><br><span class=\"line\"><span class=\"string\">          --heap=512M \\</span></span><br><span class=\"line\"><span class=\"string\">          --max_client_cnxns=60 \\</span></span><br><span class=\"line\"><span class=\"string\">          --snap_retain_count=3 \\</span></span><br><span class=\"line\"><span class=\"string\">          --purge_interval=12 \\</span></span><br><span class=\"line\"><span class=\"string\">          --max_session_timeout=40000 \\</span></span><br><span class=\"line\"><span class=\"string\">          --min_session_timeout=4000 \\</span></span><br><span class=\"line\"><span class=\"string\">          --log_level=INFO&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;zookeeper-ready 2181&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;zookeeper-ready 2181&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/zookeeper</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">accessModes:</span> [<span class=\"string\">&quot;ReadWriteOnce&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;nfs&quot;</span> <span class=\"comment\">#一定要写，如果pv中存在</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br></pre></td></tr></table></figure>\n<p>应用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl apply -f zk.yaml</span></span><br><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl -n baseservice get pod | grep zk</span></span><br><span class=\"line\">zk-0                               1/1     Running     0          7m30s</span><br><span class=\"line\">zk-1                               1/1     Running     0          6m29s</span><br><span class=\"line\">zk-2                               1/1     Running     0          3m54s</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl -n baseservice get pv | grep zk</span></span><br><span class=\"line\">k8s-pv-zk1                           5Gi        RWO            Retain           Bound    baseservice/datadir-zk-0                        nfs                     7m19s</span><br><span class=\"line\">k8s-pv-zk2                           5Gi        RWO            Retain           Bound    baseservice/datadir-zk-1                        nfs                     7m19s</span><br><span class=\"line\">k8s-pv-zk3                           5Gi        RWO            Retain           Bound    baseservice/datadir-zk-2                        nfs                     7m19s</span><br><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl -n baseservice get pvc | grep zk</span></span><br><span class=\"line\">datadir-zk-0     Bound    k8s-pv-zk1      5Gi        RWO            nfs            7m54s</span><br><span class=\"line\">datadir-zk-1     Bound    k8s-pv-zk2      5Gi        RWO            nfs            6m53s</span><br><span class=\"line\">datadir-zk-2     Bound    k8s-pv-zk3      5Gi        RWO            nfs            6m35s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看配置</span></span><br><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl exec -n baseservice zk-0 -- cat /opt/zookeeper/conf/zoo.cfg</span></span><br><span class=\"line\"><span class=\"comment\">#This file was autogenerated DO NOT EDIT</span></span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\">dataDir=/var/lib/zookeeper/data</span><br><span class=\"line\">dataLogDir=/var/lib/zookeeper/data/log</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">maxClientCnxns=60</span><br><span class=\"line\">minSessionTimeout=4000</span><br><span class=\"line\">maxSessionTimeout=40000</span><br><span class=\"line\">autopurge.snapRetainCount=3</span><br><span class=\"line\">autopurge.purgeInteval=12</span><br><span class=\"line\">server.1=zk-0.zk-headless.baseservice.svc.cluster.local:2888:3888</span><br><span class=\"line\">server.2=zk-1.zk-headless.baseservice.svc.cluster.local:2888:3888</span><br><span class=\"line\">server.3=zk-2.zk-headless.baseservice.svc.cluster.local:2888:3888</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#集群状态</span></span><br><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl exec -n baseservice zk-0 zkServer.sh status</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class=\"keyword\">in</span> a future version. Use kubectl kubectl <span class=\"built_in\">exec</span> [POD] -- [COMMAND] instead.</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /usr/bin/../etc/zookeeper/zoo.cfg</span><br><span class=\"line\">Mode: follower</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl exec -n baseservice zk-1 zkServer.sh status</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class=\"keyword\">in</span> a future version. Use kubectl kubectl <span class=\"built_in\">exec</span> [POD] -- [COMMAND] instead.</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /usr/bin/../etc/zookeeper/zoo.cfg</span><br><span class=\"line\">Mode: leader</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node002 Statefulset]<span class=\"comment\"># kubectl exec -n baseservice zk-2 zkServer.sh status</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class=\"keyword\">in</span> a future version. Use kubectl kubectl <span class=\"built_in\">exec</span> [POD] -- [COMMAND] instead.</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /usr/bin/../etc/zookeeper/zoo.cfg</span><br><span class=\"line\">Mode: follower</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-152.png\" alt=\"zookeeper\"></p>\n<h2 id=\"StatefulSet总结\"><a href=\"#StatefulSet总结\" class=\"headerlink\" title=\"StatefulSet总结\"></a>StatefulSet总结</h2><p>上面使用Statefulset控制器搭建了Zookeeper分布式集群，了解到Statefulset具备以下特点：</p>\n<ul>\n<li>稳定且唯一的网络标识符</li>\n<li>稳定且持久的存储</li>\n<li>有序，平滑的部署和扩展</li>\n<li>有序，平滑的删除和终止</li>\n<li>有序的滚动更新<br>且了解到Statefulset包含三个组件：<code>headless service</code>、<code>StatefulSet</code>，<code>volumeClaimTemplate</code></li>\n<li><code>headless service</code>：确保解析名称直达后端pod</li>\n<li><code>volumeClaimTemplate</code>：卷申请模板，每创建一个pod时，自动申请一个pvc，从而请求绑定pv</li>\n<li><code>StatefulSet</code>：有状态服务的控制器</li>\n</ul>\n<h2 id=\"什么是Helm\"><a href=\"#什么是Helm\" class=\"headerlink\" title=\"什么是Helm\"></a>什么是Helm</h2><p>Helm 是一个 Kubernetes 的包管理工具，类似 Linux 的包管理器，如RedHat系的yum、Debian的apt，可以很方便的将之前打包好的 yaml 文件部署到 Kubernetes 上。Helm主要解决以下问题：</p>\n<ol>\n<li>把yaml作为一个整体管理。</li>\n<li>实现yaml的高效复用。</li>\n<li>实现应用级别的版本管理。</li>\n</ol>\n<p>当前 Helm 已经升级到V3版本，相比于V2版本主要变化如下：</p>\n<ol>\n<li>最明显的变化是删除了 Tiller 。</li>\n<li>Release 名称可以在不同命名空间重用。</li>\n<li>支持将 Chart 推送至 Docker 镜像仓库中。</li>\n<li>使用 JSONSchema 验证 chart values。</li>\n</ol>\n<p>Helm是官方提供类似于YUM的包管理，是部署环境的流程封装，Helm有三个重要的概念：<code>chart</code>、<code>release</code>和<code>Repository</code></p>\n<ul>\n<li><code>chart</code>是创建一个应用的信息集合，包括各种Kubernetes对象的配置模板、参数定义、依赖关系、文档说明等。可以将chart想象成apt、yum中的软件安装包。</li>\n<li><code>release</code>是chart的运行实例，代表一个正在运行的应用。当chart被安装到Kubernetes集群，就生成一个release。chart能多次安装到同一个集群，每次安装都是一个release[根据chart赋值不同，完全可以部署出多个release出来]。</li>\n<li><code>Repository</code>用于发布和存储 Chart 的存储库。</li>\n</ul>\n<p>Helm V2 与 Helm V3 的架构图对比：<br><img src=\"/images/pasted-169.png\" alt=\"Helm\"><br>在V2版本的架构中，Tiller在Kubernetes集群中，Helm Client发请求给Tiller需要经过RBAC认证。而在V3版本是Helm通过kubeconfig连接kube-apiserver，避免了使用者去配置RBAC权限。</p>\n<p>Helm发布与传统发布对比：<br><img src=\"/images/pasted-170.png\" alt=\"helmdp\"><br>Helm是 Kubernetes 的包管理器，它将应用程序的所有资源和部署信息(*.yaml)组合到单个部署包中。从而实现应用快速安装到Kubernetes集群中。（通过Yaml的配置模板，将需要修改的内容变为属性值）</p>\n<h2 id=\"安装Helm-v3\"><a href=\"#安装Helm-v3\" class=\"headerlink\" title=\"安装Helm v3\"></a>安装Helm v3</h2><p>安装Helm V3版本非常简单，只需要下载Helm的二进制文件，并复制到 Kubernetes 主节点的 <code>/usr/bin</code> 目录即可。</p>\n<p>Helm下载地址: <a href=\"https://get.helm.sh/helm-v3.4.2-linux-amd64.tar.gz\">https://get.helm.sh/helm-v3.4.2-linux-amd64.tar.gz</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node001 ~]<span class=\"comment\"># wget https://get.helm.sh/helm-v3.4.2-linux-amd64.tar.gz</span></span><br><span class=\"line\">--2022-02-09 16:16:34--  https://get.helm.sh/helm-v3.4.2-linux-amd64.tar.gz</span><br><span class=\"line\">Resolving get.helm.sh (get.helm.sh)... 152.199.39.108, 2606:2800:247:1cb7:261b:1f9c:2074:3c</span><br><span class=\"line\">Connecting to get.helm.sh (get.helm.sh)|152.199.39.108|:443... connected.</span><br><span class=\"line\">HTTP request sent, awaiting response... 200 OK</span><br><span class=\"line\">Length: 13317454 (13M) [application/x-tar]</span><br><span class=\"line\">Saving to: ‘helm-v3.4.2-linux-amd64.tar.gz’</span><br><span class=\"line\"></span><br><span class=\"line\">100%[===============================================================================================================&gt;] 13,317,454  --.-K/s   <span class=\"keyword\">in</span> 0.08s   </span><br><span class=\"line\"></span><br><span class=\"line\">2022-02-09 16:16:35 (151 MB/s) - ‘helm-v3.4.2-linux-amd64.tar.gz’ saved [13317454/13317454]</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node001 ~]<span class=\"comment\"># tar -xf helm-v3.4.2-linux-amd64.tar.gz</span></span><br><span class=\"line\">[root@node001 ~]<span class=\"comment\"># cp linux-amd64/helm /usr/local/bin/</span></span><br><span class=\"line\">[root@node001 ~]<span class=\"comment\"># helm version</span></span><br><span class=\"line\">version.BuildInfo&#123;Version:<span class=\"string\">&quot;v3.4.2&quot;</span>, GitCommit:<span class=\"string\">&quot;23dd3af5e19a02d4f4baa5b2f242645a1a3af629&quot;</span>, GitTreeState:<span class=\"string\">&quot;clean&quot;</span>, GoVersion:<span class=\"string\">&quot;go1.14.13&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Helm命令补全</span></span><br><span class=\"line\">[root@node001 ~]<span class=\"comment\"># yum install -y bash-completion </span></span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks, update-motd</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">base                                                                                                                              | 3.1 kB  00:00:00     </span><br><span class=\"line\">docker-ce-stable                                                                                                                  | 3.5 kB  00:00:00     </span><br><span class=\"line\">epel                                                                                                                              | 4.7 kB  00:00:00     </span><br><span class=\"line\">extras                                                                                                                            | 2.5 kB  00:00:00     </span><br><span class=\"line\">plus                                                                                                                              | 2.9 kB  00:00:00     </span><br><span class=\"line\">updates                                                                                                                           | 2.9 kB  00:00:00     </span><br><span class=\"line\">updates/2.1903/x86_64/primary_db                                                                                                  |  10 MB  00:00:00     </span><br><span class=\"line\">Package 1:bash-completion-2.1-8.1.al7.noarch already installed and latest version</span><br><span class=\"line\">Nothing to <span class=\"keyword\">do</span></span><br><span class=\"line\">[root@node001 ~]<span class=\"comment\"># source /usr/share/bash-completion/bash_completion</span></span><br><span class=\"line\">[root@node001 ~]<span class=\"comment\"># source &lt;(helm completion bash) </span></span><br><span class=\"line\">[root@node001 ~]<span class=\"comment\"># echo &quot;source &lt;(helm completion bash)&quot; &gt;&gt; ~/.bashrc</span></span><br><span class=\"line\">[root@node001 ~]<span class=\"comment\"># helm ver&lt;tab&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Helm常用命令\"><a href=\"#Helm常用命令\" class=\"headerlink\" title=\"Helm常用命令\"></a>Helm常用命令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">create</td>\n<td align=\"left\">创建一个chart并指定名字</td>\n</tr>\n<tr>\n<td align=\"center\">dependency</td>\n<td align=\"left\">管理chart依赖</td>\n</tr>\n<tr>\n<td align=\"center\">get</td>\n<td align=\"left\">下载一个release。可用子命令：all、hooks、manifest、notes、values</td>\n</tr>\n<tr>\n<td align=\"center\">history</td>\n<td align=\"left\">获取release历史</td>\n</tr>\n<tr>\n<td align=\"center\">install</td>\n<td align=\"left\">安装一个chart</td>\n</tr>\n<tr>\n<td align=\"center\">list</td>\n<td align=\"left\">列出release</td>\n</tr>\n<tr>\n<td align=\"center\">package</td>\n<td align=\"left\">将chart目录打包到chart存档文件中</td>\n</tr>\n<tr>\n<td align=\"center\">pull</td>\n<td align=\"left\">从远程仓库中下载chart并解压到本地 # helm pull stable/mysql –untar</td>\n</tr>\n<tr>\n<td align=\"center\">repo</td>\n<td align=\"left\">添加，列出，移除，更新和索引chart仓库。可用子命令：add、index、list、remove、update</td>\n</tr>\n<tr>\n<td align=\"center\">rollback</td>\n<td align=\"left\">从之前版本回滚</td>\n</tr>\n<tr>\n<td align=\"center\">search</td>\n<td align=\"left\">根据关键字搜索chart。可用子命令：hub、repo</td>\n</tr>\n<tr>\n<td align=\"center\">show</td>\n<td align=\"left\">查看chart详细信息。可用子命令：all、chart、readme、values</td>\n</tr>\n<tr>\n<td align=\"center\">status</td>\n<td align=\"left\">显示已命名版本的状态</td>\n</tr>\n<tr>\n<td align=\"center\">template</td>\n<td align=\"left\">本地呈现模板</td>\n</tr>\n<tr>\n<td align=\"center\">uninstall</td>\n<td align=\"left\">卸载一个release</td>\n</tr>\n<tr>\n<td align=\"center\">upgrade</td>\n<td align=\"left\">更新一个release</td>\n</tr>\n<tr>\n<td align=\"center\">version</td>\n<td align=\"left\">查看helm客户端版本</td>\n</tr>\n</tbody></table>\n<h2 id=\"Helm-Chart模板\"><a href=\"#Helm-Chart模板\" class=\"headerlink\" title=\"Helm-Chart模板\"></a>Helm-Chart模板</h2><p>Helm最核心的就是模板，即模板化的K8S manifests文件。</p>\n<p>它本质上就是一个Go的template模板。Helm在Go template模板的基础上，还会增加很多东西。如一些自定义的元数据信息、扩展的库以及一些类似于编程形式的工作流，例如条件语句、管道等等。这些东西都会使得我们的模板变得更加丰富。</p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>有了模板，我们怎么把我们自定义的配置融入进去呢？用的就是这个<code>values</code>文件。这两部分内容其实就是<code>chart</code>的核心功能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node001 helm]<span class=\"comment\"># helm create nginx</span></span><br><span class=\"line\">Creating nginx</span><br><span class=\"line\">[root@node001 helm]<span class=\"comment\"># tree nginx/</span></span><br><span class=\"line\">nginx/</span><br><span class=\"line\">├── charts</span><br><span class=\"line\">├── Chart.yaml</span><br><span class=\"line\">├── templates</span><br><span class=\"line\">│   ├── deployment.yaml</span><br><span class=\"line\">│   ├── _helpers.tpl</span><br><span class=\"line\">│   ├── hpa.yaml</span><br><span class=\"line\">│   ├── ingress.yaml</span><br><span class=\"line\">│   ├── NOTES.txt</span><br><span class=\"line\">│   ├── serviceaccount.yaml</span><br><span class=\"line\">│   ├── service.yaml</span><br><span class=\"line\">│   └── tests</span><br><span class=\"line\">│       └── test-connection.yaml</span><br><span class=\"line\">└── values.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Chart.yaml</code>用于描述这个 Chart的基本信息，包括名字、描述信息以及版本等。</li>\n<li><code>values.yaml</code>用于存储 templates 目录中模板文件中用到变量的值。</li>\n<li><code>Templates</code>目录里面存放所有yaml模板文件。</li>\n<li><code>charts</code>目录里存放这个chart依赖的所有子chart。</li>\n<li><code>NOTES.txt</code>用于介绍Chart帮助信息， helm install 部署后展示给用户。例如：如何使用这个 Chart、列出缺省的设置等。</li>\n<li><code>_helpers.tpl</code>放置模板助手的地方，可以在整个 chart 中重复使用</li>\n</ul>\n<p>接下来尝试部署nginx应用，熟悉模板使用，先把templates 目录下面所有文件全部删除掉，这里我们自己来创建模板文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl create deployment --image=nginx web --dry-run -o yaml &gt; templates/deployment.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl expose deployment web --port=80 --target-port=80 --dry-run -o yaml &gt; templates/service.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@node001 helm]<span class=\"comment\"># rm -rf mychart/templates/*</span></span><br><span class=\"line\">[root@node001 helm]<span class=\"comment\"># cd nginx/templates</span></span><br><span class=\"line\">[root@node001 templates]<span class=\"comment\"># ls</span></span><br><span class=\"line\">deployment.yaml  service.yaml</span><br><span class=\"line\">[root@node001 templates]<span class=\"comment\"># cat *</span></span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: web</span><br><span class=\"line\">  name: web</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: web</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: web</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - image: nginx</span><br><span class=\"line\">        name: nginx</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: web</span><br><span class=\"line\">  name: web</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 80</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: web</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>实际上，这已经是一个可安装的Chart包了，通过 helm install命令来进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># helm install web nginx</span></span><br><span class=\"line\">NAME: web</span><br><span class=\"line\">LAST DEPLOYED: Fri Feb 11 15:35:54 2022</span><br><span class=\"line\">NAMESPACE: default</span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 1</span><br><span class=\"line\">TEST SUITE: None</span><br></pre></td></tr></table></figure>\n<p>这样部署，其实与直接apply没什么两样。</p>\n<p>然后使用如下命令可以看到实际的模板被渲染过后的资源文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># helm get manifest web</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，这与刚开始写的内容是一样的，包括名字、镜像等，我们希望能在一个地方统一定义这些会经常变换的字段，这就需要用到Chart的模板了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vi templates/deployment.yaml </span></span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: &#123;&#123; .Chart.Name &#125;&#125;</span><br><span class=\"line\">    app: &#123;&#123; .Release.Name &#125;&#125;</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: &#123;&#123; .Values.replicas &#125;&#125;</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: &#123;&#123; .Values.label &#125;&#125;</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: &#123;&#123; .Values.label &#125;&#125;</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - image: &#123;&#123; .Values.image &#125;&#125;:&#123;&#123; .Values.imageTag &#125;&#125;</span><br><span class=\"line\">        name: &#123;&#123; .Release.Name &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vi templates/service.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: &#123;&#123; .Chart.Name &#125;&#125;</span><br><span class=\"line\">    app: &#123;&#123; .Release.Name &#125;&#125;</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 80</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: &#123;&#123; .Values.label &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vi values.yaml</span></span><br><span class=\"line\">replicas: 2</span><br><span class=\"line\">image: nginx</span><br><span class=\"line\">imageTag: 1.17</span><br><span class=\"line\">label: nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#尝试渲染</span></span><br><span class=\"line\">[root@node001 nginx]<span class=\"comment\"># helm install web --dry-run ./</span></span><br><span class=\"line\">NAME: web</span><br><span class=\"line\">LAST DEPLOYED: Fri Feb 11 16:04:18 2022</span><br><span class=\"line\">NAMESPACE: default</span><br><span class=\"line\">STATUS: pending-install</span><br><span class=\"line\">REVISION: 1</span><br><span class=\"line\">TEST SUITE: None</span><br><span class=\"line\">HOOKS:</span><br><span class=\"line\">MANIFEST:</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"comment\"># Source: nginx/templates/service.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: nginx</span><br><span class=\"line\">    app: web</span><br><span class=\"line\">  name: web</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 80</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: nginx</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"comment\"># Source: nginx/templates/deployment.yaml</span></span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: nginx</span><br><span class=\"line\">    app: web</span><br><span class=\"line\">  name: web</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 2</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - image: nginx:1.17</span><br><span class=\"line\">        name: web</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-171.png\" alt=\"access\"></p>\n<p>这个deployment就是一个Go template的模板，这里定义的Release模板对象属于Helm内置的一种对象，是从values文件中读取出来的。这样一来，我们可以将需要变化的地方都定义变量。</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>Helm也提供了<code>--dry-run</code> <code>--debug</code>调试参数，帮助你验证模板正确性。在执行helm install时候带上这两个参数就可以把对应的values值和渲染的资源清单打印出来，而不会真正的去部署一个release。</p>\n<p>比如我们来调试上面创建的 chart 包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># helm install web2 --dry-run /root/mychart</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h3><p>刚刚我们使用 <code>&#123;&#123;.Release.Name&#125;&#125;</code>将 release 的名称插入到模板中。这里的 <code>Release</code> 就是 Helm 的内置对象，下面是一些常用的内置对象：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Release.Name</th>\n<th align=\"left\">release 名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Release.Name</td>\n<td align=\"left\">release 名称</td>\n</tr>\n<tr>\n<td align=\"center\">Release.Namespace</td>\n<td align=\"left\">release 命名空间</td>\n</tr>\n<tr>\n<td align=\"center\">Release.Service</td>\n<td align=\"left\">release 服务的名称</td>\n</tr>\n<tr>\n<td align=\"center\">Release.Revision</td>\n<td align=\"left\">release 修订版本号，从1开始累加</td>\n</tr>\n</tbody></table>\n<p>参考文档: <a href=\"https://helm.sh/zh/docs/chart_template_guide/builtin_objects/\">https://helm.sh/zh/docs/chart_template_guide/builtin_objects/</a></p>\n<h3 id=\"Values\"><a href=\"#Values\" class=\"headerlink\" title=\"Values\"></a>Values</h3><p>Values对象是为Chart模板提供值，这个对象的值有4个来源：</p>\n<ul>\n<li>chart 包中的 <code>values.yaml</code> 文件</li>\n<li>父 chart 包的 <code>values.yaml</code> 文件</li>\n<li>通过 <code>helm install</code> 或者 <code>helm upgrade</code> 的 <code>-f</code>或者 <code>--values</code>参数传入的自定义的 yaml 文件</li>\n<li>通过 <code>--set</code> 参数传入的值</li>\n</ul>\n<p>chart 的 values.yaml 提供的值可以被用户提供的 values 文件覆盖，而该文件同样可以被 –set提供的参数所覆盖。</p>\n<p>上面的例子中我们重新编辑了 <code>values.yaml</code> 文件，将默认的值全部清空，然后分别添加副本数、镜像名称、镜像版本、标签等</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vi values.yaml</span></span><br><span class=\"line\"><span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">imageTag:</span> <span class=\"number\">1.17</span></span><br><span class=\"line\"><span class=\"attr\">label:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n<p>且values文件也可以包含结构化内容，例如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat values.yaml </span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">label:</span></span><br><span class=\"line\">  <span class=\"attr\">project:</span> <span class=\"string\">ms</span></span><br><span class=\"line\">  <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\"># cat templates/deployment.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">.Release.Name</span> &#125;&#125;<span class=\"string\">-deployment</span> </span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> &#123;&#123; <span class=\"string\">.Values.replicas</span> &#125;&#125; </span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">project:</span> &#123;&#123; <span class=\"string\">.Values.label.project</span> &#125;&#125;</span><br><span class=\"line\">      <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">.Values.label.app</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">project:</span> &#123;&#123; <span class=\"string\">.Values.label.project</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">.Values.label.app</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> &#123;&#123; <span class=\"string\">.Values.image</span> &#125;&#125;<span class=\"string\">:&#123;&#123;</span> <span class=\"string\">.Values.imageTag</span> <span class=\"string\">&#125;&#125;</span> </span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n\n<p>参考文档: <a href=\"https://helm.sh/zh/docs/chart_template_guide/values_files/\">https://helm.sh/zh/docs/chart_template_guide/values_files/</a></p>\n<h3 id=\"管道与函数\"><a href=\"#管道与函数\" class=\"headerlink\" title=\"管道与函数\"></a>管道与函数</h3><p>前面讲的模块，其实就是将值传给模板引擎进行渲染，模板引擎还支持对拿到数据进行二次处理。<br>例如从.Values中读取的值变成字符串，可以使用quote函数实现：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vi templates/deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">quote</span> <span class=\"string\">.Values.label.app</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"comment\"># helm install --dry-run web ../mychart/ </span></span><br><span class=\"line\">        <span class=\"attr\">project:</span> <span class=\"string\">ms</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">&quot;nginx&quot;</span></span><br></pre></td></tr></table></figure>\n<p><code>quote .Values.label.app</code> 将后面的值作为参数传递给quote函数。</p>\n<p>模板函数调用语法为：<code>functionName arg1 arg2…</code></p>\n<p>另外还会经常使用一个<code>default</code>函数，该函数允许在模板中指定默认值，以防止该值被忽略掉。<br>例如忘记定义，执行helm install 会因为缺少字段无法创建资源，这时就可以定义一个默认值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat values.yaml </span></span><br><span class=\"line\">replicas: 2</span><br><span class=\"line\"><span class=\"comment\"># cat templates/deployment.yaml </span></span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-deployment</span><br><span class=\"line\">- name: &#123;&#123; .Values.name | default <span class=\"string\">&quot;nginx&quot;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>其他函数：<br>指定长度缩进：<code>&#123;&#123; .Values.resources | indent 12 &#125;&#125;</code><br>转大写：<code>&#123;&#123; upper .Values.resources &#125;&#125;</code><br>首字母大写：<code>&#123;&#123; title .Values.resources &#125;&#125;</code></p>\n<p>参考文档: </p>\n<ul>\n<li><a href=\"https://helm.sh/zh/docs/chart_template_guide/functions_and_pipelines/\">https://helm.sh/zh/docs/chart_template_guide/functions_and_pipelines/</a></li>\n<li><a href=\"https://helm.sh/zh/docs/chart_template_guide/function_list/\">https://helm.sh/zh/docs/chart_template_guide/function_list/</a></li>\n</ul>\n<h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><h4 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if/else\"></a>if/else</h4><p>流程控制是为模板提供了一种能力，满足更复杂的数据逻辑处理。<br>Helm模板语言提供以下流程控制语句：</p>\n<ul>\n<li>if/else 条件块</li>\n<li>with 指定范围</li>\n<li>range 循环块</li>\n<li>if</li>\n</ul>\n<p>if/else块是用于在模板中有条件地包含文本块的方法，条件块的基本结构如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123; <span class=\"string\">if</span> <span class=\"string\">PIPELINE</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"comment\"># Do something</span></span><br><span class=\"line\">&#123;&#123; <span class=\"string\">else</span> <span class=\"string\">if</span> <span class=\"string\">OTHER</span> <span class=\"string\">PIPELINE</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"comment\"># Do something else</span></span><br><span class=\"line\">&#123;&#123; <span class=\"string\">else</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"comment\"># Default case</span></span><br><span class=\"line\">&#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># cat values.yaml </span><br><span class=\"line\">devops: k8</span><br><span class=\"line\"></span><br><span class=\"line\"># cat templates/deployment.yaml </span><br><span class=\"line\">...</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx</span><br><span class=\"line\">        &#123;&#123; if eq .Values.devops &quot;k8s&quot; &#125;&#125;</span><br><span class=\"line\">        devops: 123</span><br><span class=\"line\">        &#123;&#123; else &#125;&#125;</span><br><span class=\"line\">        devops: 456</span><br><span class=\"line\">        &#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面条件语句使用了eq运算符判断是否相等，除此之外，还支持ne、 lt、 gt、 and、 or等运算符。</p>\n<p>通过模板引擎来渲染一下，会得到如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># helm install --dry-run web ../mychart/ </span><br><span class=\"line\">...</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx</span><br><span class=\"line\">        </span><br><span class=\"line\">        devops: 456</span><br></pre></td></tr></table></figure>\n<p>上面渲染出来会有多余的空行，这是因为当模板引擎运行时，会将控制指令删除，所有之前占的位置也就空白了，需要使用<code>&#123;&#123;- if …&#125;&#125;</code> 的方式消除此空行：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat templates/deploymemt.yaml</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">if</span> <span class=\"string\">eq</span> <span class=\"string\">.Values.env.hello</span> <span class=\"string\">&quot;world&quot;</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">hello</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"number\">123</span></span><br><span class=\"line\">        &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>现在是不是没有多余的空格了，如果使用-}}需谨慎，比如上面模板文件中：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat templates/deploymemt.yaml</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\">       <span class=\"attr\">env:</span></span><br><span class=\"line\">        &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">if</span> <span class=\"string\">eq</span> <span class=\"string\">.Values.env.hello</span> <span class=\"string\">&quot;world&quot;</span> <span class=\"string\">-</span>&#125;&#125;</span><br><span class=\"line\">           <span class=\"bullet\">-</span> <span class=\"attr\">hello:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>这会渲染成：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env:- hello:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>因为<code>-&#125;&#125;</code>它删除了双方的换行符。</p>\n<p>条件判断就是判断条件是否为真，如果值为以下几种情况则为false：</p>\n<ul>\n<li>一个布尔类型的 <code>假</code></li>\n<li>一个数字 <code>零</code></li>\n<li>一个 <code>空</code>的字符串</li>\n<li>一个 <code>nil</code>（空或 <code>null</code>）</li>\n<li>一个空的集合（ <code>map</code>、 <code>slice</code>、 <code>tuple</code>、 <code>dict</code>、 <code>array</code>）</li>\n</ul>\n<p>例如，判断一个空的数组</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat values.yaml </span></span><br><span class=\"line\"><span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\"># limits:</span></span><br><span class=\"line\">  <span class=\"comment\">#   cpu: 100m</span></span><br><span class=\"line\">  <span class=\"comment\">#   memory: 128Mi</span></span><br><span class=\"line\">  <span class=\"comment\"># requests:</span></span><br><span class=\"line\">  <span class=\"comment\">#   cpu: 100m</span></span><br><span class=\"line\">  <span class=\"comment\">#   memory: 128Mi</span></span><br><span class=\"line\"><span class=\"comment\"># cat templates/deploymemt.yaml</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.16</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">if</span> <span class=\"string\">.Values.resources</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">&#123;&#123; <span class=\"string\">toYaml</span> <span class=\"string\">.Values.resources</span> <span class=\"string\">|</span> <span class=\"string\">indent</span> <span class=\"number\">10</span> &#125;&#125;</span><br><span class=\"line\">        &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>例如，判断一个布尔值</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat values.yaml </span></span><br><span class=\"line\"><span class=\"attr\">service:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ingress:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">example.ctnrs.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cat templates/ingress.yaml </span></span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">if</span> <span class=\"string\">.Values.ingress.enabled</span> <span class=\"string\">-</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">.Release.Name</span> &#125;&#125;<span class=\"string\">-ingress</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> &#123;&#123; <span class=\"string\">.Values.ingress.host</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> &#123;&#123; <span class=\"string\">.Release.Name</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> &#123;&#123; <span class=\"string\">.Values.service.port</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h4><p>with: 控制变量作用域。<br>还记得之前我们的 <code>&#123;&#123;.Release.xxx&#125;&#125;</code>或者 <code>&#123;&#123;.Values.xxx&#125;&#125;</code>吗？其中的 <code>.</code>就是表示对当前范围的引用， .Values就是告诉模板在当前范围中查找 <code>Values</code>对象的值。而 with语句就可以来控制变量的作用域范围，其语法和一个简单的 if语句比较类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123; with PIPELINE &#125;&#125;</span><br><span class=\"line\">  #  restricted scope</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>with语句可以允许将当前范围 <code>.</code>设置为特定的对象，比如我们前面一直使用的 <code>.Values.label</code>，我们可以使用 with来将 <code>.</code>范围指向 <code>.Values.label</code>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat values.yaml </span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">label:</span></span><br><span class=\"line\">  <span class=\"attr\">project:</span> <span class=\"string\">ms</span></span><br><span class=\"line\">  <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cat templates/deployment.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">.Release.Name</span> &#125;&#125;<span class=\"string\">-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">with</span> <span class=\"string\">.Values.nodeSelector</span> &#125;&#125;</span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span></span><br><span class=\"line\">        <span class=\"attr\">team:</span> &#123;&#123; <span class=\"string\">.team</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">gpu:</span> &#123;&#123; <span class=\"string\">.gpu</span> &#125;&#125;</span><br><span class=\"line\">      &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.16</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n<p>优化后：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">with</span> <span class=\"string\">.Values.nodeSelector</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">nodeSelector:</span></span><br><span class=\"line\">  &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">toYaml</span> <span class=\"string\">.</span> <span class=\"string\">|</span> <span class=\"string\">nindent</span> <span class=\"number\">8</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>上面增加了一个<code>&#123;&#123;- with .Values.label &#125;&#125; xxx &#123;&#123;- end &#125;&#125;</code>的一个块，这样的话就可以在当前的块里面直接引用 .team和 .gpu了。</p>\n<p><code>with</code>是一个循环构造。使用<code>.Values.nodeSelector</code>中的值：将其转换为<code>Yaml</code>。toYaml之后的点是循环中<code>.Values.nodeSelector</code>的当前值</p>\n<h4 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h4><p>在Helm模板语言中，使用 range关键字来进行循环操作, <code>values.yaml</code>文件中添加上一个变量列表:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat values.yaml </span></span><br><span class=\"line\"><span class=\"attr\">test:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>循环打印该列表:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">.Release.Name</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">test:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  &#123;&#123;- range .Values.test &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#123;&#123; . &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#123;&#123;- end &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"comment\"># helm install web --dry-run  .</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\"># Source: nginx/templates/configmap.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">test:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    1</span></span><br><span class=\"line\"><span class=\"string\">    2</span></span><br><span class=\"line\"><span class=\"string\">    3</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<p>参考文档: <a href=\"https://helm.sh/zh/docs/chart_template_guide/control_structures/\">https://helm.sh/zh/docs/chart_template_guide/control_structures/</a></p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量，在模板中，使用变量的场合不多，但我们将看到如何使用它来简化代码，并更好地利用with和range。<br><strong>问题1：获取列表键值</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat ../values.yaml</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">NAME:</span> <span class=\"string\">&quot;gateway&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">JAVA_OPTS:</span> <span class=\"string\">&quot;-Xmx1G&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># cat deployment.yaml </span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\">\t\t<span class=\"attr\">env:</span></span><br><span class=\"line\">\t\t&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">range</span> <span class=\"string\">$k</span>, <span class=\"string\">$v</span> <span class=\"string\">:=</span> <span class=\"string\">.Values.env</span> &#125;&#125;</span><br><span class=\"line\">           <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">$k</span> &#125;&#125;</span><br><span class=\"line\">             <span class=\"attr\">value:</span> &#123;&#123; <span class=\"string\">$v</span> <span class=\"string\">|</span> <span class=\"string\">quote</span> &#125;&#125;</span><br><span class=\"line\">        &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>渲染结果如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">JAVA_OPTS</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"string\">&quot;-Xmx1G&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NAME</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"string\">&quot;gateway&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面在 range循环中使用 $key和 $value两个变量来接收后面列表循环的键和值。</p>\n<p><strong>问题2：with中不能使用内置对象</strong><br>with语句块内不能再 .Release.Name对象，否则报错。我们可以将该对象赋值给一个变量可以来解决这个问题:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">.Release.Name</span> &#125;&#125;<span class=\"string\">-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> &#123;&#123; <span class=\"string\">.Values.replicas</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">project:</span> &#123;&#123; <span class=\"string\">.Values.label.project</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">quote</span> <span class=\"string\">.Values.label.app</span> &#125;&#125;</span><br><span class=\"line\">      &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">with</span> <span class=\"string\">.Values.label</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">project:</span> &#123;&#123; <span class=\"string\">.project</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">.app</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">release:</span> &#123;&#123; <span class=\"string\">.Release.Name</span> &#125;&#125;</span><br><span class=\"line\">      &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>上面会出错</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">$releaseName</span> <span class=\"string\">:=</span> <span class=\"string\">.Release.Name</span> <span class=\"string\">-</span>&#125;&#125;</span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">with</span> <span class=\"string\">.Values.label</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"attr\">project:</span> &#123;&#123; <span class=\"string\">.project</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">.app</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"attr\">release:</span> &#123;&#123; <span class=\"string\">$releaseName</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"comment\"># 或者可以使用$符号,引入全局命名空间</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span> &#123;&#123; <span class=\"string\">$.Release.Name</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到在 with语句上面增加了一句 <code>&#123;&#123;-$releaseName:=.Release.Name-&#125;&#125;</code>，其中 <code>$releaseName</code>就是后面的对象的一个引用变量，它的形式就是 <code>$name</code>，赋值操作使用 <code>:=</code>，这样 with语句块内部的 <code>$releaseName</code>变量仍然指向的是 <code>.Release.Name</code></p>\n<p>参考文档: <a href=\"https://helm.sh/zh/docs/chart_template_guide/variables/\">https://helm.sh/zh/docs/chart_template_guide/variables/</a></p>\n<h3 id=\"命名模板\"><a href=\"#命名模板\" class=\"headerlink\" title=\"命名模板\"></a>命名模板</h3><p>命名模板: 使用<code>define</code>定义，<code>template</code>引入，在<code>templates</code>目录中默认下划线_开头的文件为公共模板<code>_helpers.tpl</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat _helpers.tpl</span></span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">define</span> <span class=\"string\">&quot;demo.fullname&quot;</span> <span class=\"string\">-</span>&#125;&#125;</span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">.Chart.Name</span> <span class=\"string\">-</span>&#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">.Release.Name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> <span class=\"string\">-</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cat deployment.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">template</span> <span class=\"string\">&quot;demo.fullname&quot;</span> <span class=\"string\">.</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n<p>template指令是将一个模板包含在另一个模板中的方法。但是，template函数不能用于Go模板管道。为了解决该问题，增加include功能。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat _helpers.tpl</span></span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">define</span> <span class=\"string\">&quot;demo.labels&quot;</span> <span class=\"string\">-</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">template</span> <span class=\"string\">&quot;demo.fullname&quot;</span> <span class=\"string\">.</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">chart:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; .Chart.Name &#125;&#125;</span>-<span class=\"template-variable\">&#123;&#123; .Chart.Version &#125;&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"attr\">release:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; .Release.Name &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> <span class=\"string\">-</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cat deployment.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">include</span> <span class=\"string\">&quot;demo.fullname&quot;</span> <span class=\"string\">.</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    &#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">include</span> <span class=\"string\">&quot;demo.labels&quot;</span> <span class=\"string\">.</span> <span class=\"string\">|</span> <span class=\"string\">nindent</span> <span class=\"number\">4</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n<p>上面包含一个名为 <code>demo.labels</code> 的模板，然后将值 <code>.</code> 传递给模板，最后将该模板的输出传递给 <code>nindent</code> 函数。</p>\n<p>参考文档: <a href=\"https://helm.sh/zh/docs/chart_template_guide/named_templates/\">https://helm.sh/zh/docs/chart_template_guide/named_templates/</a></p>\n<h2 id=\"如何开发自己的Chart\"><a href=\"#如何开发自己的Chart\" class=\"headerlink\" title=\"如何开发自己的Chart\"></a>如何开发自己的Chart</h2><ol>\n<li>先创建模板<code>helm create demo</code></li>\n<li>修改<code>Chart.yaml</code>，<code>Values.yaml</code>，添加常用的变量</li>\n<li>在templates目录下创建部署镜像所需要的yaml文件，并变量引用yaml里经常变动的字段</li>\n</ol>\n","categories":["OPS"],"tags":["OPS","Zookeeper","Kubernetes","StatefuSet","Helm v3"]},{"title":"k8s企业级DevOps实践-Pod管理、健康检查、ConfigMap和Secret的定义与容器编排","url":"/forward/6b4e4d76.html","content":"<h2 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h2><p><strong>静态Pod的方式：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## etcd、apiserver、controller-manager、kube-scheduler</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl -n kube-system get po</span></span><br><span class=\"line\">NAME                                 READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">coredns-58cc8c89f4-gnmdb             1/1     Running   2          22h</span><br><span class=\"line\">coredns-58cc8c89f4-r9hlv             1/1     Running   2          22h</span><br><span class=\"line\">etcd-k8s-master                      1/1     Running   3          22h</span><br><span class=\"line\">kube-apiserver-k8s-master            1/1     Running   3          22h</span><br><span class=\"line\">kube-controller-manager-k8s-master   1/1     Running   3          22h</span><br><span class=\"line\">kube-flannel-ds-amd64-h4mfv          1/1     Running   2          22h</span><br><span class=\"line\">kube-flannel-ds-amd64-rz8kt          1/1     Running   1          22h</span><br><span class=\"line\">kube-flannel-ds-amd64-tpqcd          1/1     Running   2          22h</span><br><span class=\"line\">kube-proxy-6qpjh                     1/1     Running   1          22h</span><br><span class=\"line\">kube-proxy-d7p98                     1/1     Running   2          22h</span><br><span class=\"line\">kube-proxy-ntwtl                     1/1     Running   3          22h</span><br><span class=\"line\">kube-scheduler-k8s-master            1/1     Running   3          22h</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># ll /etc/kubernetes/manifests/</span></span><br><span class=\"line\">总用量 16</span><br><span class=\"line\">-rw------- 1 root root 1792 4月  26 00:10 etcd.yaml</span><br><span class=\"line\">-rw------- 1 root root 2635 4月  26 00:10 kube-apiserver.yaml</span><br><span class=\"line\">-rw------- 1 root root 2332 4月  26 00:10 kube-controller-manager.yaml</span><br><span class=\"line\">-rw------- 1 root root 1148 4月  26 00:10 kube-scheduler.yaml</span><br><span class=\"line\"><span class=\"comment\"># 由kubelet直接启动的</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>systemd服务方式：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ systemctl status kubelet</span><br></pre></td></tr></table></figure>\n\n<p>kubectl：二进制命令行工具</p>\n<h2 id=\"集群资源\"><a href=\"#集群资源\" class=\"headerlink\" title=\"集群资源\"></a>集群资源</h2><p>组件是为了支撑k8s平台的运行，安装好的软件。</p>\n<p>资源是如何去使用k8s的能力的定义。比如，k8s可以使用Pod来管理业务应用，那么Pod就是k8s集群中的一类资源，集群中的所有资源可以提供如下方式查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl api-resources</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"再谈namespace\"><a href=\"#再谈namespace\" class=\"headerlink\" title=\"再谈namespace\"></a>再谈namespace</h3><p>命名空间，集群内一个虚拟的概念，类似于资源池的概念，一个池子里可以有各种资源类型，绝大多数的资源都必须属于某一个namespace。集群初始化安装好之后，会默认有如下几个namespace：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get namespaces</span></span><br><span class=\"line\">NAME                   STATUS   AGE</span><br><span class=\"line\">default                Active   23h</span><br><span class=\"line\">kube-node-lease        Active   23h</span><br><span class=\"line\">kube-public            Active   23h <span class=\"comment\">#公共资源池</span></span><br><span class=\"line\">kube-system            Active   23h <span class=\"comment\">#k8s系统资源池</span></span><br><span class=\"line\">kubernetes-dashboard   Active   21h <span class=\"comment\">#安装dashboard是自定义的资源池</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>所有NAMESPACED的资源，在创建的时候都需要指定namespace，若不指定，默认会在default命名空间下</li>\n<li>相同namespace下的同类资源不可以重名，不同类型的资源可以重名</li>\n<li>不同namespace下的同类资源可以重名</li>\n<li>通常在项目使用的时候，我们会创建带有业务含义的namespace来做逻辑上的整合</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看资源池内的资源</span></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl -n kube-system get po</span></span><br><span class=\"line\">NAME                                 READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">coredns-58cc8c89f4-gnmdb             1/1     Running   2          23h</span><br><span class=\"line\">coredns-58cc8c89f4-r9hlv             1/1     Running   2          23h</span><br><span class=\"line\">etcd-k8s-master                      1/1     Running   3          23h</span><br><span class=\"line\">kube-apiserver-k8s-master            1/1     Running   3          23h</span><br><span class=\"line\">kube-controller-manager-k8s-master   1/1     Running   3          23h</span><br><span class=\"line\">kube-flannel-ds-amd64-h4mfv          1/1     Running   2          22h</span><br><span class=\"line\">kube-flannel-ds-amd64-rz8kt          1/1     Running   1          22h</span><br><span class=\"line\">kube-flannel-ds-amd64-tpqcd          1/1     Running   2          22h</span><br><span class=\"line\">kube-proxy-6qpjh                     1/1     Running   1          23h</span><br><span class=\"line\">kube-proxy-d7p98                     1/1     Running   2          23h</span><br><span class=\"line\">kube-proxy-ntwtl                     1/1     Running   3          23h</span><br><span class=\"line\">kube-scheduler-k8s-master            1/1     Running   3          23h</span><br><span class=\"line\"></span><br><span class=\"line\">可以看到再集群搭建时安装的k8s核心组件，-n 指定资源池</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"kubectl的使用\"><a href=\"#kubectl的使用\" class=\"headerlink\" title=\"kubectl的使用\"></a>kubectl的使用</h2><p>类似于docker，kubectl是命令行工具，用于与APIServer交互，内置了丰富的子命令，功能极其强大。 <a href=\"https://kubernetes.io/docs/reference/kubectl/overview/\">文档链接</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl -h</span><br><span class=\"line\">$ kubectl get -h</span><br><span class=\"line\">$ kubectl create -h</span><br><span class=\"line\">$ kubectl create namespace -h</span><br></pre></td></tr></table></figure>\n\n<p>kubectl如何管理集群资源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl get po -v=7</span><br></pre></td></tr></table></figure>\n<h2 id=\"最小调度单元-Pod\"><a href=\"#最小调度单元-Pod\" class=\"headerlink\" title=\"最小调度单元 Pod\"></a>最小调度单元 Pod</h2><p>docker调度的是容器，而在k8s集群中，最小的调度单元是Pod（豆荚）</p>\n<p><img src=\"/images/pasted-43.png\" alt=\"pod\"></p>\n<h3 id=\"为什么引入Pod\"><a href=\"#为什么引入Pod\" class=\"headerlink\" title=\"为什么引入Pod\"></a>为什么引入Pod</h3><ul>\n<li><p>与容器引擎解耦（Docker、Rkt。平台设计与引擎的具体的实现解耦）</p>\n</li>\n<li><p>多容器共享网络|存储|进程 空间, 支持的业务场景更加灵活。<u><strong>划重点</strong></u></p>\n</li>\n</ul>\n<h3 id=\"使用yaml格式定义Pod\"><a href=\"#使用yaml格式定义Pod\" class=\"headerlink\" title=\"使用yaml格式定义Pod\"></a>使用yaml格式定义Pod</h3><p><a href=\"https://gitee.com/pinchengx/k8sdemo\">k8sdemo Git仓库地址</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">*myblog/one-pod/pod.yaml*</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span> <span class=\"comment\">#引入某类资源的成熟度</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span> <span class=\"comment\">#引入资源的类型</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span> <span class=\"comment\">#元数据 kubectl explain pod.metadata 查看</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog</span> <span class=\"comment\">#名称</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span> <span class=\"comment\">#资源池名称</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span> <span class=\"comment\">#资源标签</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span> <span class=\"comment\">#容器定义</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myblog</span> <span class=\"comment\">#容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/myblog:v2</span> <span class=\"comment\">#镜像地址</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span> <span class=\"comment\">#环境变量</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_HOST</span>   <span class=\"comment\">#指定root用户的用户名</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8002</span> <span class=\"comment\">#这个容器暴露的端口</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span> <span class=\"comment\">#容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/mysql:5.7-utf8</span> <span class=\"comment\">#镜像地址</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span> <span class=\"comment\">#这个容器暴露的端口</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span> <span class=\"comment\">#环境变量</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_DATABASE</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;myblog&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>翻译成json格式：</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;apiVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;v1&quot;</span><span class=\"punctuation\">,</span>\t\t</span><br><span class=\"line\">\t<span class=\"attr\">&quot;kind&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Pod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;metadata&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;myblog&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;namespace&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;labels&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;component&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;myblog&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;spec&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;containers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;myblog&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">&quot;image&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;192.168.56.10:5000/myblog&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;MYSQL_HOST&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">                    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;MYSQL_PASSWD&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                        <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">                    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">                <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">&quot;ports&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;containerPort&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"punctuation\">]</span></span><br><span class=\"line\">\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    \t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    \t\t\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;mysql&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">\t\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">]</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th align=\"left\">apiVersion</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">alpha</td>\n<td align=\"left\">进入K8s功能的早期候选版本，可能包含Bug，最终不一定进入K8s</td>\n</tr>\n<tr>\n<td align=\"left\">beta</td>\n<td align=\"left\">已经过测试的版本，最终会进入K8s，但功能、对象定义可能会发生变更。</td>\n</tr>\n<tr>\n<td align=\"left\">stable</td>\n<td align=\"left\">可安全使用的稳定版本</td>\n</tr>\n<tr>\n<td align=\"left\">v1</td>\n<td align=\"left\">stable 版本之后的首个版本，包含了更多的核心对象</td>\n</tr>\n<tr>\n<td align=\"left\">apps/v1</td>\n<td align=\"left\">使用最广泛的版本，像Deployment、ReplicaSets都已进入该版本</td>\n</tr>\n</tbody></table>\n<ul>\n<li>资源类型与apiVersion对照表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Kind</th>\n<th align=\"left\">apiVersion</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ClusterRoleBinding</td>\n<td align=\"left\">rbac.authorization.k8s.io/v1</td>\n</tr>\n<tr>\n<td align=\"left\">ClusterRole</td>\n<td align=\"left\">rbac.authorization.k8s.io/v1</td>\n</tr>\n<tr>\n<td align=\"left\">ConfigMap</td>\n<td align=\"left\">v1</td>\n</tr>\n<tr>\n<td align=\"left\">CronJob</td>\n<td align=\"left\">batch/v1beta1</td>\n</tr>\n<tr>\n<td align=\"left\">DaemonSet</td>\n<td align=\"left\">extensions/v1beta1</td>\n</tr>\n<tr>\n<td align=\"left\">Node</td>\n<td align=\"left\">v1</td>\n</tr>\n<tr>\n<td align=\"left\">Namespace</td>\n<td align=\"left\">v1</td>\n</tr>\n<tr>\n<td align=\"left\">Secret</td>\n<td align=\"left\">v1</td>\n</tr>\n<tr>\n<td align=\"left\">PersistentVolume</td>\n<td align=\"left\">v1</td>\n</tr>\n<tr>\n<td align=\"left\">PersistentVolumeClaim</td>\n<td align=\"left\">v1</td>\n</tr>\n<tr>\n<td align=\"left\">Pod</td>\n<td align=\"left\">v1</td>\n</tr>\n<tr>\n<td align=\"left\">Deployment</td>\n<td align=\"left\">v1、apps/v1、apps/v1beta1、apps/v1beta2</td>\n</tr>\n<tr>\n<td align=\"left\">Service</td>\n<td align=\"left\">v1</td>\n</tr>\n<tr>\n<td align=\"left\">Ingress</td>\n<td align=\"left\">extensions/v1beta1</td>\n</tr>\n<tr>\n<td align=\"left\">ReplicaSet</td>\n<td align=\"left\">apps/v1、apps/v1beta2</td>\n</tr>\n<tr>\n<td align=\"left\">Job</td>\n<td align=\"left\">batch/v1</td>\n</tr>\n<tr>\n<td align=\"left\">StatefulSet</td>\n<td align=\"left\">apps/v1、apps/v1beta1、apps/v1beta2</td>\n</tr>\n</tbody></table>\n<ul>\n<li>快速获得资源和版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl explain pod</span><br><span class=\"line\">$ kubectl explain Pod.apiVersion</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建和访问Pod\"><a href=\"#创建和访问Pod\" class=\"headerlink\" title=\"创建和访问Pod\"></a>创建和访问Pod</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 准备业务镜像</span></span><br><span class=\"line\">docker tag mysql:5.7-utf8 192.168.56.10:5000/mysql:5.7-utf8</span><br><span class=\"line\">docker tag myblog:v2 192.168.56.10:5000/myblog:v2</span><br><span class=\"line\"></span><br><span class=\"line\">docker push 192.168.56.10:5000/mysql:5.7-utf8</span><br><span class=\"line\">docker push 192.168.56.10:5000/myblog:v2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建namespace, namespace是逻辑上的资源池</span></span><br><span class=\"line\">$ kubectl create namespace demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 使用指定文件创建Pod</span></span><br><span class=\"line\">$ kubectl create -f demo-pod.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看pod，可以简写po</span></span><br><span class=\"line\">[root@k8s-master poddemo]<span class=\"comment\"># kubectl -n demo get pods -o wide</span></span><br><span class=\"line\">NAME     READY   STATUS             RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">myblog   0/2     ImagePullBackOff   0          20s   10.244.2.11   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"><span class=\"comment\">## 报错，查看详情</span></span><br><span class=\"line\">kubectl -n demo describe po myblog</span><br><span class=\"line\">拉取镜像报错，原因仓库中的镜像和ymal中名称不一致</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl -n demo delete pod myblog</span><br><span class=\"line\">删除pod 重新生成</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 所有的操作都需要指定namespace，如果是在default命名空间下，则可以省略</span></span><br><span class=\"line\">$ kubectl -n demo get pods -o wide</span><br><span class=\"line\">NAME     READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">myblog   2/2     Running   0          13s   10.244.2.16   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看调度详情（调度到了k8s-slave1节点）</span></span><br><span class=\"line\">kubectl -n demo describe pod myblog</span><br><span class=\"line\">  Type    Reason     Age        From                 Message</span><br><span class=\"line\">  ----    ------     ----       ----                 -------</span><br><span class=\"line\">  Normal  Scheduled  &lt;unknown&gt;  default-scheduler    Successfully assigned demo/myblog to k8s-slave1</span><br><span class=\"line\">  Normal  Pulled     6m1s       kubelet, k8s-slave1  Container image <span class=\"string\">&quot;192.168.56.10:5000/myblog:v2&quot;</span> already present on machine</span><br><span class=\"line\">  Normal  Created    6m1s       kubelet, k8s-slave1  Created container myblog</span><br><span class=\"line\">  Normal  Started    6m1s       kubelet, k8s-slave1  Started container myblog</span><br><span class=\"line\">  Normal  Pulling    6m1s       kubelet, k8s-slave1  Pulling image <span class=\"string\">&quot;192.168.56.10:5000/mysql:5.7utf8&quot;</span></span><br><span class=\"line\">  Normal  Pulled     6m1s       kubelet, k8s-slave1  Successfully pulled image <span class=\"string\">&quot;192.168.56.10:5000/mysql:5.7utf8&quot;</span></span><br><span class=\"line\">  Normal  Created    6m1s       kubelet, k8s-slave1  Created container mysql</span><br><span class=\"line\">  Normal  Started    6m1s       kubelet, k8s-slave1  Started container mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 使用Pod Ip访问服务,3306和8002</span></span><br><span class=\"line\">$ curl 10.244.2.16:8002/blog/index/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 进入容器,执行初始化, 不必到对应的主机执行docker exec</span></span><br><span class=\"line\">$ kubectl -n demo <span class=\"built_in\">exec</span> -ti myblog -c myblog bash</span><br><span class=\"line\">/ <span class=\"comment\"># env</span></span><br><span class=\"line\">/ <span class=\"comment\"># python3 manage.py migrate</span></span><br><span class=\"line\">$ kubectl -n demo <span class=\"built_in\">exec</span> -ti myblog -c mysql bash</span><br><span class=\"line\">/ <span class=\"comment\"># mysql -p123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 再次访问服务,3306和8002</span></span><br><span class=\"line\">$ curl 10.244.2.16:8002/blog/index/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 进到slave1上查看pod状态</span></span><br><span class=\"line\">[root@k8s-slave1 ~]<span class=\"comment\"># docker ps | grep myblog</span></span><br><span class=\"line\">43da28757d00   192.168.56.10:5000/mysql                            <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   16 minutes ago   Up 16 minutes             k8s_mysql_myblog_demo_e42b0d34-2cae-4d11-be8d-eb43691eb7cc_0</span><br><span class=\"line\">39674d67b6a8   c81fbb3b55c2                                        <span class=\"string\">&quot;./run.sh&quot;</span>               16 minutes ago   Up 16 minutes             k8s_myblog_myblog_demo_e42b0d34-2cae-4d11-be8d-eb43691eb7cc_0</span><br><span class=\"line\">84120ea0dbbd   registry.aliyuncs.com/google_containers/pause:3.1   <span class=\"string\">&quot;/pause&quot;</span>                 16 minutes ago   Up 16 minutes             k8s_POD_myblog_demo_e42b0d34-2cae-4d11-be8d-eb43691eb7cc_0</span><br><span class=\"line\">//如何判断主机中pod数量 过滤关键词pause:3.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"Infra容器\"><a href=\"#Infra容器\" class=\"headerlink\" title=\"Infra容器\"></a>Infra容器</h3><p>登录<code>k8s-slave1</code>节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker ps -a |grep myblog  <span class=\"comment\">## 发现有三个容器</span></span><br><span class=\"line\"><span class=\"comment\">## 其中包含mysql和myblog程序以及Infra容器</span></span><br><span class=\"line\"><span class=\"comment\">## 为了实现Pod内部的容器可以通过localhost通信，每个Pod都会启动Infra容器，然后Pod内部的其他容器的网络空间会共享该Infra容器的网络空间(Docker网络的container模式)，Infra容器只需要hang住网络空间，不需要额外的功能，因此资源消耗极低。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 登录master节点，查看pod内部的容器ip均相同，为pod ip</span></span><br><span class=\"line\">$ kubectl -n demo <span class=\"built_in\">exec</span> -ti myblog -c myblog bash</span><br><span class=\"line\">/ <span class=\"comment\"># ifconfig</span></span><br><span class=\"line\">$ kubectl -n demo <span class=\"built_in\">exec</span> -ti myblog -c mysql bash</span><br><span class=\"line\">/ <span class=\"comment\"># ifconfig</span></span><br></pre></td></tr></table></figure>\n<p>pod容器命名: <code>k8s_&lt;container_name&gt;_&lt;pod_name&gt;_&lt;namespace&gt;_&lt;random_string&gt;</code></p>\n<h3 id=\"查看pod详细信息\"><a href=\"#查看pod详细信息\" class=\"headerlink\" title=\"查看pod详细信息\"></a>查看pod详细信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 查看pod调度节点及pod_ip</span></span><br><span class=\"line\">$ kubectl -n demo get pods -o wide</span><br><span class=\"line\"><span class=\"comment\">## 查看完整的yaml</span></span><br><span class=\"line\">$ kubectl -n demo get po myblog -o yaml</span><br><span class=\"line\"><span class=\"comment\">## 查看pod的明细信息及事件，etcd中存储时间很短，可以加长但是影响性能</span></span><br><span class=\"line\">$ kubectl -n demo describe pod myblog</span><br></pre></td></tr></table></figure>\n<h3 id=\"Troubleshooting-and-Debugging\"><a href=\"#Troubleshooting-and-Debugging\" class=\"headerlink\" title=\"Troubleshooting and Debugging\"></a>Troubleshooting and Debugging</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入Pod内的容器</span></span><br><span class=\"line\">$ kubectl -n &lt;namespace&gt; <span class=\"built_in\">exec</span> &lt;pod_name&gt; -c &lt;container_name&gt; -ti /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看Pod内容器日志,显示标准或者错误输出日志</span></span><br><span class=\"line\">$ kubectl -n &lt;namespace&gt; logs -f &lt;pod_name&gt; -c &lt;container_name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新服务版本\"><a href=\"#更新服务版本\" class=\"headerlink\" title=\"更新服务版本\"></a>更新服务版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker build . -t 192.168.56.10:5000/myblog:v2 -f Dockerfile</span><br><span class=\"line\"><span class=\"comment\">#构建更新一步到位</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl apply -f demo-pod.yaml</span><br><span class=\"line\"><span class=\"comment\"># 更新完push到仓库后 执行此命令</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除Pod服务\"><a href=\"#删除Pod服务\" class=\"headerlink\" title=\"删除Pod服务\"></a>删除Pod服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#根据文件删除</span></span><br><span class=\"line\">$ kubectl delete -f demo-pod.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#根据pod_name删除</span></span><br><span class=\"line\">$ kubectl -n &lt;namespace&gt; delete pod &lt;pod_name&gt;</span><br><span class=\"line\">--grace-period=0 --force //强制删除，一般不用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pod数据持久化\"><a href=\"#Pod数据持久化\" class=\"headerlink\" title=\"Pod数据持久化\"></a>Pod数据持久化</h3><p>若删除了Pod，由于mysql的数据都在容器内部，会造成数据丢失，因此需要数据进行持久化。</p>\n<ul>\n<li>定点使用hostpath挂载，nodeSelector定点（将Pod调度到指定的容器通过标签的方式）<ul>\n<li>所有容器可共享volumes</li>\n</ul>\n</li>\n</ul>\n<p><code>myblog/one-pod/pod-with-volume.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span> <span class=\"comment\">#volume名字</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span> <span class=\"comment\">#持久化到node的哪个位置</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/opt/mysql/data</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span>   <span class=\"comment\"># 使用节点选择器将Pod调度到指定label的节点</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/myblog:v2</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_HOST</span>   <span class=\"comment\">#  指定root用户的用户名</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/mysql:5.7-utf8</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_DATABASE</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;myblog&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span> <span class=\"comment\">#挂载volume到pod内mysql容器中</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span> <span class=\"comment\">#volume名字</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span> <span class=\"comment\">#容器内的路径</span></span><br></pre></td></tr></table></figure>\n\n<p>保存文件为<code>pod-with-volume.yaml</code>，执行创建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 若存在旧的同名服务，先删除掉，后创建</span></span><br><span class=\"line\">$ kubectl -n demo delete pod myblog</span><br><span class=\"line\"><span class=\"comment\">## 创建</span></span><br><span class=\"line\">$ kubectl create -f pod-with-volume.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 此时pod状态Pending</span></span><br><span class=\"line\">$ kubectl -n demo get po</span><br><span class=\"line\">NAME     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">myblog   0/2     Pending   0          32s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看原因，提示调度失败，因为节点不满足node selector(没有节点打标签)</span></span><br><span class=\"line\">$ kubectl -n demo describe po myblog</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type     Reason            Age                From               Message</span><br><span class=\"line\">  ----     ------            ----               ----               -------</span><br><span class=\"line\">  Warning  FailedScheduling  12s (x2 over 12s)  default-scheduler  0/3 nodes are available: 3 node(s) didn<span class=\"string\">&#x27;t match node selector.</span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">## 为slavel1节点打标签</span></span><br><span class=\"line\"><span class=\"string\">$ kubectl label node k8s-slave1 component=mysql</span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">[root@k8s-master cjhdemo]# kubectl get nodes --show-labels</span></span><br><span class=\"line\"><span class=\"string\">NAME         STATUS   ROLES    AGE   VERSION   LABELS</span></span><br><span class=\"line\"><span class=\"string\">k8s-master   Ready    master   26h   v1.16.2   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-master,kubernetes.io/os=linux,node-role.kubernetes.io/master=</span></span><br><span class=\"line\"><span class=\"string\">k8s-slave1   Ready    &lt;none&gt;   26h   v1.16.2   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,component=mysql,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-slave1,kubernetes.io/os=linux</span></span><br><span class=\"line\"><span class=\"string\">k8s-slave2   Ready    &lt;none&gt;   26h   v1.16.2   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-slave2,kubernetes.io/os=linux</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 执行成功</span></span><br><span class=\"line\"><span class=\"string\">[root@k8s-master cjhdemo]# kubectl -n demo get po </span></span><br><span class=\"line\"><span class=\"string\">NAME     READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\"><span class=\"string\">myblog   2/2     Running   0          6m40s</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[root@k8s-master cjhdemo]# kubectl -n demo get po -o wide</span></span><br><span class=\"line\"><span class=\"string\">NAME     READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\"><span class=\"string\">myblog   2/2     Running   0          5m59s   10.244.2.17   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 到k8s-slave1节点，查看/opt/mysql/data</span></span><br><span class=\"line\"><span class=\"string\">$ ll /opt/mysql/data/</span></span><br><span class=\"line\"><span class=\"string\">[root@k8s-slave1 ~]# ll /opt/mysql/data/</span></span><br><span class=\"line\"><span class=\"string\">总用量 188488</span></span><br><span class=\"line\"><span class=\"string\">-rw-r----- 1 polkitd ssh_keys       56 4月  27 02:30 auto.cnf</span></span><br><span class=\"line\"><span class=\"string\">-rw------- 1 polkitd ssh_keys     1676 4月  27 02:30 ca-key.pem</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r-- 1 polkitd ssh_keys     1112 4月  27 02:30 ca.pem</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r-- 1 polkitd ssh_keys     1112 4月  27 02:30 client-cert.pem</span></span><br><span class=\"line\"><span class=\"string\">-rw------- 1 polkitd ssh_keys     1676 4月  27 02:30 client-key.pem</span></span><br><span class=\"line\"><span class=\"string\">-rw-r----- 1 polkitd ssh_keys     1359 4月  27 02:30 ib_buffer_pool</span></span><br><span class=\"line\"><span class=\"string\">-rw-r----- 1 polkitd ssh_keys 79691776 4月  27 02:30 ibdata1</span></span><br><span class=\"line\"><span class=\"string\">-rw-r----- 1 polkitd ssh_keys 50331648 4月  27 02:30 ib_logfile0</span></span><br><span class=\"line\"><span class=\"string\">-rw-r----- 1 polkitd ssh_keys 50331648 4月  27 02:30 ib_logfile1</span></span><br><span class=\"line\"><span class=\"string\">-rw-r----- 1 polkitd ssh_keys 12582912 4月  27 02:30 ibtmp1</span></span><br><span class=\"line\"><span class=\"string\">drwxr-x--- 2 polkitd ssh_keys       20 4月  27 02:30 myblog</span></span><br><span class=\"line\"><span class=\"string\">-rw-r----- 1 polkitd ssh_keys        2 4月  27 02:30 myblog.pid</span></span><br><span class=\"line\"><span class=\"string\">drwxr-x--- 2 polkitd ssh_keys     4096 4月  27 02:30 mysql</span></span><br><span class=\"line\"><span class=\"string\">drwxr-x--- 2 polkitd ssh_keys     8192 4月  27 02:30 performance_schema</span></span><br><span class=\"line\"><span class=\"string\">-rw------- 1 polkitd ssh_keys     1680 4月  27 02:30 private_key.pem</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r-- 1 polkitd ssh_keys      452 4月  27 02:30 public_key.pem</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r-- 1 polkitd ssh_keys     1112 4月  27 02:30 server-cert.pem</span></span><br><span class=\"line\"><span class=\"string\">-rw------- 1 polkitd ssh_keys     1680 4月  27 02:30 server-key.pem</span></span><br><span class=\"line\"><span class=\"string\">drwxr-x--- 2 polkitd ssh_keys     8192 4月  27 02:30 sys</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 执行migrate，创建数据库表，然后删掉pod，再次创建后验证数据是否存在</span></span><br><span class=\"line\"><span class=\"string\">$ kubectl -n demo exec -ti myblog python3 manage.py migrate</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 访问服务，正常</span></span><br><span class=\"line\"><span class=\"string\">[root@k8s-master cjhdemo]# curl 10.244.2.17:8002/blog/index/ </span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;首页&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;h3&gt;我的博客列表：&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=&quot; /blog/article/edit/0 &quot;&gt;写博客&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 删除pod</span></span><br><span class=\"line\"><span class=\"string\">$ kubectl delete -f pod-with-volume.yaml</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 再次创建Pod</span></span><br><span class=\"line\"><span class=\"string\">$ kubectl create -f pod-with-volume.yaml</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 查看pod ip并访问服务</span></span><br><span class=\"line\"><span class=\"string\">$ kubectl -n demo get po -o wide</span></span><br><span class=\"line\"><span class=\"string\">NAME     READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\"><span class=\"string\">myblog   2/2     Running   0          29s   10.244.2.18   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 未做migrate，服务正常</span></span><br><span class=\"line\"><span class=\"string\">$ curl 10.244.2.18:8002/blog/index/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用PV-PVC连接分布式存储解决方案\"><a href=\"#使用PV-PVC连接分布式存储解决方案\" class=\"headerlink\" title=\"使用PV+PVC连接分布式存储解决方案\"></a>使用PV+PVC连接分布式存储解决方案</h4><ul>\n<li>ceph</li>\n<li>glusterfs</li>\n<li>nfs</li>\n</ul>\n<h3 id=\"服务健康检查\"><a href=\"#服务健康检查\" class=\"headerlink\" title=\"服务健康检查\"></a>服务健康检查</h3><p>检测容器服务是否健康的手段，若不健康，会根据设置的重启策略（restartPolicy）进行操作，两种检测机制可以分别单独设置，若不设置，默认认为Pod是健康的。</p>\n<p><strong>三种机制：</strong></p>\n<ul>\n<li>StartupProbe探针<br>k8s 1.16版本后新加的探测方式，用于判断容器内应用程序是否已经启动。如果配置了startupProbe，就会先禁止其他的探测，直到它成功为止，成功后将不再进行探测。比较适用于容器启动时间长的场景</li>\n<li>LivenessProbe探针<br>用于判断容器是否存活，即Pod是否为<code>running</code>状态，如果LivenessProbe探针探测到容器不健康，则kubelet将kill掉容器，并根据容器的重启策略是否重启，如果一个容器不包含LivenessProbe探针，则Kubelet认为容器的LivenessProbe探针的返回值永远成功。 </li>\n<li>ReadinessProbe探针<br>用于判断容器是否正常提供服务，即容器的<code>Ready</code>是否为True，是否可以接收请求，如果ReadinessProbe探测失败，则容器的Ready将为False，控制器将此Pod的Endpoint从对应的service的Endpoint列表中移除，从此不再将任何请求调度此Pod上，直到下次探测成功。（剔除此pod不参与接收请求不会将流量转发给此Pod）。</li>\n</ul>\n<p><strong>三种类型：</strong></p>\n<ul>\n<li>exec：通过执行命令来检查服务是否正常，回值为0则表示容器健康</li>\n<li>httpGet方式：通过发送http请求检查服务是否正常，返回200-399状态码则表明容器健康</li>\n<li>tcpSocket：通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康</li>\n</ul>\n<p>示例：</p>\n<p>完整文件路径 <code> myblog/one-pod/pod-with-healthcheck.yaml</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: myblog</span><br><span class=\"line\">    image: 172.21.32.6:5000/myblog</span><br><span class=\"line\">    <span class=\"built_in\">env</span>:</span><br><span class=\"line\">    - name: MYSQL_HOST   <span class=\"comment\">#  指定root用户的用户名</span></span><br><span class=\"line\">      value: <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">    - name: MYSQL_PASSWD</span><br><span class=\"line\">      value: <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - containerPort: 8002</span><br><span class=\"line\">    startupProbe: <span class=\"comment\"># 可选，检测容器内进程是否完成启动</span></span><br><span class=\"line\"><span class=\"comment\">#      httpGet:      # httpGet检测方式，生产环境建议使用httpGet实现接口级健康检查，健康检查由应用程序提供。</span></span><br><span class=\"line\"><span class=\"comment\">#        path: /blog/index/ # 检查路径</span></span><br><span class=\"line\"><span class=\"comment\">#        port: 8002</span></span><br><span class=\"line\">    livenessProbe:</span><br><span class=\"line\">      httpGet:</span><br><span class=\"line\">        path: /blog/index/</span><br><span class=\"line\">        port: 8002</span><br><span class=\"line\">        scheme: HTTP</span><br><span class=\"line\">      initialDelaySeconds: 10  <span class=\"comment\"># 容器启动后第一次执行探测是需要等待多少秒</span></span><br><span class=\"line\">      periodSeconds: 15 \t<span class=\"comment\"># 执行探测的频率</span></span><br><span class=\"line\">      timeoutSeconds: 2\t\t<span class=\"comment\"># 探测超时时间</span></span><br><span class=\"line\">    readinessProbe: </span><br><span class=\"line\">      httpGet: </span><br><span class=\"line\">        path: /blog/index/</span><br><span class=\"line\">        port: 8002</span><br><span class=\"line\">        scheme: HTTP</span><br><span class=\"line\">      initialDelaySeconds: 10 </span><br><span class=\"line\">      timeoutSeconds: 2</span><br><span class=\"line\">      periodSeconds: 15</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>initialDelaySeconds</code>：容器启动后第一次执行探测是需要等待多少秒。</li>\n<li><code>periodSeconds</code>：执行探测的频率。默认是10秒，最小1秒。</li>\n<li><code>timeoutSeconds</code>：探测超时时间。默认1秒，最小1秒。</li>\n<li><code>successThreshold</code>：探测失败后，最少连续探测成功多少次才被认定为成功。默认是1。对于liveness必须是1，最小值是1。</li>\n<li><code>failureThreshold</code>：探测成功后，最少连续探测失败多少次才被认定为失败。默认是3，最小值是1。</li>\n</ul>\n<p><strong>重启策略：</strong><br>Pod的重启策略（RestartPolicy）应用于Pod内的所有容器，并且仅在Pod所处的Node上由kubelet进行判断和重启操作。当某个容器异常退出或者健康检查失败时，kubelet将根据RestartPolicy的设置来进行相应的操作。</p>\n<p>Pod的重启策略包括<code>Always</code>、<code>OnFailure</code>和<code>Never</code>，默认值为Always。</p>\n<ul>\n<li>Always：当容器失败时，由kubelet自动重启该容器；</li>\n<li>OnFailure：当容器终止运行且退出码不为0时，有kubelet自动重启该容器；</li>\n<li>Never：不论容器运行状态如何，kubelet都不会重启该容器。</li>\n</ul>\n<h3 id=\"镜像拉取策略\"><a href=\"#镜像拉取策略\" class=\"headerlink\" title=\"镜像拉取策略\"></a>镜像拉取策略</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">172.21</span><span class=\"number\">.32</span><span class=\"number\">.6</span><span class=\"string\">:5000/demo/myblog</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br></pre></td></tr></table></figure>\n\n<p>设置镜像的拉取策略，默认为IfNotPresent</p>\n<ul>\n<li>Always，总是拉取镜像，即使本地有镜像也从仓库拉取(统一标签的镜像被不同版本的代码重复使用时)</li>\n<li>IfNotPresent ，本地有则使用本地镜像，本地没有则去仓库拉取</li>\n<li>Never，只使用本地镜像，本地没有则报错</li>\n</ul>\n<h3 id=\"Pod资源限制\"><a href=\"#Pod资源限制\" class=\"headerlink\" title=\"Pod资源限制\"></a>Pod资源限制</h3><p>为了保证充分利用集群资源，且确保重要容器在运行周期内能够分配到足够的资源稳定运行，因此平台需要具备</p>\n<p>Pod的资源限制的能力。 对于一个pod来说，资源最基础的2个的指标就是：CPU和内存。</p>\n<p>Kubernetes提供了个采用requests和limits 两种类型参数对资源进行预分配和使用限制。</p>\n<p>完整文件路径：<code>myblog/one-pod/pod-with-resourcelimits.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">172.21</span><span class=\"number\">.32</span><span class=\"number\">.6</span><span class=\"string\">:5000/myblog</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_HOST</span>   <span class=\"comment\">#  指定root用户的用户名</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"comment\">#资源作用单位时容器</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<p><code>requests</code>：</p>\n<ul>\n<li>容器使用的最小资源需求,作用于schedule(调度)阶段，作为容器调度时资源分配的判断依赖</li>\n<li>只有当前节点上可分配的资源量 &gt;= request 时才允许将容器调度到该节点</li>\n<li>request参数不限制容器的最大可使用资源</li>\n<li>requests.cpu被转成docker的–cpu-shares参数，与cgroup cpu.shares功能相同 (无论宿主机有多少个cpu或者内核，–cpu-shares选项都会按照比例分配cpu资源）</li>\n<li>requests.memory没有对应的docker参数，仅作为k8s调度依据</li>\n</ul>\n<p><code>limits</code>：</p>\n<ul>\n<li>容器能使用资源的最大值</li>\n<li>设置为0表示对使用的资源不做限制, 可无限的使用</li>\n<li>当pod 内存超过limit时，会被oom</li>\n<li>当cpu超过limit时，不会被kill，但是会限制不超过limit值</li>\n<li>limits.cpu会被转换成docker的–cpu-quota参数。与cgroup cpu.cfs_quota_us功能相同</li>\n<li>limits.memory会被转换成docker的–memory参数。用来限制容器使用的最大内存</li>\n</ul>\n<p> 对于 CPU，我们知道计算机里 CPU 的资源是按<code>“时间片”</code>的方式来进行分配的，系统里的每一个操作都需要 CPU 的处理，所以，哪个任务要是申请的 CPU 时间片越多，那么它得到的 CPU 资源就越多。</p>\n<p>然后还需要了解下 CGroup 里面对于 CPU 资源的单位换算：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 CPU =  1000 millicpu（1 Core = 1000m）</span><br></pre></td></tr></table></figure>\n\n<p> 这里的 <code>m</code> 就是毫、毫核的意思，Kubernetes 集群中的每一个节点可以通过操作系统的命令来确认本节点的 CPU 内核数量，然后将这个数量乘以1000，得到的就是节点总 CPU 总毫数。比如一个节点有四核，那么该节点的 CPU 总毫量为 4000m。 </p>\n<p><code>docker run</code>命令和 CPU 限制相关的所有选项如下：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--cpuset-cpus=&quot;&quot;</code></td>\n<td>允许使用的 CPU 集，值可以为 0-3,0,1</td>\n</tr>\n<tr>\n<td><code>-c</code>,<code>--cpu-shares=0</code></td>\n<td>CPU 共享权值（相对权重）</td>\n</tr>\n<tr>\n<td><code>cpu-period=0</code></td>\n<td>限制 CPU CFS 的周期，范围从 100ms~1s，即[1000, 1000000]</td>\n</tr>\n<tr>\n<td><code>--cpu-quota=0</code></td>\n<td>限制 CPU CFS 配额，必须不小于1ms，即 &gt;= 1000，绝对限制</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --cpu-period=50000 --cpu-quota=25000 ubuntu:16.04 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>将 CFS 调度的周期设为 50000，将容器在每个周期内的 CPU 配额设置为 25000，表示该容器每 50ms 可以得到 50% 的 CPU 运行时间。</p>\n<blockquote>\n<p>注意：若内存使用超出限制，会引发系统的OOM机制，因CPU是可压缩资源，不会引发Pod退出或重建</p>\n</blockquote>\n<h3 id=\"yaml优化\"><a href=\"#yaml优化\" class=\"headerlink\" title=\"yaml优化\"></a>yaml优化</h3><p>目前完善后的yaml，<code>myblog/one-pod/pod-completed.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog</span> <span class=\"comment\">#pod的名字</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span> <span class=\"comment\">#属于哪个ns</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span> <span class=\"comment\">#volume名字</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span> <span class=\"comment\">#持久化到node的哪个位置</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/opt/mysql/data</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span>   <span class=\"comment\"># 使用节点选择器将Pod调度到指定label的节点</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/myblog:v2</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_HOST</span>   <span class=\"comment\"># 指定root用户的用户名</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"comment\">#资源限制</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span> <span class=\"comment\">#最小使用资源，用于调度</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span> <span class=\"comment\">#最大资源限制</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span> <span class=\"comment\">#容器级别健康检查判断容器是否存活</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span> <span class=\"comment\">#检查路径</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/blog/index/</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span>  <span class=\"comment\"># 容器启动后第一次执行探测是需要等待多少秒</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span> \t<span class=\"comment\"># 执行探测的频率</span></span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span>\t\t<span class=\"comment\"># 探测超时时间</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span> <span class=\"comment\">#容器级别健康判断容器是否正常提供服务</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span> </span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/blog/index/</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span> </span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/mysql:5.7-utf8</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_DATABASE</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;myblog&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span> <span class=\"comment\">#容器级别健康判断容器是否正常提供服务</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span> <span class=\"comment\">#采用tcp判断是否能够建立链接</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span> <span class=\"comment\">#容器级别健康检查判断容器是否存活</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span> <span class=\"comment\">#采用tcp判断是否能够建立链接</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span> <span class=\"comment\">#持久化相关，挂载mysql-data数据卷到容器内部/var/lib/mysql</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">-n</span> <span class=\"string\">demo</span> <span class=\"string\">get</span> <span class=\"string\">pods</span> <span class=\"string\">-o</span> <span class=\"string\">wide</span> <span class=\"string\">//检查pod是否正常</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"拆分yaml\"><a href=\"#拆分yaml\" class=\"headerlink\" title=\"拆分yaml\"></a>拆分yaml</h4><p>以上yaml还要优化，拆分成两个小的yaml</p>\n<ul>\n<li>考虑真实的使用场景，像数据库这类中间件，是作为公共资源，为多个项目提供服务，不适合和业务容器绑定在同一个Pod中，因为业务容器是经常变更的，而数据库不需要频繁迭代</li>\n<li>yaml的环境变量中存在敏感信息（账号、密码），存在安全隐患</li>\n</ul>\n<p><code>myblog/two-pod/mysql.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">true</span>\t<span class=\"comment\"># 声明pod的网络模式为host模式，效果通docker run --net=host,将容器3306端口映射到宿主机192.168.56.20的3306端口，中间件的网络可以写死</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span> </span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/opt/mysql/data</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span>   <span class=\"comment\"># 使用节点选择器将Pod调度到指定label的节点</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/mysql:5.7-utf8</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_DATABASE</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;myblog&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br></pre></td></tr></table></figure>\n<p><code>myblog.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/myblog:v2</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_HOST</span>   <span class=\"comment\">#  指定root用户的用户名</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;192.168.56.20&quot;</span> <span class=\"comment\">#连接slave1宿主机的3306端口</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/blog/index/</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span>  <span class=\"comment\"># 容器启动后第一次执行探测是需要等待多少秒</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span> \t<span class=\"comment\"># 执行探测的频率</span></span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span>\t\t<span class=\"comment\"># 探测超时时间</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span> </span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span> </span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/blog/index/</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span> </span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重新构建pod\"><a href=\"#重新构建pod\" class=\"headerlink\" title=\"重新构建pod\"></a>重新构建pod</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前pod</span></span><br><span class=\"line\">[root@k8s-master one-pod]<span class=\"comment\"># kubectl -n demo get po</span></span><br><span class=\"line\">NAME     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">myblog   2/2     Running   0          25m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除pod</span></span><br><span class=\"line\">[root@k8s-master one-pod]<span class=\"comment\"># kubectl delete -ndemo po myblog</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;myblog&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单独创建mysql pod</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl create -f mysql.yaml </span></span><br><span class=\"line\">pod/mysql created</span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl -n demo get po</span></span><br><span class=\"line\">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">mysql   1/1     Running   0          22s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单独创建myblog pod</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl create -f myblog.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod，注意mysqlIP为宿主机IP，因为网络模式为host</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl -n demo get po -o wide </span></span><br><span class=\"line\">NAME     READY   STATUS    RESTARTS   AGE     IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">myblog   1/1     Running   0          5m48s   10.244.2.29     k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">mysql    1/1     Running   0          16m     192.168.56.20   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#访问测试</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># curl 10.244.2.29:8002</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"configMap和Secret\"><a href=\"#configMap和Secret\" class=\"headerlink\" title=\"configMap和Secret\"></a>configMap和Secret</h4><p>环境变量中敏感信息带来的安全隐患，为何要统一管理环境变量?</p>\n<ul>\n<li>环境变量中有很多敏感的信息，比如账号密码，直接暴漏在yaml文件中存在安全性问题</li>\n<li>团队内部一般存在多个项目，这些项目直接存在配置相同环境变量的情况，因此可以统一维护管理</li>\n<li>对于开发、测试、生产环境，由于配置均不同，每套环境部署的时候都要修改yaml，带来额外的开销</li>\n</ul>\n<p>k8s提供两类资源，<code>configMap</code>和<code>Secret</code>，可以用来实现业务配置的统一管理， 允许将配置文件与镜像文件分离，以使容器化的应用程序具有可移植性 。</p>\n<p><img src=\"/images/pasted-44.png\" alt=\"configMap和Secret\"></p>\n<ul>\n<li>configMap，通常用来管理应用的配置文件或者环境变量，<code>myblog/two-pod/configmap.yaml</code></li>\n</ul>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">MYSQL_HOST:</span> <span class=\"string\">&quot;192.168.56.20&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">MYSQL_PORT:</span> <span class=\"string\">&quot;3306&quot;</span></span><br></pre></td></tr></table></figure>\n<p>创建并查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f configmap.yaml</span><br><span class=\"line\">$ kubectl -n demo get configmap</span><br><span class=\"line\">$ kubectl -n demo describe configmap myblog</span><br><span class=\"line\">Name:         myblog</span><br><span class=\"line\">Namespace:    demo</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">MYSQL_PORT:</span><br><span class=\"line\">----</span><br><span class=\"line\">3306</span><br><span class=\"line\">MYSQL_HOST:</span><br><span class=\"line\">----</span><br><span class=\"line\">192.168.56.20</span><br><span class=\"line\">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Secret，管理敏感类的信息，默认会base64编码存储，有三种类型</p>\n<ul>\n<li>Service Account ：用来访问Kubernetes API，由Kubernetes自动创建，并且会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount目录中；创建ServiceAccount后，Pod中指定serviceAccount后，自动创建该ServiceAccount对应的secret；</li>\n<li>Opaque ： base64编码格式的Secret，用来存储密码、密钥等；</li>\n<li>kubernetes.io/dockerconfigjson ：用来存储私有docker registry的认证信息<code>myblog/two-pod/secret.yaml</code></li>\n</ul>\n</li>\n</ul>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">MYSQL_USER:</span> <span class=\"string\">cm9vdA==</span>\t\t<span class=\"comment\">#注意加-n参数否则值中会带换行， echo -n root|base64</span></span><br><span class=\"line\">  <span class=\"attr\">MYSQL_PASSWD:</span> <span class=\"string\">MTIzNDU2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重新构建pod-1\"><a href=\"#重新构建pod-1\" class=\"headerlink\" title=\"重新构建pod\"></a>重新构建pod</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f secret.yaml</span><br><span class=\"line\">$ kubectl -n demo get secret</span><br><span class=\"line\">$ kubectl -n demo describe secret myblog</span><br><span class=\"line\">Name:         myblog</span><br><span class=\"line\">Namespace:    demo</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  Opaque</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">MYSQL_PASSWD:  6 bytes</span><br><span class=\"line\">MYSQL_USER:    4 bytes</span><br></pre></td></tr></table></figure>\n\n<p>如果不习惯这种方式，可以通过如下方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> secret.txt</span><br><span class=\"line\">MYSQL_USER=root</span><br><span class=\"line\">MYSQL_PASSWD=123456</span><br><span class=\"line\">$ kubectl -n demo create secret generic myblog --from-env-file=secret.txt </span><br></pre></td></tr></table></figure>\n<p>修改后的myblog的yaml，资源路径：<code>myblog/two-pod/myblog-with-config.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/myblog:v2</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_HOST</span></span><br><span class=\"line\">      <span class=\"attr\">valueFrom:</span> <span class=\"comment\"># 值来自</span></span><br><span class=\"line\">        <span class=\"attr\">configMapKeyRef:</span> <span class=\"comment\"># 来自configMap</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">myblog</span> <span class=\"comment\"># configMap所在pod</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_HOST</span> <span class=\"comment\"># 取对应的键内容</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PORT</span></span><br><span class=\"line\">      <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">        <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_PORT</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_USER</span> </span><br><span class=\"line\">      <span class=\"attr\">valueFrom:</span> <span class=\"comment\"># 值来自</span></span><br><span class=\"line\">        <span class=\"attr\">secretKeyRef:</span> <span class=\"comment\"># 来自secret</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">myblog</span> <span class=\"comment\"># secret所在pod</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_USER</span> <span class=\"comment\"># 取对应的键内容</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">      <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">        <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/blog/index/</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span>  <span class=\"comment\"># 容器启动后第一次执行探测是需要等待多少秒</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span>         <span class=\"comment\"># 执行探测的频率</span></span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span>         <span class=\"comment\"># 探测超时时间</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span> </span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span> </span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/blog/index/</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8002</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span> </span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n\n<p>修改后的mysql的yaml，资源路径：<code>myblog/two-pod/mysql-with-config.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">true</span>     <span class=\"comment\"># 声明pod的网络模式为host模式，效果通docker run --net=host</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span> </span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/opt/mysql/data</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span>   <span class=\"comment\"># 使用节点选择器将Pod调度到指定label的节点</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.10</span><span class=\"string\">:5000/mysql:5.7-utf8</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_USER</span></span><br><span class=\"line\">      <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">        <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_USER</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">      <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">        <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">myblog</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">MYSQL_PASSWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_DATABASE</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;myblog&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-data</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br></pre></td></tr></table></figure>\n<p>在部署不同的环境时，pod的yaml无须再变化，只需要在每套环境中维护一套ConfigMap和Secret即可。但是注意configmap和secret不能跨namespace使用，且更新后，pod内的env不会自动更新，重建后方可更新。<br>部署测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前pod</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl -n demo get po</span></span><br><span class=\"line\">NAME     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">myblog   1/1     Running   0          48m</span><br><span class=\"line\">mysql    1/1     Running   0          59m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除pod</span></span><br><span class=\"line\">[root@k8s-master one-pod]<span class=\"comment\"># kubectl delete -ndemo po myblog</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;myblog&quot;</span> deleted</span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl delete -ndemo po mysql</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;mysql&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查configmap和secret</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl -n demo describe secret myblog</span></span><br><span class=\"line\">Name:         myblog</span><br><span class=\"line\">Namespace:    demo</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  Opaque</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">MYSQL_PASSWD:  6 bytes</span><br><span class=\"line\">MYSQL_USER:    4 bytes</span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl -n demo describe configmap myblog</span></span><br><span class=\"line\">Name:         myblog</span><br><span class=\"line\">Namespace:    demo</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">MYSQL_HOST:</span><br><span class=\"line\">----</span><br><span class=\"line\">192.168.56.20</span><br><span class=\"line\">MYSQL_PORT:</span><br><span class=\"line\">----</span><br><span class=\"line\">3306</span><br><span class=\"line\">Events:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单独创建mysql pod</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl create -f mysql-with-config.yaml </span></span><br><span class=\"line\">pod/mysql created</span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl -n demo get po</span></span><br><span class=\"line\">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">mysql   1/1     Running   0          117s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查mysql环境变量是否注入成功</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl create -f mysql-with-config.yaml </span></span><br><span class=\"line\">pod/mysql created</span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl -n demo exec -it mysql bash</span></span><br><span class=\"line\">root@k8s-slave1:/<span class=\"comment\"># env | grep MYSQL_USER</span></span><br><span class=\"line\">MYSQL_USER=root</span><br><span class=\"line\">root@k8s-slave1:/<span class=\"comment\"># env | grep MYSQL_PASSWD</span></span><br><span class=\"line\">MYSQL_PASSWD=123456</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单独创建myblog pod</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl create -f myblog.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查myblog环境变量是否注入成功</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\">#  kubectl -n demo exec -it myblog bash</span></span><br><span class=\"line\">[root@myblog myblog]<span class=\"comment\"># env | grep MYSQL_HOST</span></span><br><span class=\"line\">MYSQL_HOST=192.168.56.20</span><br><span class=\"line\">[root@myblog myblog]<span class=\"comment\"># env | grep MYSQL_PORT</span></span><br><span class=\"line\">MYSQL_PORT=3306</span><br><span class=\"line\">[root@myblog myblog]<span class=\"comment\"># env | grep MYSQL_PASSWD</span></span><br><span class=\"line\">MYSQL_PASSWD=123456</span><br><span class=\"line\">[root@myblog myblog]<span class=\"comment\"># env | grep MYSQL_USER</span></span><br><span class=\"line\">MYSQL_USER=root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查pod状态</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># kubectl -n demo get po -o wide</span></span><br><span class=\"line\">NAME     READY   STATUS    RESTARTS   AGE     IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">myblog   1/1     Running   0          2m37s   10.244.2.30     k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">mysql    1/1     Running   0          5m4s    192.168.56.20   k8s-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查服务是否可以访问</span></span><br><span class=\"line\">[root@k8s-master two-pod]<span class=\"comment\"># curl 10.244.2.30:8002</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何编写资源yaml\"><a href=\"#如何编写资源yaml\" class=\"headerlink\" title=\"如何编写资源yaml\"></a>如何编写资源yaml</h3><ol>\n<li>拿来主义，从机器中已有的资源中拿</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl -n kube-system get po,deployment,ds</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>学会在官网查找， <a href=\"https://kubernetes.io/docs/home/\">https://kubernetes.io/docs/home/</a> </p>\n</li>\n<li><p>从kubernetes-api文档中查找， <a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#pod-v1-core\">https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#pod-v1-core</a> </p>\n</li>\n<li><p>kubectl explain 查看具体字段含义</p>\n</li>\n</ol>\n<h3 id=\"Pod状态与生命周期\"><a href=\"#Pod状态与生命周期\" class=\"headerlink\" title=\"Pod状态与生命周期\"></a>Pod状态与生命周期</h3><p>Pod的状态如下表所示：</p>\n<p>参见：<a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/\">https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/</a></p>\n<table>\n<thead>\n<tr>\n<th>状态值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Pending（悬决）</td>\n<td>API Server已经创建该Pod，等待调度器调度</td>\n</tr>\n<tr>\n<td>ContainerCreating</td>\n<td>镜像正在创建</td>\n</tr>\n<tr>\n<td>Running（运行中）</td>\n<td>Pod内容器均已创建，且至少有一个容器处于运行状态、正在启动状态或正在重启状态</td>\n</tr>\n<tr>\n<td>Succeeded（成功）</td>\n<td>Pod内所有容器均已成功执行退出，且不再重启</td>\n</tr>\n<tr>\n<td>Failed（失败）</td>\n<td>Pod内所有容器均已退出，但至少有一个容器退出为失败状态</td>\n</tr>\n<tr>\n<td>CrashLoopBackOff</td>\n<td>Pod内有容器启动失败，比如配置文件丢失导致主进程启动失败</td>\n</tr>\n<tr>\n<td>Unknown（未知）</td>\n<td>由于某种原因无法获取该Pod的状态，可能由于网络通信不畅导致</td>\n</tr>\n</tbody></table>\n<p>生命周期示意图：<br><img src=\"/images/pasted-45.png\" alt=\"Podif\"></p>\n<p>启动和关闭示意：<br><img src=\"/images/pasted-46.png\" alt=\"Podof\"></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">demo-start-stop</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">demo-start-stop</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">init</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;echo $(date +%s): INIT &gt;&gt; /loap/timing&#x27;</span>] <span class=\"comment\">#初始化容器</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/loap</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">timing</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">main</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;echo $(date +%s): START &gt;&gt; /loap/timing; </span></span><br><span class=\"line\"><span class=\"string\">sleep 10; echo $(date +%s): END &gt;&gt; /loap/timing;&#x27;</span>] <span class=\"comment\">#启动业务容器,悬停十秒退出</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/loap</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">timing</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;echo $(date +%s): LIVENESS &gt;&gt; /loap/timing&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;echo $(date +%s): READINESS &gt;&gt; /loap/timing&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">      <span class=\"attr\">postStart:</span> <span class=\"comment\">#开始结束hook通知，在业务容器启动之后</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;echo $(date +%s): POST-START &gt;&gt; /loap/timing&#x27;</span>]</span><br><span class=\"line\">      <span class=\"attr\">preStop:</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;echo $(date +%s): PRE-STOP &gt;&gt; /loap/timing&#x27;</span>]</span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">timing</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/tmp/loap</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>init容器阶段：</strong></p>\n<p><code>initContainers </code>  是一种专用的容器，在应用程序容器启动之前运行，可以包括一些应用程序镜像中不存在的实用工具和安装脚本，可以完成应用的必要数据初始化等工作。总的来说就是在正式的容器启动之前做一些准备工作的（例如授权目录，改变系统参数）。</p>\n<p>特点：</p>\n<ul>\n<li>Init 容器总是运行到成功运行完为止。</li>\n<li>前面的 Init 容器必须已经运行完成，才会开始运行下一个init容器，而应用程序容器时并行运行的。</li>\n</ul>\n<p>参见：<a href=\"https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\">https://kubernetes.io/docs/concepts/workloads/pods/init-containers/</a></p>\n<p><strong>健康检察阶段：</strong></p>\n<p><code>livenessProbe</code> 判断容器是否存活</p>\n<p><code>readinessProbe</code> 判断容器是否正常提供服务</p>\n<p><strong>启动关闭函数回调：</strong></p>\n<p>postStart/postStop回调参见：<a href=\"https://kubernetes.io/zh/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/\">为容器的生命周期事件设置处理函数</a></p>\n<p>创建pod测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f demo-pod-start.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看demo状态</span></span><br><span class=\"line\">$ kubectl -n demo get po -o wide -w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看调度节点的/tmp/loap/timing</span></span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> /tmp/loap/timing</span><br><span class=\"line\">1620401134: INIT</span><br><span class=\"line\">1620401150: START</span><br><span class=\"line\">1620401151: POST-START</span><br><span class=\"line\">1620401152: LIVENESS</span><br><span class=\"line\">1620401152: READINESS</span><br><span class=\"line\">1620401160: END</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 须主动杀掉 Pod 才会触发 <code>pre-stop hook</code>，如果是 Pod 自己 Down 掉，则不会执行 <code>pre-stop hook</code> 。多用于误操作告警</p>\n</blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ol>\n<li>实现k8s平台与特定的容器运行时解耦，提供更加灵活的业务部署方式，引入了Pod概念</li>\n<li>k8s使用yaml格式定义资源文件，yaml中Map与List的语法，与json做类比</li>\n<li>通过kubectl create | get | exec | logs | delete 等操作k8s资源，必须指定namespace</li>\n<li>每启动一个Pod，为了实现网络空间共享，会先创建Infra容器，并把其他容器网络加入该容器</li>\n<li>Pod数据通过给node打标签调度到指定node并持久化数据。</li>\n<li>通过livenessProbe和readinessProbe实现Pod的存活性和就绪健康检查</li>\n<li>通过requests和limit分别限定容器初始资源申请与最高上限资源申请</li>\n<li>配置参数通过configMap和Secret定义</li>\n<li>通过Pod IP访问具体的Pod服务</li>\n</ol>\n<h2 id=\"健康检查的大坑\"><a href=\"#健康检查的大坑\" class=\"headerlink\" title=\"健康检查的大坑\"></a>健康检查的大坑</h2><p>在复盘数据库持久化时，因为健康检查的关系。mysql容器在第一次启动时会进行数据库初始化操作，往往这个时间比较漫长恰好在健康检查的阀值之外！导致我数据库初始化到一半数据库容器被重启。喵的数据库没损坏可以正常使用，只是在yaml文件中配置的启动并创建myblog库配置失效。库并没有被创建出啊来！导致python程序也启动失败。排查了数小时才发现问题😭</p>\n<blockquote>\n<p>建议大家不要吧数据库装在容器中。就算放到容器中也要注意健康检查等额外配置会否影响数据库初始化操作！</p>\n</blockquote>\n","categories":["OPS"],"tags":["OPS","Kubernetes","容器编排"]},{"title":"Golang-变量、常量、基本数据类型、流程控制、运算符、数组、切片、map","url":"/forward/649a95fd.html","content":"<h1 id=\"变量、常量\"><a href=\"#变量、常量\" class=\"headerlink\" title=\"变量、常量\"></a>变量、常量</h1><h2 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">标准声明：</span><br><span class=\"line\"><span class=\"keyword\">var</span> name <span class=\"type\">string</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> age <span class=\"type\">int</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> isOk <span class=\"type\">bool</span></span><br><span class=\"line\"><span class=\"comment\">//变量声明以关键字var开头，变量类型放在变量的后面，行尾无需分号。 </span></span><br><span class=\"line\"></span><br><span class=\"line\">批量声明：</span><br><span class=\"line\"><span class=\"keyword\">var</span> ( </span><br><span class=\"line\">    a <span class=\"type\">string</span> </span><br><span class=\"line\">    b <span class=\"type\">int</span> </span><br><span class=\"line\">    c <span class=\"type\">bool</span> </span><br><span class=\"line\">    d <span class=\"type\">float32</span> </span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//每声明一个变量就需要写var关键字会比较繁琐，go语言中还支持批量变量声明：</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 变量类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量的初始化\"><a href=\"#变量的初始化\" class=\"headerlink\" title=\"变量的初始化\"></a>变量的初始化</h2><p>Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为​<code>0</code>​。 字符串变量的默认值为<code>​空字符串</code>​。 布尔型变量默认为<code>​false​</code>。 切片、函数、指针变量的默认为​<code>nil​</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 类型 = 表达式</span><br><span class=\"line\"><span class=\"comment\">//在声明变量的时候为其指定初始值。变量初始化的标准格式</span></span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name <span class=\"type\">string</span> = <span class=\"string\">&quot;Q1mi&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age <span class=\"type\">int</span> = <span class=\"number\">18</span></span><br></pre></td></tr></table></figure>\n\n<p>一次性初始化多个变量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name, age = <span class=\"string\">&quot;Q1mi&quot;</span>, <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型推导\"><a href=\"#类型推导\" class=\"headerlink\" title=\"类型推导\"></a>类型推导</h3><p>编译器根据等号右边的值来推导变量的类型完成初始化。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name := <span class=\"string\">&quot;Q1mi&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age := <span class=\"number\">18</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"短变量声明\"><a href=\"#短变量声明\" class=\"headerlink\" title=\"短变量声明\"></a>短变量声明</h3><p>在函数内部，可以使用更简略的 <code>​:=</code>​ 方式声明并初始化变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">        <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 全局变量m</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        n := <span class=\"number\">10</span></span><br><span class=\"line\">        m := <span class=\"number\">200</span> <span class=\"comment\">// 此处声明局部变量m</span></span><br><span class=\"line\">        fmt.Println(m, n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"匿名变量\"><a href=\"#匿名变量\" class=\"headerlink\" title=\"匿名变量\"></a>匿名变量</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>(<span class=\"type\">string</span>,<span class=\"type\">int</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">&quot;felix&quot;</span>,<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   aa, _ := foo() <span class=\"comment\">//匿名变量，垃圾桶用于接收不需要的变量值</span></span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;\\n&quot;</span>,aa)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li><p>在同一作用域内不能声明重复变量</p>\n</li>\n<li><p><code>​:=​</code>简短声明之内存在于函数内</p>\n</li>\n</ul>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><h3 id=\"常量声明\"><a href=\"#常量声明\" class=\"headerlink\" title=\"常量声明\"></a>常量声明</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">标准声明：</span><br><span class=\"line\"><span class=\"keyword\">const</span> pi = <span class=\"number\">3.1415</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> e = <span class=\"number\">2.7182</span></span><br><span class=\"line\"></span><br><span class=\"line\">批量声明：</span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    pi = <span class=\"number\">3.1415</span></span><br><span class=\"line\">    e = <span class=\"number\">2.7182</span></span><br><span class=\"line\">)</span><br><span class=\"line\">相同常量声明：</span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    n1 = <span class=\"number\">100</span></span><br><span class=\"line\">    n2</span><br><span class=\"line\">    n3</span><br><span class=\"line\">)<span class=\"comment\">//四个常量值均为100时，只需要在批量声明中声明第一个</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常量示例\"><a href=\"#常量示例\" class=\"headerlink\" title=\"常量示例\"></a>常量示例</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> felix = <span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">   a1 = <span class=\"number\">1</span></span><br><span class=\"line\">   a2</span><br><span class=\"line\">   a3</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//felix = 3.2  //注意1</span></span><br><span class=\"line\">   fmt.Println(felix,a1,a2,a3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ol>\n<li><p>常量不允许修改</p>\n</li>\n<li><p>常量在定义的时候必须赋值</p>\n</li>\n</ol>\n<h3 id=\"iota枚举-常量计数器\"><a href=\"#iota枚举-常量计数器\" class=\"headerlink\" title=\"iota枚举[常量计数器]\"></a>iota枚举[常量计数器]</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">   aa = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">   bb        <span class=\"comment\">//1</span></span><br><span class=\"line\">   cc        <span class=\"comment\">//2</span></span><br><span class=\"line\">   _         <span class=\"comment\">//3无，跳过某些值</span></span><br><span class=\"line\">   ee        <span class=\"comment\">//4</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   fmt.Println(aa,bb,cc,ee)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>iota中，每新增一行变量声明就累加一次。</p>\n</li>\n<li><p>iota中，遇见const则归零。</p>\n</li>\n<li><p>iota只能在常量表达式中使用。</p>\n</li>\n<li><p>const中声明如果不写，默认就和上一行一样。</p>\n</li>\n</ol>\n<p><strong>iota声明插队</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">   aa = <span class=\"literal\">iota</span> <span class=\"comment\">//0  iota初始值</span></span><br><span class=\"line\">   bb = <span class=\"number\">100</span>  <span class=\"comment\">//100 固定值100</span></span><br><span class=\"line\">   cc = <span class=\"literal\">iota</span> <span class=\"comment\">//2  iota对每一行变量声明都会进行累加</span></span><br><span class=\"line\">   _         <span class=\"comment\">//3  跳过该值</span></span><br><span class=\"line\">   ee        <span class=\"comment\">//4  累加</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ff = <span class=\"literal\">iota</span> <span class=\"comment\">//0  iota遇到const关键字归零</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   fmt.Println(aa,bb,cc,ee,ff)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>应用案例：</strong></p>\n<p>二进制：10000000000==十进制：1024</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">   _  = <span class=\"literal\">iota</span></span><br><span class=\"line\">   kb = <span class=\"number\">1</span>&lt;&lt;(<span class=\"number\">10</span> * <span class=\"literal\">iota</span>) <span class=\"comment\">//10*1=10,将1向左挪10位=1000000000，转为十进制为1024</span></span><br><span class=\"line\">   mb = <span class=\"number\">1</span>&lt;&lt;(<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">   gb = <span class=\"number\">1</span>&lt;&lt;(<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">   tb = <span class=\"number\">1</span>&lt;&lt;(<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">   pb = <span class=\"number\">1</span>&lt;&lt;(<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   fmt.Println(kb,mb,gb,tb,pb)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/<span class=\"keyword\">const</span>&gt;<span class=\"keyword\">go</span> run main.<span class=\"keyword\">go</span> </span><br><span class=\"line\"><span class=\"number\">1024</span> <span class=\"number\">1048576</span> <span class=\"number\">1073741824</span> <span class=\"number\">1099511627776</span> <span class=\"number\">1125899906842624</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">   a,b = <span class=\"literal\">iota</span>+<span class=\"number\">1</span>,<span class=\"literal\">iota</span>+<span class=\"number\">2</span>  <span class=\"comment\">//1 2</span></span><br><span class=\"line\">   c,d  <span class=\"comment\">//1+1=2,1+2=3</span></span><br><span class=\"line\">   e,f  <span class=\"comment\">//2+1=3,2+2=4</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   fmt.Println(a,b,c,d,e,f)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h1><p>Go语言中有丰富的数据类型，除了基本的​<code>整型</code>​、<code>​浮点型​</code>、​<code>布尔型</code>​、<code>​字符串​</code>外，还有​<code>数组</code>​、​<code>切片</code>​、​<code>结构体</code>​、​<code>函数</code>​、​<code>map</code>​、<code>​通道（channel）</code>​等。Go 语言的基本类型和其他语言大同小异。</p>\n<h2 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h2><h3 id=\"按长度分类\"><a href=\"#按长度分类\" class=\"headerlink\" title=\"按长度分类\"></a>按长度分类</h3><p>按长度分类：int8、int16、int32、int64 </p>\n<p>对应无符号：uint8、uint16、uint32、uint64</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>uint8</td>\n<td>无符号 8位整型 (0 到 255)</td>\n</tr>\n<tr>\n<td>uint16</td>\n<td>无符号 16位整型 (0 到 65535)</td>\n</tr>\n<tr>\n<td>uint32</td>\n<td>无符号 32位整型 (0 到 4294967295)</td>\n</tr>\n<tr>\n<td>uint64</td>\n<td>无符号 64位整型 (0 到 18446744073709551615)</td>\n</tr>\n<tr>\n<td>int8</td>\n<td>有符号 8位整型 (-128 到 127)</td>\n</tr>\n<tr>\n<td>int16</td>\n<td>有符号 16位整型 (-32768 到 32767)</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>有符号 32位整型 (-2147483648 到 2147483647)</td>\n</tr>\n<tr>\n<td>int64</td>\n<td>有符号 64位整型 (-9223372036854775808 到 9223372036854775807)</td>\n</tr>\n</tbody></table>\n<h3 id=\"特殊整型\"><a href=\"#特殊整型\" class=\"headerlink\" title=\"特殊整型\"></a>特殊整型</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>uint</td>\n<td>32位操作系统上就是uint32，64位操作系统上就是uint64</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32位操作系统上就是int32，64位操作系统上就是int64</td>\n</tr>\n<tr>\n<td>uintptr</td>\n<td>无符号整型，用于存放一个指针</td>\n</tr>\n</tbody></table>\n<p><strong>2.1.3 注意</strong></p>\n<ol>\n<li><p>在使用​<code>int</code>​和 ​<code>uint</code>​类型时，不能假定它是32位或64位的整型，而是考虑​<code>int</code>​和​<code>uint</code>​可能在不同平台上的差异。</p>\n</li>\n<li><p>获取对象的长度的内建<code>​len()​</code>函数返回的长度可以根据不同平台的字节长度进行变化。实际使用中，切片或 <code>map</code>的元素数量等都可以用​<code>int</code>​来表示。在涉及到二进制传输、读写文件的结构描述时，为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用​<code>int</code>​和 ​<code>uint</code>​。</p>\n</li>\n</ol>\n<p>案例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 十进制</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> a <span class=\"type\">int</span> = <span class=\"number\">10</span></span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;%d \\n&quot;</span>, a)  <span class=\"comment\">// 10</span></span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;%b \\n&quot;</span>, a)  <span class=\"comment\">// 1010  占位符%b表示二进制</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 八进制  以0开头</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> b <span class=\"type\">int</span> = <span class=\"number\">077</span></span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;%o \\n&quot;</span>, b)  <span class=\"comment\">// 77    占位符%o表示八进制</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 十六进制  以0x开头</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> c <span class=\"type\">int</span> = <span class=\"number\">0xff</span></span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;%x \\n&quot;</span>, c)  <span class=\"comment\">// ff</span></span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;%X \\n&quot;</span>, c)  <span class=\"comment\">// FF    占位符%X表示十六进制</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h2><p>Go语言支持两种浮点型数：​<code>float32</code>​和​<code>float64</code>​。这两种浮点型数据格式遵循<code>​IEEE 754​</code>标准： ​<code>float32</code>​ 的浮点数的最大范围约为 ​<code>3.4e38</code>​，可以使用常量定义：​<code>math.MaxFloat32</code>​。 ​<code>float64</code>​ 的浮点数的最大范围约为 ​<code>1.8e308</code>​，可以使用一个常量定义：​<code>math.MaxFloat64</code>​。</p>\n<p>打印浮点数时，可以使用​<code>fmt</code>​包配合动词<code>​%f</code>​，代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">        <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;%f\\n&quot;</span>, math.Pi)</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;%.2f\\n&quot;</span>, math.Pi)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复数\"><a href=\"#复数\" class=\"headerlink\" title=\"复数\"></a>复数</h2><p>complex64和complex128</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c1 <span class=\"type\">complex64</span></span><br><span class=\"line\">c1 = <span class=\"number\">1</span> + <span class=\"number\">2i</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c2 <span class=\"type\">complex128</span></span><br><span class=\"line\">c2 = <span class=\"number\">2</span> + <span class=\"number\">3i</span></span><br><span class=\"line\">fmt.Println(c1)</span><br><span class=\"line\">fmt.Println(c2)</span><br></pre></td></tr></table></figure>\n\n<p>复数有实部和虚部，complex64的实部和虚部为32位，complex128的实部和虚部为64位。</p>\n<h2 id=\"布尔型\"><a href=\"#布尔型\" class=\"headerlink\" title=\"布尔型\"></a>布尔型</h2><p>Go语言中以​<code>bool</code>​类型进行声明布尔型数据，布尔型数据只有<code>​true（真）</code>​和<code>​false（假）</code>​两个值。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li><p>布尔类型变量的默认值为​<code>false</code>​。</p>\n</li>\n<li><p>Go 语言中不允许将整型强制转换为布尔型.</p>\n</li>\n<li><p>布尔型无法参与数值运算，也无法与其他类型进行转换。</p>\n</li>\n</ol>\n<h2 id=\"字符型\"><a href=\"#字符型\" class=\"headerlink\" title=\"字符型\"></a>字符型</h2><p>Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。 Go 语言里的字符串的内部实现使用​UTF-8​编码。 字符串的值为​<code>双引号(&quot;)​</code>中的内容，可以在Go语言的源码中直接添加非ASCII码字符，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s1 := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">s2 := <span class=\"string\">&quot;你好&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串转义符\"><a href=\"#字符串转义符\" class=\"headerlink\" title=\"字符串转义符\"></a>字符串转义符</h3><p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>转义符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\r</td>\n<td>回车符（返回行首）</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符（直接跳到下一行的同列位置）</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>&#39;</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>反斜杠</td>\n</tr>\n</tbody></table>\n<p>举个例子，打印一个Windows平台下的一个文件路径：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;str := \\&quot;c:\\\\Code\\\\lesson1\\\\go.exe\\&quot;&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h3><p>Go语言中要定义一个多行字符串时，就必须使用​反引号​字符：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s1 := <span class=\"string\">`第一行</span></span><br><span class=\"line\"><span class=\"string\">第二行</span></span><br><span class=\"line\"><span class=\"string\">第三行</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">fmt.Println(s1) <span class=\"comment\">//原样输出，不用转义</span></span><br></pre></td></tr></table></figure>\n\n<p>反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</p>\n<h3 id=\"字符串的常用操作\"><a href=\"#字符串的常用操作\" class=\"headerlink\" title=\"字符串的常用操作\"></a>字符串的常用操作</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>len(str)</td>\n<td>求长度</td>\n</tr>\n<tr>\n<td>#NAME?</td>\n<td>拼接字符串</td>\n</tr>\n<tr>\n<td>strings.Split</td>\n<td>分割</td>\n</tr>\n<tr>\n<td>strings.contains</td>\n<td>判断是否包含</td>\n</tr>\n<tr>\n<td>strings.HasPrefix,strings.HasSuffix</td>\n<td>前缀/后缀判断</td>\n</tr>\n<tr>\n<td>strings.Index(),strings.LastIndex()</td>\n<td>子串出现的位置</td>\n</tr>\n<tr>\n<td>strings.Join(a[]string, sep string)</td>\n<td>join操作</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">name := <span class=\"string\">&quot;felix&quot;</span></span><br><span class=\"line\">age := <span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//字符串长度</span></span><br><span class=\"line\">fmt.Println(<span class=\"built_in\">len</span>(name),<span class=\"built_in\">len</span>(age))</span><br><span class=\"line\">运行结果：<span class=\"number\">5</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串拼接</span></span><br><span class=\"line\">fmt.Println(name+age) <span class=\"comment\">//方法一</span></span><br><span class=\"line\">s1 := fmt.Sprintf(<span class=\"string\">&quot;%s##%s&quot;</span>,name,age)  <span class=\"comment\">//方法二</span></span><br><span class=\"line\">fmt.Println(s1)</span><br><span class=\"line\">运行结果：felix##<span class=\"number\">20</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分割</span></span><br><span class=\"line\">ret := strings.Split(name, <span class=\"string\">&quot;x&quot;</span>)</span><br><span class=\"line\"> <span class=\"comment\">//“x”代表分隔符</span></span><br><span class=\"line\">fmt.Println(ret)</span><br><span class=\"line\">运行结果：[feli ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否包含</span></span><br><span class=\"line\">ret2 := strings.Contains(name, <span class=\"string\">&quot;lix&quot;</span>)</span><br><span class=\"line\">fmt.Println(ret2)</span><br><span class=\"line\">运行结果：<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断前缀和后缀 包含</span></span><br><span class=\"line\">ret3 := strings.HasPrefix(name, <span class=\"string\">&quot;fe&quot;</span>)</span><br><span class=\"line\">ret4 := strings.HasSuffix(name, <span class=\"string\">&quot;lix&quot;</span>)</span><br><span class=\"line\">fmt.Println(ret3, ret4)</span><br><span class=\"line\">运行结果：<span class=\"literal\">true</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求子串的位置 第一次和最后一次</span></span><br><span class=\"line\">s4 := <span class=\"string\">&quot;applepen&quot;</span></span><br><span class=\"line\">fmt.Println(strings.Index(s4, <span class=\"string\">&quot;p&quot;</span>))  <span class=\"comment\">//第一次出现</span></span><br><span class=\"line\">fmt.Println(strings.LastIndex(s4, <span class=\"string\">&quot;p&quot;</span>)) <span class=\"comment\">//最后一次出现</span></span><br><span class=\"line\">运行结果：<span class=\"number\">1</span> <span class=\"number\">5</span> <span class=\"comment\">//从0开始</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// join</span></span><br><span class=\"line\">a1 := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;PHP&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>, <span class=\"string\">&quot;Golang&quot;</span>&#125;</span><br><span class=\"line\">fmt.Println(strings.Join(a1, <span class=\"string\">&quot;-&quot;</span>))</span><br><span class=\"line\">运行结果：Python-PHP-JavaScript-Ruby-Golang</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"byte和rune类型\"><a href=\"#byte和rune类型\" class=\"headerlink\" title=\"byte和rune类型\"></a>byte和rune类型</h3><p>组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a := <span class=\"string\">&#x27;中&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b := <span class=\"string\">&#x27;x&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a := <span class=\"string\">&#x27;中&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b := <span class=\"string\">&#x27;x&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Go 语言的字符有以下两种</p>\n<ol>\n<li><p>​<code>uint8</code>​类型，或者叫 <code>byte</code>型，代表了​<code>ASCII码</code>​的一个字符。</p>\n</li>\n<li><p>​<code>rune</code>​类型，代表一个 ​<code>UTF-8</code>字符​。</p>\n</li>\n</ol>\n<p>当需要处理中文、日文或者其他复合字符时，则需要用到​<code>rune</code>​类型。​<code>rune</code>​类型实际是一个​<code>int32</code>​。</p>\n<p>Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode 的文本处理更为方便，也可以使用 byte 型进行默认字符串处理，性能和扩展性都有照顾。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;hello饼铛&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(s);i++&#123; <span class=\"comment\">//byte类型</span></span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;%v(%c)\\n&quot;</span>,i,s[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> s&#123; <span class=\"comment\">//rune类型</span></span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;%v(%c)\\n&quot;</span>,k,v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//%c为单字符处理 %v打印索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"number\">0</span>(h)<span class=\"number\">1</span>(e)<span class=\"number\">2</span>(l)<span class=\"number\">3</span>(l)<span class=\"number\">4</span>(o)<span class=\"number\">5</span>(é)<span class=\"number\">6</span>(¥)<span class=\"number\">7</span>(¼)<span class=\"number\">8</span>(é)<span class=\"number\">9</span>()<span class=\"number\">10</span>()</span><br><span class=\"line\"><span class=\"number\">0</span>(h)<span class=\"number\">1</span>(e)<span class=\"number\">2</span>(l)<span class=\"number\">3</span>(l)<span class=\"number\">4</span>(o)<span class=\"number\">5</span>(饼)<span class=\"number\">8</span>(铛)</span><br></pre></td></tr></table></figure>\n\n<p>因为UTF8编码下一个中文汉字由3~4个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。</p>\n<p>字符串底层是一个byte数组，所以可以和<code>​[]byte​</code>类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。</p>\n<h3 id=\"修改字符串\"><a href=\"#修改字符串\" class=\"headerlink\" title=\"修改字符串\"></a>修改字符串</h3><p>要修改字符串，需要先将其转换成​<code>[]rune</code>​或<code>​[]byte​</code>，完成后再转换为​<code>string</code>​。无论哪种转换，都会重新分配内存，并复制字节数组。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changeString</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        s1 := <span class=\"string\">&quot;big&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">// 强制类型转换</span></span><br><span class=\"line\">        byteS1 := []<span class=\"type\">byte</span>(s1)  <span class=\"comment\">//字符串转换为byte数组</span></span><br><span class=\"line\">        byteS1[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;p&#x27;</span></span><br><span class=\"line\">        fmt.Println(<span class=\"type\">string</span>(byteS1))</span><br><span class=\"line\"></span><br><span class=\"line\">        s2 := <span class=\"string\">&quot;白萝卜&quot;</span></span><br><span class=\"line\">        runeS2 := []<span class=\"type\">rune</span>(s2) <span class=\"comment\">//包含中文字符串转换为byte数组</span></span><br><span class=\"line\">        runeS2[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;红&#x27;</span></span><br><span class=\"line\">        fmt.Println(<span class=\"type\">string</span>(runeS2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串反转\"><a href=\"#字符串反转\" class=\"headerlink\" title=\"字符串反转\"></a>字符串反转</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s6 := <span class=\"string\">&quot;hello&quot;</span> <span class=\"comment\">//01234</span></span><br><span class=\"line\">s7 := <span class=\"string\">&quot;&quot;</span> <span class=\"comment\">//定义一个空变量</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"built_in\">len</span>(s6)<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--&#123;</span><br><span class=\"line\">   s6arry := []<span class=\"type\">byte</span>(s6)  <span class=\"comment\">//h e l l o</span></span><br><span class=\"line\">   s7 = s7+<span class=\"type\">string</span>(s6arry[i]) <span class=\"comment\">//o l l e h 从后往前遍历，并且拼接赋值给s7</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(s7)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h1><p>流程控制是每种编程语言控制逻辑走向和执行次序的重要部分，流程控制可以说是一门语言的“经脉”。</p>\n<p>Go语言中最常用的流程控制有​<code>if</code>​和​<code>for</code>​，而​<code>switch</code>​和​<code>goto</code>​主要是为了简化代码、降低重复代码而生的结构，属于扩展类的流程控制。</p>\n<h2 id=\"if-else-分支结构\"><a href=\"#if-else-分支结构\" class=\"headerlink\" title=\"if else(分支结构)\"></a>if else(分支结构)</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> age &gt; <span class=\"number\">18</span>&#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">&quot;澳门首家线上赌场开业了\\n&quot;</span>)</span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>  age == <span class=\"number\">18</span>&#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">&quot;成年了\\n&quot;</span>)</span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">&quot;好好念书&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//if条件判断还有一种特殊的写法，可以在 if 表达式之前添加一个执行语句，再根据变量值进行判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age:=<span class=\"number\">18</span>;age&gt;=<span class=\"number\">18</span> &#123; <span class=\"comment\">//age变作用范围只在if内生效</span></span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;函数内执行，成年了\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"for-循环结构\"><a href=\"#for-循环结构\" class=\"headerlink\" title=\"for(循环结构)\"></a>for(循环结构)</h2><p>Go语言中所有的循环类型都可以用<code>for</code>关键字来完成</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">for 初始语句;条件表达式;结束语句&#123;</span><br><span class=\"line\">    循环结构</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//结束语句是指单词循环结束之后，下一轮循环执行之前需要执行的语句</span><br></pre></td></tr></table></figure>\n\n<p>条件表达式返回<code>true</code>时循环体不停地进行循环，直到条件表达式返回<code>false</code>时自动退出循环。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> age :=<span class=\"number\">18</span>;age&gt;<span class=\"number\">0</span>;age -- &#123;</span><br><span class=\"line\">\tfmt.Println(age)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>for循环的初始语句可以被忽略，但是初始语句后的分号必须要写，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">age :=<span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ;age&gt;<span class=\"number\">0</span>;age -- &#123;</span><br><span class=\"line\">\tfmt.Println(age)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>for循环的初始语句和结束语句都可以省略，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">age :=<span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> age&gt;<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\tfmt.Println(age)</span><br><span class=\"line\">\tage --</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种写法类似于其他编程语言中的<code>while</code>，在<code>while</code>后添加一个条件表达式，满足条件表达式时持续循环，否则结束循环。</p>\n<h3 id=\"无限循环\"><a href=\"#无限循环\" class=\"headerlink\" title=\"无限循环\"></a>无限循环</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;Hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>for循环可以通过<code>break</code>、<code>goto</code>、<code>return</code>、<code>panic</code>语句强制退出循环。</p>\n<h3 id=\"for-range-键值循环\"><a href=\"#for-range-键值循环\" class=\"headerlink\" title=\"for range(键值循环)\"></a>for range(键值循环)</h3><p>Go语言中可以使用<code>for range</code>遍历数组、切片、字符串、map 及通道（channel）。 通过<code>for range</code>遍历的返回值有以下规律：</p>\n<ol>\n<li><p>数组、切片、字符串返回索引和值。</p>\n</li>\n<li><p>map返回键和值。</p>\n</li>\n<li><p>通道（channel）只返回通道内的值。</p>\n</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> s&#123; <span class=\"comment\">//rune类型</span></span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;%v(%c)\\n&quot;</span>,k,v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//%c为单字符处理 %v打印索引</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"switch-case\"><a href=\"#switch-case\" class=\"headerlink\" title=\"switch case\"></a>switch case</h2><p>使用<code>switch</code>语句可方便地对大量的值进行条件判断。if语句的变种</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">switchDemo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tfelix := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> felix &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t    fmt.Println(<span class=\"string\">&quot;felix == 1&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t    fmt.Println(<span class=\"string\">&quot;felix == 2&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;felix == 3&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;输入错误&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Go语言规定每个<code>switch</code>只能有一个<code>default</code>分支。</p>\n<p>一个分支可以有多个值，多个case值中间使用英文逗号分隔。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testSwitch3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> o := <span class=\"number\">4</span>;o&#123;</span><br><span class=\"line\"> <span class=\"comment\">//在switch中定义变量，此变量作用域只作用于当前语句内</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;奇数&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;偶数&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;检查输入&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分支还可以使用表达式，这时候switch语句后面不需要再跟判断变量。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">age := <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> age &lt;<span class=\"number\">18</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;努力学习&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> age &gt; <span class=\"number\">18</span> &amp;&amp; age &lt; <span class=\"number\">60</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;好好上班&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> age &gt; <span class=\"number\">60</span> &amp;&amp; &lt;<span class=\"number\">100</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;好好享受&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;活着&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>fallthrough</code>语法可以执行满足条件的case的下一个case，是为了兼容C语言中的case设计的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">a := <span class=\"string\">&quot;qq&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> a == <span class=\"string\">&quot;qq&quot;</span>:</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;a == qq&quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> a == <span class=\"string\">&quot;yy&quot;</span>:</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;a == yy&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> a == <span class=\"string\">&quot;rr&quot;</span>:</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;a == rr&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;检查输入&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"goto-跳转到指定标签\"><a href=\"#goto-跳转到指定标签\" class=\"headerlink\" title=\"goto(跳转到指定标签)\"></a>goto(跳转到指定标签)</h2><p>标志位判断跳出</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>  <span class=\"comment\">//添加标志位</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++&#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t\t<span class=\"comment\">//当条件满足时，重置标志位</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> i == <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    \t\tfmt.Println(<span class=\"string\">&quot;跳出单位&quot;</span>)</span><br><span class=\"line\">    \t\tflag = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//跳出循环</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> flag &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;跳出成功&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>goto</code>语句通过标签进行代码间的无条件跳转。<code>goto</code>语句可以在快速跳出循环、避免重复退出上有一定的帮助。Go语言中使用<code>goto</code>语句能简化一些代码的实现过程。 </p>\n<p>例如双层嵌套的for循环要退出时：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gotobrk</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x:=<span class=\"number\">0</span>;x&lt;<span class=\"number\">10</span>;x++&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> y:=<span class=\"number\">0</span>;y&lt;<span class=\"number\">10</span>;y++&#123;</span><br><span class=\"line\">    \t\tfmt.Println(<span class=\"string\">&quot;%s-%s&quot;</span>,x,y)</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span> y == <span class=\"number\">8</span>&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">goto</span> felix</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfelix:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;跳出成功&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tgotobrk()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"break-跳出循环\"><a href=\"#break-跳出循环\" class=\"headerlink\" title=\"break(跳出循环)\"></a>break(跳出循环)</h2><p><code>break</code>语句可以结束<code>for</code>、<code>switch</code>和<code>select</code>的代码块。<code>break</code>语句还可以在语句后面添加标签，表示退出某个标签对应的代码块，标签要求必须定义在对应的<code>for</code>、<code>switch</code>和 <code>select</code>的代码块上。 </p>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">breakDemo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">BREAKDEMO1:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> j == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span> BREAKDEMO1</span><br><span class=\"line\">  <span class=\"comment\">//跳出当前标签下的代码,3-10行对应部份</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;%v-%v\\n&quot;</span>, i, j)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;...&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"continue-继续下次循环\"><a href=\"#continue-继续下次循环\" class=\"headerlink\" title=\"continue(继续下次循环)\"></a>continue(继续下次循环)</h2><p><code>continue</code>语句可以结束当前循环，开始下一次的循环迭代过程，仅限在<code>for</code>循环内使用。在 <code>continue</code>语句后添加标签时，表示开始标签对应的循环。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">continueDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">forloop1:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// forloop2:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i == <span class=\"number\">2</span> &amp;&amp; j == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span> forloop1</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;%v-%v\\n&quot;</span>, i, j)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>99乘法表</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">9</span>;i&gt;<span class=\"number\">0</span>;i--&#123;</span><br><span class=\"line\"> <span class=\"comment\">//控制y轴</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j:=<span class=\"number\">1</span>;j&lt;=i;j++&#123;</span><br><span class=\"line\"> <span class=\"comment\">//将j大小控制在i的范围内，控制x轴</span></span><br><span class=\"line\">\t\t\ts:=i*j</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;%d * %d = %d\\t&quot;</span>,j,i,s)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">9</span> = <span class=\"number\">9</span>       <span class=\"number\">2</span> * <span class=\"number\">9</span> = <span class=\"number\">18</span>      <span class=\"number\">3</span> * <span class=\"number\">9</span> = <span class=\"number\">27</span>      <span class=\"number\">4</span> * <span class=\"number\">9</span> = <span class=\"number\">36</span>      <span class=\"number\">5</span> * <span class=\"number\">9</span> = <span class=\"number\">45</span>      <span class=\"number\">6</span> * <span class=\"number\">9</span> = <span class=\"number\">54</span>      <span class=\"number\">7</span> * <span class=\"number\">9</span> = <span class=\"number\">63</span>      <span class=\"number\">8</span> * <span class=\"number\">9</span> = <span class=\"number\">72</span>      <span class=\"number\">9</span> * <span class=\"number\">9</span> = <span class=\"number\">81</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">8</span> = <span class=\"number\">8</span>       <span class=\"number\">2</span> * <span class=\"number\">8</span> = <span class=\"number\">16</span>      <span class=\"number\">3</span> * <span class=\"number\">8</span> = <span class=\"number\">24</span>      <span class=\"number\">4</span> * <span class=\"number\">8</span> = <span class=\"number\">32</span>      <span class=\"number\">5</span> * <span class=\"number\">8</span> = <span class=\"number\">40</span>      <span class=\"number\">6</span> * <span class=\"number\">8</span> = <span class=\"number\">48</span>      <span class=\"number\">7</span> * <span class=\"number\">8</span> = <span class=\"number\">56</span>      <span class=\"number\">8</span> * <span class=\"number\">8</span> = <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">7</span> = <span class=\"number\">7</span>       <span class=\"number\">2</span> * <span class=\"number\">7</span> = <span class=\"number\">14</span>      <span class=\"number\">3</span> * <span class=\"number\">7</span> = <span class=\"number\">21</span>      <span class=\"number\">4</span> * <span class=\"number\">7</span> = <span class=\"number\">28</span>      <span class=\"number\">5</span> * <span class=\"number\">7</span> = <span class=\"number\">35</span>      <span class=\"number\">6</span> * <span class=\"number\">7</span> = <span class=\"number\">42</span>      <span class=\"number\">7</span> * <span class=\"number\">7</span> = <span class=\"number\">49</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">6</span> = <span class=\"number\">6</span>       <span class=\"number\">2</span> * <span class=\"number\">6</span> = <span class=\"number\">12</span>      <span class=\"number\">3</span> * <span class=\"number\">6</span> = <span class=\"number\">18</span>      <span class=\"number\">4</span> * <span class=\"number\">6</span> = <span class=\"number\">24</span>      <span class=\"number\">5</span> * <span class=\"number\">6</span> = <span class=\"number\">30</span>      <span class=\"number\">6</span> * <span class=\"number\">6</span> = <span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">5</span> = <span class=\"number\">5</span>       <span class=\"number\">2</span> * <span class=\"number\">5</span> = <span class=\"number\">10</span>      <span class=\"number\">3</span> * <span class=\"number\">5</span> = <span class=\"number\">15</span>      <span class=\"number\">4</span> * <span class=\"number\">5</span> = <span class=\"number\">20</span>      <span class=\"number\">5</span> * <span class=\"number\">5</span> = <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">4</span> = <span class=\"number\">4</span>       <span class=\"number\">2</span> * <span class=\"number\">4</span> = <span class=\"number\">8</span>       <span class=\"number\">3</span> * <span class=\"number\">4</span> = <span class=\"number\">12</span>      <span class=\"number\">4</span> * <span class=\"number\">4</span> = <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">3</span> = <span class=\"number\">3</span>       <span class=\"number\">2</span> * <span class=\"number\">3</span> = <span class=\"number\">6</span>       <span class=\"number\">3</span> * <span class=\"number\">3</span> = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">2</span> = <span class=\"number\">2</span>       <span class=\"number\">2</span> * <span class=\"number\">2</span> = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><p>运算符用于在程序运行时执行数学或逻辑运算。</p>\n<p>Go 语言内置的运算符有：</p>\n<ol>\n<li><p>算术运算符</p>\n</li>\n<li><p>关系运算符</p>\n</li>\n<li><p>逻辑运算符</p>\n</li>\n<li><p>位运算符</p>\n</li>\n<li><p>赋值运算符</p>\n</li>\n</ol>\n<h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>相加</td>\n</tr>\n<tr>\n<td>-</td>\n<td>相减</td>\n</tr>\n<tr>\n<td>*</td>\n<td>相乘</td>\n</tr>\n<tr>\n<td>/</td>\n<td>相除</td>\n</tr>\n<tr>\n<td>%</td>\n<td>求余</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong> <code>++</code>（自增）和<code>--</code>（自减）在Go语言中是单独的语句，并不是运算符。既不能直接打印</p>\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==</td>\n<td>检查两个值是否相等，如果相等返回 True 否则返回 False。</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong> 关系运算符返回值为布尔值</p>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;&amp;</td>\n<td>逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False。</td>\n</tr>\n<tr>\n<td>&#124;&#124;</td>\n<td>逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False。</td>\n</tr>\n<tr>\n<td>!</td>\n<td>逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True。</td>\n</tr>\n</tbody></table>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>位运算符对整数在内存中的二进制位进行操作。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>参与运算的两数各对应的二进位相与。（两位均为1才为1）</td>\n</tr>\n<tr>\n<td>&#124;</td>\n<td>参与运算的两数各对应的二进位相或。（两位有一个为1就为1）</td>\n</tr>\n<tr>\n<td>^</td>\n<td>参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。（两位不一样则为1）</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移n位就是乘以2的n次方。“a&lt;&lt;b”是把a的各二进位全部左移b位，高位丢弃，低位补0。</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移n位就是除以2的n次方。“a&gt;&gt;b”是把a的各二进位全部右移b位。//二进制11往后移一位会变成1</td>\n</tr>\n</tbody></table>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>简单的赋值运算符，将一个表达式的值赋给一个左值</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>相加后再赋值</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>相减后再赋值</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>相乘后再赋值</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>相除后再赋值</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>求余后再赋值</td>\n</tr>\n<tr>\n<td>&lt;&lt;=</td>\n<td>左移后赋值</td>\n</tr>\n<tr>\n<td>&gt;&gt;=</td>\n<td>右移后赋值</td>\n</tr>\n<tr>\n<td>&amp;=</td>\n<td>按位与后赋值</td>\n</tr>\n<tr>\n<td>&#124;=</td>\n<td>按位或后赋值</td>\n</tr>\n<tr>\n<td>^=</td>\n<td>按位异或后赋值</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将ip地址转为整数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ip <span class=\"type\">string</span> = <span class=\"string\">&quot;192.168.19.200&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tiplist :=strings.Split(ip,<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(iplist);i++&#123;</span><br><span class=\"line\">\t\tb,_ := strconv.Atoi(iplist[i])</span><br><span class=\"line\">\t\tfmt.Println(b)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将ip地址转为二进制</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ip <span class=\"type\">string</span> = <span class=\"string\">&quot;192.168.19.200&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tiplist :=strings.Split(ip,<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(iplist);i++&#123;</span><br><span class=\"line\">\t\tb,_ := strconv.Atoi(iplist[i])</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i == <span class=\"built_in\">len</span>(iplist) - <span class=\"number\">1</span>  &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;%08b&quot;</span>,b)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;%08b.&quot;</span>,b)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"格式化打印Printf\"><a href=\"#格式化打印Printf\" class=\"headerlink\" title=\"格式化打印Printf\"></a>格式化打印Printf</h1><h2 id=\"通用占位符\"><a href=\"#通用占位符\" class=\"headerlink\" title=\"通用占位符\"></a>通用占位符</h2><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%v</td>\n<td>值的默认格式表示 //%v永远1不会出错</td>\n</tr>\n<tr>\n<td>%+v</td>\n<td>类似%v，但输出结构体时会添加字段名</td>\n</tr>\n<tr>\n<td>%#v</td>\n<td>值的Go语法表示</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>打印值的类型</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>打印百分号</td>\n</tr>\n</tbody></table>\n<h2 id=\"布尔型-1\"><a href=\"#布尔型-1\" class=\"headerlink\" title=\"布尔型\"></a>布尔型</h2><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%t</td>\n<td>true或false</td>\n</tr>\n</tbody></table>\n<h2 id=\"整型-1\"><a href=\"#整型-1\" class=\"headerlink\" title=\"整型\"></a>整型</h2><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%b</td>\n<td>表示为二进制</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>该值对应的unicode码值</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>表示为十进制 %8d 右对齐空位补空格，%-8d左对齐空位补空格</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>表示为八进制</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>表示为十六进制，使用a-f</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>表示为十六进制，使用A-F</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>表示为Unicode格式：U+1234，等价于”U+%04X”</td>\n</tr>\n<tr>\n<td>%q</td>\n<td>该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示</td>\n</tr>\n</tbody></table>\n<h3 id=\"指定长度整型\"><a href=\"#指定长度整型\" class=\"headerlink\" title=\"指定长度整型\"></a>指定长度整型</h3><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%5d</td>\n<td>整型长度为5，右对齐，左边留白</td>\n</tr>\n<tr>\n<td>%-5d</td>\n<td>左对齐，右边留白</td>\n</tr>\n<tr>\n<td>%05</td>\n<td>数字前面补零</td>\n</tr>\n</tbody></table>\n<h2 id=\"浮点数与复数\"><a href=\"#浮点数与复数\" class=\"headerlink\" title=\"浮点数与复数\"></a>浮点数与复数</h2><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%b</td>\n<td>无小数部分、二进制指数的科学计数法，如-123456p-78</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>科学计数法，如-1234.456e+78</td>\n</tr>\n<tr>\n<td>%E</td>\n<td>科学计数法，如-1234.456E+78</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>有小数部分但无指数部分，如123.456</td>\n</tr>\n<tr>\n<td>%F</td>\n<td>等价于%f</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）</td>\n</tr>\n<tr>\n<td>%G</td>\n<td>根据实际情况采用%E或%F格式（以获得更简洁、准确的输出）</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串和-byte\"><a href=\"#字符串和-byte\" class=\"headerlink\" title=\"字符串和[]byte\"></a>字符串和[]byte</h2><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%s</td>\n<td>直接输出字符串或者[]byte</td>\n</tr>\n<tr>\n<td>%q</td>\n<td>该值对应的双引号括起来的go语法字符串字面值，必要时会采用安全的转义表示</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>每个字节用两字符十六进制数表示（使用a-f</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>每个字节用两字符十六进制数表示（使用A-F）</td>\n</tr>\n</tbody></table>\n<h2 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h2><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%p</td>\n<td>表示为十六进制，并加上前导的0x</td>\n</tr>\n</tbody></table>\n<h1 id=\"数组-Array-数组\"><a href=\"#数组-Array-数组\" class=\"headerlink\" title=\"数组 Array(数组)\"></a>数组 Array(数组)</h1><p>数组是同一种数据类型元素的集合。 在Go语言中，数组从声明时就确定，使用时可以修改数组成员，但是数组大小不可变化。 </p>\n<p>基本语法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个长度为3元素类型为int的数组a</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">3</span>]<span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组定义\"><a href=\"#数组定义\" class=\"headerlink\" title=\"数组定义\"></a>数组定义</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 数组变量名 [元素数量]T</span><br></pre></td></tr></table></figure>\n\n<p>比如：</p>\n<p><code>var a [5]int</code>， 数组的长度必须是常量，并且长度是数组类型的一部分。一旦定义，长度不能变。</p>\n<p><code>[5]int</code>和<code>[10]int</code>是不同的类型，因为在go语言中 数组的长度也是类型的一部分。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">3</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b [<span class=\"number\">4</span>]<span class=\"type\">int</span></span><br><span class=\"line\">a = b <span class=\"comment\">//不可以这样做，因为此时a和b是不同的类型</span></span><br></pre></td></tr></table></figure>\n\n<p>数组可以通过下标进行访问，下标是从<code>0</code>开始，最后一个元素下标是：<code>len-1</code>，访问越界（下标在合法范围之外），则触发访问越界，会panic。</p>\n<h2 id=\"数组的初始化\"><a href=\"#数组的初始化\" class=\"headerlink\" title=\"数组的初始化\"></a>数组的初始化</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//声明</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a1 [<span class=\"number\">3</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a2 [<span class=\"number\">4</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">//初始化 方式1</span></span><br><span class=\"line\">\ta1 = [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\ta2 = [<span class=\"number\">4</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方法1:&quot;</span>,a1)</span><br><span class=\"line\">\tfmt.Println(a2)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//声明并初始化 方式2</span></span><br><span class=\"line\">\t<span class=\"comment\">//var a3 [5]string = [5]string&#123;&quot;f&quot;,&quot;e&quot;,&quot;l&quot;,&quot;i&quot;,&quot;x&quot;&#125;</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a3 = [<span class=\"number\">5</span>]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;f&quot;</span>,<span class=\"string\">&quot;e&quot;</span>,<span class=\"string\">&quot;l&quot;</span>,<span class=\"string\">&quot;i&quot;</span>,<span class=\"string\">&quot;x&quot;</span>&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方法2:&quot;</span>,a3)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//让编译器决定数组初始值个数 方式3</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a4 = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">54</span>&#125;</span><br><span class=\"line\">\tfmt.Println(a4)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;a3:%T\\ta4:%T\\n&quot;</span>,a3,a4) <span class=\"comment\">//a3:[5]string    a4:[11]int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//根据索引值指定初始化 方式4</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a5 [<span class=\"number\">20</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\ta5 = [<span class=\"number\">20</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">19</span>:<span class=\"number\">6</span>&#125;  <span class=\"comment\">//索引为第19，赋值为6，[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6]</span></span><br><span class=\"line\">\tfmt.Println(a5)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组遍历方法1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(a3);i++ &#123;</span><br><span class=\"line\">\tfmt.Println(a3[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组遍历方法2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v:= <span class=\"keyword\">range</span> a3&#123;</span><br><span class=\"line\">\tfmt.Println(k,v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"求数组元素和\"><a href=\"#求数组元素和\" class=\"headerlink\" title=\"求数组元素和\"></a>求数组元素和</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a1 = [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> j <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,arry := <span class=\"keyword\">range</span> a1&#123;</span><br><span class=\"line\">\t\tj += arry</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(j)</span><br><span class=\"line\"> <span class=\"comment\">//24</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"求数组元素两两相加值为8的数据\"><a href=\"#求数组元素两两相加值为8的数据\" class=\"headerlink\" title=\"求数组元素两两相加值为8的数据\"></a>求数组元素两两相加值为8的数据</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a1 = [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\"> <span class=\"comment\">//定义数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i,j := <span class=\"keyword\">range</span> a1 &#123;</span><br><span class=\"line\"> <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> x:=i+<span class=\"number\">1</span>;x&lt;<span class=\"built_in\">len</span>(a1);x++&#123;</span><br><span class=\"line\"> <span class=\"comment\">//依次求其他元素和</span></span><br><span class=\"line\">\t\t\ty:= j+a1[x]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> y == <span class=\"number\">8</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//判断值是否为8</span></span><br><span class=\"line\">\t\t\t\tfmt.Printf(<span class=\"string\">&quot;索引:(%d,%d) 值:(%d,%d) 和:(%d)\\n&quot;</span>,i,x,j,a1[x],y)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">索引:(<span class=\"number\">0</span>,<span class=\"number\">3</span>) 值:(<span class=\"number\">1</span>,<span class=\"number\">7</span>) 和:(<span class=\"number\">8</span>)</span><br><span class=\"line\">索引:(<span class=\"number\">1</span>,<span class=\"number\">2</span>) 值:(<span class=\"number\">3</span>,<span class=\"number\">5</span>) 和:(<span class=\"number\">8</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h1><p>Go语言是支持多维数组的，我们这里以二维数组为例（数组中又嵌套数组）。</p>\n<h2 id=\"二维数组的定义\"><a href=\"#二维数组的定义\" class=\"headerlink\" title=\"二维数组的定义\"></a>二维数组的定义</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := [<span class=\"number\">3</span>][<span class=\"number\">2</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;深圳&quot;</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">&quot;成都&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(a) <span class=\"comment\">//[[北京 上海] [广州 深圳] [成都 重庆]]</span></span><br><span class=\"line\">\tfmt.Println(a[<span class=\"number\">2</span>][<span class=\"number\">1</span>]) <span class=\"comment\">//支持索引取值:重庆</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//声明</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mafeifei [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">//初始化</span></span><br><span class=\"line\">\tmafeifei = [<span class=\"number\">2</span>][<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">11</span>,<span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">33</span>,<span class=\"number\">44</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//声明并初始化</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> felix = [...][<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123; <span class=\"comment\">//方法1</span></span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;&#125;</span><br><span class=\"line\">\tpincheng := [...][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123; <span class=\"comment\">//方法2</span></span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(mafeifei,felix,pincheng)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"number\">11</span> <span class=\"number\">22</span>] [<span class=\"number\">33</span> <span class=\"number\">44</span>]] [[<span class=\"number\">1</span> <span class=\"number\">2</span>] [<span class=\"number\">3</span> <span class=\"number\">4</span>]] [[<span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">0</span>] [<span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">0</span>] [<span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">0</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>注意：多维数组只能在第一层使用<code>...</code>来让编译器推导数组长度。</p>\n<h3 id=\"多维数组遍历\"><a href=\"#多维数组遍历\" class=\"headerlink\" title=\"多维数组遍历\"></a>多维数组遍历</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">方法<span class=\"number\">1</span>：</span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(pincheng);i++ &#123;</span><br><span class=\"line\">  <span class=\"comment\">//拿到第一层数组的长度，累加</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j:=<span class=\"number\">0</span>;j&lt;<span class=\"built_in\">len</span>(pincheng[i]);j++ &#123;</span><br><span class=\"line\">   <span class=\"comment\">//拿到第二层数组的长度，累加</span></span><br><span class=\"line\">\t\tfmt.Println(pincheng[i][j])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">方法<span class=\"number\">2</span>：</span><br><span class=\"line\"><span class=\"keyword\">for</span> _,v1 := <span class=\"keyword\">range</span> pincheng&#123;</span><br><span class=\"line\"> <span class=\"comment\">//遍历第一层数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,v2 := <span class=\"keyword\">range</span> v1 &#123;</span><br><span class=\"line\"> <span class=\"comment\">//对单层再次遍历</span></span><br><span class=\"line\">\t\tfmt.Println(v2)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组是值类型\"><a href=\"#数组是值类型\" class=\"headerlink\" title=\"数组是值类型\"></a>数组是值类型</h2><p>数组是值类型，赋值和传参会复制整个数组。因此改变副本的值，不会改变本身的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnashsu := [...][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsu := nashsu</span><br><span class=\"line\">\tsu[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">666</span></span><br><span class=\"line\">\tfmt.Println(nashsu,su)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [[2 3 4] [5 6 7] [8 9 10]] [[2 3 4] [5 666 7] [8 9 10]]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h1><p>因为数组的长度是固定的并且数组长度属于类型的一部分，所以数组有很多的局限性。 例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arraySum</span><span class=\"params\">(x [3]<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span>&#123;</span><br><span class=\"line\">    sum := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> x&#123;</span><br><span class=\"line\">        sum = sum + v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个求和函数只能接受<code>[3]int</code>类型，其他的都不支持。 再比如，</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">a := [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组a中已经有三个元素了，我们不能再继续往数组a中添加新元素了。</p>\n<p>切片（Slice）是一个拥有相同类型元素的可变长度的序列。它是基于数组类型做的一层封装。它非常灵活，支持自动扩容。</p>\n<p>切片是一个<strong>引用类型（区别于值类型）</strong>，它的内部结构包含<code>地址</code>、<code>长度</code>和<code>容量</code>。切片一般用于快速地操作一块数据集合。</p>\n<p><strong>地址：</strong>数组中第一位元素的内存地址</p>\n<p><strong>长度：</strong>切片中总共多少个元素</p>\n<p><strong>容量：</strong>最大能放多少个元素</p>\n<p><strong>引用类型：</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\tb := a</span><br><span class=\"line\"> <span class=\"comment\">//将a变量的内存地址赋值给了b</span></span><br><span class=\"line\">\tb[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">\tfmt.Println(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">100</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>]</span><br><span class=\"line\">[<span class=\"number\">100</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"切片的定义\"><a href=\"#切片的定义\" class=\"headerlink\" title=\"切片的定义\"></a>切片的定义</h2><p>声明切片类型的基本语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name []T</span><br><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"type\">string</span>              <span class=\"comment\">//声明一个字符串切片</span></span><br><span class=\"line\">,此时并未申请内存</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = []<span class=\"type\">int</span>&#123;&#125;             <span class=\"comment\">//声明一个整型切片并初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = []<span class=\"type\">bool</span>&#123;<span class=\"literal\">false</span>, <span class=\"literal\">true</span>&#125; <span class=\"comment\">//声明一个布尔切片并初始化</span></span><br></pre></td></tr></table></figure>\n\n<p>其中</p>\n<ul>\n<li><p>name:表示变量名</p>\n</li>\n<li><p>T:表示切片中的元素类型</p>\n</li>\n</ul>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//声明切片方式1：直接声明</span></span><br><span class=\"line\">\tfelix := [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; <span class=\"comment\">//数组</span></span><br><span class=\"line\">\tmafei := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;  <span class=\"comment\">//切片</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;felix:%T,mafei%T\\n&quot;</span>,felix,mafei) <span class=\"comment\">//felix:[3]int,mafei[]int</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;felix:%v,mafei%v\\n&quot;</span>,felix,mafei) <span class=\"comment\">//felix:[1 2 3],mafei[1 2 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//声明切片方式2：从数组声明赋值</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\ta []<span class=\"type\">int</span></span><br><span class=\"line\">\t\tb []<span class=\"type\">int</span></span><br><span class=\"line\">\t\tc []<span class=\"type\">int</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\ta = felix[<span class=\"number\">0</span>:<span class=\"number\">2</span>] <span class=\"comment\">//左包含又不包含</span></span><br><span class=\"line\">\tb = felix[<span class=\"number\">1</span>:] <span class=\"comment\">//从1起全包含</span></span><br><span class=\"line\">\tc = felix[:] <span class=\"comment\">//全包含</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%T_%v,%T_%v,%T_%v&quot;</span>,a,a,b,b,c,c) <span class=\"comment\">//[]int_[1 2],[]int_[2 3],[]int_[1 2 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"切片的长度和容量\"><a href=\"#切片的长度和容量\" class=\"headerlink\" title=\"切片的长度和容量\"></a>切片的长度和容量</h2><p>切片拥有自己的长度和容量，我们可以通过使用内置的<code>len()</code>函数求长度，使用内置的<code>cap()</code>函数求切片的容量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcity := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;北京&quot;</span>,<span class=\"string\">&quot;上海&quot;</span>,<span class=\"string\">&quot;广州&quot;</span>,<span class=\"string\">&quot;深圳&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;city长度:%d&quot;</span>,<span class=\"built_in\">len</span>(city)) <span class=\"comment\">//4,切片元素个数</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;city最大容量%d&quot;</span>,<span class=\"built_in\">cap</span>(city)) <span class=\"comment\">//4,最大元素个数</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;city切片后容量%d&quot;</span>,<span class=\"built_in\">cap</span>(city[<span class=\"number\">1</span>:])) <span class=\"comment\">//3,同上</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//city长度:4</span></span><br><span class=\"line\"><span class=\"comment\">//city最大容量4</span></span><br><span class=\"line\"><span class=\"comment\">//city切片后容量3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切片三要素：\"><a href=\"#切片三要素：\" class=\"headerlink\" title=\"切片三要素：\"></a><strong>切片三要素：</strong></h3><ul>\n<li><p>地址（切片中第一个元素指向的内存空间）</p>\n</li>\n<li><p>大小（切片中目前元素的个数）<code>len()</code></p>\n</li>\n<li><p>容量（底层数组最大能存放的元素个数）<code>cap()</code></p>\n</li>\n</ul>\n<h3 id=\"判断切片是否为空\"><a href=\"#判断切片是否为空\" class=\"headerlink\" title=\"判断切片是否为空:\"></a><strong>判断切片是否为空:</strong></h3><p>要检查切片是否为空，请始终使用<code>len(s) == 0</code>来判断，而不应该使用<code>s == nil</code>来判断。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//定义切片</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a []<span class=\"type\">int</span></span><br><span class=\"line\"> <span class=\"comment\">//声明切片但未初始化</span></span><br><span class=\"line\">\ta[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\"> <span class=\"comment\">//直接更改</span></span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//此时编译通过，但是执行时会提示索引越界</span></span><br><span class=\"line\"><span class=\"comment\">//解决办法，切片声明后一定要初始化，例如使用make函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">runtime <span class=\"type\">error</span>: index out of <span class=\"keyword\">range</span> [<span class=\"number\">0</span>] with length <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扩容规律：\"><a href=\"#扩容规律：\" class=\"headerlink\" title=\"扩容规律：\"></a><strong>扩容规律：</strong></h3><p>切片支持自动扩容策略，每次都是上一次的两倍</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//append(),添加元素扩容切片</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a []<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++&#123;</span><br><span class=\"line\">\t\ta = <span class=\"built_in\">append</span>(a,i)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%v  len:%d  cap:%d  ptr:%p \\n&quot;</span>,a,<span class=\"built_in\">len</span>(a),<span class=\"built_in\">cap</span>(a),a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//追加多个元素 citySlice = append(citySlice, &quot;上海&quot;, &quot;广州&quot;, &quot;深圳&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//追加单个元素 citySlice = append(citySlice, &quot;北京&quot;)，必须为字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">0</span>]  <span class=\"built_in\">len</span>:<span class=\"number\">1</span>  <span class=\"built_in\">cap</span>:<span class=\"number\">1</span>  ptr:<span class=\"number\">0xc00000a0b0</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span>]  <span class=\"built_in\">len</span>:<span class=\"number\">2</span>  <span class=\"built_in\">cap</span>:<span class=\"number\">2</span>  ptr:<span class=\"number\">0xc00000a0f0</span></span><br><span class=\"line\">  <span class=\"comment\">//容量用完翻倍扩容</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span>]  <span class=\"built_in\">len</span>:<span class=\"number\">3</span>  <span class=\"built_in\">cap</span>:<span class=\"number\">4</span>  ptr:<span class=\"number\">0xc00000e380</span></span><br><span class=\"line\"> <span class=\"comment\">//容量用完翻倍扩容</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]  <span class=\"built_in\">len</span>:<span class=\"number\">4</span>  <span class=\"built_in\">cap</span>:<span class=\"number\">4</span>  ptr:<span class=\"number\">0xc00000e380</span></span><br><span class=\"line\"> </span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>]  <span class=\"built_in\">len</span>:<span class=\"number\">5</span>  <span class=\"built_in\">cap</span>:<span class=\"number\">8</span>  ptr:<span class=\"number\">0xc00000c380</span></span><br><span class=\"line\"> <span class=\"comment\">//容量用完翻倍扩容</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>]  <span class=\"built_in\">len</span>:<span class=\"number\">6</span>  <span class=\"built_in\">cap</span>:<span class=\"number\">8</span>  ptr:<span class=\"number\">0xc00000c380</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span>]  <span class=\"built_in\">len</span>:<span class=\"number\">7</span>  <span class=\"built_in\">cap</span>:<span class=\"number\">8</span>  ptr:<span class=\"number\">0xc00000c380</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span>]  <span class=\"built_in\">len</span>:<span class=\"number\">8</span>  <span class=\"built_in\">cap</span>:<span class=\"number\">8</span>  ptr:<span class=\"number\">0xc00000c380</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span>]  <span class=\"built_in\">len</span>:<span class=\"number\">9</span>  <span class=\"built_in\">cap</span>:<span class=\"number\">16</span>  ptr:<span class=\"number\">0xc000082080</span></span><br><span class=\"line\"> <span class=\"comment\">//容量用完翻倍扩容</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]  <span class=\"built_in\">len</span>:<span class=\"number\">10</span>  <span class=\"built_in\">cap</span>:<span class=\"number\">16</span>  ptr:<span class=\"number\">0xc000082080</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"make-函数构造切片\"><a href=\"#make-函数构造切片\" class=\"headerlink\" title=\"make()函数构造切片\"></a>make()函数构造切片</h2><p>基于数组来创建的切片，如果需要动态的创建一个切片，我们就需要使用内置的<code>make()</code>函数，格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>([]T, size, <span class=\"built_in\">cap</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li><p>T:切片的元素类型</p>\n</li>\n<li><p>size:切片中元素的数量</p>\n</li>\n<li><p>cap:切片的容量</p>\n</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(a)      <span class=\"comment\">//[0 0]</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">len</span>(a)) <span class=\"comment\">//2</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">cap</span>(a)) <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中<code>a</code>的内部存储空间已经分配了10个，但实际上只用了2个。 容量并不会影响当前元素的个数，所以<code>len(a)</code>返回2，<code>cap(a)</code>则返回该切片的容量。</p>\n<h2 id=\"copy-函数复制切片\"><a href=\"#copy-函数复制切片\" class=\"headerlink\" title=\"copy()函数复制切片\"></a>copy()函数复制切片</h2><p>首先我们来看一个问题：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\tb := a</span><br><span class=\"line\">\tfmt.Println(a) <span class=\"comment\">//[1 2 3 4 5]</span></span><br><span class=\"line\">\tfmt.Println(b) <span class=\"comment\">//[1 2 3 4 5]</span></span><br><span class=\"line\">\tb[<span class=\"number\">0</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">\tfmt.Println(a) <span class=\"comment\">//[1000 2 3 4 5]</span></span><br><span class=\"line\">\tfmt.Println(b) <span class=\"comment\">//[1000 2 3 4 5]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>由于切片是引用类型，所以a和b其实都指向了同一块内存地址。修改b的同时a的值也会发生变化。</p>\n<p>Go语言内建的<code>copy()</code>函数可以迅速地将一个切片的数据复制到另外一个切片空间中，<code>copy()</code>函数的使用格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">copy</span>(destSlice, srcSlice []T)</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li><p>srcSlice: 数据来源切片</p>\n</li>\n<li><p>destSlice: 目标切片</p>\n</li>\n</ul>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// copy()复制切片</span></span><br><span class=\"line\">\ta := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>) <span class=\"comment\">//申请内存，长度为5，容量为5</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(c, a)     <span class=\"comment\">//使用copy()函数将切片a中的元素深拷贝到切片c</span></span><br><span class=\"line\">\tfmt.Println(a) <span class=\"comment\">//[1 2 3 4 5]</span></span><br><span class=\"line\">\tfmt.Println(c) <span class=\"comment\">//[1 2 3 4 5]</span></span><br><span class=\"line\">\tc[<span class=\"number\">0</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">\tfmt.Println(a) <span class=\"comment\">//[1 2 3 4 5]</span></span><br><span class=\"line\">\tfmt.Println(c) <span class=\"comment\">//[1000 2 3 4 5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从切片中删除元素\"><a href=\"#从切片中删除元素\" class=\"headerlink\" title=\"从切片中删除元素\"></a>从切片中删除元素</h2><p>Go语言中并没有删除切片元素的专用方法，我们可以使用切片本身的特性来删除元素。 代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//删除切片中某个元素</span></span><br><span class=\"line\">\tcity := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;北京&quot;</span>,<span class=\"string\">&quot;上海&quot;</span>,<span class=\"string\">&quot;广州&quot;</span>,<span class=\"string\">&quot;深圳&quot;</span>&#125;</span><br><span class=\"line\">\tcity = <span class=\"built_in\">append</span>(city[:<span class=\"number\">1</span>],city[<span class=\"number\">2</span>:]...)</span><br><span class=\"line\">\t<span class=\"comment\">//append()追加</span></span><br><span class=\"line\">\t<span class=\"comment\">//city[:1] //&quot;北京&quot;，包左不包右。这个代表容器</span></span><br><span class=\"line\">\t<span class=\"comment\">//city[2:] //&quot;广州&quot;,&quot;深圳&quot;。这个代表要追加的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">//... //依次取出元素</span></span><br><span class=\"line\">为字符串形式</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(city)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结一下就是：要从切片a中删除索引为<code>index</code>的元素，操作方法是<code>a = append(a[:index], a[index+1:]...)</code></p>\n<h2 id=\"切片基于数组\"><a href=\"#切片基于数组\" class=\"headerlink\" title=\"切片基于数组\"></a>切片基于数组</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个数组</span></span><br><span class=\"line\">\ta := [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 基于数组得到一个切片</span></span><br><span class=\"line\">\tb := a[:]</span><br><span class=\"line\">\t<span class=\"comment\">// 修改切片中的元素为100</span></span><br><span class=\"line\">\tb[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(a,b)</span><br><span class=\"line\"> <span class=\"comment\">//[100 2 3 4 5 6 7 8] [100 2 3 4 5 6 7 8]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>切片的本质就是对底层数组的封装，它包含了三个信息：底层数组的指针、切片的长度（len）和切片的容量（cap）。</p>\n<p>举个例子，现在有一个数组<code>a := [8]int&#123;0, 1, 2, 3, 4, 5, 6, 7&#125;</code>，切片<code>s1 := a[:5]</code>，相应示意图：</p>\n<p><img src=\"/images/pasted-0.png\" alt=\"切片\"></p>\n<p>切片<code>s2 := a[3:6]</code>，相应示意图：</p>\n<p><img src=\"/images/pasted-1.png\" alt=\"切片\"></p>\n<h2 id=\"切片的遍历\"><a href=\"#切片的遍历\" class=\"headerlink\" title=\"切片的遍历\"></a>切片的遍历</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//定义切片</span></span><br><span class=\"line\">\ta := []<span class=\"type\">int</span>&#123;<span class=\"number\">55</span>,<span class=\"number\">56</span>,<span class=\"number\">57</span>,<span class=\"number\">58</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//以索引方式遍历</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(a);i++&#123;</span><br><span class=\"line\">\t\tfmt.Println(a[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//以range方式便利</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,a := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">\t\tfmt.Println(a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sort切片排序\"><a href=\"#sort切片排序\" class=\"headerlink\" title=\"sort切片排序\"></a>sort切片排序</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//定义切片</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//对切片排序</span></span><br><span class=\"line\">，切片指向了底层数组所以对切片排序就是对底层数组排序</span><br><span class=\"line\">\tsort.Ints(a[:])</span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h1><p>golang中映射关系容器为<code>map</code>，其内部使用<code>散列表（hash）</code>实现。</p>\n<h2 id=\"map定义\"><a href=\"#map定义\" class=\"headerlink\" title=\"map定义\"></a>map定义</h2><p>Go语言中 <code>map</code>的定义语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">map</span>[KeyType]ValueType</span><br><span class=\"line\">    key类型  值类型</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<ul>\n<li><p>KeyType:表示键的类型。</p>\n</li>\n<li><p>ValueType:表示键对应的值的类型。</p>\n</li>\n</ul>\n<p>map类型的变量默认初始值为nil，需要使用make()函数来分配内存。语法为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[KeyType]ValueType, [<span class=\"built_in\">cap</span>])</span><br></pre></td></tr></table></figure>\n\n<p>其中cap表示map的容量，该参数虽然不是必须的，但是我们应该在初始化map的时候就为其指定一个合适的容量。</p>\n<p>例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">  <span class=\"comment\">//声明一个键类型为字符串，值类型为int的map</span></span><br><span class=\"line\">\tfmt.Println(a == <span class=\"literal\">nil</span>,a)</span><br><span class=\"line\">  <span class=\"comment\">//只声明未初始化，说明map初始值为nil</span></span><br><span class=\"line\">    a = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span> <span class=\"number\">8</span>)  <span class=\"comment\">//初始化map，指定容量</span></span><br><span class=\"line\">    fmt.Println(a == <span class=\"literal\">nil</span>,a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">true</span> <span class=\"keyword\">map</span>[]</span><br><span class=\"line\"><span class=\"literal\">false</span> <span class=\"keyword\">map</span>[]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"map使用\"><a href=\"#map使用\" class=\"headerlink\" title=\"map使用\"></a>map使用</h2><p>map中的数据都是成对出现的，map的基本使用示例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tsocreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\"> <span class=\"comment\">//shnm</span></span><br><span class=\"line\">\tsocreMap[<span class=\"string\">&quot;飞驰&quot;</span>] = <span class=\"number\">18</span></span><br><span class=\"line\">\tsocreMap[<span class=\"string\">&quot;灰驰&quot;</span>] = <span class=\"number\">20</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v \\n%v  \\nType of:%T  \\n&quot;</span>,socreMap,socreMap[<span class=\"string\">&quot;灰驰&quot;</span>],socreMap)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;<span class=\"string\">&quot;灰驰&quot;</span>:<span class=\"number\">20</span>, <span class=\"string\">&quot;飞驰&quot;</span>:<span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\">Type of:<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>map也支持在声明的同时完成初始化，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tsocreMap2 := <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;马飞飞&quot;</span> : <span class=\"number\">21</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;卢本伟&quot;</span> : <span class=\"number\">22</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v \\n%v  \\nType of:%T  \\n&quot;</span>,socreMap2,socreMap2[<span class=\"string\">&quot;卢本伟&quot;</span>],socreMap2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;<span class=\"string\">&quot;卢本伟&quot;</span>:<span class=\"number\">22</span>, <span class=\"string\">&quot;马飞飞&quot;</span>:<span class=\"number\">21</span>&#125;</span><br><span class=\"line\"><span class=\"number\">22</span></span><br><span class=\"line\">Type of:<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>map使用时必须进行初始化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> test <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\ttest[<span class=\"number\">100</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(test) <span class=\"comment\">//panic: assignment to entry in nil map,由于map只声明未进行初始化</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">修改</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> test <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\ttest = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>,<span class=\"number\">8</span>)</span><br><span class=\"line\">\ttest[<span class=\"number\">100</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(test)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"map判断键值对是否存在\"><a href=\"#map判断键值对是否存在\" class=\"headerlink\" title=\"map判断键值对是否存在\"></a>map判断键值对是否存在</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapCredit = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">\tmapCredit[<span class=\"string\">&quot;z3&quot;</span>] = <span class=\"number\">59</span></span><br><span class=\"line\">\tmapCredit[<span class=\"string\">&quot;l4&quot;</span>] = <span class=\"number\">60</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v \\n&quot;</span>,mapCredit)</span><br><span class=\"line\"> <span class=\"comment\">//map[string]int&#123;&quot;l4&quot;:60, &quot;z3&quot;:59&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tvalue, ok := mapCredit[<span class=\"string\">&quot;w5&quot;</span>]</span><br><span class=\"line\">\tfmt.Println(value,ok)</span><br><span class=\"line\">  <span class=\"comment\">//59 true</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;w5存在,值为:%v \\n&quot;</span>,value)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;w5查无此人&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"map遍历\"><a href=\"#map遍历\" class=\"headerlink\" title=\"map遍历\"></a>map遍历</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapCredit = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">\tmapCredit[<span class=\"string\">&quot;z3&quot;</span>] = <span class=\"number\">59</span></span><br><span class=\"line\">\tmapCredit[<span class=\"string\">&quot;l4&quot;</span>] = <span class=\"number\">60</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v \\n&quot;</span>,mapCredit)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//range遍历map，map中的元素是无序的</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> mapCredit &#123;</span><br><span class=\"line\">\t\tfmt.Println(k,v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//只遍历键</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> mapCredit &#123;</span><br><span class=\"line\">\t\tfmt.Println(k)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//只遍历值</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,v :=<span class=\"keyword\">range</span> mapCredit &#123;</span><br><span class=\"line\">\t\tfmt.Println(v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">z3 <span class=\"number\">59</span></span><br><span class=\"line\">l4 <span class=\"number\">60</span></span><br><span class=\"line\"></span><br><span class=\"line\">z3</span><br><span class=\"line\">l4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">59</span></span><br><span class=\"line\"><span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按指定顺序遍历map\"><a href=\"#按指定顺序遍历map\" class=\"headerlink\" title=\"按指定顺序遍历map\"></a>按指定顺序遍历map</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//按照顺序遍历map</span></span><br><span class=\"line\">\t<span class=\"comment\">//1.生成50个元素的map</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> somap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>,<span class=\"number\">50</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">50</span>;i++ &#123;</span><br><span class=\"line\">\t\tkey := fmt.Sprintf(<span class=\"string\">&quot;sum%02d&quot;</span>, i)</span><br><span class=\"line\">\t\tvalue := rand.Intn(<span class=\"number\">100</span>) <span class=\"comment\">//0~99的随机整数</span></span><br><span class=\"line\">\t\tsomap[key] = value</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> km,vm := <span class=\"keyword\">range</span> somap &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%v:%v &quot;</span>,km,vm)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.将map中的key放入切片</span></span><br><span class=\"line\">\tsoslice := <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>,<span class=\"number\">0</span>,<span class=\"number\">50</span>) <span class=\"comment\">//长度为0，容量为50。长度必须为0，负责会产生nil值填充的元素。影响后续追加</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> somap&#123;</span><br><span class=\"line\">\t\tsoslice = <span class=\"built_in\">append</span>(soslice,k) <span class=\"comment\">//取出map中的k，追加进切片</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3.对切片进行排序</span></span><br><span class=\"line\">\tsort.Strings(soslice[:])</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(soslice)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//4.按照切片中的顺序遍历map</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,sv := <span class=\"keyword\">range</span> soslice&#123;</span><br><span class=\"line\">\t\tfmt.Print(sv,<span class=\"string\">&quot;:&quot;</span>,somap[sv],<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum23:<span class=\"number\">58</span> sum26:<span class=\"number\">87</span> sum00:<span class=\"number\">81</span> sum09:<span class=\"number\">0</span> sum20:<span class=\"number\">95</span> sum35:<span class=\"number\">56</span> sum48:<span class=\"number\">59</span> sum02:<span class=\"number\">47</span> sum10:<span class=\"number\">94</span> sum12:<span class=\"number\">62</span> sum37:<span class=\"number\">31</span> sum39:<span class=\"number\">26</span> sum41:<span class=\"number\">90</span> sum44:<span class=\"number\">33</span> sum47:<span class=\"number\">24</span> sum03:<span class=\"number\">59</span> sum04:<span class=\"number\">81</span> sum13:<span class=\"number\">89</span> sum29:<span class=\"number\">15</span> sum36:<span class=\"number\">37</span> sum38</span><br><span class=\"line\">:<span class=\"number\">85</span> sum46:<span class=\"number\">78</span> sum34:<span class=\"number\">29</span> sum42:<span class=\"number\">94</span> sum49:<span class=\"number\">53</span> sum01:<span class=\"number\">87</span> sum08:<span class=\"number\">56</span> sum15:<span class=\"number\">74</span> sum16:<span class=\"number\">11</span> sum17:<span class=\"number\">45</span> sum25:<span class=\"number\">47</span> sum28:<span class=\"number\">90</span> sum30:<span class=\"number\">41</span> sum32:<span class=\"number\">87</span> sum33:<span class=\"number\">31</span> sum40:<span class=\"number\">13</span> sum43:<span class=\"number\">63</span> sum06:<span class=\"number\">25</span> sum07:<span class=\"number\">40</span> sum14:<span class=\"number\">28</span> sum18:<span class=\"number\">37</span></span><br><span class=\"line\">sum19:<span class=\"number\">6</span> sum22:<span class=\"number\">28</span> sum24:<span class=\"number\">47</span> sum27:<span class=\"number\">88</span> sum05:<span class=\"number\">18</span> sum11:<span class=\"number\">11</span> sum21:<span class=\"number\">66</span> sum31:<span class=\"number\">8</span> sum45:<span class=\"number\">47</span></span><br><span class=\"line\"></span><br><span class=\"line\">sum00:<span class=\"number\">81</span> sum01:<span class=\"number\">87</span> sum02:<span class=\"number\">47</span> sum03:<span class=\"number\">59</span> sum04:<span class=\"number\">81</span> sum05:<span class=\"number\">18</span> sum06:<span class=\"number\">25</span> sum07:<span class=\"number\">40</span> sum08:<span class=\"number\">56</span> sum09:<span class=\"number\">0</span> sum10:<span class=\"number\">94</span> sum11:<span class=\"number\">11</span> sum12:<span class=\"number\">62</span> sum13:<span class=\"number\">89</span> sum14:<span class=\"number\">28</span> sum15:<span class=\"number\">74</span> sum16:<span class=\"number\">11</span> sum17:<span class=\"number\">45</span> sum18:<span class=\"number\">37</span> sum19:<span class=\"number\">6</span> sum20:</span><br><span class=\"line\"><span class=\"number\">95</span> sum21:<span class=\"number\">66</span> sum22:<span class=\"number\">28</span> sum23:<span class=\"number\">58</span> sum24:<span class=\"number\">47</span> sum25:<span class=\"number\">47</span> sum26:<span class=\"number\">87</span> sum27:<span class=\"number\">88</span> sum28:<span class=\"number\">90</span> sum29:<span class=\"number\">15</span> sum30:<span class=\"number\">41</span> sum31:<span class=\"number\">8</span> sum32:<span class=\"number\">87</span> sum33:<span class=\"number\">31</span> sum34:<span class=\"number\">29</span> sum35:<span class=\"number\">56</span> sum36:<span class=\"number\">37</span> sum37:<span class=\"number\">31</span> sum38:<span class=\"number\">85</span> sum39:<span class=\"number\">26</span> sum40:<span class=\"number\">13</span> su</span><br><span class=\"line\">m41:<span class=\"number\">90</span> sum42:<span class=\"number\">94</span> sum43:<span class=\"number\">63</span> sum44:<span class=\"number\">33</span> sum45:<span class=\"number\">47</span> sum46:<span class=\"number\">78</span> sum47:<span class=\"number\">24</span> sum48:<span class=\"number\">59</span> sum49:<span class=\"number\">53</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型为map的切片\"><a href=\"#类型为map的切片\" class=\"headerlink\" title=\"类型为map的切片\"></a>类型为map的切片</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//元素类型为map的切片</span></span><br><span class=\"line\">\tslice := <span class=\"built_in\">make</span>([]<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>) <span class=\"comment\">//此时只初始化了切片</span></span><br><span class=\"line\">\tfmt.Println(slice[<span class=\"number\">0</span>] == <span class=\"literal\">nil</span>)</span><br><span class=\"line\">  <span class=\"comment\">//true</span></span><br><span class=\"line\">\t<span class=\"comment\">//切片中[nil nil nil nil nil nil nil nil]</span></span><br><span class=\"line\">\t<span class=\"comment\">//slice[0][&quot;马飞&quot;]=1,不能赋值，因为此时切片中的map元素还没初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//初始化切片中的map</span></span><br><span class=\"line\">\tslice[<span class=\"number\">0</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>,<span class=\"number\">8</span>)</span><br><span class=\"line\">\tslice[<span class=\"number\">0</span>][<span class=\"string\">&quot;马hu&quot;</span>]=<span class=\"number\">1</span></span><br><span class=\"line\">\tfmt.Println(slice[:])</span><br><span class=\"line\"> <span class=\"comment\">//[map[马hu:1] map[] map[] map[] map[] map[] map[] map[]]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型为切片的map\"><a href=\"#类型为切片的map\" class=\"headerlink\" title=\"类型为切片的map\"></a>类型为切片的map</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//元素为切片的map</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sliceMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>][]<span class=\"type\">int</span>,<span class=\"number\">8</span>) <span class=\"comment\">//初始化外层map</span></span><br><span class=\"line\">\tsliceMap[<span class=\"string\">&quot;felix&quot;</span>] = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">8</span>,<span class=\"number\">8</span>) <span class=\"comment\">//初始化切片</span></span><br><span class=\"line\">\tsliceMap[<span class=\"string\">&quot;feliy&quot;</span>] = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">6</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\">\tfmt.Println(sliceMap)</span><br><span class=\"line\"> <span class=\"comment\">//map[felix:[0 0 0 0 0 0 0 0] feliy:[0 0 0 0 0 0]]</span></span><br><span class=\"line\">\tsliceMap[<span class=\"string\">&quot;felix&quot;</span>][<span class=\"number\">0</span>] = <span class=\"number\">100</span> <span class=\"comment\">//给切片0元素赋值</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> sliceMap &#123;</span><br><span class=\"line\"> <span class=\"comment\">//遍历map中所有元素名，对遍历出的切片进行赋值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> x:=<span class=\"number\">0</span>;x&lt;<span class=\"built_in\">cap</span>(sliceMap[i]);x++&#123;</span><br><span class=\"line\">\t\t\tsliceMap[i][x] = x</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(sliceMap)</span><br><span class=\"line\"> <span class=\"comment\">//map[felix:[0 1 2 3 4 5 6 7] feliy:[0 1 2 3 4 5]]</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> sliceMap&#123;</span><br><span class=\"line\"> <span class=\"comment\">//对其中的切片进行遍历</span></span><br><span class=\"line\">\t\tfmt.Print(k)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _,Sv := <span class=\"keyword\">range</span> v &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;%v&quot;</span>,Sv)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//felix0 1 2 3 4 5 6 7 feliy0 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"统计单词出现次数\"><a href=\"#统计单词出现次数\" class=\"headerlink\" title=\"统计单词出现次数\"></a>统计单词出现次数</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//&quot;How do you do&quot;每个单词出现次数</span></span><br><span class=\"line\">\ts := <span class=\"string\">&quot;How do you do&quot;</span></span><br><span class=\"line\">\twordCount := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//字符串转切片</span></span><br><span class=\"line\">\twords := strings.Split(s, <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\tfmt.Println(words) <span class=\"comment\">//[How do you do]</span></span><br><span class=\"line\">\t<span class=\"comment\">//遍历切片并将结果放入map</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,v := <span class=\"keyword\">range</span> words &#123;</span><br><span class=\"line\">\t\twv,ok := wordCount[v]</span><br><span class=\"line\"> <span class=\"comment\">//值存在，那么ok=true且wv为该键的值反之则为false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\t\t\twordCount[v] = wv + <span class=\"number\">1</span> <span class=\"comment\">//如果map中存在那么将对应值+1</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\twordCount[v] = <span class=\"number\">1</span> <span class=\"comment\">//如果不存在，则初始化为1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> wordMap := <span class=\"keyword\">range</span> wordCount &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%v:%v\\n&quot;</span>,wordMap,wordCount[wordMap])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//How:1</span></span><br><span class=\"line\"><span class=\"comment\">//do:2</span></span><br><span class=\"line\"><span class=\"comment\">//you:1</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>Go语言中支持函数、匿名函数和闭包，并且函数在Go语言中属于“一等公民”。</p>\n<p>Go语言中定义函数使用<code>func</code>关键字，具体格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> 函数名<span class=\"params\">(参数)</span></span>(返回值)&#123;</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li><p>函数名：由字母、数字、下划线组成。但函数名的第一个字母不能是数字。在同一个包内，函数名也称不能重名（包的概念详见后文）。</p>\n</li>\n<li><p>参数：参数由参数变量和参数变量的类型组成，多个参数之间使用<code>,</code>分隔。</p>\n</li>\n<li><p>返回值：返回值由返回值变量和其变量类型组成，也可以只写返回值的类型，多个返回值必须用<code>()</code>包裹，并用<code>,</code>分隔。</p>\n</li>\n<li><p>函数体：实现指定功能的代码块。</p>\n</li>\n</ul>\n<p>我们先来定义一个求两个数之和的函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">intSum</span><span class=\"params\">(x <span class=\"type\">int</span>, y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数的参数和返回值都是可选的，例如我们可以实现一个既不需要参数也没有返回值的函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello 沙河&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//单个参数传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHallo</span><span class=\"params\">(name <span class=\"type\">string</span>)</span></span> &#123; <span class=\"comment\">//定义一个为字符串类型的参数，此处和下方调用时填写的参数名称无关</span></span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;hello&quot;</span>, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   n := <span class=\"string\">&quot;felix&quot;</span></span><br><span class=\"line\">   sayHallo(n) <span class=\"comment\">//hello felix</span></span><br><span class=\"line\">   sayHallo(<span class=\"string\">&quot;liupi&quot;</span>) <span class=\"comment\">//hello liupi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多个参数传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">intSum</span><span class=\"params\">(a , b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//函数的参数中如果相邻变量的类型相同，则可以省略类型；返回值类型 int；</span></span><br><span class=\"line\">\ts := a + b</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf := intSum(<span class=\"number\">35</span>,<span class=\"number\">40</span>)</span><br><span class=\"line\">\tfmt.Println(f)</span><br><span class=\"line\"> <span class=\"comment\">//75</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多个参数传递写法2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">intMultiply</span><span class=\"params\">(a <span class=\"type\">int</span>,b <span class=\"type\">int</span>)</span></span>(rfc <span class=\"type\">int</span>)&#123;</span><br><span class=\"line\"> <span class=\"comment\">//声明要返回的变量</span></span><br><span class=\"line\">\trfc = a * b</span><br><span class=\"line\"> <span class=\"comment\">//此时不需要类型推倒</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tg := intMultiply(<span class=\"number\">35</span>,<span class=\"number\">40</span>)</span><br><span class=\"line\">\tfmt.Println(g)</span><br><span class=\"line\"> <span class=\"comment\">//1400</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>可变参数是指函数的参数数量不固定。Go语言中的可变参数通过在参数名后加<code>...</code>来标识。</p>\n<p><strong>注意：</strong>可变参数通常要作为函数的最后一个参数。</p>\n<p><strong>举个例子：</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">intMultiply1</span><span class=\"params\">(c ...<span class=\"type\">int</span>)</span></span> (v <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Type:%T,Value:%v\\n&quot;</span>,c,c)</span><br><span class=\"line\"> <span class=\"comment\">//Type:[]int,Value:[1 2 3 4 5]</span></span><br><span class=\"line\">\tv = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,x := <span class=\"keyword\">range</span> c&#123;</span><br><span class=\"line\">\t\tv = v + x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\th := intMultiply1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">\tfmt.Println(h)</span><br><span class=\"line\"> <span class=\"comment\">//16</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mafeifei</span><span class=\"params\">(a <span class=\"type\">int</span>,b ...<span class=\"type\">int</span>)</span></span>(rfc <span class=\"type\">int</span>) &#123; <span class=\"comment\">//固定参数搭配可变参数</span></span><br><span class=\"line\">时，可变参数要放到最后面；<span class=\"keyword\">go</span>函数中没有漠然默认参数</span><br><span class=\"line\">\trfc = a</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,x := <span class=\"keyword\">range</span> b &#123;</span><br><span class=\"line\">\t\trfc = a + x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tfmt.Println(mafeifei(<span class=\"number\">7</span>)) <span class=\"comment\">//a=7,b=[]int</span></span><br><span class=\"line\">\tfmt.Println(mafeifei(<span class=\"number\">10</span>))<span class=\"comment\">//a=10,b=[]int</span></span><br><span class=\"line\">\tfmt.Println(mafeifei(<span class=\"number\">10</span>,<span class=\"number\">20</span>))<span class=\"comment\">//a=10,b=[]int&#123;20&#125;</span></span><br><span class=\"line\">\tfmt.Println(mafeifei(<span class=\"number\">10</span>,<span class=\"number\">30</span>))<span class=\"comment\">//a=10,b=[]int&#123;30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多个返回值\"><a href=\"#多个返回值\" class=\"headerlink\" title=\"多个返回值\"></a>多个返回值</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mafeifei</span><span class=\"params\">(a ,b <span class=\"type\">int</span>)</span></span>(sum ,sub <span class=\"type\">int</span>)&#123;</span><br><span class=\"line\">\tsum = a + b</span><br><span class=\"line\">\tsub = a - b</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tx ,y :=mafeifei(<span class=\"number\">100</span>,<span class=\"number\">200</span>)</span><br><span class=\"line\">\tfmt.Println(x,y)</span><br><span class=\"line\"> <span class=\"comment\">//300 -100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"defer语句\"><a href=\"#defer语句\" class=\"headerlink\" title=\"defer语句\"></a>defer语句</h2><p>Go语言中的<code>defer</code>语句会将其后面跟随的语句进行延迟处理。在<code>defer</code>归属的函数即将返回时，将延迟处理的语句按<code>defer</code>定义的逆序进行执行，也就是说，先被<code>defer</code>的语句最后被执行，最后被<code>defer</code>的语句，最先被执行。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">defer</span> <span class=\"comment\">//延迟执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"number\">3</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start</span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>由于<code>defer</code>语句延迟调用的特性，所以<code>defer</code>语句能非常方便的处理资源释放问题。比如：资源清理、文件关闭、解锁及记录时间等。</p>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p><strong>全局变量</strong></p>\n<p>全局变量是定义在函数外部的变量，它在程序整个运行周期内都有效。 在函数中可以访问到全局变量。</p>\n<p><strong>局部变量</strong></p>\n<p>局部变量又分为两种： </p>\n<p>  1.函数内定义的变量无法在该函数外使用。</p>\n<p>  2.语句块定义的变量，通常我们会在if条件判断、for循环、switch语句上使用这种定义变量的方式。</p>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>函数可以作为参数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//高阶函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(x,y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">less</span><span class=\"params\">(x,y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参数1：x</span></span><br><span class=\"line\"><span class=\"comment\">//参数2：y</span></span><br><span class=\"line\"><span class=\"comment\">//参数3：函数类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">cls</span><span class=\"params\">(x,y <span class=\"type\">int</span>,fu <span class=\"keyword\">func</span>(<span class=\"type\">int</span>,<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fu(x,y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将函数当成参数赋值给另一个函数</span></span><br><span class=\"line\">\tfmt.Println(cls(<span class=\"number\">200</span>,<span class=\"number\">300</span>,add))</span><br><span class=\"line\"> <span class=\"comment\">//500</span></span><br><span class=\"line\">\tfmt.Println(cls(<span class=\"number\">200</span>,<span class=\"number\">300</span>,less))</span><br><span class=\"line\">  <span class=\"comment\">//-100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数作为返回值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">do</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> (<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">int</span>, <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> s &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> add, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sub, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\terr := errors.New(<span class=\"string\">&quot;无法识别的操作符&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2><p>匿名函数就是没有函数名的函数，匿名函数的定义格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//匿名函数的定义并执行方法一</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;匿名函数1&quot;</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"comment\">//匿名函数的定义并执行方法二</span></span><br><span class=\"line\">\thello := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;匿名函数2&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thello()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包指的是一个函数和与其相关的引用环境组合而成的实体。简单来说，<code>闭包=函数+引用环境</code>。 例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个函数，他的返回值是一个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">felix</span><span class=\"params\">(mff <span class=\"type\">string</span>)</span></span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//mff := &quot;盖亚&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;lbwlb&quot;</span>,mff)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//闭包 + 函数+外部变量的引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thelloLbw := felix(<span class=\"string\">&quot;盖亚&quot;</span>) <span class=\"comment\">//helloLbw此时就是一个闭包</span></span><br><span class=\"line\">\thelloLbw() <span class=\"comment\">//相当于执行了felix函数内的匿名函数 + 函数之外的一个变量引用。称之为闭包</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包做后缀名校验\"><a href=\"#闭包做后缀名校验\" class=\"headerlink\" title=\"闭包做后缀名校验\"></a>闭包做后缀名校验</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">checkSuffix</span><span class=\"params\">(suffix <span class=\"type\">string</span>)</span></span> (<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(name <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> name + suffix <span class=\"comment\">//如果传进来的后缀名不是suffix变量，那么将文件名+suffix变量return并结束</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name <span class=\"comment\">//否则直接返回原值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfelixFunc:=checkSuffix(<span class=\"string\">&quot;.txt&quot;</span>)</span><br><span class=\"line\"> <span class=\"comment\">//传入需要校验的后缀名</span></span><br><span class=\"line\">\tfmt.Println(felixFunc(<span class=\"string\">&quot;xiaohei&quot;</span>))</span><br><span class=\"line\"> <span class=\"comment\">//xiaohei.txt</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包示例2\"><a href=\"#闭包示例2\" class=\"headerlink\" title=\"闭包示例2\"></a>闭包示例2</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calc</span><span class=\"params\">(base <span class=\"type\">int</span>)</span></span> (<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span><span class=\"type\">int</span>,<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span><span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tadd := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\tbase += i</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> base</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsub := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\tbase -= i</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> base</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> add,sub</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tjia,jian:=calc(<span class=\"number\">7</span>) <span class=\"comment\">//将两个闭包分别赋值给了jia,jian</span></span><br><span class=\"line\">\tfmt.Println(jia(<span class=\"number\">1</span>)) <span class=\"comment\">//base = 7 + 1</span></span><br><span class=\"line\">\tfmt.Println(jian(<span class=\"number\">1</span>)) <span class=\"comment\">//base = 8 - 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h2><table>\n<thead>\n<tr>\n<th>内置函数</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>close</td>\n<td>主要用来关闭channel</td>\n</tr>\n<tr>\n<td>len</td>\n<td>用来求长度，比如string、array、slice、map、channel</td>\n</tr>\n<tr>\n<td>new</td>\n<td>用来分配内存，主要用来分配值类型，比如int、struct。返回的是指针</td>\n</tr>\n<tr>\n<td>make</td>\n<td>用来分配内存，主要用来分配引用类型，比如chan、map、slice</td>\n</tr>\n<tr>\n<td>append</td>\n<td>用来追加元素到数组、slice中</td>\n</tr>\n<tr>\n<td>panic和recover</td>\n<td>用来做错误处理</td>\n</tr>\n</tbody></table>\n<h3 id=\"panic-recover\"><a href=\"#panic-recover\" class=\"headerlink\" title=\"panic/recover\"></a>panic/recover</h3><p>Go语言中目前（Go1.12）是没有异常机制，但是使用<code>panic/recover</code>模式来处理错误。 <code>panic</code>可以在任何地方引发，但<code>recover</code>只有在<code>defer</code>调用的函数中有效。例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcA</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;func A&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;报了个错&quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//fmt.Println(recover())</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">&quot;panic in B&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcC</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;func C&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfuncA()</span><br><span class=\"line\">\tfuncB()</span><br><span class=\"line\">\tfuncC()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">A</span></span></span><br><span class=\"line\">报了个错</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">C</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分金币作业\"><a href=\"#分金币作业\" class=\"headerlink\" title=\"分金币作业\"></a>分金币作业</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//分金币作业</span></span><br><span class=\"line\"><span class=\"comment\">// 你有50枚金币，需要分配给以下几个人：Matthew,Sarah,Augustus,Heidi,Emilie,Peter,Giana,Adriano,Aaron,Elizabeth。</span></span><br><span class=\"line\"><span class=\"comment\">// 分配规则如下：</span></span><br><span class=\"line\"><span class=\"comment\">// a. 名字中每包含1个&#x27;e&#x27;或&#x27;E&#x27;分1枚金币</span></span><br><span class=\"line\"><span class=\"comment\">// b. 名字中每包含1个&#x27;i&#x27;或&#x27;I&#x27;分2枚金币</span></span><br><span class=\"line\"><span class=\"comment\">// c. 名字中每包含1个&#x27;o&#x27;或&#x27;O&#x27;分3枚金币</span></span><br><span class=\"line\"><span class=\"comment\">// d: 名字中每包含1个&#x27;u&#x27;或&#x27;U&#x27;分4枚金币</span></span><br><span class=\"line\"><span class=\"comment\">// 写一个程序，计算每个用户分到多少金币，以及最后剩余多少金币？</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tcoins = <span class=\"number\">50</span></span><br><span class=\"line\">\tusers = []<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Matthew&quot;</span>, <span class=\"string\">&quot;Sarah&quot;</span>, <span class=\"string\">&quot;Augustus&quot;</span>, <span class=\"string\">&quot;Heidi&quot;</span>, <span class=\"string\">&quot;Emilie&quot;</span>, <span class=\"string\">&quot;Peter&quot;</span>, <span class=\"string\">&quot;Giana&quot;</span>, <span class=\"string\">&quot;Adriano&quot;</span>, <span class=\"string\">&quot;Aaron&quot;</span>, <span class=\"string\">&quot;Elizabeth&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdistribution = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(users))</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringTraversal</span><span class=\"params\">(name <span class=\"type\">string</span>)</span></span> (<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//单个名字累加金币</span></span><br><span class=\"line\">\tGophers:=<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,x := <span class=\"keyword\">range</span> name &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> x &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;E&#x27;</span>:</span><br><span class=\"line\">\t\t\tGophers ++</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;i&#x27;</span>,<span class=\"string\">&#x27;I&#x27;</span>:</span><br><span class=\"line\">\t\t\tGophers += <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;o&#x27;</span>,<span class=\"string\">&#x27;O&#x27;</span>:</span><br><span class=\"line\">\t\t\tGophers += <span class=\"number\">3</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;u&#x27;</span>,<span class=\"string\">&#x27;U&#x27;</span>:</span><br><span class=\"line\">\t\t\tGophers += <span class=\"number\">4</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//金币总数减去每个人所得金币</span></span><br><span class=\"line\">\tcoins -=  Gophers</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Gophers</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatchCoin</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将每个人金币放入map对应的value中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,i := <span class=\"keyword\">range</span> users &#123;</span><br><span class=\"line\">\t\tdistribution[i] = StringTraversal(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历map</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> n,c := <span class=\"keyword\">range</span> distribution&#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;名字:&quot;</span>,n,<span class=\"string\">&quot;分得:&quot;</span>,c)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdispatchCoin()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;剩下:%v \\n&quot;</span>, coins)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["DEV"],"tags":["Golang"]},{"title":"Golang-基础语法","url":"/forward/e9795f03.html","content":"<h1 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h1><p>Go语言设计的关键字，了解这些关键字有助于命名变量的冲突避免</p>\n<h3 id=\"go的二十五个关键字\"><a href=\"#go的二十五个关键字\" class=\"headerlink\" title=\"go的二十五个关键字\"></a>go的二十五个关键字</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">break    default      func    interface    select</span><br><span class=\"line\">case     defer        go      map          struct</span><br><span class=\"line\">chan     else         goto    package      switch</span><br><span class=\"line\">const    fallthrough  if      range        type</span><br><span class=\"line\">continue for          import  return       var</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li><p><code>var</code>和<code>const</code> 是 Go语言基础里面的变量和常量申明</p>\n</li>\n<li><p><code>package</code>和<code>import</code> 用于分包和导入</p>\n</li>\n<li><p><code>func</code> 用于定义函数和方法</p>\n</li>\n<li><p><code>return</code> 用于从函数返回</p>\n</li>\n<li><p><code>defer</code> 用于类似析构函数</p>\n</li>\n<li><p><code>go</code> 用于并发</p>\n</li>\n<li><p><code>select</code> 用于选择不同类型的通讯</p>\n</li>\n<li><p><code>interface</code> 用于定义接口</p>\n</li>\n<li><p><code>struct</code> 用于定义抽象数据类型</p>\n</li>\n<li><p><code>break</code>、<code>case</code>、<code>continue</code>、<code>for</code>、<code>fallthrough</code>、<code>else</code>、<code>if</code>、<code>switch</code>、<code>goto</code>、<code>default</code> 用于流程控制</p>\n</li>\n<li><p><code>chan</code>用于channel通讯</p>\n</li>\n<li><p><code>type</code>用于声明自定义类型</p>\n</li>\n<li><p><code>map</code>用于声明map类型数据</p>\n</li>\n<li><p><code>range</code>用于读取slice、map、channel数据</p>\n</li>\n</ul>\n<h1 id=\"数据类型的定义\"><a href=\"#数据类型的定义\" class=\"headerlink\" title=\"数据类型的定义\"></a>数据类型的定义</h1><h2 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h2><p>Go语言里面定义变量有多种方式。</p>\n<p>使用<code>var</code>关键字是Go最基本的定义变量方式，与C语言不同的是Go把变量类型放在变量名后面：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个名称为“variableName”，类型为&quot;type&quot;的变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> variableName <span class=\"keyword\">type</span></span><br></pre></td></tr></table></figure>\n\n<p>定义多个变量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义三个类型都是“type”的变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vname1, vname2, vname3 <span class=\"keyword\">type</span></span><br></pre></td></tr></table></figure>\n\n<p>定义变量并初始化值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化“variableName”的变量为“value”值，类型是“type”</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> variableName <span class=\"keyword\">type</span> = value</span><br></pre></td></tr></table></figure>\n\n<p>同时初始化多个变量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    定义三个类型都是&quot;type&quot;的变量,并且分别初始化为相应的值</span></span><br><span class=\"line\"><span class=\"comment\">    vname1为v1，vname2为v2，vname3为v3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vname1, vname2, vname3 <span class=\"keyword\">type</span>= v1, v2, v3</span><br></pre></td></tr></table></figure>\n\n<p>是不是觉得上面这样的定义有点繁琐？有一种写法可以让它变得简单一点。可以直接忽略类型声明，那么上面的代码变成这样了：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    定义三个变量，它们分别初始化为相应的值</span></span><br><span class=\"line\"><span class=\"comment\">    vname1为v1，vname2为v2，vname3为v3</span></span><br><span class=\"line\"><span class=\"comment\">    然后Go会根据其相应值的类型来初始化它们</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vname1, vname2, vname3 = v1, v2, v3</span><br></pre></td></tr></table></figure>\n\n<p>觉得上面的还是有些繁琐，继续简化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    定义三个变量，它们分别初始化为相应的值</span></span><br><span class=\"line\"><span class=\"comment\">    vname1为v1，vname2为v2，vname3为v3</span></span><br><span class=\"line\"><span class=\"comment\">    编译器会根据初始化的值自动推导出相应的类型</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">vname1, vname2, vname3 := v1, v2, v3</span><br></pre></td></tr></table></figure>\n\n<p>现在是不是看上去非常简洁了？<code>:=</code>这个符号直接取代了<code>var</code>和<code>type</code>,这种形式叫做简短声明。不过它有一个限制，那就是它只能用在函数内部；在函数外部使用则会无法编译通过，所以一般用<code>var</code>方式来定义全局变量。</p>\n<p><code>_</code>（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃。在这个例子中，将值<code>35</code>赋予<code>b</code>，并同时丢弃<code>34</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">_, b := <span class=\"number\">34</span>, <span class=\"number\">35</span></span><br></pre></td></tr></table></figure>\n\n<p>Go对于已声明但未使用的变量会在编译阶段报错，比如下面的代码就会产生一个错误：声明了<code>i</code>但未使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>所谓常量，也就是在程序编译阶段就确定下来的值，而程序在运行时无法改变该值。在Go程序中，常量可定义为数值、布尔值或字符串等类型。</p>\n<p>它的语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> constantName = value</span><br><span class=\"line\"><span class=\"comment\">//如果需要，也可以明确指定常量的类型：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Pi <span class=\"type\">float32</span> = <span class=\"number\">3.1415926</span></span><br></pre></td></tr></table></figure>\n\n<p>下面是一些常量声明的例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Pi = <span class=\"number\">3.1415926</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> i = <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MaxThread = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> prefix = <span class=\"string\">&quot;astaxie_&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Go 常量和一般程序语言不同的是，可以指定相当多的小数位数(例如200位)，若指定给<code>float32</code>自动缩短为<code>32bit</code>，指定给<code>float64</code>自动缩短为<code>64bit</code>，详情参考 <code>http://golang.org/ref/spec#Constants</code> (需科学上网)</p>\n<h2 id=\"内置基础类型\"><a href=\"#内置基础类型\" class=\"headerlink\" title=\"内置基础类型\"></a>内置基础类型</h2><h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h3><p>在Go中，布尔值的类型为<code>bool</code>，值是<code>true</code>或<code>false</code>，默认为<code>false</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isActive <span class=\"type\">bool</span>  <span class=\"comment\">// 全局变量声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> enabled, disabled = <span class=\"literal\">true</span>, <span class=\"literal\">false</span>  <span class=\"comment\">// 忽略类型的声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> available <span class=\"type\">bool</span>  <span class=\"comment\">// 一般声明</span></span><br><span class=\"line\">    valid := <span class=\"literal\">false</span>      <span class=\"comment\">// 简短声明</span></span><br><span class=\"line\">    available = <span class=\"literal\">true</span>    <span class=\"comment\">// 赋值操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数值类型\"><a href=\"#数值类型\" class=\"headerlink\" title=\"数值类型\"></a>数值类型</h3><p>整数类型有无符号和带符号两种。Go同时支持<code>int</code>和<code>uint</code>，这两种类型的长度相同，但具体长度取决于不同编译器的实现。Go里面也有直接定义好位数的类型：<code>rune</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>和<code>byte</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>。其中<code>rune</code>是<code>int32</code>的别称，<code>byte</code>是<code>uint8</code>的别称。</p>\n<p>需要注意的一点是，这些类型的变量之间不允许互相赋值或操作，不然会在编译时引起编译器报错。</p>\n<p>如下的代码会产生错误：invalid operation: a + b (mismatched types int8 and int32)</p>\n<p>var a int8</p>\n<p>var b int32</p>\n<p>c:=a + b</p>\n<p>另外，尽管int的长度是32 bit, 但int 与 int32并不可以互用。</p>\n<p>浮点数的类型有<code>float32</code>和<code>float64</code>两种（没有<code>float</code>类型），默认是<code>float64</code>。</p>\n<p>Go还支持复数。它的默认类型是<code>complex128</code>（64位实数+64位虚数）。如果需要小一些的，也有<code>complex64</code>(32位实数+32位虚数)。复数的形式为<code>RE + IMi</code>，其中<code>RE</code>是实数部分，<code>IM</code>是虚数部分，而最后的<code>i</code>是虚数单位。下面是一个使用复数的例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c <span class=\"type\">complex64</span> = <span class=\"number\">5</span>+<span class=\"number\">5i</span></span><br><span class=\"line\"><span class=\"comment\">//output: (5+5i)</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;Value is: %v&quot;</span>, c)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>Go中的字符串都是采用<code>UTF-8</code>字符集编码。字符串是用一对双引号（<code>&quot;&quot;</code>）或反引号（<code> </code>）括起来定义，它的类型是<code>string</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> frenchHello <span class=\"type\">string</span>  <span class=\"comment\">// 声明变量为字符串的一般方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> emptyString <span class=\"type\">string</span> = <span class=\"string\">&quot;&quot;</span>  <span class=\"comment\">// 声明了一个字符串变量，初始化为空字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    no, yes, maybe := <span class=\"string\">&quot;no&quot;</span>, <span class=\"string\">&quot;yes&quot;</span>, <span class=\"string\">&quot;maybe&quot;</span>  <span class=\"comment\">// 简短声明，同时声明多个变量</span></span><br><span class=\"line\">    japaneseHello := <span class=\"string\">&quot;Konichiwa&quot;</span>  <span class=\"comment\">// 同上</span></span><br><span class=\"line\">    frenchHello = <span class=\"string\">&quot;Bonjour&quot;</span>  <span class=\"comment\">// 常规赋值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Go中字符串是不可变的，例如下面的代码编译时会报错：cannot assign to s[0]</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s <span class=\"type\">string</span> = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>但如果真的想要修改怎么办呢？下面的代码可以实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">c := []<span class=\"type\">byte</span>(s)  <span class=\"comment\">// 将字符串 s 转换为 []byte 类型</span></span><br><span class=\"line\">c[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;c&#x27;</span></span><br><span class=\"line\">s2 := <span class=\"type\">string</span>(c)  <span class=\"comment\">// 再转换回 string 类型</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;%s\\n&quot;</span>, s2)</span><br></pre></td></tr></table></figure>\n\n<p>Go中可以使用<code>+</code>操作符来连接两个字符串：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;hello,&quot;</span></span><br><span class=\"line\">m := <span class=\"string\">&quot; world&quot;</span></span><br><span class=\"line\">a := s + m</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;%s\\n&quot;</span>, a)</span><br></pre></td></tr></table></figure>\n\n<p>修改字符串也可写为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">s = <span class=\"string\">&quot;c&quot;</span> + s[<span class=\"number\">1</span>:] <span class=\"comment\">// 字符串虽不能更改，但可进行切片操作</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;%s\\n&quot;</span>, s)</span><br></pre></td></tr></table></figure>\n\n<p>如果要声明一个多行的字符串怎么办？可以通过```来声明：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">m := <span class=\"string\">`hello</span></span><br><span class=\"line\"><span class=\"string\">    world`</span></span><br></pre></td></tr></table></figure>\n\n<p>``` 括起的字符串为<code>Raw</code>字符串，即字符串在代码中的形式就是打印时的形式，它没有字符转义，换行也将原样输出。例如本例中会输出：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">    world</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误类型\"><a href=\"#错误类型\" class=\"headerlink\" title=\"错误类型\"></a>错误类型</h2><p>Go内置有一个<code>error</code>类型，专门用来处理错误信息，Go的<code>package</code>里面还专门有一个包<code>errors</code>来处理错误：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">err := errors.New(<span class=\"string\">&quot;emit macho dwarf: elf header corrupted&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Print(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分组声明\"><a href=\"#分组声明\" class=\"headerlink\" title=\"分组声明\"></a>分组声明</h2><p>在Go语言中，同时声明多个常量、变量，或者导入多个包时，可采用分组的方式进行声明。</p>\n<p>例如下面的代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> i = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pi = <span class=\"number\">3.1415</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> prefix = <span class=\"string\">&quot;Go_&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pi <span class=\"type\">float32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> prefix <span class=\"type\">string</span></span><br></pre></td></tr></table></figure>\n\n<p>可以分组写成如下形式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">    i = <span class=\"number\">100</span></span><br><span class=\"line\">    pi = <span class=\"number\">3.1415</span></span><br><span class=\"line\">    prefix = <span class=\"string\">&quot;Go_&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">var</span>(</span><br><span class=\"line\">    i <span class=\"type\">int</span></span><br><span class=\"line\">    pi <span class=\"type\">float32</span></span><br><span class=\"line\">    prefix <span class=\"type\">string</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"iota枚举\"><a href=\"#iota枚举\" class=\"headerlink\" title=\"iota枚举\"></a>iota枚举</h2><p>Go里面有一个关键字<code>iota</code>，这个关键字用来声明<code>enum</code>的时候采用，它默认开始值是0，const中每增加一行加1：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    x = <span class=\"literal\">iota</span> <span class=\"comment\">// x == 0</span></span><br><span class=\"line\">    y = <span class=\"literal\">iota</span> <span class=\"comment\">// y == 1</span></span><br><span class=\"line\">    z = <span class=\"literal\">iota</span> <span class=\"comment\">// z == 2</span></span><br><span class=\"line\">    w        <span class=\"comment\">// 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用&quot;= iota&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">const</span> v = <span class=\"literal\">iota</span> <span class=\"comment\">// 每遇到一个const关键字，iota就会重置，此时v == 0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    h, i, j = <span class=\"literal\">iota</span>, <span class=\"literal\">iota</span>, <span class=\"literal\">iota</span> <span class=\"comment\">//h=0,i=0,j=0 iota在同一行值相同</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    a       = <span class=\"literal\">iota</span> <span class=\"comment\">//a=0</span></span><br><span class=\"line\">    b       = <span class=\"string\">&quot;B&quot;</span></span><br><span class=\"line\">    c       = <span class=\"literal\">iota</span>             <span class=\"comment\">//c=2</span></span><br><span class=\"line\">    d, e, f = <span class=\"literal\">iota</span>, <span class=\"literal\">iota</span>, <span class=\"literal\">iota</span> <span class=\"comment\">//d=3,e=3,f=3</span></span><br><span class=\"line\">    g       = <span class=\"literal\">iota</span>             <span class=\"comment\">//g = 4</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(a, b, c, d, e, f, g, h, i, j, x, y, z, w, v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除非被显式设置为其它值或<code>iota</code>，每个<code>const</code>分组的第一个常量被默认设置为它的0值，第二及后续的常量被默认设置为它前面那个常量的值，如果前面那个常量的值是<code>iota</code>，则它也被设置为<code>iota</code>。</p>\n<h2 id=\"Go程序设计的一些规则\"><a href=\"#Go程序设计的一些规则\" class=\"headerlink\" title=\"Go程序设计的一些规则\"></a>Go程序设计的一些规则</h2><p>Go之所以会那么简洁，是因为它有一些默认的行为：</p>\n<ul>\n<li>大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。</li>\n<li>大写字母开头的函数也是一样，相当于<code>class</code>中的带<code>public</code>关键词的公有函数；小写字母开头的就是有<code>private</code>关键词的私有函数。</li>\n</ul>\n<h2 id=\"array、slice、map\"><a href=\"#array、slice、map\" class=\"headerlink\" title=\"array、slice、map\"></a><code>array</code>、<code>slice</code>、<code>map</code></h2><h3 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a><code>array</code></h3><p><code>array</code>就是数组，它的定义方式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr [n]<span class=\"keyword\">type</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>[n]type</code>中，<code>n</code>表示数组的长度，<code>type</code>表示存储元素的类型。对数组的操作和其它语言类似，都是通过<code>[]</code>来进行读取或赋值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr [<span class=\"number\">10</span>]<span class=\"type\">int</span>  <span class=\"comment\">// 声明了一个int类型的数组</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">42</span>      <span class=\"comment\">// 数组下标是从0开始的</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">13</span>      <span class=\"comment\">// 赋值操作</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;The first element is %d\\n&quot;</span>, arr[<span class=\"number\">0</span>])  <span class=\"comment\">// 获取数据，返回42</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;The last element is %d\\n&quot;</span>, arr[<span class=\"number\">9</span>]) <span class=\"comment\">//返回未赋值的最后一个元素，默认返回0</span></span><br></pre></td></tr></table></figure>\n\n<p>由于长度也是数组类型的一部分，因此<code>[3]int</code>与<code>[4]int</code>是不同的类型，数组也就不能改变长度。数组之间的赋值是值的赋值，即当把一个数组作为参数传入函数的时候，传入的其实是该数组的副本，而不是它的指针。如果要使用指针，那么就需要用到后面介绍的<code>slice</code>类型了。</p>\n<p>数组可以使用另一种<code>:=</code>来声明</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">a := [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125; <span class=\"comment\">// 声明了一个长度为3的int数组</span></span><br><span class=\"line\">b := [<span class=\"number\">10</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125; <span class=\"comment\">// 声明了一个长度为10的int数组，其中前三个元素初始化为1、2、3，其它默认为0</span></span><br><span class=\"line\">c := [...]<span class=\"type\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; <span class=\"comment\">// 可以省略长度而采用`...`的方式，Go会自动根据元素个数来计算长度</span></span><br></pre></td></tr></table></figure>\n\n<p>Go支持嵌套数组，即多维数组。比如下面的代码就声明了一个二维数组：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明了一个二维数组，该数组以两个数组作为元素，其中每个数组中又有4个int类型的元素</span></span><br><span class=\"line\">doubleArray := [<span class=\"number\">2</span>][<span class=\"number\">4</span>]<span class=\"type\">int</span>&#123;[<span class=\"number\">4</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;, [<span class=\"number\">4</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上面的声明可以简化，直接忽略内部的类型</span></span><br><span class=\"line\">easyArray := [<span class=\"number\">2</span>][<span class=\"number\">4</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a><code>slice</code></h3><p>在很多应用场景中，数组并不能满足需求。在初始定义数组时，并不知道需要多大的数组，因此就需要“动态数组”。在Go里面这种数据结构叫<code>slice</code></p>\n<p><code>slice</code>并不是真正意义上的动态数组，而是一个引用类型。<code>slice</code>总是指向一个底层<code>array</code>，<code>slice</code>的声明也可以像<code>array</code>一样，只是不需要长度。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和声明array一样，只是少了长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fslice []<span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来可以声明一个<code>slice</code>，并初始化数据，如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">slice := []<span class=\"type\">byte</span> &#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>slice</code>可以从一个数组或一个已经存在的<code>slice</code>中再次声明。<code>slice</code>通过<code>array[i:j]</code>来获取，其中<code>i</code>是数组的开始位置，<code>j</code>是结束位置，但不包含<code>array[j]</code>，它的长度是<code>j-i</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个含有10个元素元素类型为byte的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ar = [<span class=\"number\">10</span>]<span class=\"type\">byte</span> &#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;j&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明两个含有byte的slice</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a, b []<span class=\"type\">byte</span></span><br><span class=\"line\"><span class=\"comment\">// a指向数组的第3个元素开始，并到第五个元素结束，</span></span><br><span class=\"line\">a = ar[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">//现在a含有的元素: ar[2]、ar[3]和ar[4]</span></span><br><span class=\"line\"><span class=\"comment\">// b是数组ar的另一个slice</span></span><br><span class=\"line\">b = ar[<span class=\"number\">3</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">// b的元素是：ar[3]和ar[4]</span></span><br></pre></td></tr></table></figure>\n\n<p>注意<code>slice</code>和数组在声明时的区别：声明数组时，方括号内写明了数组的长度或使用<code>...</code>自动计算长度，而声明<code>slice</code>时，方括号内没有任何字符。</p>\n<h4 id=\"slice有一些简便的操作\"><a href=\"#slice有一些简便的操作\" class=\"headerlink\" title=\"slice有一些简便的操作\"></a><code>slice</code>有一些简便的操作</h4><ul>\n<li><p><code>slice</code>的默认开始位置是0，<code>ar[:n]</code>等价于<code>ar[0:n]</code></p>\n</li>\n<li><p><code>slice</code>的第二个序列默认是数组的长度，<code>ar[n:]</code>等价于<code>ar[n:len(ar)]</code></p>\n</li>\n<li><p>如果从一个数组里面直接获取<code>slice</code>，可以这样<code>ar[:]</code>，因为默认第一个序列是0，第二个是数组的长度，即等价于<code>ar[0:len(ar)]</code></p>\n</li>\n</ul>\n<p>下面这个例子展示了更多关于<code>slice</code>的操作：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">10</span>]<span class=\"type\">byte</span>&#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;j&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明两个slice</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> aSlice, bSlice []<span class=\"type\">byte</span></span><br><span class=\"line\"><span class=\"comment\">// 演示一些简便操作</span></span><br><span class=\"line\">aSlice = array[:<span class=\"number\">3</span>] <span class=\"comment\">// 等价于aSlice = array[0:3] aSlice包含元素: a,b,c</span></span><br><span class=\"line\">aSlice = array[<span class=\"number\">5</span>:] <span class=\"comment\">// 等价于aSlice = array[5:10] aSlice包含元素: f,g,h,i,j</span></span><br><span class=\"line\">aSlice = array[:]  <span class=\"comment\">// 等价于aSlice = array[0:10] 这样aSlice包含了全部的元素</span></span><br><span class=\"line\"><span class=\"comment\">// 从slice中获取slice</span></span><br><span class=\"line\">aSlice = array[<span class=\"number\">3</span>:<span class=\"number\">7</span>]  <span class=\"comment\">// aSlice包含元素: d,e,f,g，len=4，cap=7</span></span><br><span class=\"line\">bSlice = aSlice[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\">// bSlice 包含aSlice[1], aSlice[2] 也就是含有: e,f</span></span><br><span class=\"line\">bSlice = aSlice[:<span class=\"number\">3</span>]  <span class=\"comment\">// bSlice 包含 aSlice[0], aSlice[1], aSlice[2] 也就是含有: d,e,f</span></span><br><span class=\"line\">bSlice = aSlice[<span class=\"number\">0</span>:<span class=\"number\">5</span>] <span class=\"comment\">// 对slice的slice可以在cap范围内扩展，此时bSlice包含：d,e,f,g,h</span></span><br><span class=\"line\">bSlice = aSlice[:]   <span class=\"comment\">// bSlice包含所有aSlice的元素: d,e,f,g</span></span><br></pre></td></tr></table></figure>\n\n<p><code>slice</code>是引用类型，所以当引用改变其中元素的值时，其它的所有引用都会改变该值，例如上面的<code>aSlice</code>和<code>bSlice</code>，如果修改了<code>aSlice</code>中元素的值，那么<code>bSlice</code>相对应的值也会改变。</p>\n<p>从概念上面来说<code>slice</code>像一个结构体，这个结构体包含了三个元素：</p>\n<ul>\n<li><p>一个指针，指向数组中<code>slice</code>指定的开始位置</p>\n</li>\n<li><p>长度，即<code>slice</code>的长度</p>\n</li>\n<li><p>最大长度，也就是<code>slice</code>开始位置到数组的最后位置的长度</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array_a := [<span class=\"number\">10</span>]<span class=\"type\">byte</span>&#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;j&#x27;</span>&#125;</span><br><span class=\"line\">    Slice_a := Array_a[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"slice有几个有用的内置函数\"><a href=\"#slice有几个有用的内置函数\" class=\"headerlink\" title=\"slice有几个有用的内置函数\"></a><code>slice</code>有几个有用的内置函数</h4><ul>\n<li><p><code>len</code> 获取<code>slice</code>的长度</p>\n</li>\n<li><p><code>cap</code> 获取<code>slice</code>的最大容量</p>\n</li>\n<li><p><code>append</code> 向<code>slice</code>里面追加一个或者多个元素，然后返回一个和<code>slice</code>一样类型的<code>slice</code></p>\n</li>\n<li><p><code>copy</code> 函数<code>copy</code>从源<code>slice</code>的<code>src</code>中复制元素到目标<code>dst</code>，并且返回复制的元素的个数</p>\n</li>\n</ul>\n<p>注：<code>append</code>函数会改变<code>slice</code>所引用的数组的内容，从而影响到引用同一数组的其它<code>slice</code>。</p>\n<p>但当<code>slice</code>中没有剩余空间（即<code>(cap-len) == 0</code>）时，此时将动态分配新的数组空间。返回的<code>slice</code>数组指针将指向这个空间，而原数组的内容将保持不变；其它引用此数组的<code>slice</code>则不受影响。</p>\n<p>从Go1.2开始<code>slice</code>支持了三个参数的<code>slice</code>，之前一直采用这种方式在<code>slice</code>或者<code>array</code>基础上来获取一个<code>slice</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array [<span class=\"number\">10</span>]<span class=\"type\">int</span></span><br><span class=\"line\">slice := array[<span class=\"number\">2</span>:<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n\n<p>这个例子里面slice的容量是8，新版本里面可以指定这个容量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">slice = array[<span class=\"number\">2</span>:<span class=\"number\">4</span>:<span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面这个的容量就是<code>7-2</code>，即5。这样这个产生的新的<code>slice</code>就没办法访问最后的三个元素。</p>\n<p>如果<code>slice</code>是这样的形式<code>array[:i:j]</code>，即第一个参数为空，默认值就是0。</p>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a><code>map</code></h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">map</span><span class=\"string\">`也就是Python中字典的概念，它的格式为`</span><span class=\"keyword\">map</span>[keyType]valueType</span><br></pre></td></tr></table></figure>\n\n<p>看下面的代码，<code>map</code>的读取和设置也类似<code>slice</code>一样，通过<code>key</code>来操作，只是<code>slice</code>的<code>index</code>只能是｀int｀类型，而<code>map</code>多了很多类型，可以是<code>int</code>，可以是<code>string</code>及所有完全定义了<code>==</code>与<code>!=</code>操作的类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个key是字符串，值为int的字典,这种方式的声明需要在使用之前使用make初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"comment\">// 另一种map的声明方式</span></span><br><span class=\"line\">numbers = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">numbers[<span class=\"string\">&quot;one&quot;</span>] = <span class=\"number\">1</span>  <span class=\"comment\">//赋值</span></span><br><span class=\"line\">numbers[<span class=\"string\">&quot;ten&quot;</span>] = <span class=\"number\">10</span> <span class=\"comment\">//赋值</span></span><br><span class=\"line\">numbers[<span class=\"string\">&quot;three&quot;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;第三个数字是: &quot;</span>, numbers[<span class=\"string\">&quot;three&quot;</span>]) <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\"><span class=\"comment\">// 打印出来如:第三个数字是: 3</span></span><br></pre></td></tr></table></figure>\n\n<p>这个<code>map</code>就像平常看到的表格一样，左边列是<code>key</code>，右边列是值</p>\n<p>使用<code>map</code>过程中需要注意的几点：</p>\n<ul>\n<li><p><code>map</code>是无序的，每次打印出来的<code>map</code>都会不一样，它不能通过<code>index</code>获取，而必须通过<code>key</code>获取</p>\n</li>\n<li><p><code>map</code>的长度是不固定的，也就是和<code>slice</code>一样，也是一种引用类型</p>\n</li>\n<li><p>内置的<code>len</code>函数同样适用于<code>map</code>，返回<code>map</code>拥有的<code>key</code>的数量</p>\n</li>\n<li><p><code>map</code>的值可以很方便的修改，通过<code>numbers[&quot;one&quot;]=11</code>可以很容易的把key为<code>one</code>的字典值改为<code>11</code></p>\n</li>\n<li><p><code>map</code>和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制</p>\n</li>\n</ul>\n<p><code>map</code>的初始化可以通过<code>key:val</code>的方式初始化值，同时<code>map</code>内置有判断是否存在<code>key</code>的方式</p>\n<p>通过<code>delete</code>删除<code>map</code>的元素：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化一个字典</span></span><br><span class=\"line\">rating := <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">float32</span>&#123;<span class=\"string\">&quot;C&quot;</span>:<span class=\"number\">5</span>, <span class=\"string\">&quot;Go&quot;</span>:<span class=\"number\">4.5</span>, <span class=\"string\">&quot;Python&quot;</span>:<span class=\"number\">4.5</span>, <span class=\"string\">&quot;C++&quot;</span>:<span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// map有两个返回值，第二个返回值，如果不存在key，那么ok为false，如果存在ok为true</span></span><br><span class=\"line\">csharpRating, ok := rating[<span class=\"string\">&quot;C#&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;C# is in the map and its rating is &quot;</span>, csharpRating)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;We have no rating associated with C# in the map&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">delete</span>(rating, <span class=\"string\">&quot;C&quot;</span>)  <span class=\"comment\">// 删除key为C的元素</span></span><br></pre></td></tr></table></figure>\n\n<p>上面说过了，<code>map</code>也是一种引用类型，如果两个<code>map</code>同时指向一个底层，那么一个改变，另一个也相应的改变：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">m := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>)</span><br><span class=\"line\">m[<span class=\"string\">&quot;Hello&quot;</span>] = <span class=\"string\">&quot;Bonjour&quot;</span></span><br><span class=\"line\">m1 := m</span><br><span class=\"line\">m1[<span class=\"string\">&quot;Hello&quot;</span>] = <span class=\"string\">&quot;Salut&quot;</span>  <span class=\"comment\">// 现在m[&quot;hello&quot;]的值已经是Salut了</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"make、new操作\"><a href=\"#make、new操作\" class=\"headerlink\" title=\"make、new操作\"></a><code>make</code>、<code>new</code>操作</h2><p><code>make</code>用于内建类型（<code>map</code>、<code>slice</code> 和<code>channel</code>）的内存分配。<code>new</code>用于各种类型的内存分配。</p>\n<p>内建函数<code>new</code>本质上说跟其它语言中的同名函数功能一样：<code>new(T)</code>分配了零值填充的<code>T</code>类型的内存空间，并且返回其地址，即一个<code>*T</code>类型的值。用Go的术语说，它返回了一个指针，指向新分配的类型<code>T</code>的零值。有一点非常重要：</p>\n<p><code>new</code>返回指针。</p>\n<p>内建函数<code>make(T, args)</code>与<code>new(T)</code>有着不同的功能，make只能创建<code>slice</code>、<code>map</code>和<code>channel</code>，并且返回一个有初始值(非零)的<code>T</code>类型，而不是<code>*T</code>。本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被初始化。例如，一个<code>slice</code>，是一个包含指向数据（内部<code>array</code>）的指针、长度和容量的三项描述符；在这些项目被初始化之前，<code>slice</code>为<code>nil</code>。对于<code>slice</code>、<code>map</code>和<code>channel</code>来说，<code>make</code>初始化了内部的数据结构，填充适当的值。</p>\n<p><code>make</code>返回初始化后的（非零）值。</p>\n<h2 id=\"零值\"><a href=\"#零值\" class=\"headerlink\" title=\"零值\"></a>零值</h2><p>关于“零值”，所指并非是空值，而是一种“变量未填充前”的默认值，通常为0。</p>\n<p>此处罗列 部分类型 的 “零值”</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>     <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"type\">int8</span>    <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"type\">int32</span>   <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"type\">int64</span>   <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"type\">uint</span>    <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"type\">rune</span>    <span class=\"number\">0</span> <span class=\"comment\">//rune的实际类型是 int32</span></span><br><span class=\"line\"><span class=\"type\">byte</span>    <span class=\"number\">0x0</span> <span class=\"comment\">// byte的实际类型是 uint8</span></span><br><span class=\"line\"><span class=\"type\">float32</span> <span class=\"number\">0</span> <span class=\"comment\">//长度为 4 byte</span></span><br><span class=\"line\"><span class=\"type\">float64</span> <span class=\"number\">0</span> <span class=\"comment\">//长度为 8 byte</span></span><br><span class=\"line\"><span class=\"type\">bool</span>    <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"type\">string</span>  <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h1><p>Go中流程控制分三大类：条件判断，循环控制和无条件跳转。</p>\n<h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h2><p><code>if</code>也许是各种编程语言中最常见的了，它的语法概括起来就是：如果满足条件就做某事，否则做另一件事。</p>\n<p>Go里面<code>if</code>条件判断语句中不需要括号，如下代码所示</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x is greater than 10&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x is less than 10&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Go的<code>if</code>还有一个强大的地方就是条件判断语句里面允许声明一个变量，这个变量的作用域只能在该条件逻辑块内，其他地方就不起作用了，如下所示</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 计算获取值x,然后根据x返回的大小，判断是否大于10。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> x := computedValue(); x &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x is greater than 10&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x is less than 10&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这个地方如果这样调用就编译出错了，因为x是条件里面的变量</span></span><br><span class=\"line\">fmt.Println(x)</span><br></pre></td></tr></table></figure>\n\n<p>多个条件的时候如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> integer == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The integer is equal to 3&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> integer &lt; <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The integer is less than 3&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The integer is greater than 3&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"goto\"><a href=\"#goto\" class=\"headerlink\" title=\"goto\"></a>goto</h2><p>Go有<code>goto</code>语句——请明智地使用它。用<code>goto</code>跳转到必须在当前函数内定义的标签。例如假设这样一个循环：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myFunc</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    i := <span class=\"number\">0</span></span><br><span class=\"line\">Here:   <span class=\"comment\">//这行的第一个词，以冒号结束作为标签</span></span><br><span class=\"line\">    <span class=\"built_in\">println</span>(i)</span><br><span class=\"line\">    i++</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> Here   <span class=\"comment\">//跳转到Here去</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>标签名是大小写敏感的。</p>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><p>Go里面最强大的一个控制逻辑就是<code>for</code>，它既可以用来循环读取数据，又可以当作<code>while</code>来控制逻辑，还能迭代操作。它的语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> expression1; expression2; expression3 &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>expression1</code>、<code>expression2</code>和<code>expression3</code>都是表达式，其中<code>expression1</code>和<code>expression3</code>是变量声明或者函数调用返回值之类的，<code>expression2</code>是用来条件判断，<code>expression1</code>在循环开始之前调用，<code>expression3</code>在每轮循环结束之时调用。</p>\n<p>一个例子比上面讲那么多更有用，看看下面的例子吧：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    sum := <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index:=<span class=\"number\">0</span>; index &lt; <span class=\"number\">10</span> ; index++ &#123;</span><br><span class=\"line\">        sum += index</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;sum is equal to &quot;</span>, sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：sum is equal to 45</span></span><br></pre></td></tr></table></figure>\n\n<p>有些时候需要进行多个赋值操作，由于Go里面没有<code>,</code>操作符，那么可以使用平行赋值<code>i, j = i+1, j-1</code></p>\n<p>有些时候如果忽略<code>expression1</code>和<code>expression3</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">sum := <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ; sum &lt; <span class=\"number\">1000</span>;  &#123;</span><br><span class=\"line\">    sum += sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>;</code>也可以省略，那么就变成如下的代码了，这就是<code>while</code>的功能。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">sum := <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> sum &lt; <span class=\"number\">1000</span> &#123;</span><br><span class=\"line\">    sum += sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在循环里面有两个关键操作<code>break</code>和<code>continue</code>   ,<code>break</code>操作是跳出当前循环，<code>continue</code>是跳过本次循环。当嵌套过深的时候，<code>break</code>可以配合标签使用，即跳转至标签所指定的位置，详细参考如下例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> index := <span class=\"number\">10</span>; index&gt;<span class=\"number\">0</span>; index-- &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> index == <span class=\"number\">5</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span> <span class=\"comment\">// 或者continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(index)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// break打印出来10、9、8、7、6</span></span><br><span class=\"line\"><span class=\"comment\">// continue打印出来10、9、8、7、6、4、3、2、1</span></span><br></pre></td></tr></table></figure>\n\n<p><code>break</code>和<code>continue</code>还可以跟着标号，用来跳到多重循环中的外层循环</p>\n<p><code>for</code>配合<code>range</code>可以用于读取<code>slice</code>和<code>map</code>的数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k,v:=<span class=\"keyword\">range</span> <span class=\"keyword\">map</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;map&#x27;s key:&quot;</span>,k)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;map&#x27;s val:&quot;</span>,v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 Go 支持 “多值返回”, 而对于“声明而未被调用”的变量, 编译器会报错, 在这种情况下, 可以使用<code>_</code>来丢弃不需要的返回值</p>\n<p>例如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> <span class=\"keyword\">map</span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;map&#x27;s val:&quot;</span>, v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h2><p>有些时候需要写很多的<code>if-else</code>来实现一些逻辑处理，这个时候代码看上去就很丑很冗长，而且也不易于以后的维护，这个时候<code>switch</code>就能很好的解决这个问题。它的语法如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> sExpr &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> expr1:</span><br><span class=\"line\">    some instructions</span><br><span class=\"line\"><span class=\"keyword\">case</span> expr2:</span><br><span class=\"line\">    some other instructions</span><br><span class=\"line\"><span class=\"keyword\">case</span> expr3:</span><br><span class=\"line\">    some other instructions</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    other code</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>sExpr</code>和<code>expr1</code>、<code>expr2</code>、<code>expr3</code>的类型必须一致。Go的<code>switch</code>非常灵活，表达式不必是常量或整数，执行的过程从上至下，直到找到匹配项；而如果<code>switch</code>没有表达式，它会匹配<code>true</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">i := <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> i &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;i is equal to 1&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;i is equal to 2, 3 or 4&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;i is equal to 10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;All I know is that i is an integer&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在第5行中，把很多值聚合在了一个<code>case</code>里面，同时，Go里面<code>switch</code>默认相当于每个<code>case</code>最后带有<code>break</code>，匹配成功后不会自动向下执行其他case，而是跳出整个<code>switch</code>, 但是可以使用<code>fallthrough</code>强制执行后面的case代码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">integer := <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> integer &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The integer was &lt;= 4&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The integer was &lt;= 5&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The integer was &lt;= 6&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The integer was &lt;= 7&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The integer was &lt;= 8&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;default case&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的程序将输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The integer was &lt;= 6</span><br><span class=\"line\">The integer was &lt;= 7</span><br><span class=\"line\">The integer was &lt;= 8</span><br><span class=\"line\">default case</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数的定义\"><a href=\"#函数的定义\" class=\"headerlink\" title=\"函数的定义\"></a>函数的定义</h2><p>函数是Go里面的核心设计，它通过关键字<code>func</code>来声明，它的格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName</span><span class=\"params\">(input1 type1, input2 type2)</span></span> (output1 type1, output2 type2) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是处理逻辑代码</span></span><br><span class=\"line\">    <span class=\"comment\">//返回多个值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value1, value2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码可以看出</p>\n<ul>\n<li><p>关键字<code>func</code>用来声明一个函数<code>funcName</code></p>\n</li>\n<li><p>函数可以有一个或者多个参数，每个参数后面带有类型，通过<code>,</code>分隔</p>\n</li>\n<li><p>函数可以返回多个值</p>\n</li>\n<li><p>上面返回值声明了两个变量<code>output1</code>和<code>output2</code>，如果不想声明也可以，直接就两个类型</p>\n</li>\n<li><p>如果只有一个返回值且不声明返回值变量，那么可以省略 包括返回值的括号</p>\n</li>\n<li><p>如果没有返回值，那么就直接省略最后的返回信息</p>\n</li>\n<li><p>如果有返回值， 那么必须在函数的外层添加return语句</p>\n</li>\n</ul>\n<p>下面来看一个实际应用函数的例子（用来计算Max值）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 返回a、b中最大值.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">max</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt; b &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    x := <span class=\"number\">3</span></span><br><span class=\"line\">    y := <span class=\"number\">4</span></span><br><span class=\"line\">    z := <span class=\"number\">5</span></span><br><span class=\"line\">    max_xy := max(x, y) <span class=\"comment\">//调用函数max(x, y)</span></span><br><span class=\"line\">    max_xz := max(x, z) <span class=\"comment\">//调用函数max(x, z)</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;max(%d, %d) = %d\\n&quot;</span>, x, y, max_xy)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;max(%d, %d) = %d\\n&quot;</span>, x, z, max_xz)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;max(%d, %d) = %d\\n&quot;</span>, y, z, max(y,z)) <span class=\"comment\">// 也可在这直接调用它</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这个里面可以看到<code>max</code>函数有两个参数，它们的类型都是<code>int</code>，那么第一个变量的类型可以省略（即 a,b int,而非 a int, b int)，默认为离它最近的类型，同理多于2个同类型的变量或者返回值。同时注意到它的返回值就是一个类型，这个就是省略写法。</p>\n<h2 id=\"多个返回值\"><a href=\"#多个返回值\" class=\"headerlink\" title=\"多个返回值\"></a>多个返回值</h2><p>Go语言比C更先进的特性，其中一点就是函数能够返回多个值。</p>\n<p>直接看例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//返回 A+B 和 A*B</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SumAndProduct</span><span class=\"params\">(A, B <span class=\"type\">int</span>)</span></span> (<span class=\"type\">int</span>, <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A+B, A*B</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    x := <span class=\"number\">3</span></span><br><span class=\"line\">    y := <span class=\"number\">4</span></span><br><span class=\"line\">    xPLUSy, xTIMESy := SumAndProduct(x, y)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%d + %d = %d\\n&quot;</span>, x, y, xPLUSy)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%d * %d = %d\\n&quot;</span>, x, y, xTIMESy)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子可以看到直接返回了两个参数，当然也可以命名返回参数的变量，这个例子里面只是用了两个类型，也可以改成如下这样的定义，然后返回的时候不用带上变量名，因为直接在函数里面初始化了。但如果函数是导出的(首字母大写)，官方建议：最好命名返回值，因为不命名返回值，虽然使得代码更加简洁了，但是会造成生成的文档可读性差。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SumAndProduct</span><span class=\"params\">(A, B <span class=\"type\">int</span>)</span></span> (add <span class=\"type\">int</span>, Multiplied <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    add = A+B</span><br><span class=\"line\">    Multiplied = A*B</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变参\"><a href=\"#变参\" class=\"headerlink\" title=\"变参\"></a>变参</h2><p>Go函数支持变参。接受变参的函数是有着不定数量的参数的。为了做到这点，首先需要定义函数使其接受变参：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myfunc</span><span class=\"params\">(arg ...<span class=\"type\">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>arg ...int</code>告诉Go这个函数接受不定数量的参数。注意，这些参数的类型全部是<code>int</code>。在函数体中，变量<code>arg</code>是一个<code>int</code>的<code>slice</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> _, n := <span class=\"keyword\">range</span> arg &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;And the number is: %d\\n&quot;</span>, n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"传值与传指针\"><a href=\"#传值与传指针\" class=\"headerlink\" title=\"传值与传指针\"></a>传值与传指针</h2><p>传一个参数值到被调用函数里面时，实际上是传了这个值的一份copy，当在被调用函数中修改参数值的时候，调用函数中相应实参不会发生任何变化，因为数值变化只作用在copy上。</p>\n<p>为了验证上面的说法，来看一个例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//简单的一个函数，实现了参数+1的操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add1</span><span class=\"params\">(a <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    a = a+<span class=\"number\">1</span> <span class=\"comment\">// 改变了a的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a <span class=\"comment\">//返回一个新值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    x := <span class=\"number\">3</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x = &quot;</span>, x)  <span class=\"comment\">// 应该输出 &quot;x = 3&quot;</span></span><br><span class=\"line\">    x1 := add1(x)  <span class=\"comment\">//调用add1(x)</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x+1 = &quot;</span>, x1) <span class=\"comment\">// 应该输出&quot;x+1 = 4&quot;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x = &quot;</span>, x)    <span class=\"comment\">// 应该输出&quot;x = 3&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然调用了<code>add1</code>函数，并且在<code>add1</code>中执行<code>a = a+1</code>操作，但是上面例子中<code>x</code>变量的值没有发生变化</p>\n<p>理由很简单：因为当调用<code>add1</code>的时候，<code>add1</code>接收的参数其实是<code>x</code>的copy，而不是<code>x</code>本身。</p>\n<p>如果真的需要传这个<code>x</code>本身,该怎么办呢？</p>\n<p>这就牵扯到了所谓的指针。变量在内存中是存放于一定地址上的，修改变量实际是修改变量地址处的内存。只有<code>add1</code>函数知道<code>x</code>变量所在的地址，才能修改<code>x</code>变量的值。所以需要将<code>x</code>所在地址<code>&amp;x</code>传入函数，并将函数的参数的类型由<code>int</code>改为<code>*int</code>，即改为指针类型，才能在函数中修改<code>x</code>变量的值。此时参数仍然是按copy传递的，只是copy的是一个指针。请看下面的例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//简单的一个函数，实现了参数+1的操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add1</span><span class=\"params\">(a *<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123; <span class=\"comment\">// 请注意，</span></span><br><span class=\"line\">    *a = *a+<span class=\"number\">1</span> <span class=\"comment\">// 修改了a的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *a <span class=\"comment\">// 返回新值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    x := <span class=\"number\">3</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x = &quot;</span>, x)  <span class=\"comment\">// 应该输出 &quot;x = 3&quot;</span></span><br><span class=\"line\">    x1 := add1(&amp;x)  <span class=\"comment\">// 调用 add1(&amp;x) 传x的地址</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x+1 = &quot;</span>, x1) <span class=\"comment\">// 应该输出 &quot;x+1 = 4&quot;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x = &quot;</span>, x)    <span class=\"comment\">// 应该输出 &quot;x = 4&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，就达到了修改<code>x</code>的目的。那么到底传指针有什么好处呢？</p>\n<ul>\n<li><p>传指针使得多个函数能操作同一个对象。</p>\n</li>\n<li><p>传指针比较轻量级 (8bytes),只是传内存地址，可以用指针传递体积大的结构体。如果用参数值传递的话, 在每次copy上面就会花费相对较多的系统开销（内存和时间）。所以当要传递大的结构体的时候，用指针是一个明智的选择。</p>\n</li>\n<li><p>Go语言中<code>channel</code>，<code>slice</code>，<code>map</code>这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变<code>slice</code>的长度，则仍需要取地址传递指针）</p>\n</li>\n</ul>\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p>Go语言中有种不错的设计，即延迟（defer）语句，可以在函数中添加多个defer语句。当函数执行到最后时，这些defer语句会按照逆序执行，最后该函数返回。特别是当进行一些打开资源的操作时，遇到错误需要提前返回，在返回前需要关闭相应的资源，不然很容易造成资源泄露等问题。如下代码所示，一般写打开一个资源是这样操作的：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadWrite</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">    file.Open(<span class=\"string\">&quot;file&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 做一些工作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> failureX &#123;</span><br><span class=\"line\">        file.Close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> failureY &#123;</span><br><span class=\"line\">        file.Close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    file.Close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面有很多重复的代码，Go的<code>defer</code>有效解决了这个问题。使用它后，不但代码量减少了很多，而且程序变得更优雅。在<code>defer</code>后指定的函数会在函数退出前调用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadWrite</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">    file.Open(<span class=\"string\">&quot;file&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> failureX &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> failureY &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果有很多调用<code>defer</code>，那么<code>defer</code>是采用后进先出模式，所以如下代码会输出<code>4 3 2 1 0</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> fmt.Printf(<span class=\"string\">&quot;%d &quot;</span>, i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常来说，defer会用在释放数据库连接，关闭文件等需要在函数结束时处理的操作。</p>\n<h2 id=\"函数作为值、类型\"><a href=\"#函数作为值、类型\" class=\"headerlink\" title=\"函数作为值、类型\"></a>函数作为值、类型</h2><p>在Go中函数也是一种变量，可以通过<code>type</code>来定义它，它的类型就是所有拥有相同的参数，相同的返回值的一种类型</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> typeName <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(input1 inputType1 , input2 inputType2 [, ...])</span></span> (result1 resultType1 [, ...])</span><br></pre></td></tr></table></figure>\n\n<p>函数作为类型到底有什么好处呢？那就是可以把这个类型的函数当做值来传递，请看下面的例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> testInt <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> <span class=\"comment\">// 声明了一个函数类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isOdd</span><span class=\"params\">(integer <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> integer%<span class=\"number\">2</span> == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isEven</span><span class=\"params\">(integer <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> integer%<span class=\"number\">2</span> == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明的函数类型在这个地方当做了一个参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">filter</span><span class=\"params\">(slice []<span class=\"type\">int</span>, f testInt)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result []<span class=\"type\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> slice &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> f(value) &#123;</span><br><span class=\"line\">            result = <span class=\"built_in\">append</span>(result, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    slice := []<span class=\"type\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>&#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;slice = &quot;</span>, slice)</span><br><span class=\"line\">    odd := filter(slice, isOdd)    <span class=\"comment\">// 函数当做值来传递了</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Odd elements of slice are: &quot;</span>, odd)</span><br><span class=\"line\">    even := filter(slice, isEven)  <span class=\"comment\">// 函数当做值来传递了</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Even elements of slice are: &quot;</span>, even)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数当做值和类型在写一些通用接口的时候非常有用，通过上面例子看到<code>testInt</code>这个类型是一个函数类型，然后两个<code>filter</code>函数的参数和返回值与<code>testInt</code>类型是一样的，但是可以实现很多种的逻辑，这样使得程序变得非常的灵活。</p>\n<h2 id=\"Panic和Recover\"><a href=\"#Panic和Recover\" class=\"headerlink\" title=\"Panic和Recover\"></a>Panic和Recover</h2><p>Go没有像Java那样的异常机制，它不能抛出异常，而是使用了<code>panic</code>和<code>recover</code>机制。一定要记住，应当把它作为最后的手段来使用，也就是说，代码中应当没有，或者很少有<code>panic</code>的东西。这是个强大的工具，请明智地使用它。</p>\n<p>Panic</p>\n<p>是一个内建函数，可以中断原有的控制流程，进入一个<code>panic</code>状态中。当函数<code>F</code>调用<code>panic</code>，函数F的执行被中断，但是<code>F</code>中的延迟函数会正常执行，然后F返回到调用它的地方。在调用的地方，<code>F</code>的行为就像调用了<code>panic</code>。这一过程继续向上，直到发生<code>panic</code>的<code>goroutine</code>中所有调用的函数返回，此时程序退出。<code>panic</code>可以直接调用<code>panic</code>产生。也可以由运行时错误产生，例如访问越界的数组。</p>\n<p>Recover</p>\n<p>是一个内建的函数，可以让进入<code>panic</code>状态的<code>goroutine</code>恢复过来。<code>recover</code>仅在延迟函数中有效。在正常的执行过程中，调用<code>recover</code>会返回<code>nil</code>，并且没有其它任何效果。如果当前的<code>goroutine</code>陷入<code>panic</code>状态，调用<code>recover</code>可以捕获到<code>panic</code>的输入值，并且恢复正常的执行。</p>\n<p>下面这个函数演示了如何在过程中使用<code>panic</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = os.Getenv(<span class=\"string\">&quot;USER&quot;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> user == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(<span class=\"string\">&quot;no value for $USER&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这个函数检查作为其参数的函数在执行时是否会产生<code>panic</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">throwsPanic</span><span class=\"params\">(f <span class=\"keyword\">func</span>()</span></span>) (b <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x := <span class=\"built_in\">recover</span>(); x != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            b = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    f() <span class=\"comment\">//执行函数f，如果f中出现了panic，那么就可以恢复回来</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p><code>defer</code>必须在<code>panic</code>语句之前。</p>\n<p><code>recover</code>必须配合<code>defer</code>使用。</p>\n<h2 id=\"main函数和init函数\"><a href=\"#main函数和init函数\" class=\"headerlink\" title=\"main函数和init函数\"></a><code>main</code>函数和<code>init</code>函数</h2><p>Go里面有两个保留的函数：<code>init</code>函数（能够应用于所有的<code>package</code>）和<code>main</code>函数（只能应用于<code>package main</code>）。这两个函数在定义时不能有任何的参数和返回值。虽然一个<code>package</code>里面可以写任意多个<code>init</code>函数，但这无论是对于可读性还是以后的可维护性来说，强烈建议用户在一个<code>package</code>中每个文件只写一个<code>init</code>函数。</p>\n<p>Go程序会自动调用<code>init()</code>和<code>main()</code>，所以不需要在任何地方调用这两个函数。每个<code>package</code>中的<code>init</code>函数都是可选的，但<code>package main</code>就必须包含一个<code>main</code>函数。</p>\n<p>程序的初始化和执行都起始于<code>main</code>包。如果<code>main</code>包还导入了其它的包，那么就会在编译时将它们依次导入。有时一个包会被多个包同时导入，那么它只会被导入一次（例如很多包可能都会用到<code>fmt</code>包，但它只会被导入一次，因为没有必要导入多次）。当一个包被导入时，如果该包还导入了其它的包，那么会先将其它包导入进来，然后再对这些包中的包级常量和变量进行初始化，接着执行<code>init</code>函数（如果有的话），依次类推。等所有被导入的包都加载完毕了，就会开始对<code>main</code>包中的包级常量和变量进行初始化，然后执行<code>main</code>包中的<code>init</code>函数（如果存在的话），最后执行<code>main</code>函数。</p>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h2><p>在写Go代码的时候经常用到import这个命令用来导入包文件，经常看到的方式参考如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>然后代码里面可以通过如下的方式调用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">fmt.Println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>上面这个fmt是Go语言的标准库，其实是去<code>GOROOT</code>环境变量指定目录下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：</p>\n<h3 id=\"相对路径\"><a href=\"#相对路径\" class=\"headerlink\" title=\"相对路径\"></a>相对路径</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./model&quot;</span> <span class=\"comment\">//当前文件同一目录的model目录，但是不建议这种方式来import</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绝对路径\"><a href=\"#绝对路径\" class=\"headerlink\" title=\"绝对路径\"></a>绝对路径</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;shorturl/model&quot;</span> <span class=\"comment\">//加载gopath/src/shorturl/model模块</span></span><br></pre></td></tr></table></figure>\n\n<p>上面展示了一些import常用的几种方式，但是还有一些</p>\n<h3 id=\"特殊的import\"><a href=\"#特殊的import\" class=\"headerlink\" title=\"特殊的import\"></a>特殊的import</h3><h4 id=\"点操作\"><a href=\"#点操作\" class=\"headerlink\" title=\"点操作\"></a>点操作</h4><p>有时候会看到如下的方式导入包</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">    . <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>这个点操作的含义就是这个包导入之后在调用这个包的函数时，可以省略前缀的包名，也就是前面调用的fmt.Println(“hello world”)可以省略的写成<code>Println(&quot;hello world&quot;)</code></p>\n<h4 id=\"别名操作\"><a href=\"#别名操作\" class=\"headerlink\" title=\"别名操作\"></a>别名操作</h4><p>别名操作顾名思义可以把包命名成另一个用起来容易记忆的名字</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">        f <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p>别名操作的话调用包函数时前缀变成了前缀，即<code>f.Println(&quot;hello world&quot;)</code></p>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"_操作\"></a>_操作</h4><p>这个操作经常是让很多人费解的一个操作符，请看下面这个<code>import</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">    _ <span class=\"string\">&quot;github.com/ziutek/mymysql/godrv&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><code>_</code>操作其实是引入该包，而不直接使用包里面的函数，而是调用了该包里面的<code>init函数</code>。</p>\n<h1 id=\"struct类型\"><a href=\"#struct类型\" class=\"headerlink\" title=\"struct类型\"></a>struct类型</h1><h2 id=\"struct类型的声明\"><a href=\"#struct类型的声明\" class=\"headerlink\" title=\"struct类型的声明\"></a>struct类型的声明</h2><p>Go语言中，也和C或者其他语言一样，可以声明新的类型，作为其它类型的属性或字段的容器。例如，可以创建一个自定义类型<code>person</code>代表一个人的实体。这个实体拥有属性：姓名和年龄。这样的类型称之<code>struct</code>。如下代码所示:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明一个<code>struct</code>如此简单，上面的类型包含有两个字段</p>\n<ul>\n<li>一个<code>string</code>类型的字段name，用来保存用户名称这个属性</li>\n<li>一个<code>int</code>类型的字段age，用来保存用户年龄这个属性</li>\n</ul>\n<p>使用<code>struct</code>看下面的代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> P person  <span class=\"comment\">// P现在就是person类型的变量了</span></span><br><span class=\"line\">P.name = <span class=\"string\">&quot;Astaxie&quot;</span>  <span class=\"comment\">// 赋值&quot;Astaxie&quot;给P的name属性.</span></span><br><span class=\"line\">P.age = <span class=\"number\">25</span>  <span class=\"comment\">// 赋值&quot;25&quot;给变量P的age属性</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;The person&#x27;s name is %s&quot;</span>, P.name)  <span class=\"comment\">// 访问P的name属性.</span></span><br></pre></td></tr></table></figure>\n\n<p>除了上面这种P的声明使用之外，还有另外几种声明使用方式：</p>\n<ol>\n<li><p>按照顺序提供初始化值<br><code>P := person&#123;&quot;Tom&quot;, 25&#125;</code></p>\n</li>\n<li><p>通过<code>field:value</code>的方式初始化，这样可以任意顺序<br><code>P := person&#123;age:24, name:&quot;Tom&quot;&#125;</code></p>\n</li>\n<li><p>当然也可以通过<code>new</code>函数分配一个指针，此处P的类型为<code>*person</code><br><code>P := new(person)</code></p>\n</li>\n</ol>\n<p>看一个完整的使用<code>struct</code>的例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 声明一个新的类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 比较两个人的年龄，返回年龄大的那个人，并且返回年龄差</span></span><br><span class=\"line\"><span class=\"comment\">// struct也是传值的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Older</span><span class=\"params\">(p1, p2 person)</span></span> (person, <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p1.age&gt;p2.age &#123;  <span class=\"comment\">// 比较p1和p2这两个人的年龄</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1, p1.age-p2.age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p2, p2.age-p1.age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tom person</span><br><span class=\"line\">    <span class=\"comment\">// 赋值初始化</span></span><br><span class=\"line\">    tom.name, tom.age = <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"number\">18</span></span><br><span class=\"line\">    <span class=\"comment\">// 两个字段都写清楚的初始化</span></span><br><span class=\"line\">    bob := person&#123;age:<span class=\"number\">25</span>, name:<span class=\"string\">&quot;Bob&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 按照struct定义顺序初始化值</span></span><br><span class=\"line\">    paul := person&#123;<span class=\"string\">&quot;Paul&quot;</span>, <span class=\"number\">43</span>&#125;</span><br><span class=\"line\">    tb_Older, tb_diff := Older(tom, bob)</span><br><span class=\"line\">    tp_Older, tp_diff := Older(tom, paul)</span><br><span class=\"line\">    bp_Older, bp_diff := Older(bob, paul)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Of %s and %s, %s is older by %d years\\n&quot;</span>,</span><br><span class=\"line\">        tom.name, bob.name, tb_Older.name, tb_diff)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Of %s and %s, %s is older by %d years\\n&quot;</span>,</span><br><span class=\"line\">        tom.name, paul.name, tp_Older.name, tp_diff)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Of %s and %s, %s is older by %d years\\n&quot;</span>,</span><br><span class=\"line\">        bob.name, paul.name, bp_Older.name, bp_diff)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"struct的匿名字段\"><a href=\"#struct的匿名字段\" class=\"headerlink\" title=\"struct的匿名字段\"></a><code>struct</code>的匿名字段</h2><p>定义的时候是字段名与其类型一一对应，实际上Go支持只提供类型，而不写字段名的方式，也就是匿名字段，也称为嵌入字段。</p>\n<p>当匿名字段是一个<code>struct</code>的时候，那么这个<code>struct</code>所拥有的全部字段都被隐式地引入了当前定义的这个<code>struct</code>。</p>\n<p>看一个例子，让上面说的这些更具体化</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">    weight <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human  <span class=\"comment\">// 匿名字段，那么默认Student就包含了Human的所有字段</span></span><br><span class=\"line\">    speciality <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化一个学生</span></span><br><span class=\"line\">    mark := Student&#123;Human&#123;<span class=\"string\">&quot;Mark&quot;</span>, <span class=\"number\">25</span>, <span class=\"number\">120</span>&#125;, <span class=\"string\">&quot;Computer Science&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 访问相应的字段</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;His name is &quot;</span>, mark.name)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;His age is &quot;</span>, mark.age)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;His weight is &quot;</span>, mark.weight)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;His speciality is &quot;</span>, mark.speciality)</span><br><span class=\"line\">    <span class=\"comment\">// 修改对应的备注信息</span></span><br><span class=\"line\">    mark.speciality = <span class=\"string\">&quot;AI&quot;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Mark changed his speciality&quot;</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;His speciality is &quot;</span>, mark.speciality)</span><br><span class=\"line\">    <span class=\"comment\">// 修改他的年龄信息</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Mark become old&quot;</span>)</span><br><span class=\"line\">    mark.age = <span class=\"number\">46</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;His age is&quot;</span>, mark.age)</span><br><span class=\"line\">    <span class=\"comment\">// 修改他的体重信息</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Mark is not an athlet anymore&quot;</span>)</span><br><span class=\"line\">    mark.weight += <span class=\"number\">60</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;His weight is&quot;</span>, mark.weight)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看到Student访问属性age和name的时候，就像访问自己所有用的字段一样，匿名字段就是这样，能够实现字段的继承。student还能访问Human这个字段作为字段名。请看下面的代码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">mark.Human = Human&#123;<span class=\"string\">&quot;Marcus&quot;</span>, <span class=\"number\">55</span>, <span class=\"number\">220</span>&#125;</span><br><span class=\"line\">mark.Human.age -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>通过匿名访问和修改字段相当的有用，但是不仅仅是<code>struct</code>字段，所有的内置类型和自定义类型都是可以作为匿名字段的。请看下面的例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Skills []<span class=\"type\">string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">    weight <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human  <span class=\"comment\">// 匿名字段，struct</span></span><br><span class=\"line\">    Skills <span class=\"comment\">// 匿名字段，自定义的类型string slice</span></span><br><span class=\"line\">    <span class=\"type\">int</span>    <span class=\"comment\">// 内置类型作为匿名字段</span></span><br><span class=\"line\">    speciality <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化学生Jane</span></span><br><span class=\"line\">    jane := Student&#123;Human:Human&#123;<span class=\"string\">&quot;Jane&quot;</span>, <span class=\"number\">35</span>, <span class=\"number\">100</span>&#125;, speciality:<span class=\"string\">&quot;Biology&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 现在访问相应的字段</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Her name is &quot;</span>, jane.name)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Her age is &quot;</span>, jane.age)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Her weight is &quot;</span>, jane.weight)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Her speciality is &quot;</span>, jane.speciality)</span><br><span class=\"line\">    <span class=\"comment\">// 修改他的skill技能字段</span></span><br><span class=\"line\">    jane.Skills = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;anatomy&quot;</span>&#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Her skills are &quot;</span>, jane.Skills)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;She acquired two new ones &quot;</span>)</span><br><span class=\"line\">    jane.Skills = <span class=\"built_in\">append</span>(jane.Skills, <span class=\"string\">&quot;physics&quot;</span>, <span class=\"string\">&quot;golang&quot;</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Her skills now are &quot;</span>, jane.Skills)</span><br><span class=\"line\">    <span class=\"comment\">// 修改匿名内置类型字段</span></span><br><span class=\"line\">    jane.<span class=\"type\">int</span> = <span class=\"number\">3</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Her preferred number is&quot;</span>, jane.<span class=\"type\">int</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面例子看出来<code>struct</code>不仅仅能够将<code>struct</code>作为匿名字段，自定义类型、内置类型都可以作为匿名字段，而且可以在相应的字段上面进行函数操作（如例子中的append）。</p>\n<p>这里有一个问题：如果human里面有一个字段叫做phone，而student也有一个字段叫做phone，那么该怎么办呢？</p>\n<p>Go里面很简单的解决了这个问题，最外层的优先访问，也就是当通过<code>student.phone</code>访问的时候，是访问student里面的字段，而不是human里面的字段。</p>\n<p>这样就允许去重载通过匿名字段继承的一些字段，当然如果想访问重载后对应匿名类型里面的字段，可以通过匿名字段名来访问。请看下面的例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">    phone <span class=\"type\">string</span>  <span class=\"comment\">// Human类型拥有的字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human  <span class=\"comment\">// 匿名字段Human</span></span><br><span class=\"line\">    speciality <span class=\"type\">string</span></span><br><span class=\"line\">    phone <span class=\"type\">string</span>  <span class=\"comment\">// 雇员的phone字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Bob := Employee&#123;Human&#123;<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"number\">34</span>, <span class=\"string\">&quot;777-444-XXXX&quot;</span>&#125;, <span class=\"string\">&quot;Designer&quot;</span>, <span class=\"string\">&quot;333-222&quot;</span>&#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Bob&#x27;s work phone is:&quot;</span>, Bob.phone)</span><br><span class=\"line\">    <span class=\"comment\">// 如果要访问Human的phone字段</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Bob&#x27;s personal phone is:&quot;</span>, Bob.Human.phone)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"method\"><a href=\"#method\" class=\"headerlink\" title=\"method\"></a>method</h1><p>函数的另一种形态，带有接收者的函数，称为<code>method</code></p>\n<h2 id=\"method-1\"><a href=\"#method-1\" class=\"headerlink\" title=\"method\"></a>method</h2><p>现在假设有这么一个场景，定义了一个struct叫做长方形，现在想要计算他的面积，那么按照一般的思路应该会用下面的方式来实现</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rectangle <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    width, height <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">area</span><span class=\"params\">(r Rectangle)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r.width*r.height</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    r1 := Rectangle&#123;<span class=\"number\">12</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    r2 := Rectangle&#123;<span class=\"number\">9</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Area of r1 is: &quot;</span>, area(r1))</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Area of r2 is: &quot;</span>, area(r2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码可以计算出来长方形的面积，但是area()不是作为Rectangle的方法实现的（类似面向对象里面的方法），而是将Rectangle的对象（如r1,r2）作为参数传入函数计算面积的。</p>\n<p>这样实现当然没有问题，但是当需要增加圆形、正方形、五边形甚至其它多边形的时候，想计算他们的面积的时候怎么办？那就只能增加新的函数，但是函数名就必须要跟着换了，变成<code>area_rectangle, area_circle, area_triangle...</code></p>\n<p> 椭圆代表函数, 而这些函数并不从属于struct(或者以面向对象的术语来说，并不属于class)，他们是单独存在于struct外围，而非在概念上属于某个struct的。</p>\n<p>很显然，这样的实现并不优雅，并且从概念上来说”面积”是”形状”的一个属性，它是属于这个特定的形状的，就像长方形的长和宽一样。</p>\n<p>基于上面的原因所以就有了<code>method</code>的概念，<code>method</code>是附属在一个给定的类型上的，他的语法和函数的声明语法几乎一样，只是在<code>func</code>后面增加了一个receiver(也就是method所依从的主体)。</p>\n<p>用上面提到的形状的例子来说，method <code>area()</code> 是依赖于某个形状(比如说Rectangle)来发生作用的。Rectangle.area()的发出者是Rectangle， area()是属于Rectangle的方法，而非一个外围函数。</p>\n<p>更具体地说，Rectangle存在字段 height 和 width, 同时存在方法area(), 这些字段和方法都属于Rectangle。</p>\n<p>用Rob Pike的话来说就是：</p>\n<p>“A method is a function with an implicit first argument, called a receiver.”</p>\n<p>method的语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r ReceiverType)</span></span> funcName(parameters) (results)</span><br></pre></td></tr></table></figure>\n\n<p>下面用最开始的例子用method来实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> Rectangle <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    width, height <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Circle <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    radius <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r Rectangle)</span></span> area() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r.width*r.height</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Circle)</span></span> area() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c.radius * c.radius * math.Pi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    r1 := Rectangle&#123;<span class=\"number\">12</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    r2 := Rectangle&#123;<span class=\"number\">9</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">    c1 := Circle&#123;<span class=\"number\">10</span>&#125;</span><br><span class=\"line\">    c2 := Circle&#123;<span class=\"number\">25</span>&#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Area of r1 is: &quot;</span>, r1.area())</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Area of r2 is: &quot;</span>, r2.area())</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Area of c1 is: &quot;</span>, c1.area())</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Area of c2 is: &quot;</span>, c2.area())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用method的时候重要注意几点</p>\n<ul>\n<li><p>虽然method的名字一模一样，但是如果接收者不一样，那么method就不一样</p>\n</li>\n<li><p>method里面可以访问接收者的字段</p>\n</li>\n<li><p>调用method通过<code>.</code>访问，就像struct里面访问字段一样</p>\n</li>\n</ul>\n<p>在上例，method area() 分别属于Rectangle和Circle， 于是他们的 Receiver 就变成了Rectangle 和 Circle, 或者说，这个area()方法 是由 Rectangle/Circle 发出的。</p>\n<p>值得说明的一点是，图示中method用虚线标出，意思是此处方法的Receiver是以值传递，而非引用传递，是的，Receiver还可以是指针, 两者的差别在于, 指针作为Receiver会对实例对象的内容发生操作,而普通类型作为Receiver仅仅是以副本作为操作对象,并不对原实例对象发生操作。后文对此会有详细论述。</p>\n<p>那是不是method只能作用在struct上面呢？当然不是，他可以定义在任何自定义的类型、内置类型、struct等各种类型上面。什么叫自定义类型，自定义类型不就是struct，其实不是这样的，struct只是自定义类型里面一种比较特殊的类型而已，还有其他自定义类型申明，可以通过如下这样的申明来实现。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">type typeName typeLiteral</span><br></pre></td></tr></table></figure>\n\n<p>请看下面这个申明自定义类型的代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ages <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> money <span class=\"type\">float32</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> months <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">m := months &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;January&quot;</span>:<span class=\"number\">31</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;February&quot;</span>:<span class=\"number\">28</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">&quot;December&quot;</span>:<span class=\"number\">31</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以在自己的代码里面定义有意义的类型了，实际上只是一个定义了一个别名,有点类似于c中的typedef，例如上面ages替代了int，回到<code>method</code> 可以在任何的自定义类型中定义任意多的<code>method</code>，接下来让看一个复杂一点的例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">    WHITE = <span class=\"literal\">iota</span></span><br><span class=\"line\">    BLACK</span><br><span class=\"line\">    BLUE</span><br><span class=\"line\">    RED</span><br><span class=\"line\">    YELLOW</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> Color <span class=\"type\">byte</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Box <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    width, height, depth <span class=\"type\">float64</span></span><br><span class=\"line\">    color Color</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> BoxList []Box <span class=\"comment\">//a slice of boxes</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b Box)</span></span> Volume() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.width * b.height * b.depth</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *Box)</span></span> SetColor(c Color) &#123;</span><br><span class=\"line\">    b.color = c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(bl BoxList)</span></span> BiggestColor() Color &#123;</span><br><span class=\"line\">    v := <span class=\"number\">0.00</span></span><br><span class=\"line\">    k := Color(WHITE)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, b := <span class=\"keyword\">range</span> bl &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> bv := b.Volume(); bv &gt; v &#123;</span><br><span class=\"line\">            v = bv</span><br><span class=\"line\">            k = b.color</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> k</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(bl BoxList)</span></span> PaintItBlack() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> bl &#123;</span><br><span class=\"line\">        bl[i].SetColor(BLACK)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Color)</span></span> String() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    strings := []<span class=\"type\">string</span> &#123;<span class=\"string\">&quot;WHITE&quot;</span>, <span class=\"string\">&quot;BLACK&quot;</span>, <span class=\"string\">&quot;BLUE&quot;</span>, <span class=\"string\">&quot;RED&quot;</span>, <span class=\"string\">&quot;YELLOW&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> strings[c]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    boxes := BoxList &#123;</span><br><span class=\"line\">        Box&#123;<span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, RED&#125;,</span><br><span class=\"line\">        Box&#123;<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, YELLOW&#125;,</span><br><span class=\"line\">        Box&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">20</span>, BLACK&#125;,</span><br><span class=\"line\">        Box&#123;<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, BLUE&#125;,</span><br><span class=\"line\">        Box&#123;<span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">1</span>, WHITE&#125;,</span><br><span class=\"line\">        Box&#123;<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">20</span>, YELLOW&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;We have %d boxes in our set\\n&quot;</span>, <span class=\"built_in\">len</span>(boxes))</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The volume of the first one is&quot;</span>, boxes[<span class=\"number\">0</span>].Volume(), <span class=\"string\">&quot;cm³&quot;</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The color of the last one is&quot;</span>,boxes[<span class=\"built_in\">len</span>(boxes)<span class=\"number\">-1</span>].color.String())</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The biggest one is&quot;</span>, boxes.BiggestColor().String())</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Let&#x27;s paint them all black&quot;</span>)</span><br><span class=\"line\">    boxes.PaintItBlack()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;The color of the second one is&quot;</span>, boxes[<span class=\"number\">1</span>].color.String())</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Obviously, now, the biggest one is&quot;</span>, boxes.BiggestColor().String())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码通过const定义了一些常量，然后定义了一些自定义类型</p>\n<ul>\n<li><p>Color作为byte的别名</p>\n</li>\n<li><p>定义了一个struct:Box，含有三个长宽高字段和一个颜色属性</p>\n</li>\n<li><p>定义了一个slice:BoxList，含有Box</p>\n</li>\n</ul>\n<p>然后以上面的自定义类型为接收者定义了一些method</p>\n<ul>\n<li><p>Volume()定义了接收者为Box，返回Box的容量</p>\n</li>\n<li><p>SetColor(c Color)，把Box的颜色改为c</p>\n</li>\n<li><p>BiggestColor()定在在BoxList上面，返回list里面容量最大的颜色</p>\n</li>\n<li><p>PaintItBlack()把BoxList里面所有Box的颜色全部变成黑色</p>\n</li>\n<li><p>String()定义在Color上面，返回Color的具体颜色(字符串格式)</p>\n</li>\n</ul>\n<p>上面的代码通过文字描述出来之后是不是很简单？一般解决问题都是通过问题的描述，去写相应的代码实现。</p>\n<h2 id=\"指针作为receiver\"><a href=\"#指针作为receiver\" class=\"headerlink\" title=\"指针作为receiver\"></a>指针作为receiver</h2><p>现在让回过头来看看SetColor这个method，它的receiver是一个指向Box的指针，可以使用*Box。</p>\n<p>定义SetColor的真正目的是想改变这个Box的颜色，如果不传Box的指针，那么SetColor接受的其实是Box的一个copy，也就是说method内对于颜色值的修改，其实只作用于Box的copy，而不是真正的Box。所以需要传入指针。</p>\n<p>这里可以把receiver当作method的第一个参数来看，然后结合前面函数讲解的传值和传引用就不难理解</p>\n<p>这里也许会问SetColor函数里面应该这样定义<code>*b.Color=c</code>,而不是<code>b.Color=c</code>,需要读取到指针相应的值。</p>\n<p>其实Go里面这两种方式都是正确的，当用指针去访问相应的字段时(虽然指针没有任何的字段)，Go知道要通过指针去获取这个值。PaintItBlack里面调用SetColor的时候是不是应该写成<code>(&amp;bl[i]).SetColor(BLACK)</code>，因为SetColor的receiver是*Box，而不是Box。这两种方式都可以，因为Go知道receiver是指针，他自动转了。</p>\n<p>也就是说：</p>\n<p>如果一个method的receiver是*T,可以在一个T类型的实例变量V上面调用这个method，而不需要&amp;V去调用这个method</p>\n<p>类似的</p>\n<p>如果一个method的receiver是T，可以在一个*T类型的变量P上面调用这个method，而不需要 *P去调用这个method</p>\n<p>所以不用担心是调用的指针的method还是不是指针的method，Go知道要做的一切，这对于有多年C/C++编程经验的同学来说，真是解决了一个很大的痛苦。</p>\n<h2 id=\"method继承\"><a href=\"#method继承\" class=\"headerlink\" title=\"method继承\"></a>method继承</h2><p>通过字段的继承的学习，发现Go的一个神奇之处，method也是可以继承的。如果匿名字段实现了一个method，那么包含这个匿名字段的struct也能调用该method。来看下面这个例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">    phone <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human <span class=\"comment\">//匿名字段</span></span><br><span class=\"line\">    school <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human <span class=\"comment\">//匿名字段</span></span><br><span class=\"line\">    company <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在human上面定义了一个method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h *Human)</span></span> SayHi() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Hi, I am %s you can call me on %s\\n&quot;</span>, h.name, h.phone)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mark := Student&#123;Human&#123;<span class=\"string\">&quot;Mark&quot;</span>, <span class=\"number\">25</span>, <span class=\"string\">&quot;222-222-YYYY&quot;</span>&#125;, <span class=\"string\">&quot;MIT&quot;</span>&#125;</span><br><span class=\"line\">    sam := Employee&#123;Human&#123;<span class=\"string\">&quot;Sam&quot;</span>, <span class=\"number\">45</span>, <span class=\"string\">&quot;111-888-XXXX&quot;</span>&#125;, <span class=\"string\">&quot;Golang Inc&quot;</span>&#125;</span><br><span class=\"line\">    mark.SayHi()</span><br><span class=\"line\">    sam.SayHi()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"method重写\"><a href=\"#method重写\" class=\"headerlink\" title=\"method重写\"></a>method重写</h2><p>上面的例子中，如果Employee想要实现自己的SayHi,怎么办？简单，和匿名字段冲突一样的道理，可以在Employee上面定义一个method，重写了匿名字段的方法。请看下面的例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">    phone <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human <span class=\"comment\">//匿名字段</span></span><br><span class=\"line\">    school <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human <span class=\"comment\">//匿名字段</span></span><br><span class=\"line\">    company <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Human定义method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h *Human)</span></span> SayHi() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Hi, I am %s you can call me on %s\\n&quot;</span>, h.name, h.phone)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Employee的method重写Human的method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *Employee)</span></span> SayHi() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Hi, I am %s, I work at %s. Call me on %s\\n&quot;</span>, e.name,</span><br><span class=\"line\">        e.company, e.phone) <span class=\"comment\">//Yes you can split into 2 lines here.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mark := Student&#123;Human&#123;<span class=\"string\">&quot;Mark&quot;</span>, <span class=\"number\">25</span>, <span class=\"string\">&quot;222-222-YYYY&quot;</span>&#125;, <span class=\"string\">&quot;MIT&quot;</span>&#125;</span><br><span class=\"line\">    sam := Employee&#123;Human&#123;<span class=\"string\">&quot;Sam&quot;</span>, <span class=\"number\">45</span>, <span class=\"string\">&quot;111-888-XXXX&quot;</span>&#125;, <span class=\"string\">&quot;Golang Inc&quot;</span>&#125;</span><br><span class=\"line\">    mark.SayHi()</span><br><span class=\"line\">    sam.SayHi()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这些内容，可以设计出基本的面向对象的程序了，但是Go里面的面向对象是如此的简单，没有任何的私有、公有关键字，通过大小写来实现(大写开头的为公有，小写开头的为私有)，方法也同样适用这个原则。</p>\n<h1 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h1><p>Go语言里面设计最精妙的应该算<code>interface</code>，它让面向对象，内容组织实现非常的方便</p>\n<h2 id=\"什么是interface\"><a href=\"#什么是interface\" class=\"headerlink\" title=\"什么是interface\"></a>什么是interface</h2><p>简单的说，<code>interface</code>是一组<code>method</code>签名的组合，通过<code>interface</code>来定义对象的一组行为。</p>\n<p>前面例子中<code>Student</code>和<code>Employee</code>都能<code>SayHi</code>，虽然他们的内部实现不一样，但是那不重要，重要的是他们都能<code>say hi</code></p>\n<p>继续做更多的扩展，<code>Student</code>和<code>Employee</code>实现另一个方法<code>Sing</code>，然后<code>Student</code>实现方法<code>BorrowMoney</code>而<code>Employee</code>实现<code>SpendSalary</code>。</p>\n<p>这样<code>Student</code>实现了三个方法：<code>SayHi</code>、<code>Sing</code>、<code>BorrowMoney</code>；而<code>Employee</code>实现了<code>SayHi</code>、<code>Sing</code>、<code>SpendSalary</code>。</p>\n<p>上面这些方法的组合称为<code>interface</code>(被对象<code>Student</code>和<code>Employee</code>实现)。例如<code>Student</code>和<code>Employee</code>都实现了<code>interface</code>：<code>SayHi</code>和<code>Sing</code>，也就是这两个对象是该<code>interface</code>类型。而<code>Employee</code>没有实现这个<code>interface：SayHi、Sing</code>和<code>BorrowMoney</code>，因为<code>Employee</code>没有实现<code>BorrowMoney</code>这个方法。</p>\n<h2 id=\"interface类型\"><a href=\"#interface类型\" class=\"headerlink\" title=\"interface类型\"></a>interface类型</h2><p><code>interface</code>类型定义了一组方法，如果某个对象实现了某个接口的所有方法，则此对象就实现了此接口。详细的语法参考下面这个例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">    phone <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human <span class=\"comment\">//匿名字段Human</span></span><br><span class=\"line\">    school <span class=\"type\">string</span></span><br><span class=\"line\">    loan <span class=\"type\">float32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human <span class=\"comment\">//匿名字段Human</span></span><br><span class=\"line\">    company <span class=\"type\">string</span></span><br><span class=\"line\">    money <span class=\"type\">float32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Human对象实现Sayhi方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h *Human)</span></span> SayHi() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Hi, I am %s you can call me on %s\\n&quot;</span>, h.name, h.phone)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Human对象实现Sing方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h *Human)</span></span> Sing(lyrics <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;La la, la la la, la la la la la...&quot;</span>, lyrics)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Human对象实现Guzzle方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h *Human)</span></span> Guzzle(beerStein <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Guzzle Guzzle Guzzle...&quot;</span>, beerStein)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Employee重载Human的Sayhi方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *Employee)</span></span> SayHi() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Hi, I am %s, I work at %s. Call me on %s\\n&quot;</span>, e.name,</span><br><span class=\"line\">        e.company, e.phone) <span class=\"comment\">//此句可以分成多行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Student实现BorrowMoney方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Student)</span></span> BorrowMoney(amount <span class=\"type\">float32</span>) &#123;</span><br><span class=\"line\">    s.loan += amount <span class=\"comment\">// (again and again and...)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Employee实现SpendSalary方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *Employee)</span></span> SpendSalary(amount <span class=\"type\">float32</span>) &#123;</span><br><span class=\"line\">    e.money -= amount <span class=\"comment\">// More vodka please!!! Get me through the day!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义interface</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Men <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    SayHi()</span><br><span class=\"line\">    Sing(lyrics <span class=\"type\">string</span>)</span><br><span class=\"line\">    Guzzle(beerStein <span class=\"type\">string</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> YoungChap <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    SayHi()</span><br><span class=\"line\">    Sing(song <span class=\"type\">string</span>)</span><br><span class=\"line\">    BorrowMoney(amount <span class=\"type\">float32</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> ElderlyGent <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    SayHi()</span><br><span class=\"line\">    Sing(song <span class=\"type\">string</span>)</span><br><span class=\"line\">    SpendSalary(amount <span class=\"type\">float32</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的代码可以知道，interface可以被任意的对象实现。看到上面的Men interface被Human、Student和Employee实现。同理，一个对象可以实现任意多个interface，例如上面的Student实现了Men和YoungChap两个interface。</p>\n<p>最后，任意的类型都实现了空interface(这样定义：interface{})，也就是包含0个method的interface。</p>\n<h2 id=\"interface值\"><a href=\"#interface值\" class=\"headerlink\" title=\"interface值\"></a>interface值</h2><p>那么interface里面到底能存什么值呢？如果定义了一个interface的变量，那么这个变量里面可以存实现这个interface的任意类型的对象。例如上面例子中，定义了一个Men interface类型的变量m，那么m里面可以存Human、Student或者Employee值。</p>\n<p>因为m能够持有这三种类型的对象，所以可以定义一个包含Men类型元素的slice，这个slice可以被赋予实现了Men接口的任意结构的对象，这个和传统意义上面的slice有所不同。</p>\n<p>来看一下下面这个例子:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">    phone <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human <span class=\"comment\">//匿名字段</span></span><br><span class=\"line\">    school <span class=\"type\">string</span></span><br><span class=\"line\">    loan <span class=\"type\">float32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Human <span class=\"comment\">//匿名字段</span></span><br><span class=\"line\">    company <span class=\"type\">string</span></span><br><span class=\"line\">    money <span class=\"type\">float32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Human实现SayHi方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h Human)</span></span> SayHi() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Hi, I am %s you can call me on %s\\n&quot;</span>, h.name, h.phone)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Human实现Sing方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h Human)</span></span> Sing(lyrics <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;La la la la...&quot;</span>, lyrics)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Employee重载Human的SayHi方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e Employee)</span></span> SayHi() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Hi, I am %s, I work at %s. Call me on %s\\n&quot;</span>, e.name,</span><br><span class=\"line\">        e.company, e.phone)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// Interface Men被Human,Student和Employee实现</span></span><br><span class=\"line\"><span class=\"comment\">// 因为这三个类型都实现了这两个方法</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Men <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    SayHi()</span><br><span class=\"line\">    Sing(lyrics <span class=\"type\">string</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mike := Student&#123;Human&#123;<span class=\"string\">&quot;Mike&quot;</span>, <span class=\"number\">25</span>, <span class=\"string\">&quot;222-222-XXX&quot;</span>&#125;, <span class=\"string\">&quot;MIT&quot;</span>, <span class=\"number\">0.00</span>&#125;</span><br><span class=\"line\">    paul := Student&#123;Human&#123;<span class=\"string\">&quot;Paul&quot;</span>, <span class=\"number\">26</span>, <span class=\"string\">&quot;111-222-XXX&quot;</span>&#125;, <span class=\"string\">&quot;Harvard&quot;</span>, <span class=\"number\">100</span>&#125;</span><br><span class=\"line\">    sam := Employee&#123;Human&#123;<span class=\"string\">&quot;Sam&quot;</span>, <span class=\"number\">36</span>, <span class=\"string\">&quot;444-222-XXX&quot;</span>&#125;, <span class=\"string\">&quot;Golang Inc.&quot;</span>, <span class=\"number\">1000</span>&#125;</span><br><span class=\"line\">    tom := Employee&#123;Human&#123;<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"number\">37</span>, <span class=\"string\">&quot;222-444-XXX&quot;</span>&#125;, <span class=\"string\">&quot;Things Ltd.&quot;</span>, <span class=\"number\">5000</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">//定义Men类型的变量i</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i Men</span><br><span class=\"line\">    <span class=\"comment\">//i能存储Student</span></span><br><span class=\"line\">    i = mike</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;This is Mike, a Student:&quot;</span>)</span><br><span class=\"line\">    i.SayHi()</span><br><span class=\"line\">    i.Sing(<span class=\"string\">&quot;November rain&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//i也能存储Employee</span></span><br><span class=\"line\">    i = tom</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;This is tom, an Employee:&quot;</span>)</span><br><span class=\"line\">    i.SayHi()</span><br><span class=\"line\">    i.Sing(<span class=\"string\">&quot;Born to be wild&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//定义了slice Men</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Let&#x27;s use a slice of Men and see what happens&quot;</span>)</span><br><span class=\"line\">    x := <span class=\"built_in\">make</span>([]Men, <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\">//这三个都是不同类型的元素，但是他们实现了interface同一个接口</span></span><br><span class=\"line\">    x[<span class=\"number\">0</span>], x[<span class=\"number\">1</span>], x[<span class=\"number\">2</span>] = paul, sam, mike</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> x&#123;</span><br><span class=\"line\">        value.SayHi()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的代码，发现<code>interface</code>就是一组抽象方法的集合，它必须由其他非interface类型实现，而不能自我实现， Go通过interface实现了<code>duck-typing</code>:即”当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子”。</p>\n<h2 id=\"空interface\"><a href=\"#空interface\" class=\"headerlink\" title=\"空interface\"></a>空interface</h2><p>空interface(interface{})不包含任何的method，正因为如此，所有的类型都实现了空interface。空interface对于描述起不到任何的作用(因为它不包含任何的method），但是空interface需要存储任意类型的数值的时候相当有用，因为它可以存储任意类型的数值。它有点类似于C语言的void*类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义a为空接口</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i <span class=\"type\">int</span> = <span class=\"number\">5</span></span><br><span class=\"line\">s := <span class=\"string\">&quot;Hello world&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// a可以存储任意类型的数值</span></span><br><span class=\"line\">a = i</span><br><span class=\"line\">a = s</span><br></pre></td></tr></table></figure>\n\n<p>一个函数把interface{}作为参数，那么他可以接受任意类型的值作为参数，如果一个函数返回<code>interface&#123;&#125;</code>,那么也就可以返回任意类型的值。是不是很有用啊！</p>\n<h2 id=\"interface函数参数\"><a href=\"#interface函数参数\" class=\"headerlink\" title=\"interface函数参数\"></a>interface函数参数</h2><p>interface的变量可以持有任意实现该interface类型的对象，这给编写函数(包括method)提供了一些额外的思考，是不是可以通过定义interface参数，让函数接受各种类型的参数。</p>\n<p>举个例子：fmt.Println是常用的一个函数，是否注意到它可以接受任意类型的数据。打开fmt的源码文件，会看到这样一个定义:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Stringer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">     String() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，任何实现了String方法的类型都能作为参数被<code>fmt.Println</code>调用,来试一试</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">    phone <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过这个方法 Human 实现了 fmt.Stringer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h Human)</span></span> String() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;❰&quot;</span>+h.name+<span class=\"string\">&quot; - &quot;</span>+strconv.Itoa(h.age)+<span class=\"string\">&quot; years -  ✆ &quot;</span> +h.phone+<span class=\"string\">&quot;❱&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Bob := Human&#123;<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"number\">39</span>, <span class=\"string\">&quot;000-7777-XXX&quot;</span>&#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;This Human is : &quot;</span>, Bob)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在再回顾一下前面的Box示例，发现Color结构也定义了一个<code>method：String</code>。其实这也是实现了<code>fmt.Stringer</code>这个<code>interface</code>，即如果需要某个类型能被fmt包以特殊的格式输出，就必须实现<code>Stringer</code>这个接口。如果没有实现这个接口，fmt将以默认的方式输出。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现同样的功能</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;The biggest one is&quot;</span>, boxes.BiggestsColor().String())</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;The biggest one is&quot;</span>, boxes.BiggestsColor())</span><br></pre></td></tr></table></figure>\n\n<p>注：实现了<code>error</code>接口的对象（即实现了Error() string的对象），使用fmt输出时，会调用Error()方法，因此不必再定义String()方法了。</p>\n<h2 id=\"interface变量存储的类型\"><a href=\"#interface变量存储的类型\" class=\"headerlink\" title=\"interface变量存储的类型\"></a>interface变量存储的类型</h2><p>interface的变量里面可以存储任意类型的数值(该类型实现了interface)。那么怎么反向知道这个变量里面实际保存了的是哪个类型的对象呢？目前常用的有两种方法：</p>\n<ul>\n<li>Comma-ok断言</li>\n</ul>\n<p>Go语言里面有一个语法，可以直接判断是否是该类型的变量： value, ok = element.(T)，这里value就是变量的值，ok是一个bool类型，element是interface变量，T是断言的类型。</p>\n<p>如果element里面确实存储了T类型的数值，那么ok返回true，否则返回false。</p>\n<p>通过一个例子来更加深入的理解。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> Element <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> List [] Element</span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义了String方法，实现了fmt.Stringer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span></span> String() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;(name: &quot;</span> + p.name + <span class=\"string\">&quot; - age: &quot;</span>+strconv.Itoa(p.age)+ <span class=\"string\">&quot; years)&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    list := <span class=\"built_in\">make</span>(List, <span class=\"number\">3</span>)</span><br><span class=\"line\">    list[<span class=\"number\">0</span>] = <span class=\"number\">1</span> <span class=\"comment\">// an int</span></span><br><span class=\"line\">    list[<span class=\"number\">1</span>] = <span class=\"string\">&quot;Hello&quot;</span> <span class=\"comment\">// a string</span></span><br><span class=\"line\">    list[<span class=\"number\">2</span>] = Person&#123;<span class=\"string\">&quot;Dennis&quot;</span>, <span class=\"number\">70</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, element := <span class=\"keyword\">range</span> list &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value, ok := element.(<span class=\"type\">int</span>); ok &#123;</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;list[%d] is an int and its value is %d\\n&quot;</span>, index, value)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value, ok := element.(<span class=\"type\">string</span>); ok &#123;</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;list[%d] is a string and its value is %s\\n&quot;</span>, index, value)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value, ok := element.(Person); ok &#123;</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;list[%d] is a Person and its value is %s\\n&quot;</span>, index, value)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;list[%d] is of a different type\\n&quot;</span>, index)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>是否注意到了多个if里面，if里面允许初始化变量。断言的类型越多，那么if else也就越多，所以才引出了下面要介绍的switch。</p>\n<ul>\n<li>switch测试</li>\n</ul>\n<p>重写上面的这个实现</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> Element <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> List [] Element</span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span></span> String() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;(name: &quot;</span> + p.name + <span class=\"string\">&quot; - age: &quot;</span>+strconv.Itoa(p.age)+ <span class=\"string\">&quot; years)&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    list := <span class=\"built_in\">make</span>(List, <span class=\"number\">3</span>)</span><br><span class=\"line\">    list[<span class=\"number\">0</span>] = <span class=\"number\">1</span> <span class=\"comment\">//an int</span></span><br><span class=\"line\">    list[<span class=\"number\">1</span>] = <span class=\"string\">&quot;Hello&quot;</span> <span class=\"comment\">//a string</span></span><br><span class=\"line\">    list[<span class=\"number\">2</span>] = Person&#123;<span class=\"string\">&quot;Dennis&quot;</span>, <span class=\"number\">70</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, element := <span class=\"keyword\">range</span> list&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> value := element.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"type\">int</span>:</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;list[%d] is an int and its value is %d\\n&quot;</span>, index, value)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"type\">string</span>:</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;list[%d] is a string and its value is %s\\n&quot;</span>, index, value)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Person:</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;list[%d] is a Person and its value is %s\\n&quot;</span>, index, value)</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">&quot;list[%d] is of a different type&quot;</span>, index)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有一点需要强调的是：<code>element.(type)</code>语法不能在switch外的任何逻辑里面使用，如果要在switch外面判断一个类型就使用<code>comma-ok</code>。</p>\n<h2 id=\"嵌入interface\"><a href=\"#嵌入interface\" class=\"headerlink\" title=\"嵌入interface\"></a>嵌入interface</h2><p>Go里面真正吸引人的是它内置的逻辑语法，就像在学习Struct时学习的匿名字段，那么相同的逻辑引入到interface里面，更加完美了。如果一个interface1作为interface2的一个嵌入字段，那么interface2隐式的包含了interface1里面的method。</p>\n<p>可以看到源码包<code>container/heap</code>里面有这样的一个定义</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Interface <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    sort.Interface <span class=\"comment\">//嵌入字段sort.Interface</span></span><br><span class=\"line\">    Push(x <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"comment\">//a Push method to push elements into the heap</span></span><br><span class=\"line\">    Pop() <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"comment\">//a Pop elements that pops elements from the heap</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看到<code>sort.Interface</code>其实就是嵌入字段，把<code>sort.Interface</code>的所有<code>method</code>给隐式的包含进来了。也就是下面三个方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Interface <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Len is the number of elements in the collection.</span></span><br><span class=\"line\">    Len() <span class=\"type\">int</span></span><br><span class=\"line\">    <span class=\"comment\">// Less returns whether the element with index i should sort</span></span><br><span class=\"line\">    <span class=\"comment\">// before the element with index j.</span></span><br><span class=\"line\">    Less(i, j <span class=\"type\">int</span>) <span class=\"type\">bool</span></span><br><span class=\"line\">    <span class=\"comment\">// Swap swaps the elements with indexes i and j.</span></span><br><span class=\"line\">    Swap(i, j <span class=\"type\">int</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个例子就是io包下面的 <code>io.ReadWriter</code> ，它包含了io包下面的<code>Reader</code>和<code>Writer</code>两个<code>interface</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// io.ReadWriter</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReadWriter <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Reader</span><br><span class=\"line\">    Writer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><p>Go语言实现了反射，所谓反射就是能检查程序在运行时的状态。一般用到的包是<code>reflect</code>包。如何运用<code>reflect</code>包，官方的这篇文章详细的讲解了<code>reflect</code>包的实现原理，<code>laws of reflection</code> 链接地址为 <a href=\"http://golang.org/doc/articles/laws_of_reflection.html\">http://golang.org/doc/articles/laws_of_reflection.html</a></p>\n<p>使用reflect一般分成三步，下面简要的讲解一下：要去反射是一个类型的值(这些值都实现了<code>空interface</code>)，首先需要把它转化成<code>reflect</code>对象(<code>reflect.Type</code>或者<code>reflect.Value</code>，根据不同的情况调用不同的函数)。这两种获取方式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">t := reflect.TypeOf(i)    <span class=\"comment\">//得到类型的元数据,通过t能获取类型定义里面的所有元素</span></span><br><span class=\"line\">v := reflect.ValueOf(i)   <span class=\"comment\">//得到实际的值，通过v获取存储在里面的值，还可以去改变值</span></span><br></pre></td></tr></table></figure>\n\n<p>转化为reflect对象之后就可以进行一些操作了，也就是将reflect对象转化成相应的值，例如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">tag := t.Elem().Field(<span class=\"number\">0</span>).Tag  <span class=\"comment\">//获取定义在struct里面的标签</span></span><br><span class=\"line\">name := v.Elem().Field(<span class=\"number\">0</span>).String()  <span class=\"comment\">//获取存储在第一个字段里面的值</span></span><br></pre></td></tr></table></figure>\n\n<p>获取反射值能返回相应的类型和数值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"type\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;type:&quot;</span>, v.Type())</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;kind is float64:&quot;</span>, v.Kind() == reflect.Float64)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;value:&quot;</span>, v.Float())</span><br></pre></td></tr></table></figure>\n\n<p>最后，反射的话，那么反射的字段必须是可修改的，前面学习过传值和传引用，这个里面也是一样的道理。反射的字段必须是可读写的意思是，如果下面这样写，那么会发生错误</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"type\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">v.SetFloat(<span class=\"number\">7.1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果要修改相应的值，必须这样写</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"type\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">p := reflect.ValueOf(&amp;x)</span><br><span class=\"line\">v := p.Elem()</span><br><span class=\"line\">v.SetFloat(<span class=\"number\">7.1</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h1><p>Go从语言层面支持了并行。</p>\n<h2 id=\"goroutine\"><a href=\"#goroutine\" class=\"headerlink\" title=\"goroutine\"></a>goroutine</h2><p><code>goroutine</code>是<code>Go</code>并行设计的核心。<code>goroutine</code>说到底其实就是协程，但是它比线程更小，十几个<code>goroutine</code>可能体现在底层就是五六个线程，Go语言内部实现了这些<code>goroutine</code>之间的内存共享。执行<code>goroutine</code>只需极少的栈内存(大概是4~5KB)，当然会根据相应的数据伸缩。也正因为如此，可同时运行成千上万个并发任务。<code>goroutine</code>比<code>thread</code>更易用、更高效、更轻便。</p>\n<p><code>goroutine</code>是通过Go的<code>runtime</code>管理的一个线程管理器。<code>goroutine</code>通过<code>go</code>关键字实现了，其实就是一个普通的函数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> hello(a, b, c)</span><br></pre></td></tr></table></figure>\n\n<p>通过关键字go就启动了一个<code>goroutine</code>。来看一个例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;runtime&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        runtime.Gosched()</span><br><span class=\"line\">        fmt.Println(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">go</span> say(<span class=\"string\">&quot;world&quot;</span>) <span class=\"comment\">//开一个新的Goroutines执行</span></span><br><span class=\"line\">    say(<span class=\"string\">&quot;hello&quot;</span>) <span class=\"comment\">//当前Goroutines执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 以上程序执行后将输出：</span></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到go关键字很方便的就实现了并发编程。</p>\n<p>上面的多个<code>goroutine</code>运行在同一个进程里面，共享内存数据，不过设计上要遵循：不要通过共享来通信，而要通过通信来共享。</p>\n<p><code>runtime.Gosched()</code>表示让CPU把时间片让给别人,下次某个时候继续恢复执行该<code>goroutine</code>。</p>\n<p>默认情况下，在Go 1.5将标识并发系统线程个数的<code>runtime.GOMAXPROCS</code>的初始值由1改为了<code>运行环境的CPU核数</code>。</p>\n<p>但在Go 1.5以前调度器仅使用单线程，也就是说只实现了并发。想要发挥多核处理器的并行，需要程序中显式调用 <code>runtime.GOMAXPROCS(n)</code> 告诉调度器同时使用多个线程。<code>GOMAXPROCS</code> 设置了同时运行逻辑代码的系统线程的最大数量，并返回之前的设置。如果<code>n &lt; 1</code>，不会改变当前设置。</p>\n<h2 id=\"sync-WaitGroup\"><a href=\"#sync-WaitGroup\" class=\"headerlink\" title=\"sync.WaitGroup\"></a>sync.WaitGroup</h2><p>Go语言中可以使用sync.WaitGroup来实现并发任务的同步。 sync.WaitGroup有以下几个方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(wg * WaitGroup) Add(delta int)</td>\n<td>计数器+delta</td>\n</tr>\n<tr>\n<td>(wg *WaitGroup) Done()</td>\n<td>计数器-1</td>\n</tr>\n<tr>\n<td>(wg *WaitGroup) Wait()</td>\n<td>阻塞直到计数器变为0</td>\n</tr>\n</tbody></table>\n<p><code>sync.WaitGroup</code>内部维护着一个计数器，计数器的值可以增加和减少。例如当我们启动了N 个并发任务时，就将计数器值增加N。每个任务完成时通过调用Done()方法将计数器减1。通过调用Wait()来等待并发任务执行完，当计数器值为0时，表示所有并发任务已经完成。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;foo&quot;</span>)</span><br><span class=\"line\">    time.Sleep(time.Second)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;foo end&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;bar&quot;</span>)</span><br><span class=\"line\">    time.Sleep(time.Second*<span class=\"number\">2</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;bar end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    start:=time.Now()</span><br><span class=\"line\">    wg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> foo()</span><br><span class=\"line\">    <span class=\"keyword\">go</span> bar()</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;程序结束，运行时间为&quot;</span>,time.Now().Sub(start))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"channels\"><a href=\"#channels\" class=\"headerlink\" title=\"channels\"></a>channels</h2><p><code>goroutine</code>运行在相同的地址空间，因此访问共享内存必须做好同步。那么<code>goroutine</code>之间如何进行数据的通信呢，Go提供了一个很好的通信机制<code>channel</code>。<code>channel</code>可以与<code>Unix shell</code> 中的双向管道做类比：可以通过它发送或者接收值。这些值只能是特定的类型：<code>channel类型</code>。定义一个<code>channel</code>时，也需要定义发送到<code>channel</code>的值的类型。注意，必须使用<code>make</code> 创建<code>channel</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">ci := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">cs := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">string</span>)</span><br><span class=\"line\">cf := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>channel</code>通过操作符<code>&lt;-</code>来接收和发送数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">ch &lt;- v    <span class=\"comment\">// 发送v到channel ch.</span></span><br><span class=\"line\">v := &lt;-ch  <span class=\"comment\">// 从ch中接收数据，并赋值给v</span></span><br></pre></td></tr></table></figure>\n\n<p>把这些应用到例子中来：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a []<span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    total := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">        total += v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c &lt;- total  <span class=\"comment\">// send total to c</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := []<span class=\"type\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">-9</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> sum(a[:<span class=\"built_in\">len</span>(a)/<span class=\"number\">2</span>], c)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> sum(a[<span class=\"built_in\">len</span>(a)/<span class=\"number\">2</span>:], c)</span><br><span class=\"line\">    x, y := &lt;-c, &lt;-c  <span class=\"comment\">// receive from c</span></span><br><span class=\"line\">    fmt.Println(x, y, x + y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，<code>channel</code>接收和发送数据都是阻塞的，除非另一端已经准备好，这样就使得<code>Goroutines</code>同步变的更加的简单，而不需要显式的<code>lock</code>。所谓阻塞，也就是如果读取（<code>value := &lt;-ch</code>）它将会被阻塞，直到有数据接收。其次，任何发送（<code>ch&lt;-5</code>）将会被阻塞，直到数据被读出。无缓冲<code>channel</code>是在多个<code>goroutine</code>之间同步很棒的工具。</p>\n<h2 id=\"Buffered-Channels\"><a href=\"#Buffered-Channels\" class=\"headerlink\" title=\"Buffered Channels\"></a>Buffered Channels</h2><p>上面介绍了默认的非缓存类型的channel，不过Go也允许指定channel的缓冲大小，很简单，就是channel可以存储多少元素。<code>ch:= make(chan bool</code>, 4)，创建了可以存储4个元素的bool 型channel。在这个channel 中，前4个元素可以无阻塞的写入。当写入第5个元素时，代码将会阻塞，直到其他goroutine从channel 中读取一些元素，腾出空间。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">type</span>, value)</span><br></pre></td></tr></table></figure>\n\n<p>当 <code>value = 0</code> 时，channel 是无缓冲阻塞读写的，当<code>value &gt; 0</code> 时，channel 有缓冲、是非阻塞的，直到写满 value 个元素才阻塞写入。</p>\n<p>看一下下面这个例子，可以在自己本机测试一下，修改相应的value值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">2</span>)<span class=\"comment\">//修改2为1就报错，修改2为3可以正常运行</span></span><br><span class=\"line\">    c &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">    c &lt;- <span class=\"number\">2</span></span><br><span class=\"line\">    fmt.Println(&lt;-c)</span><br><span class=\"line\">    fmt.Println(&lt;-c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//修改为1报如下的错误:</span></span><br><span class=\"line\"><span class=\"comment\">//fatal error: all goroutines are asleep - deadlock!</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Range和Close\"><a href=\"#Range和Close\" class=\"headerlink\" title=\"Range和Close\"></a>Range和Close</h2><p>上面这个例子中，需要读取两次c，这样不是很方便，Go考虑到了这一点，所以也可以通过range，像操作slice或者map一样操作缓存类型的channel，请看下面的例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    x, y := <span class=\"number\">1</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">        c &lt;- x</span><br><span class=\"line\">        x, y = y, x + y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> fibonacci(<span class=\"built_in\">cap</span>(c), c)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> c &#123;</span><br><span class=\"line\">        fmt.Println(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>for i := range c</code>能够不断的读取<code>channel</code>里面的数据，直到该<code>channel</code>被显式的关闭。上面代码看到可以显式的关闭<code>channel</code>，生产者通过内置函数<code>close</code>关闭<code>channel</code>。关闭<code>channel</code>之后就无法再发送任何数据了，在消费方可以通过语法<code>v, ok := &lt;-ch</code>测试<code>channel</code>是否被关闭。如果ok返回false，那么说明<code>channel</code>已经没有任何数据并且已经被关闭。</p>\n<p>记住应该在生产者的地方关闭<code>channel</code>，而不是消费的地方去关闭它，这样容易引起<code>panic</code></p>\n<p>另外记住一点的就是<code>channel</code>不像文件之类的，不需要经常去关闭，只有确实没有任何发送数据了，或者想显式的结束<code>range</code>循环之类的</p>\n<h2 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h2><p>上面介绍的都是只有一个<code>channel</code>的情况，那么如果存在多个<code>channel</code>的时候，该如何操作呢，Go里面提供了一个关键字<code>select</code>，通过<code>select</code>可以监听<code>channel</code>上的数据流动。</p>\n<p><code>select</code>默认是阻塞的，只有当监听的<code>channel</code>中有发送或接收可以进行时才会运行，当多个<code>channel</code>都准备好的时候，<code>select</code>是随机的选择一个执行的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(c, quit <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    x, y := <span class=\"number\">1</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> c &lt;- x:</span><br><span class=\"line\">            x, y = y, x + y</span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-quit:</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">&quot;quit&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">    quit := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">            fmt.Println(&lt;-c)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        quit &lt;- <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    fibonacci(c, quit)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>select</code>里面还有<code>default</code>语法，<code>select</code>其实就是类似<code>switch</code>的功能，<code>default</code>就是当监听的<code>channel</code>都没有准备好的时候，默认执行的（<code>select</code>不再阻塞等待<code>channel</code>）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> i := &lt;-c:</span><br><span class=\"line\">    <span class=\"comment\">// use i</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 当c阻塞的时候执行这里</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"超时\"><a href=\"#超时\" class=\"headerlink\" title=\"超时\"></a>超时</h2><p>有时候会出现<code>goroutine</code>阻塞的情况，那么如何避免整个程序进入阻塞的情况呢？可以利用<code>select</code>来设置超时，通过如下的方式实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">    o := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">bool</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> v := &lt;- c:</span><br><span class=\"line\">                    <span class=\"built_in\">println</span>(v)</span><br><span class=\"line\">                <span class=\"keyword\">case</span> &lt;- time.After(<span class=\"number\">5</span> * time.Second):</span><br><span class=\"line\">                    <span class=\"built_in\">println</span>(<span class=\"string\">&quot;timeout&quot;</span>)</span><br><span class=\"line\">                    o &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    &lt;- o</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"runtime-goroutine\"><a href=\"#runtime-goroutine\" class=\"headerlink\" title=\"runtime goroutine\"></a>runtime goroutine</h2><p><code>runtime</code>包中有几个处理<code>goroutine</code>的函数：</p>\n<ul>\n<li><p><code>Goexit</code> : 退出当前执行的goroutine，但是defer函数还会继续调用</p>\n</li>\n<li><p><code>Gosched</code>: 让出当前goroutine的执行权限，调度器安排其他等待的任务运行，并在下次某个时候从该位置恢复执行。</p>\n</li>\n<li><p><code>NumCPU</code> : 返回 CPU 核数量</p>\n</li>\n<li><p><code>NumGoroutine</code>: 返回正在执行和排队的任务总数</p>\n</li>\n<li><p><code>GOMAXPROCS</code> : 用来设置可以并行计算的CPU核数的最大值，并返回之前的值。</p>\n</li>\n</ul>\n<h1 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h1><p>Go语言主要的设计准则是：简洁、明白，简洁是指语法和C类似，相当的简单，明白是指任何语句都是很明显的，不含有任何隐含的东西，在错误处理方案的设计中也贯彻了这一思想。</p>\n<p>在C语言里面是通过返回<code>-1</code>或者<code>NULL</code>之类的信息来表示错误，但是对于使用者来说，不查看相应的API说明文档，根本搞不清楚这个返回值究竟代表什么意思，比如:返回0是成功，还是失败,而<code>Go</code>定义了一个叫做<code>error</code>的类型，来显式表达错误。在使用时，通过把返回的<code>error</code>变量与<code>nil</code>的比较，来判定操作是否成功。例如<code>os.Open</code>函数在打开文件失败时将返回一个不为<code>nil</code>的<code>error</code>变量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Open</span><span class=\"params\">(name <span class=\"type\">string</span>)</span></span> (file *File, err <span class=\"type\">error</span>)</span><br></pre></td></tr></table></figure>\n\n<p>下面这个例子通过调用<code>os.Open</code>打开一个文件，如果出现错误，那么就会调用<code>log.Fatal</code>来输出错误信息：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">f, err := os.Open(<span class=\"string\">&quot;filename.ext&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>类似于<code>os.Open</code>函数，标准包中所有可能出错的API都会返回一个<code>error</code>变量，以方便错误处理，这个小节将详细地介绍<code>error</code>类型的设计，和讨论开发Web应用中如何更好地处理<code>error</code>。</p>\n<h2 id=\"Error类型\"><a href=\"#Error类型\" class=\"headerlink\" title=\"Error类型\"></a>Error类型</h2><p>error类型是一个接口类型，这是它的定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Error() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>error是一个内置的接口类型，可以在<code>/builtin/</code>包下面找到相应的定义。而在很多内部包里面用到的 <code>error</code>是<code>errors</code>包下面的实现的私有结构<code>errorString</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// errorString is a trivial implementation of error.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> errorString <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    s <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *errorString)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e.s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过<code>errors.New</code>把一个字符串转化为<code>errorString</code>，以得到一个满足接口<code>error</code>的对象，其内部实现如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// New returns an error that formats as the given text.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">(text <span class=\"type\">string</span>)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;errorString&#123;text&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这个例子演示了如何使用<code>errors.New</code>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sqrt</span><span class=\"params\">(f <span class=\"type\">float64</span>)</span></span> (<span class=\"type\">float64</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> f &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.New(<span class=\"string\">&quot;math: square root of negative number&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// implementation</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在下面的例子中，在调用Sqrt的时候传递的一个负数，然后就得到了<code>non-nil</code>的<code>error</code>对象，将此对象与<code>nil</code>比较，结果为<code>true</code>，所以<code>fmt.Println</code>(fmt包在处理error时会调用Error方法)被调用，以输出错误，请看下面调用的示例代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">f, err := Sqrt(<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义Error\"><a href=\"#自定义Error\" class=\"headerlink\" title=\"自定义Error\"></a>自定义Error</h2><p><code>error</code>是一个<code>interface</code>，所以在实现自己的包的时候，通过定义实现此接口的结构，就可以实现自己的错误定义，请看来自Json包的示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> SyntaxError <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    msg    <span class=\"type\">string</span> <span class=\"comment\">// 错误描述</span></span><br><span class=\"line\">    Offset <span class=\"type\">int64</span>  <span class=\"comment\">// 错误发生的位置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *SyntaxError)</span></span> Error() <span class=\"type\">string</span> &#123; <span class=\"keyword\">return</span> e.msg &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Offset</code>字段在调用<code>Error</code>的时候不会被打印，但可以通过类型断言获取错误类型，然后可以打印相应的错误信息，请看下面的例子:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> err := dec.Decode(&amp;val); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> serr, ok := err.(*json.SyntaxError); ok &#123;</span><br><span class=\"line\">        line, col := findLine(f, serr.Offset)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">&quot;%s:%d:%d: %v&quot;</span>, f.Name(), line, col, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，函数返回自定义错误时，返回值推荐设置为<code>error</code>类型，而非自定义错误类型，特别需要注意的是不应预声明自定义错误类型的变量。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Decode</span><span class=\"params\">()</span></span> *SyntaxError &#123; <span class=\"comment\">// 错误，将可能导致上层调用者err!=nil的判断永远为true。</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> err *SyntaxError     <span class=\"comment\">// 预声明错误变量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> 出错条件 &#123;</span><br><span class=\"line\">        err = &amp;SyntaxError&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err               <span class=\"comment\">// 错误，err永远等于非nil，导致上层调用者err!=nil的判断始终为true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原因见 <code>http://golang.org/doc/faq#nil_error</code> (需科学上网)</p>\n<p>上面例子简单的演示了如何自定义Error类型。但是如果还需要更复杂的错误处理呢？此时，来参考一下net包采用的方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> net</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Error <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">error</span></span><br><span class=\"line\">    Timeout() <span class=\"type\">bool</span>   <span class=\"comment\">// Is the error a timeout?</span></span><br><span class=\"line\">    Temporary() <span class=\"type\">bool</span> <span class=\"comment\">// Is the error temporary?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在调用的地方，通过类型断言<code>err</code>是不是<code>net.Error</code>,来细化错误的处理，例如下面的例子，如果一个网络发生临时性错误，那么将会sleep 1秒之后重试：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> nerr, ok := err.(net.Error); ok &amp;&amp; nerr.Temporary() &#123;</span><br><span class=\"line\">    time.Sleep(<span class=\"number\">1e9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误处理-1\"><a href=\"#错误处理-1\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>Go在错误处理上采用了与C类似的检查返回值的方式，而不是其他多数主流语言采用的异常方式，这造成了代码编写上的一个很大的缺点:错误处理代码的冗余，对于这种情况是通过复用检测函数来减少类似的代码。</p>\n<p>请看下面这个例子代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">&quot;/view&quot;</span>, viewRecord)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewRecord</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    c := appengine.NewContext(r)</span><br><span class=\"line\">    key := datastore.NewKey(c, <span class=\"string\">&quot;Record&quot;</span>, r.FormValue(<span class=\"string\">&quot;id&quot;</span>), <span class=\"number\">0</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    record := <span class=\"built_in\">new</span>(Record)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := datastore.Get(c, key, record); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        http.Error(w, err.Error(), <span class=\"number\">500</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := viewTemplate.Execute(w, record); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        http.Error(w, err.Error(), <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中获取数据和模板展示调用时都有检测错误，当有错误发生时，调用了统一的处理函数<code>http.Error</code>，返回给客户端500错误码，并显示相应的错误数据。但是当越来越多的<code>HandleFunc</code>加入之后，这样的错误处理逻辑代码就会越来越多，其实可以通过自定义路由器来缩减代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> appHandler <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(http.ResponseWriter, *http.Request)</span></span> <span class=\"type\">error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(fn appHandler)</span></span> ServeHTTP(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := fn(w, r); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        http.Error(w, err.Error(), <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面定义了自定义的路由器，然后可以通过如下方式来注册函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.Handle(<span class=\"string\">&quot;/view&quot;</span>, appHandler(viewRecord))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当请求<code>/view</code>的时候逻辑处理可以变成如下代码，和第一种实现方式相比较已经简单了很多。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewRecord</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    c := appengine.NewContext(r)</span><br><span class=\"line\">    key := datastore.NewKey(c, <span class=\"string\">&quot;Record&quot;</span>, r.FormValue(<span class=\"string\">&quot;id&quot;</span>), <span class=\"number\">0</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    record := <span class=\"built_in\">new</span>(Record)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := datastore.Get(c, key, record); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> viewTemplate.Execute(w, record)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子错误处理的时候所有的错误返回给用户的都是500错误码，然后打印出来相应的错误代码，其实可以把这个错误信息定义的更加友好，调试的时候也方便定位问题，可以自定义返回的错误类型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> appError <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Error   <span class=\"type\">error</span></span><br><span class=\"line\">    Message <span class=\"type\">string</span></span><br><span class=\"line\">    Code    <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样自定义路由器可以改成如下方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> appHandler <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(http.ResponseWriter, *http.Request)</span></span> *appError</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(fn appHandler)</span></span> ServeHTTP(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> e := fn(w, r); e != <span class=\"literal\">nil</span> &#123; <span class=\"comment\">// e is *appError, not os.Error.</span></span><br><span class=\"line\">        c := appengine.NewContext(r)</span><br><span class=\"line\">        c.Errorf(<span class=\"string\">&quot;%v&quot;</span>, e.Error)</span><br><span class=\"line\">        http.Error(w, e.Message, e.Code)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样修改完自定义错误之后，逻辑处理可以改成如下方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewRecord</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> *appError &#123;</span><br><span class=\"line\">    c := appengine.NewContext(r)</span><br><span class=\"line\">    key := datastore.NewKey(c, <span class=\"string\">&quot;Record&quot;</span>, r.FormValue(<span class=\"string\">&quot;id&quot;</span>), <span class=\"number\">0</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    record := <span class=\"built_in\">new</span>(Record)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := datastore.Get(c, key, record); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &amp;appError&#123;err, <span class=\"string\">&quot;Record not found&quot;</span>, <span class=\"number\">404</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := viewTemplate.Execute(w, record); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &amp;appError&#123;err, <span class=\"string\">&quot;Can&#x27;t display record&quot;</span>, <span class=\"number\">500</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上所示，在访问view的时候可以根据不同的情况获取不同的错误码和错误信息，虽然这个和第一个版本的代码量差不多，但是这个显示的错误更加明显，提示的错误信息更加友好，扩展性也比第一个更好。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在程序设计中，容错是相当重要的一部分工作，在Go中它是通过错误处理来实现的，error虽然只是一个接口，但是其变化却可以有很多，可以根据自己的需求来实现不同的处理。</p>\n","categories":["DEV"],"tags":["Golang"]},{"title":"k8s企业级DevOps实践-Kubernetes架构、Kubernetes集群安装(两种方式)","url":"/forward/57e2aa11.html","content":"<h2 id=\"Kubernetes架构\"><a href=\"#Kubernetes架构\" class=\"headerlink\" title=\"Kubernetes架构\"></a>Kubernetes架构</h2><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>学习<code>kubernetes</code>的架构及工作流程，使用<code>Deployment</code>管理<code>Pod</code>生命周期，实现服务不中断的滚动更新，通过服务发现来实现集群内部的服务间访问，并通过<code>ingress-nginx</code>实现外部使用域名访问集群内部的服务。</p>\n<p>目标让<code>Django demo</code>项目可以运行在<code>k8s</code>集群中，可以使用域名进行服务的访问。</p>\n<ul>\n<li>理解架构及核心组件</li>\n<li>使用<code>kubeadm</code>快速搭建集群</li>\n<li>运行第一个<code>Pod</code>应用</li>\n<li><code>Pod</code>进阶</li>\n<li><code>Pod</code>控制器的使用</li>\n<li>实现服务与<code>Node</code>绑定的几种方式</li>\n<li>负载均衡与服务发现</li>\n<li>使用<code>Ingress</code>实现集群服务的7层代理</li>\n<li><code>Django</code>项目k8s落地实践：<a href=\"/forward/3ea5fff1.html\">网页链接</a></li>\n<li>基于ELK实现<code>kubernetes</code>集群的日志平台可参考：<a href=\"/forward/47eea66c.html\">网页链接</a></li>\n<li>集群认证与授权</li>\n</ul>\n<h3 id=\"纯容器模式的问题\"><a href=\"#纯容器模式的问题\" class=\"headerlink\" title=\"纯容器模式的问题\"></a>纯容器模式的问题</h3><ol>\n<li>业务容器数量庞大，哪些容器部署在哪些节点，使用了哪些端口，如何记录、管理，需要登录到每台机器去管理？</li>\n<li>跨主机通信，多个机器中的容器之间相互调用如何做，<code>iptables</code>规则手动维护？</li>\n<li>跨主机容器间互相调用，配置如何写？写死固定<code>IP+端口</code>？</li>\n<li>如何实现业务高可用？多个容器对外提供服务如何实现负载均衡？</li>\n<li>容器的业务中断了，如何可以感知到，感知到以后，如何自动启动新的容器?</li>\n<li>如何实现滚动升级保证业务的连续性？</li>\n<li>……</li>\n</ol>\n<h3 id=\"容器调度管理平台\"><a href=\"#容器调度管理平台\" class=\"headerlink\" title=\"容器调度管理平台\"></a>容器调度管理平台</h3><ul>\n<li>Docker Swarm</li>\n<li>Mesos</li>\n<li>Google Kubernetes</li>\n</ul>\n<p>2017 年开始<a href=\"https://kubernetes.io/\">Kubernetes</a>凭借强大的容器集群管理功能, 逐步占据市场,目前在容器编排领域一枝独秀</p>\n<h2 id=\"kubernetes-介绍\"><a href=\"#kubernetes-介绍\" class=\"headerlink\" title=\"kubernetes 介绍\"></a>kubernetes 介绍</h2><p>kubernetes，简称 K8s，是用 8 代替 8 个字符“ubernete”而成的缩写。是一个开源 的，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的 应用简单并且高效（powerful）,Kubernetes 提供了应用部署，规划，更新，维护的一种 机制。</p>\n<p>传统的应用部署方式是通过插件或脚本来安装应用。这样做的缺点是应用的运行、配 置、管理、所有生存周期将与当前操作系统绑定，这样做并不利于应用的升级更新/回滚等 操作，当然也可以通过创建虚拟机的方式来实现某些功能，但是虚拟机非常重，并不利于可移植性。 </p>\n<p>新的方式是通过部署容器方式实现，每个容器之间互相隔离，每个容器有自己的文件 系统 ，容器之间进程不会相互影响，能区分计算资源。相对于虚拟机，<u>容器能快速部署， 由于容器与底层设施、机器文件系统解耦的，所以它能在不同云、不同版本操作系统间进 行迁移</u>。 </p>\n<p>容器占用资源少、部署快，每个应用可以被打包成一个容器镜像，每个应用与容器间 成一对一关系也使容器有更大优势，使用容器可以在 build 或 release 的阶段，为应用创 建容器镜像，因为每个应用不需要与其余的应用堆栈组合，也不依赖于生产环境基础结构， 这使得从研发到测试、生产能提供一致环境。类似地，容器比虚拟机轻量、更“透明”， 这更便于监控和管理。 </p>\n<p>Kubernetes 是 <u>Google 开源的一个容器编排引擎，它支持自动化部署、大规模可伸缩、 应用容器化管理。</u>在生产环境中部署一个应用程序时，通常要部署该应用的多个实例以便 对应用请求进行负载均衡。 </p>\n<p>在 Kubernetes 中，我们可以创建多个容器，每个容器里面运行一个应用实例，然后通 过内置的负载均衡策略，实现对这一组应用实例的管理、发现、访问，而这些细节都不需要运维人员去进行复杂的手工配置和处理。</p>\n<h2 id=\"kubernetes-功能\"><a href=\"#kubernetes-功能\" class=\"headerlink\" title=\"kubernetes 功能\"></a>kubernetes 功能</h2><ul>\n<li>自动装箱（基于容器对应用运行环境的资源配置要求自动部署应用容器）</li>\n<li>自我修复（<ul>\n<li>当容器失败时，会对容器进行重启</li>\n<li>当所部署的 Node 节点有问题时，会对容器进行重新部署和重新调度</li>\n<li>当容器未通过监控检查时，会关闭此容器直到容器正常运行时，才会对外提供服务）</li>\n</ul>\n</li>\n<li>水平扩展（通过简单的命令、用户 UI 界面或基于 CPU 等资源使用情况，对应用容器进行规模扩大 或规模剪裁）</li>\n<li>服务发现（用户不需使用额外的服务发现机制，就能够基于 Kubernetes 自身能力实现服务发现和 负载均衡）</li>\n<li>滚动更新（根据应用的变化，对应用容器运行的应用，进行一次性或批量式更新）</li>\n<li>版本回退（根据应用部署情况，对应用容器运行的应用，进行历史版本即时回退）</li>\n<li>密钥和配置管理（在不需要重新构建镜像的情况下，可以部署和更新密钥和应用配置，类似热部署。）</li>\n<li>存储编排（自动实现存储系统挂载及应用，特别对有状态应用实现数据持久化非常重要 存储系统可以来自于本地目录、网络存储(NFS、Gluster、Ceph 等)、公共云存储服务）</li>\n<li>批处理（提供一次性任务，定时任务；满足批量数据处理和分析的场景）</li>\n</ul>\n<h3 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h3><p>区分组件与资源<br><img src=\"/images/pasted-37.png\" alt=\"k8s架构\"></p>\n<h3 id=\"控制组件（中央）\"><a href=\"#控制组件（中央）\" class=\"headerlink\" title=\"控制组件（中央）\"></a>控制组件（中央）</h3><p>控制平面的组件做出有关群集的全局决策（例如，调度），以及检测和响应群集事件。</p>\n<p>控制平面组件可以在群集中的任何计算机上运行。为简单起见，设置脚本通常在同一台计算机上启动所有控制平面组件，并且不在该计算机上运行用户容器。</p>\n<ul>\n<li><code>kubectl</code>: 命令行接口，用于对 Kubernetes 集群运行命令 <a href=\"https://kubernetes.io/zh/docs/reference/kubectl/\">文档链接</a> </li>\n<li><code>kube-apiserver</code> 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；</li>\n<li><code>etcd</code>分布式高性能键值数据库,存储整个集群的所有元数据；</li>\n<li><code>kube-scheduler</code>调度器,负责把业务容器调度到最合适的Node节点；</li>\n<li><code>kube-controller-manager</code>控制器管理,确保集群资源按照期望的方式运行<ul>\n<li>Node Controller: 负责在节点出现故障时进行通知和响应。</li>\n<li>Job Controller: 监视代表一次性任务的作业对象，然后创建Pod以运行这些任务以完成任务。</li>\n<li>Endpoints Controller: 填充Endpoints对象（即，加入Services＆Pods）。</li>\n<li>Service Account &amp; Token Controllers: 为新的名称空间创建默认帐户和API访问令牌。</li>\n<li>Replication Controller: 保证Pod持续运行，并且在任何时候都有指定数量的Pod副本，在此基础上提供一些高级特性，比如滚动升级和弹性伸缩</li>\n<li>Namespace Controller: 负责<a href=\"/forward/61316209.html#Namespace-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB\">Namespace</a>命名空间的删除。</li>\n<li>ResourceQuota Controller: 确保了指定的资源对象在任何时候都不会超量占用系统物理资源，避免了由于某些业务进程的设计或实现的缺陷导致整个系统运行紊乱，甚至意外宕机</li>\n<li>Service Controller</li>\n<li>…等</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/pasted-38.png\" alt=\"k8s架构\"></p>\n<h3 id=\"节点组件（地方）\"><a href=\"#节点组件（地方）\" class=\"headerlink\" title=\"节点组件（地方）\"></a>节点组件（地方）</h3><ul>\n<li><code>kubelet</code>运行在每个节点上的主要的“节点代理”个节点上的主要的“节点代理”<ul>\n<li>Pod 管理：kubelet 定期从所监听的数据源获取节点上 pod/container 的期望状态（运行什么容器、运行的副本数量、网络或者存储如何配置等等），并调用对应的容器平台接口达到这个状态。</li>\n<li>容器健康检查：kubelet 创建了容器之后还要查看容器是否正常运行，如果容器运行出错，就要根据 pod 设置的重启策略进行处理。</li>\n<li>容器监控：kubelet 会监控所在节点的资源使用情况，并定时向 master 报告，资源使用数据都是通过 cAdvisor 获取的。知道整个集群所有节点的资源情况，对于 pod 的调度和正常运行至关重要。</li>\n</ul>\n</li>\n<li><code>kube-proxy</code>部署在每个Node节点上，它是实现Kubernetes Service的通信与负载均衡机制的重要组件; kube-proxy负责为Pod创建代理服务，从apiserver获取所有server信息，并根据server信息创建代理服务，实现server到Pod的请求路由和转发，从而实现K8s层级的虚拟转发网络。</li>\n<li>CNI实现: 通用网络接口, 我们使用flannel来作为k8s集群的网络插件, 实现跨节点通信</li>\n<li>…等</li>\n</ul>\n<h3 id=\"大致工作流程\"><a href=\"#大致工作流程\" class=\"headerlink\" title=\"大致工作流程\"></a>大致工作流程</h3><p><img src=\"/images/pasted-39.png\" alt=\"k8s工作过程\"></p>\n<ol>\n<li>用户准备一个资源文件（记录了业务应用的名称、镜像地址等信息），通过调用APIServer执行创建<a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods/\">Pod</a></li>\n<li>APIServer收到用户的Pod创建请求，将Pod信息写入到etcd中</li>\n<li>调度器通过list-watch的方式，发现有新的pod数据，但是这个pod还没有绑定到某一个节点(Node)中</li>\n<li>调度器通过调度算法，计算出最适合该pod运行的节点(Node)，并调用APIServer，把信息更新到etcd中</li>\n<li>kubelet同样通过list-watch方式，发现有新的pod调度到本机的节点了，因此调用容器运行时，去根据pod的描述信息，拉取镜像，启动容器，同时生成事件信息</li>\n<li>同时，把容器的信息、事件及状态也通过APIServer写入到etcd中</li>\n</ol>\n<p><strong>翻译：</strong></p>\n<ol>\n<li>老板提需求(创建Pod)。</li>\n<li>助理(kube-apiserver)收到指令并发布任务并将任务置为待完成(写入etcd)。</li>\n<li>技术总监(kube-scheduler)将任务分配给最合适的部门(Node)做。</li>\n<li>技术总监(kube-scheduler)将任务分配好了，反馈给老板助理更新任务状态为已分配(写入etcd)。</li>\n<li>部门经理(kubelet)再次跟老板助理(kube-apiserver)确认需求细节</li>\n<li>部门经理(kubelet)安排员工(调用容器)完成需求，并将结果直接汇报给老板助理(kube-apiserver)，老板助理将任务状态更新为已完成(写入etcd)</li>\n</ol>\n<p><strong>注意：</strong>只有APIServer才有能更新数据</p>\n<h2 id=\"部署Kubernetes（kubeadm方式）\"><a href=\"#部署Kubernetes（kubeadm方式）\" class=\"headerlink\" title=\"部署Kubernetes（kubeadm方式）\"></a>部署Kubernetes（kubeadm方式）</h2><h3 id=\"节点规划\"><a href=\"#节点规划\" class=\"headerlink\" title=\"节点规划\"></a>节点规划</h3><p>部署k8s集群的节点按照用途可以划分为如下2类角色：</p>\n<ul>\n<li><strong>master</strong>：集群的master节点，集群的初始化节点，基础配置不低于2C4G</li>\n<li><strong>slave</strong>：集群的slave节点，可以多台，基础配置不低于2C4G</li>\n</ul>\n<p><strong>本例会演示slave节点的添加，会部署一台master+2台slave</strong>，节点规划如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">节点ip</th>\n<th align=\"center\">角色</th>\n<th align=\"center\">部署组件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">k8s-master</td>\n<td align=\"center\">192.168.56.10</td>\n<td align=\"center\">master</td>\n<td align=\"center\">etcd, kube-apiserver, kube-controller-manager, kubectl, kubeadm, kubelet, kube-proxy, flannel</td>\n</tr>\n<tr>\n<td align=\"center\">k8s-slave1</td>\n<td align=\"center\">192.168.56.20</td>\n<td align=\"center\">slave</td>\n<td align=\"center\">kubectl, kubelet, kube-proxy, flannel</td>\n</tr>\n<tr>\n<td align=\"center\">k8s-slave2</td>\n<td align=\"center\">192.168.56.30</td>\n<td align=\"center\">slave</td>\n<td align=\"center\">kubectl, kubelet, kube-proxy, flannel</td>\n</tr>\n</tbody></table>\n<h3 id=\"组件版本\"><a href=\"#组件版本\" class=\"headerlink\" title=\"组件版本\"></a>组件版本</h3><table>\n<thead>\n<tr>\n<th align=\"center\">组件</th>\n<th align=\"center\">版本</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CentOS</td>\n<td align=\"center\">7.9.2009 (Core)</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Kernel</td>\n<td align=\"center\">3.10.0-1160.24.1.el7.x86_64</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">etcd</td>\n<td align=\"center\">3.3.15</td>\n<td align=\"left\">使用容器方式部署，默认数据挂载到本地路径</td>\n</tr>\n<tr>\n<td align=\"center\">coredns</td>\n<td align=\"center\">1.6.2</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">kubeadm</td>\n<td align=\"center\">v1.16.2</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">kubectl</td>\n<td align=\"center\">v1.16.2</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">kubelet</td>\n<td align=\"center\">v1.16.2</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">kube-proxy</td>\n<td align=\"center\">v1.16.2</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">flannel</td>\n<td align=\"center\">v0.11.0</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><h4 id=\"设置hosts解析\"><a href=\"#设置hosts解析\" class=\"headerlink\" title=\"设置hosts解析\"></a>设置hosts解析</h4><p>操作节点：所有节点（<code>k8s-master，k8s-slave</code>）均需执行</p>\n<ul>\n<li><strong>修改hostname</strong><br>hostname必须只能包含小写字母、数字、”,”、”-“，且开头结尾必须是小写字母或数字</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在master节点</span></span><br><span class=\"line\">$ hostnamectl set-hostname k8s-master <span class=\"comment\">#设置master节点的hostname</span></span><br><span class=\"line\">$ bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在slave-1节点</span></span><br><span class=\"line\">$ hostnamectl set-hostname k8s-slave1 <span class=\"comment\">#设置slave1节点的hostname</span></span><br><span class=\"line\">$ bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在slave-2节点</span></span><br><span class=\"line\">$ hostnamectl set-hostname k8s-slave2 <span class=\"comment\">#设置slave2节点的hostname</span></span><br><span class=\"line\">$ bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>添加hosts解析</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> &gt;&gt;/etc/hosts&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">192.168.56.10 k8s-master</span></span><br><span class=\"line\"><span class=\"string\">192.168.56.20 k8s-slave1</span></span><br><span class=\"line\"><span class=\"string\">192.168.56.30 k8s-slave2</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调整系统配置\"><a href=\"#调整系统配置\" class=\"headerlink\" title=\"调整系统配置\"></a>调整系统配置</h4><p>操作节点： 所有的master和slave节点（<code>k8s-master,k8s-slave</code>）需要执行</p>\n<blockquote>\n<p>下述操作均以k8s-master为例，其他节点均是相同的操作（ip和hostname的值换成对应机器的真实值）</p>\n</blockquote>\n<ul>\n<li><strong>设置安全组开放端口</strong></li>\n</ul>\n<p>如果节点间无安全组限制（内网机器间可以任意访问），可以忽略，否则，至少保证如下端口可通：<br>k8s-master节点：TCP：6443，2379，2380，60080，60081，UDP协议端口全部打开<br>k8s-slave节点：UDP协议端口全部打开</p>\n<ul>\n<li><strong>设置iptables</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>关闭swap</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">swapoff -a</span><br><span class=\"line\"><span class=\"comment\"># 防止开机自动挂载 swap 分区</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/ swap / s/^\\(.*\\)$/#\\1/g&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>关闭selinux和防火墙</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -ri <span class=\"string\">&#x27;s#(SELINUX=).*#\\1disabled#&#x27;</span> /etc/selinux/config</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld &amp;&amp; systemctl stop firewalld</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>修改内核参数</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF &gt;  /etc/sysctl.d/k8s.conf</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward=1</span></span><br><span class=\"line\"><span class=\"string\">vm.max_map_count=262144</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">modprobe br_netfilter</span><br><span class=\"line\">sysctl -p /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>设置yum源</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -o /etc/yum.repos.d/Centos-7.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">$ curl -o /etc/yum.repos.d/docker-ce.repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">$ yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h4><p>操作节点： 所有节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 查看所有的可用版本</span></span><br><span class=\"line\">$ yum list docker-ce --showduplicates | <span class=\"built_in\">sort</span> -r</span><br><span class=\"line\"><span class=\"comment\">##安装旧版本 yum install docker-ce-cli-18.09.9-3.el7  docker-ce-18.09.9-3.el7</span></span><br><span class=\"line\"><span class=\"comment\">## 安装源里最新版本</span></span><br><span class=\"line\">$ yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 配置docker加速</span></span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;insecure-registries&quot;</span>: [    </span><br><span class=\"line\">    <span class=\"string\">&quot;192.168.56.10:5000&quot;</span> </span><br><span class=\"line\">  ],                          </span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span> : [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://8xpk5wnt.mirror.aliyuncs.com&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">## 启动docker</span></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> --now docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署kubernetes（kubeadm方式）\"><a href=\"#部署kubernetes（kubeadm方式）\" class=\"headerlink\" title=\"部署kubernetes（kubeadm方式）\"></a>部署kubernetes（kubeadm方式）</h3><h4 id=\"安装-kubeadm-kubelet-kubectl\"><a href=\"#安装-kubeadm-kubelet-kubectl\" class=\"headerlink\" title=\"安装 kubeadm, kubelet, kubectl\"></a>安装 kubeadm, kubelet, kubectl</h4><p>操作节点： 所有的master和slave节点(<code>k8s-master,k8s-slave</code>) 需要执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 指定源安装</span></span><br><span class=\"line\">$ yum install -y kubelet-1.16.2 kubeadm-1.16.2 kubectl-1.16.2 --disableexcludes=kubernetes</span><br><span class=\"line\"><span class=\"comment\">## 查看kubeadm 版本</span></span><br><span class=\"line\">$ kubeadm version</span><br><span class=\"line\"><span class=\"comment\">## 设置kubelet开机启动</span></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> kubelet </span><br></pre></td></tr></table></figure>\n<h4 id=\"初始化配置文件\"><a href=\"#初始化配置文件\" class=\"headerlink\" title=\"初始化配置文件\"></a>初始化配置文件</h4><p>操作节点： 只在master节点（<code>k8s-master</code>）执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubeadm config <span class=\"built_in\">print</span> init-defaults &gt; kubeadm.yaml</span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> kubeadm.yaml</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">bootstrapTokens:</span><br><span class=\"line\">- <span class=\"built_in\">groups</span>:</span><br><span class=\"line\">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\">  token: abcdef.0123456789abcdef</span><br><span class=\"line\">  ttl: 24h0m0s</span><br><span class=\"line\">  usages:</span><br><span class=\"line\">  - signing</span><br><span class=\"line\">  - authentication</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: 192.168.56.10  <span class=\"comment\"># apiserver地址，因为单master，所以配置master的节点内网IP。高可用配置LB</span></span><br><span class=\"line\">  bindPort: 6443</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  name: k8s-master</span><br><span class=\"line\">  taints:</span><br><span class=\"line\">  - effect: NoSchedule</span><br><span class=\"line\">    key: node-role.kubernetes.io/master</span><br><span class=\"line\">---</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  <span class=\"built_in\">local</span>:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers  <span class=\"comment\"># 修改成阿里镜像源</span></span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.16.2</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16  <span class=\"comment\"># Pod 网段，flannel插件需要使用这个网段</span></span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br><span class=\"line\">scheduler: &#123;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于上面的资源清单的文档比较杂，要想完整了解上面的资源对象对应的属性，可以查看对应的 godoc 文档，地址: <a href=\"https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2%E3%80%82\">https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2。</a> </p>\n</blockquote>\n<h4 id=\"提前下载镜像\"><a href=\"#提前下载镜像\" class=\"headerlink\" title=\"提前下载镜像\"></a>提前下载镜像</h4><p>操作节点：只在master节点（<code>k8s-master</code>）执行，带*号要在所有节点执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看需要使用的镜像列表,若无问题，将得到如下列表</span></span><br><span class=\"line\">$ kubeadm config images list --config kubeadm.yaml</span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-apiserver:v1.16.0</span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-controller-manager:v1.16.0</span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-scheduler:v1.16.0</span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-proxy:v1.16.0 *</span><br><span class=\"line\">registry.aliyuncs.com/google_containers/pause:3.1 *</span><br><span class=\"line\">registry.aliyuncs.com/google_containers/etcd:3.3.15-0</span><br><span class=\"line\">registry.aliyuncs.com/google_containers/coredns:1.6.2</span><br><span class=\"line\"><span class=\"comment\"># 提前下载镜像到本地</span></span><br><span class=\"line\">$ kubeadm config images pull --config kubeadm.yaml</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/kube-apiserver:v1.16.0</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/kube-controller-manager:v1.16.0</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/kube-scheduler:v1.16.0</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/kube-proxy:v1.16.0</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/pause:3.1</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/etcd:3.3.15-0</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/coredns:1.6.2</span><br></pre></td></tr></table></figure>\n\n<p>注意如果出现不可用的情况，请使用如下方式来代替：</p>\n<ol>\n<li>还原kubeadm.yaml的imageRepository</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">imageRepository:</span> <span class=\"string\">k8s.gcr.io</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看使用的镜像源</span></span><br><span class=\"line\"><span class=\"string\">kubeadm</span> <span class=\"string\">config</span> <span class=\"string\">images</span> <span class=\"string\">list</span> <span class=\"string\">--config</span> <span class=\"string\">kubeadm.yaml</span></span><br><span class=\"line\"><span class=\"string\">k8s.gcr.io/kube-apiserver:v1.16.0</span></span><br><span class=\"line\"><span class=\"string\">k8s.gcr.io/kube-controller-manager:v1.16.0</span></span><br><span class=\"line\"><span class=\"string\">k8s.gcr.io/kube-scheduler:v1.16.0</span></span><br><span class=\"line\"><span class=\"string\">k8s.gcr.io/kube-proxy:v1.16.0</span></span><br><span class=\"line\"><span class=\"string\">k8s.gcr.io/pause:3.1</span></span><br><span class=\"line\"><span class=\"string\">k8s.gcr.io/etcd:3.3.15-0</span></span><br><span class=\"line\"><span class=\"string\">k8s.gcr.io/coredns:1.6.2</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用docker hub中的镜像源来下载，注意上述列表中要加上处理器架构，通常我们使用的虚拟机都是amd64</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker pull mirrorgooglecontainers/kube-scheduler-amd64:v1.16.0</span><br><span class=\"line\">$ docker pull mirrorgooglecontainers/etcd-amd64:3.3.15-0</span><br><span class=\"line\">$ docker pull coredns/coredns:1.6.2 </span><br><span class=\"line\">...</span><br><span class=\"line\">docker tag  b305571ca60a k8s.gcr.io/kube-apiserver:v1.16.0</span><br><span class=\"line\">docker tag  c21b0c7400f9 k8s.gcr.io/kube-proxy:v1.16.0</span><br><span class=\"line\">docker tag  06a629a7e51c k8s.gcr.io/kube-controller-manager:v1.16.0</span><br><span class=\"line\">docker tag  301ddc62b80b k8s.gcr.io/kube-scheduler:v1.16.0</span><br><span class=\"line\">docker tag  b2756210eeab  k8s.gcr.io/etcd:3.3.15-0</span><br><span class=\"line\">docker tag  bf261d157914 k8s.gcr.io/coredns:1.6.2</span><br><span class=\"line\">docker tag  da86e6ba6ca1 k8s.gcr.io/pause:3.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"初始化master节点\"><a href=\"#初始化master节点\" class=\"headerlink\" title=\"初始化master节点\"></a>初始化master节点</h4><p>操作节点：只在master节点（<code>k8s-master</code>）执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm init --config kubeadm.yaml</span><br></pre></td></tr></table></figure>\n<p>若初始化成功后，最后会提示如下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">  sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">  sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">Then you can <span class=\"built_in\">join</span> any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.56.10:6443 --token abcdef.0123456789abcdef \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:2e504f40900e6e0708adbffb526b9084a48ac93719c09469ca7d58ac6f5dda01 </span><br></pre></td></tr></table></figure>\n<p>接下来按照上述提示信息操作，配置kubectl客户端的认证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>⚠️注意：</strong>此时使用 kubectl get nodes查看节点应该处于notReady状态，因为还未配置网络插件</p>\n<p>若执行初始化过程中出错，根据错误信息调整后，执行kubeadm reset后再次执行init操作即可</p>\n</blockquote>\n<h4 id=\"添加slave节点到集群中\"><a href=\"#添加slave节点到集群中\" class=\"headerlink\" title=\"添加slave节点到集群中\"></a>添加slave节点到集群中</h4><p>操作节点：所有的slave节点（<code>k8s-slave</code>）需要执行<br>在每台slave节点，执行如下命令，该命令是在kubeadm init成功后提示信息中打印出来的，需要替换成实际init后打印出的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.56.10:6443 --token abcdef.0123456789abcdef \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:2e504f40900e6e0708adbffb526b9084a48ac93719c09469ca7d58ac6f5dda01 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## master验证</span></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get node</span></span><br><span class=\"line\">NAME         STATUS     ROLES    AGE     VERSION</span><br><span class=\"line\">k8s-master   NotReady   master   6m10s   v1.16.2</span><br><span class=\"line\">k8s-slave1   NotReady   &lt;none&gt;   60s     v1.16.2</span><br><span class=\"line\">k8s-slave2   NotReady   &lt;none&gt;   62s     v1.16.2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## slave验证</span></span><br><span class=\"line\">[root@k8s-slave1 ~]<span class=\"comment\"># journalctl -fu kubelet</span></span><br><span class=\"line\">4月 26 00:19:07 k8s-slave1 kubelet[1976]: E0426 00:19:07.399992    1976 kubelet.go:2187] Container runtime network not <span class=\"built_in\">read</span></span><br><span class=\"line\">y: NetworkReady=<span class=\"literal\">false</span> reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</span><br><span class=\"line\">^C</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-slave2 ~]<span class=\"comment\"># journalctl -fu kubelet</span></span><br><span class=\"line\">4月 26 00:19:00 k8s-slave2 kubelet[2247]: E0426 00:19:00.397872    2247 kubelet.go:2187] Container runtime network not ready: NetworkReady=<span class=\"literal\">false</span> reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</span><br><span class=\"line\">^C</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装flannel插件\"><a href=\"#安装flannel插件\" class=\"headerlink\" title=\"安装flannel插件\"></a>安装flannel插件</h4><p>操作节点：只在master节点（<code>k8s-master</code>）执行</p>\n<ul>\n<li>下载flannel的yaml文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改配置，指定网卡名称，大概在文件的和170行，190行，添加一行配置：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi kube-flannel.yml</span><br><span class=\"line\">...            </span><br><span class=\"line\">      initContainers:</span><br><span class=\"line\">      - name: install-cni</span><br><span class=\"line\">        image: 192.168.56.10:5000/coreos/flannel:v0.11.0-amd64</span><br><span class=\"line\">        <span class=\"built_in\">command</span>:</span><br><span class=\"line\">        - <span class=\"built_in\">cp</span></span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - -f</span><br><span class=\"line\">        - /etc/kube-flannel/cni-conf.json</span><br><span class=\"line\">        - /etc/cni/net.d/10-flannel.conflist</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: cni</span><br><span class=\"line\">          mountPath: /etc/cni/net.d</span><br><span class=\"line\">        - name: flannel-cfg</span><br><span class=\"line\">          mountPath: /etc/kube-flannel/</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: kube-flannel</span><br><span class=\"line\">        image: 192.168.56.10:5000/coreos/flannel:v0.11.0-amd64</span><br><span class=\"line\">        <span class=\"built_in\">command</span>:</span><br><span class=\"line\">        - /opt/bin/flanneld</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - --ip-masq</span><br><span class=\"line\">        - --kube-subnet-mgr</span><br><span class=\"line\">        - --iface=enp0s8 <span class=\"comment\"># 如果机器存在多网卡的话，指定内网网卡的名称，默认不指定的话会找第一块网</span></span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: <span class=\"string\">&quot;100m&quot;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行安装flannel网络插件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先拉取镜像,此过程国内速度比较慢</span></span><br><span class=\"line\">$ docker pull quay.io/coreos/flannel:v0.11.0-amd64</span><br><span class=\"line\"><span class=\"comment\"># 执行flannel安装</span></span><br><span class=\"line\">$ kubectl create -f kube-flannel.yml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl -n kube-system get po -o wide <span class=\"comment\">#检查状态</span></span><br><span class=\"line\">kubectl delete -f kube-flannel.yml <span class=\"comment\">#删除</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"master节点是否可调度（可选）\"><a href=\"#master节点是否可调度（可选）\" class=\"headerlink\" title=\"master节点是否可调度（可选）\"></a>master节点是否可调度（可选）</h4><p>操作节点：<code>k8s-master</code></p>\n<p>默认部署成功后，master节点无法调度业务pod，如需设置master节点也可以参与pod的调度，需执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl taint node k8s-master node-role.kubernetes.io/master:NoSchedule-</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证集群\"><a href=\"#验证集群\" class=\"headerlink\" title=\"验证集群\"></a>验证集群</h4><p>操作节点： 在master节点（<code>k8s-master</code>）执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes  <span class=\"comment\">#观察集群节点是否全部Ready</span></span><br><span class=\"line\">NAME         STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">k8s-master   Ready    master   56m   v1.16.2</span><br><span class=\"line\">k8s-slave1   Ready    &lt;none&gt;   50m   v1.16.2</span><br><span class=\"line\">k8s-slave2   Ready    &lt;none&gt;   50m   v1.16.2</span><br></pre></td></tr></table></figure>\n\n<p>创建测试nginx服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl run  test-nginx --image=nginx:alpine</span><br></pre></td></tr></table></figure>\n<p>查看pod是否创建成功，并访问pod ip测试是否可用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl get po -o wide</span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS   AGE   IP           NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">test-nginx-5bd8859b98-pvgv4   1/1     Running   0          9s    10.244.1.2   k8s-slave2   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># curl 10.244.1.2</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        width: 35em;</span><br><span class=\"line\">        margin: 0 auto;</span><br><span class=\"line\">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you <span class=\"keyword\">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署dashboard\"><a href=\"#部署dashboard\" class=\"headerlink\" title=\"部署dashboard\"></a>部署dashboard</h4><ul>\n<li><strong>部署服务</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推荐使用下面这种方式</span></span><br><span class=\"line\">$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta5/aio/deploy/recommended.yaml</span><br><span class=\"line\">$ vi recommended.yaml</span><br><span class=\"line\"><span class=\"comment\"># 修改Service为NodePort类型</span></span><br><span class=\"line\">......</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  name: kubernetes-dashboard</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 443</span><br><span class=\"line\">      targetPort: 8443</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: NodePort  <span class=\"comment\"># 加上type=NodePort变成NodePort类型的服务</span></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>修改镜像地址：</strong></p>\n<ul>\n<li>dashboard:v2.0.0-beta5</li>\n<li>metrics-scraper:v1.0.1</li>\n</ul>\n</li>\n<li><p><strong>查看访问地址，本例为30133端口</strong></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl create -f recommended.yaml</span></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get ns</span></span><br><span class=\"line\">NAME                   STATUS   AGE</span><br><span class=\"line\">default                Active   69m</span><br><span class=\"line\">kube-node-lease        Active   69m</span><br><span class=\"line\">kube-public            Active   69m</span><br><span class=\"line\">kube-system            Active   69m</span><br><span class=\"line\">kubernetes-dashboard   Active   50s</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl -n kubernetes-dashboard get svc</span></span><br><span class=\"line\">NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class=\"line\">dashboard-metrics-scraper   ClusterIP   10.103.137.107   &lt;none&gt;        8000/TCP        116s</span><br><span class=\"line\">kubernetes-dashboard        NodePort    10.100.204.135   &lt;none&gt;        443:31835/TCP   116s</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl -n kubernetes-dashboard get pod</span></span><br><span class=\"line\">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">dashboard-metrics-scraper-8477788997-5l27q   1/1     Running   0          2m17s</span><br><span class=\"line\">kubernetes-dashboard-5f468cc868-svbbq        1/1     Running   0          2m17s</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-40.png\" alt=\"k8s install\"></p>\n<p><strong>Google浏览器出现：</strong>您目前无法访问 <code>XX.XX.XX.XX</code>，因为此网站发送了 Google Chrome 无法处理的杂乱凭据<br>在Chrome该页面上鼠标点击当前页面任意位置，直接键盘输入这11个字符：<code>thisisunsafe</code>（输入时是不显示任何字符的）</p>\n<ul>\n<li><strong>创建ServiceAccount进行访问</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi admin.conf</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admin</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    rbac.authorization.kubernetes.io/autoupdate: <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: cluster-admin</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: admin</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admin</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl create -f admin.conf</span></span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/admin created</span><br><span class=\"line\">serviceaccount/admin created</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl -n kubernetes-dashboard get secret |grep admin-token</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl -n kubernetes-dashboard describe secret admin-token-w8nv5</span></span><br><span class=\"line\">Name:         admin-token-w8nv5</span><br><span class=\"line\">Namespace:    kubernetes-dashboard</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: admin</span><br><span class=\"line\">              kubernetes.io/service-account.uid: a7e764ad-45c4-474e-acff-fb3f9dd4243a</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  20 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6ImU0LTd4NWJnZG1CNHhEWXdVRXpUclpCc08zNmtSWkZhVWp4bW5YaDFtQ1EifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi10b2tlbi13OG52NSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJhZG1pbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImE3ZTc2NGFkLTQ1YzQtNDc0ZS1hY2ZmLWZiM2Y5ZGQ0MjQzYSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbiJ9.GVt0KeNQv8CR3_VIYEgApw-GYQ_celnS4Zop-SBVyfqsQCTVZU992DsATCyFmH1I-Wys8EooqciPD1aGxu6SLkPnb_JJdNPHotHvBYleDUEqt4k0YOQW2mnAHuT2I2nbaAopsyojfg_ur94cpPDNkZH9wQAnQH5bkqS63-KqkrOh-3GXf0yd1Kva-WFJEqMj_BBYjbOfYxR655HD4NnFPGLmPHNvSmXZsGA1Zlq--tys6kLFPDLozK1lR4l69f5PaznVTHkqKQBFmNQ8QLyXP6bKO6TxQBeltW51DS47_W4nso5vU8zPgNbFzaNSiGEM2PmdBQ7IE3aUjPgJICw0CA</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-41.png\" alt=\"k8s install\"></p>\n<p><img src=\"/images/pasted-42.png\" alt=\"k8s install\"></p>\n<p>好的开始是成功的一半，到此k8s集群kubeadm方式安装成功！</p>\n<h2 id=\"部署kubernetes（二进制包方式）\"><a href=\"#部署kubernetes（二进制包方式）\" class=\"headerlink\" title=\"部署kubernetes（二进制包方式）\"></a>部署kubernetes（二进制包方式）</h2><h3 id=\"节点规划-1\"><a href=\"#节点规划-1\" class=\"headerlink\" title=\"节点规划\"></a>节点规划</h3><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>节点ip</th>\n<th>角色</th>\n<th>部署组件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>k8s-node001</td>\n<td>192.168.56.10</td>\n<td>master</td>\n<td>kube-apiserver，kube-controller-manager，kube -scheduler，etcd</td>\n</tr>\n<tr>\n<td>k8s-node002</td>\n<td>192.168.56.20</td>\n<td>slave</td>\n<td>kubelet，kube-proxy，docker， etcd</td>\n</tr>\n<tr>\n<td>k8s-node003</td>\n<td>192.168.56.30</td>\n<td>slave</td>\n<td>kubelet，kube-proxy，docker，etcd</td>\n</tr>\n</tbody></table>\n<h3 id=\"组件版本-1\"><a href=\"#组件版本-1\" class=\"headerlink\" title=\"组件版本\"></a>组件版本</h3><table>\n<thead>\n<tr>\n<th>组件</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CentOS</td>\n<td>7.9.2009 (Core)</td>\n</tr>\n<tr>\n<td>Kernel</td>\n<td>3.10.0-1160.24.1.el7.x86_64</td>\n</tr>\n<tr>\n<td>etcd</td>\n<td>v3.4.9</td>\n</tr>\n<tr>\n<td>coredns</td>\n<td>1.6.2</td>\n</tr>\n<tr>\n<td>kubectl</td>\n<td>v1.18.12</td>\n</tr>\n<tr>\n<td>kubelet</td>\n<td>v1.18.12</td>\n</tr>\n<tr>\n<td>kube-proxy</td>\n<td>v1.18.12</td>\n</tr>\n<tr>\n<td>flannel</td>\n<td>v0.14.0</td>\n</tr>\n</tbody></table>\n<h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭防火墙 </span></span><br><span class=\"line\">systemctl stop firewalld </span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭 selinux</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config <span class=\"comment\"># 永久</span></span><br><span class=\"line\">setenforce 0 <span class=\"comment\"># 临时</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭 swap</span></span><br><span class=\"line\">swapoff -a <span class=\"comment\"># 临时</span></span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab <span class=\"comment\"># 永久</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据规划设置主机名</span></span><br><span class=\"line\">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 master 添加 hosts</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">192.168.56.10 k8s-node001</span></span><br><span class=\"line\"><span class=\"string\">192.168.56.20 k8s-node002</span></span><br><span class=\"line\"><span class=\"string\">192.168.56.30 k8s-node003</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将桥接的 IPv4 流量传递到 iptables 的链</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF &gt;  /etc/sysctl.d/k8s.conf</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward=1</span></span><br><span class=\"line\"><span class=\"string\">vm.max_map_count=262144</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">modprobe br_netfilter</span><br><span class=\"line\">sysctl -p /etc/sysctl.d/k8s.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ipvs相关配置</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_sh</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_rr</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_wrr</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- nf_conntrack_ipv4</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/sysconfig/modules/ipvs.modules</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/sysconfig/modules/ipvs.modules</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-Etcd-集群\"><a href=\"#部署-Etcd-集群\" class=\"headerlink\" title=\"部署 Etcd 集群\"></a>部署 Etcd 集群</h3><p>Etcd 是一个分布式键值存储系统，Kubernetes 使用 Etcd 进行数据存储，所以先准备 一个 Etcd 数据库，为解决 Etcd 单点故障，应采用集群方式部署，这里使用 3 台组建集 群，可容忍 1 台机器故障，当然，也可以使用 5 台组建集群，可容忍 2 台机器故障。</p>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>节点ip</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>etcd-1</td>\n<td>192.168.56.10</td>\n</tr>\n<tr>\n<td>etcd-2</td>\n<td>192.168.56.20</td>\n</tr>\n<tr>\n<td>etcd-3</td>\n<td>192.168.56.30</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注：为了节省机器，这里与 K8s 节点机器复用。也可以独立于 k8s 集群之外部署，只要 apiserver 能连接到就行。</p>\n</blockquote>\n<h4 id=\"生成cfssl证书\"><a href=\"#生成cfssl证书\" class=\"headerlink\" title=\"生成cfssl证书\"></a>生成cfssl证书</h4><p>准备 cfssl 证书生成工具 cfssl 是一个开源的证书管理工具，使用 json 文件生成证书，相比 openssl 更方便使用。 找任意一台服务器操作，这里用 Master 节点。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-node001 ~]<span class=\"comment\"># mkdir tls</span></span><br><span class=\"line\">[root@k8s-node001 ~]<span class=\"comment\"># cd tls</span></span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span><br><span class=\"line\"><span class=\"built_in\">mv</span> cfssl_linux-amd64 /usr/local/bin/cfssl</span><br><span class=\"line\"><span class=\"built_in\">mv</span> cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class=\"line\"><span class=\"built_in\">mv</span> cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成-etcd-证书\"><a href=\"#生成-etcd-证书\" class=\"headerlink\" title=\"生成 etcd 证书\"></a>生成 etcd 证书</h4><p>自签证书颁发机构（CA） 创建工作目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> &#123;etcd,k8s&#125; &amp;&amp; <span class=\"built_in\">cd</span> etcd</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; ca-config.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;signing&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;default&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;expiry&quot;: &quot;87600h&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;profiles&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;www&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">         &quot;expiry&quot;: &quot;87600h&quot;,</span></span><br><span class=\"line\"><span class=\"string\">         &quot;usages&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">            &quot;signing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;key encipherment&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;server auth&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;client auth&quot;</span></span><br><span class=\"line\"><span class=\"string\">        ]</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; ca-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;etcd CA&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;L&quot;: &quot;Shanghai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;ST&quot;: &quot;Shanghai&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">生成证书：</span><br><span class=\"line\">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-node001 etcd]<span class=\"comment\"># ll *.pem</span></span><br><span class=\"line\">-rw------- 1 root root 1679 5月  25 17:31 ca-key.pem</span><br><span class=\"line\">-rw-r--r-- 1 root root 1273 5月  25 17:31 ca.pem</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"签发-etcd-证书\"><a href=\"#签发-etcd-证书\" class=\"headerlink\" title=\"签发 etcd 证书\"></a>签发 etcd 证书</h4><p>创建证书申请文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; server-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;etcd&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;hosts&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;192.168.56.10&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;192.168.56.20&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;192.168.56.30&quot;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;L&quot;: &quot;Shanghai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;ST&quot;: &quot;Shanghai&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：上述文件 hosts 字段中 IP 为所有 etcd 节点的集群内部通信 IP，一个都不能少！为了 方便后期扩容可以多写几个预留的 IP。</p>\n</blockquote>\n<h4 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-node001 etcd]<span class=\"comment\"># ls server*pem</span></span><br><span class=\"line\">server-key.pem  server.pem</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"下载etcd二进制包\"><a href=\"#下载etcd二进制包\" class=\"headerlink\" title=\"下载etcd二进制包\"></a>下载etcd二进制包</h4><p>下载地址：<code>https://github.com/etcd-io/etcd/releases/download/v3.4.9/etcd-v3.4.9-linux-amd64.tar.gz</code></p>\n<h4 id=\"部署-etcd-集群\"><a href=\"#部署-etcd-集群\" class=\"headerlink\" title=\"部署 etcd 集群\"></a>部署 etcd 集群</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -xf etcd-v3.4.9-linux-amd64.tar.gz -C /opt/ &amp;&amp; <span class=\"built_in\">mv</span> /opt/etcd-v3.4.9-linux-amd64/ /opt/etcd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /opt/etcd/&#123;bin,cfg,ssl,data&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mv</span> /opt/etcd/&#123;etcd,etcdctl&#125; /opt/etcd/bin/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /opt/etcd/ssl/* &amp;&amp; <span class=\"built_in\">cp</span> /root/tls/etcd/&#123;ca.pem,server.pem,server-key.pem&#125; /opt/etcd/ssl/</span><br><span class=\"line\">ll /opt/etcd/ssl/</span><br><span class=\"line\">总用量 12</span><br><span class=\"line\">-rw-r--r--. 1 root root 1273 5月  25 21:21 ca.pem</span><br><span class=\"line\">-rw-------. 1 root root 1679 5月  25 21:21 server-key.pem</span><br><span class=\"line\">-rw-r--r--. 1 root root 1342 5月  25 21:21 server.pem</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置etcd\"><a href=\"#配置etcd\" class=\"headerlink\" title=\"配置etcd\"></a>配置etcd</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/etcd/cfg/etcd.conf &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#[Member]</span></span><br><span class=\"line\">ETCD_NAME=<span class=\"string\">&quot;etcd-1&quot;</span></span><br><span class=\"line\">ETCD_DATA_DIR=<span class=\"string\">&quot;/opt/etcd/data/default.etcd&quot;</span></span><br><span class=\"line\">ETCD_LISTEN_PEER_URLS=<span class=\"string\">&quot;https://192.168.56.10:2380&quot;</span></span><br><span class=\"line\">ETCD_LISTEN_CLIENT_URLS=<span class=\"string\">&quot;https://192.168.56.10:2379&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#[Clustering]</span></span><br><span class=\"line\">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class=\"string\">&quot;https://192.168.56.10:2380&quot;</span></span><br><span class=\"line\">ETCD_ADVERTISE_CLIENT_URLS=<span class=\"string\">&quot;https://192.168.56.10:2379&quot;</span></span><br><span class=\"line\">ETCD_INITIAL_CLUSTER=<span class=\"string\">&quot;etcd-1=https://192.168.56.10:2380,etcd-2=https://192.168.56.20:2380,etcd-3=https://192.168.56.30:2380&quot;</span></span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_TOKEN=<span class=\"string\">&quot;etcd-cluster&quot;</span></span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_STATE=<span class=\"string\">&quot;new&quot;</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"comment\"># ETCD_NAME：节点名称，集群中唯一</span></span><br><span class=\"line\"><span class=\"comment\"># ETCD_DATA_DIR：数据目录</span></span><br><span class=\"line\"><span class=\"comment\"># ETCD_LISTEN_PEER_URLS：集群通信监听地址</span></span><br><span class=\"line\"><span class=\"comment\"># ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址</span></span><br><span class=\"line\"><span class=\"comment\"># ETCD_INITIAL_ADVERTISE_PEER_URLS：集群通告地址</span></span><br><span class=\"line\"><span class=\"comment\"># ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址</span></span><br><span class=\"line\"><span class=\"comment\"># ETCD_INITIAL_CLUSTER：集群节点地址</span></span><br><span class=\"line\"><span class=\"comment\"># ETCD_INITIAL_CLUSTER_TOKEN：集群Token</span></span><br><span class=\"line\"><span class=\"comment\"># ETCD_INITIAL_CLUSTER_STATE：加入集群的当前状态，new是新集群，existing表示加入已有集群</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加systemd管理脚本\"><a href=\"#添加systemd管理脚本\" class=\"headerlink\" title=\"添加systemd管理脚本\"></a>添加systemd管理脚本</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Etcd Server</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=network-online.target</span></span><br><span class=\"line\"><span class=\"string\">Wants=network-online.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">Type=notify</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/etcd/cfg/etcd.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/etcd/bin/etcd \\</span></span><br><span class=\"line\"><span class=\"string\">--cert-file=/opt/etcd/ssl/server.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--key-file=/opt/etcd/ssl/server-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--peer-cert-file=/opt/etcd/ssl/server.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--peer-key-file=/opt/etcd/ssl/server-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--trusted-ca-file=/opt/etcd/ssl/ca.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--logger=zap</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=65536</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#推送配置</span></span><br><span class=\"line\">rsync -avz /opt/etcd k8s-node002:/opt/</span><br><span class=\"line\">rsync -avz /opt/etcd k8s-node003:/opt/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#各节点修改配置</span></span><br><span class=\"line\">ETCD_NAME=<span class=\"string\">&quot;etcd-1&quot;</span> <span class=\"comment\">#此处</span></span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_LISTEN_PEER_URLS=<span class=\"string\">&quot;https://192.168.1.55:2380&quot;</span> <span class=\"comment\">#此处</span></span><br><span class=\"line\">ETCD_LISTEN_CLIENT_URLS=<span class=\"string\">&quot;https://192.168.1.55:2379&quot;</span> <span class=\"comment\">#此处</span></span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class=\"string\">&quot;https://192.168.1.55:2380&quot;</span> <span class=\"comment\">#此处</span></span><br><span class=\"line\">ETCD_ADVERTISE_CLIENT_URLS=<span class=\"string\">&quot;https://192.168.1.55:2379&quot;</span> <span class=\"comment\">#此处</span></span><br></pre></td></tr></table></figure>\n\n<p>启动并开机自启[所有节点执行]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now etcd</span><br></pre></td></tr></table></figure>\n\n<p>验证集群状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/opt/etcd/bin/etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/server.pem --key=/opt/etcd/ssl/server-key.pem --endpoints=<span class=\"string\">&quot;https://192.168.56.10:2379,https://192.168.56.20:2379,https://192.168.56.30:2379&quot;</span> endpoint health</span><br><span class=\"line\"></span><br><span class=\"line\">https://192.168.56.10:2379 is healthy: successfully committed proposal: took = 17.691408ms</span><br><span class=\"line\">https://192.168.56.20:2379 is healthy: successfully committed proposal: took = 20.327118ms</span><br><span class=\"line\">https://192.168.56.30:2379 is healthy: successfully committed proposal: took = 22.23013ms</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>出现上面提示信息就说明集群已经构建成功，如果有问题第一步先看日志：/var/log/message 或 journalctl -u etcd</p>\n</blockquote>\n<h3 id=\"部署Master-Node\"><a href=\"#部署Master-Node\" class=\"headerlink\" title=\"部署Master Node\"></a>部署Master Node</h3><h4 id=\"生成自签CA证书\"><a href=\"#生成自签CA证书\" class=\"headerlink\" title=\"生成自签CA证书\"></a>生成自签CA证书</h4><p>创建证书申请文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> tls/k8s/</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; ca-config.json &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;signing&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;default&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;expiry&quot;</span>: <span class=\"string\">&quot;87600h&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;profiles&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;kubernetes&quot;</span>: &#123;</span><br><span class=\"line\">         <span class=\"string\">&quot;expiry&quot;</span>: <span class=\"string\">&quot;87600h&quot;</span>,</span><br><span class=\"line\">         <span class=\"string\">&quot;usages&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;signing&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;key encipherment&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;server auth&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;client auth&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; ca-csr.json &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;CN&quot;</span>: <span class=\"string\">&quot;kubernetes&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;key&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;algo&quot;</span>: <span class=\"string\">&quot;rsa&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;size&quot;</span>: 2048</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;names&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;C&quot;</span>: <span class=\"string\">&quot;CN&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;L&quot;</span>: <span class=\"string\">&quot;Shanghai&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;ST&quot;</span>: <span class=\"string\">&quot;Shanghai&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;O&quot;</span>: <span class=\"string\">&quot;k8s&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;OU&quot;</span>: <span class=\"string\">&quot;System&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">生成证书</span><br><span class=\"line\">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-node001 k8s]<span class=\"comment\"># ls *pem</span></span><br><span class=\"line\">ca-key.pem  ca.pem</span><br></pre></td></tr></table></figure>\n<h4 id=\"签发apiserver证书\"><a href=\"#签发apiserver证书\" class=\"headerlink\" title=\"签发apiserver证书\"></a>签发apiserver证书</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; server-csr.json &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;CN&quot;</span>: <span class=\"string\">&quot;kubernetes&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hosts&quot;</span>: [</span><br><span class=\"line\">      <span class=\"string\">&quot;10.0.0.1&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;192.168.56.10&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;192.168.56.20&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;192.168.56.30&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;192.168.56.40&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;192.168.56.50&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;kubernetes&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;kubernetes.default&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;kubernetes.default.svc&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;kubernetes.default.svc.cluster&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;kubernetes.default.svc.cluster.local&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;key&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;algo&quot;</span>: <span class=\"string\">&quot;rsa&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;size&quot;</span>: 2048</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;names&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;C&quot;</span>: <span class=\"string\">&quot;CN&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;L&quot;</span>: <span class=\"string\">&quot;BeiJing&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;ST&quot;</span>: <span class=\"string\">&quot;BeiJing&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;O&quot;</span>: <span class=\"string\">&quot;k8s&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;OU&quot;</span>: <span class=\"string\">&quot;System&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>hosts字段中IP为所有Master/LB/VIP IP/所有节点公网IP等，一个都不能少！为了方便后期扩容可以多写几个预留的IP。</p>\n</blockquote>\n<p>签发</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-node001 k8s]<span class=\"comment\"># ls *pem</span></span><br><span class=\"line\">ca-key.pem  ca.pem  server-key.pem  server.pem</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署apiserver\"><a href=\"#部署apiserver\" class=\"headerlink\" title=\"部署apiserver\"></a>部署apiserver</h4><p>下载二进制包:<a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.18.md\">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.18.md</a></p>\n<blockquote>\n<p>注：打开链接你会发现里面有很多包，下载一个 server 包就够了，包含了 Master 和 Worker Node 二进制文件。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://dl.k8s.io/v1.18.12/kubernetes-server-linux-amd64.tar.gz</span><br><span class=\"line\">tar -xf kubernetes-server-linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125;</span><br><span class=\"line\"><span class=\"built_in\">cp</span> kubernetes/server/bin/&#123;kube-apiserver,kube-scheduler,kube-controller-manager,kubectl&#125; /opt/kubernetes/bin/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-node001 ~]<span class=\"comment\"># ll /opt/kubernetes/bin/</span></span><br><span class=\"line\">总用量 267376</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 120700928 5月  25 22:49 kube-apiserver</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 110120960 5月  25 22:49 kube-controller-manager</span><br><span class=\"line\">-rwxr-xr-x. 1 root root  42971136 5月  25 22:49 kube-scheduler</span><br></pre></td></tr></table></figure>\n<p>配置apiserver</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/kubernetes/cfg/kube-apiserver.conf &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">KUBE_APISERVER_OPTS=<span class=\"string\">&quot;--logtostderr=false \\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-servers=https://192.168.56.10:2379,https://192.168.56.20:2379,https://192.168.56.30:2379 \\</span></span><br><span class=\"line\"><span class=\"string\">--bind-address=192.168.56.10 \\</span></span><br><span class=\"line\"><span class=\"string\">--secure-port=6443 \\</span></span><br><span class=\"line\"><span class=\"string\">--advertise-address=192.168.56.10 \\</span></span><br><span class=\"line\"><span class=\"string\">--allow-privileged=true \\</span></span><br><span class=\"line\"><span class=\"string\">--service-cluster-ip-range=10.0.0.0/24 \\</span></span><br><span class=\"line\"><span class=\"string\">--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\</span></span><br><span class=\"line\"><span class=\"string\">--authorization-mode=RBAC,Node \\</span></span><br><span class=\"line\"><span class=\"string\">--enable-bootstrap-token-auth=true \\</span></span><br><span class=\"line\"><span class=\"string\">--token-auth-file=/opt/kubernetes/cfg/token.csv \\</span></span><br><span class=\"line\"><span class=\"string\">--service-node-port-range=30000-32767 \\</span></span><br><span class=\"line\"><span class=\"string\">--kubelet-client-certificate=/opt/kubernetes/ssl/server.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--tls-cert-file=/opt/kubernetes/ssl/server.pem  \\</span></span><br><span class=\"line\"><span class=\"string\">--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--client-ca-file=/opt/kubernetes/ssl/ca.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-cafile=/opt/etcd/ssl/ca.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-certfile=/opt/etcd/ssl/server.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-keyfile=/opt/etcd/ssl/server-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxage=30 \\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxbackup=3 \\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxsize=100 \\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-path=/opt/kubernetes/logs/k8s-audit.log&quot;</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># –logtostderr：启用日志</span></span><br><span class=\"line\"><span class=\"comment\"># —v：日志等级</span></span><br><span class=\"line\"><span class=\"comment\"># –log-dir：日志目录</span></span><br><span class=\"line\"><span class=\"comment\"># –etcd-servers：etcd集群地址</span></span><br><span class=\"line\"><span class=\"comment\"># –bind-address：监听地址</span></span><br><span class=\"line\"><span class=\"comment\"># –secure-port：https安全端口</span></span><br><span class=\"line\"><span class=\"comment\"># –advertise-address：集群通告地址</span></span><br><span class=\"line\"><span class=\"comment\"># –allow-privileged：启用授权</span></span><br><span class=\"line\"><span class=\"comment\"># –service-cluster-ip-range：Service虚拟IP地址段</span></span><br><span class=\"line\"><span class=\"comment\"># –enable-admission-plugins：准入控制模块</span></span><br><span class=\"line\"><span class=\"comment\"># –authorization-mode：认证授权，启用RBAC授权和节点自管理</span></span><br><span class=\"line\"><span class=\"comment\"># –enable-bootstrap-token-auth：启用TLS bootstrap机制</span></span><br><span class=\"line\"><span class=\"comment\"># –token-auth-file：bootstrap token文件</span></span><br><span class=\"line\"><span class=\"comment\"># –service-node-port-range：Service nodeport类型默认分配端口范围</span></span><br><span class=\"line\"><span class=\"comment\"># –kubelet-client-xxx：apiserver访问kubelet客户端证书</span></span><br><span class=\"line\"><span class=\"comment\"># –tls-xxx-file：apiserver https证书</span></span><br><span class=\"line\"><span class=\"comment\"># –etcd-xxxfile：连接Etcd集群证书</span></span><br><span class=\"line\"><span class=\"comment\"># –audit-log-xxx：审计日志</span></span><br><span class=\"line\"></span><br><span class=\"line\">创建上述配置文件中 token 文件：</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/kubernetes/cfg/token.csv &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">c47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,10001,&quot;system:nodebootstrapper&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">格式：token，用户名，UID，用户组</span><br><span class=\"line\">token 也可自行生成替换：</span><br><span class=\"line\"><span class=\"built_in\">head</span> -c 16 /dev/urandom | <span class=\"built_in\">od</span> -An -t x | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemd 管理</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /usr/lib/systemd/system/kube-apiserver.service &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Kubernetes API Server</span><br><span class=\"line\">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">EnvironmentFile=/opt/kubernetes/cfg/kube-apiserver.conf</span><br><span class=\"line\">ExecStart=/opt/kubernetes/bin/kube-apiserver <span class=\"variable\">$KUBE_APISERVER_OPTS</span></span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h4 id=\"拷贝刚才生成的证书\"><a href=\"#拷贝刚才生成的证书\" class=\"headerlink\" title=\"拷贝刚才生成的证书\"></a>拷贝刚才生成的证书</h4><p>把刚才生成的证书拷贝到配置文件中的路径：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> ~/tls/k8s/ca*pem ~/tls/k8s/server*pem /opt/kubernetes/ssl/</span><br></pre></td></tr></table></figure>\n<h4 id=\"启用TLS-Bootstrapping\"><a href=\"#启用TLS-Bootstrapping\" class=\"headerlink\" title=\"启用TLS Bootstrapping\"></a>启用TLS Bootstrapping</h4><p>TLS Bootstraping：Master apiserver 启用 TLS 认证后，Node 节点 kubelet 和 kube-proxy 要与 kube-apiserver 进行通信，必须使用 CA 签发的有效证书才可以，当 Node<br>节点很多时，这种客户端证书颁发需要大量工作，同样也会增加集群扩展复杂度。为了<br>简化流程，Kubernetes 引入了 TLS bootstraping 机制来自动颁发客户端证书，kubelet<br>会以一个低权限用户自动向 apiserver 申请证书，kubelet 的证书由 apiserver 动态签署。<br>所以强烈建议在 Node 上使用这种方式，目前主要用于 kubelet，kube-proxy 还是由我<br>们统一颁发一个证书。<br>TLS bootstraping 工作流程：</p>\n<p><img src=\"/images/pasted-53.png\" alt=\"TLS bootstraping\"></p>\n<h4 id=\"授权kubelet-bootstrap用户允许请求证书\"><a href=\"#授权kubelet-bootstrap用户允许请求证书\" class=\"headerlink\" title=\"授权kubelet-bootstrap用户允许请求证书*\"></a>授权kubelet-bootstrap用户允许请求证书*</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create clusterrolebinding kubelet-bootstrap \\</span><br><span class=\"line\">--clusterrole=system:node-bootstrapper \\</span><br><span class=\"line\">--user=kubelet-bootstrap</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署controller-manager\"><a href=\"#部署controller-manager\" class=\"headerlink\" title=\"部署controller-manager\"></a>部署controller-manager</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/kubernetes/cfg/kube-controller-manager.conf &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">KUBE_CONTROLLER_MANAGER_OPTS=<span class=\"string\">&quot;--logtostderr=false \\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\</span></span><br><span class=\"line\"><span class=\"string\">--leader-elect=true \\</span></span><br><span class=\"line\"><span class=\"string\">--master=127.0.0.1:8080 \\</span></span><br><span class=\"line\"><span class=\"string\">--bind-address=127.0.0.1 \\</span></span><br><span class=\"line\"><span class=\"string\">--allocate-node-cidrs=true \\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-cidr=10.244.0.0/16 \\</span></span><br><span class=\"line\"><span class=\"string\">--service-cluster-ip-range=10.0.0.0/24 \\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \\</span></span><br><span class=\"line\"><span class=\"string\">--root-ca-file=/opt/kubernetes/ssl/ca.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--experimental-cluster-signing-duration=87600h0m0s&quot;</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">systemd 管理</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /usr/lib/systemd/system/kube-controller-manager.service &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Kubernetes Controller Manager</span><br><span class=\"line\">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">EnvironmentFile=/opt/kubernetes/cfg/kube-controller-manager.conf</span><br><span class=\"line\">ExecStart=/opt/kubernetes/bin/kube-controller-manager <span class=\"variable\">$KUBE_CONTROLLER_MANAGER_OPTS</span></span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>master：通过本地非安全本地端口 8080 连接 apiserver。</li>\n<li>leader-elect：当该组件启动多个时，自动选举（HA）</li>\n<li>cluster-signing-cert-file/–cluster-signing-key-file：自动为 kubelet 颁发证书的 CA，与 apiserver 保持一致</li>\n</ul>\n<h4 id=\"部署kube-scheduler\"><a href=\"#部署kube-scheduler\" class=\"headerlink\" title=\"部署kube-scheduler\"></a>部署kube-scheduler</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/kubernetes/cfg/kube-scheduler.conf &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">KUBE_SCHEDULER_OPTS=<span class=\"string\">&quot;--logtostderr=false \\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\</span></span><br><span class=\"line\"><span class=\"string\">--leader-elect \\</span></span><br><span class=\"line\"><span class=\"string\">--master=127.0.0.1:8080 \\</span></span><br><span class=\"line\"><span class=\"string\">--bind-address=127.0.0.1&quot;</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">systemd管理</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Kubernetes Scheduler</span><br><span class=\"line\">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">EnvironmentFile=/opt/kubernetes/cfg/kube-scheduler.conf</span><br><span class=\"line\">ExecStart=/opt/kubernetes/bin/kube-scheduler <span class=\"variable\">$KUBE_SCHEDULER_OPTS</span></span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<ul>\n<li>master：通过本地非安全本地端口8080连接apiserver。</li>\n<li>leader-elect：当该组件启动多个时，自动选举（HA）</li>\n</ul>\n<h4 id=\"启动Master组件\"><a href=\"#启动Master组件\" class=\"headerlink\" title=\"启动Master组件\"></a>启动Master组件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now kube-apiserver</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now kube-controller-manager</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now kube-scheduler.service</span><br><span class=\"line\"></span><br><span class=\"line\">启动出错排查：<span class=\"built_in\">cat</span> /var/log/messages|grep kube-apiserver|grep -i error</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查集群状态\"><a href=\"#检查集群状态\" class=\"headerlink\" title=\"检查集群状态\"></a>检查集群状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s /opt/kubernetes/bin/kubectl  /usr/bin/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-node001 ~]<span class=\"comment\"># kubectl get cs</span></span><br><span class=\"line\">NAME                 STATUS    MESSAGE             ERROR</span><br><span class=\"line\">controller-manager   Healthy   ok                  </span><br><span class=\"line\">scheduler            Healthy   ok                  </span><br><span class=\"line\">etcd-0               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;   </span><br><span class=\"line\">etcd-1               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;   </span><br><span class=\"line\">etcd-2               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署Worker-Node\"><a href=\"#部署Worker-Node\" class=\"headerlink\" title=\"部署Worker Node\"></a>部署Worker Node</h3><h4 id=\"安装docker-1\"><a href=\"#安装docker-1\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h4><p>参见：<a href=\"/forward/57e2aa11.html#%E5%AE%89%E8%A3%85docker\">安装Docker</a></p>\n<h4 id=\"复制二进制包\"><a href=\"#复制二进制包\" class=\"headerlink\" title=\"复制二进制包\"></a>复制二进制包</h4><p>创建工作目录并拷贝二进制文件<br>在所有 worker node 创建工作目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125;</span><br></pre></td></tr></table></figure>\n<p>从 master 节点拷贝：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -avz ~/kubernetes-server-linux-amd64.tar.gz k8s-node002:/root/</span><br><span class=\"line\">rsync -avz ~/kubernetes-server-linux-amd64.tar.gz k8s-node003:/root/</span><br><span class=\"line\"></span><br><span class=\"line\">node节点执行</span><br><span class=\"line\">tar -xf kubernetes-server-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cp</span> kubernetes/server/bin/&#123;kubelet,kube-proxy&#125; /opt/kubernetes/bin/</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /opt/kubernetes/bin/kubelet /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署kubelet\"><a href=\"#部署kubelet\" class=\"headerlink\" title=\"部署kubelet\"></a>部署kubelet</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/kubernetes/cfg/kubelet.conf &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">KUBELET_OPTS=<span class=\"string\">&quot;--logtostderr=false \\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\</span></span><br><span class=\"line\"><span class=\"string\">--hostname-override=k8s-node002 \\</span></span><br><span class=\"line\"><span class=\"string\">--network-plugin=cni \\</span></span><br><span class=\"line\"><span class=\"string\">--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \\</span></span><br><span class=\"line\"><span class=\"string\">--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \\</span></span><br><span class=\"line\"><span class=\"string\">--config=/opt/kubernetes/cfg/kubelet-config.yml \\</span></span><br><span class=\"line\"><span class=\"string\">--cert-dir=/opt/kubernetes/ssl \\</span></span><br><span class=\"line\"><span class=\"string\">--pod-infra-container-image=lizhenliang/pause-amd64:3.0&quot;</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>修改hostname-override=为本机节点</p>\n</blockquote>\n<ul>\n<li>hostname-override：显示名称，集群中唯一</li>\n<li>network-plugin：启用 CNI –kubeconfig：空路径，会自动生成，后面用于连接 apiserver -bootstrap-kubeconfig：首次启动向 apiserver 申请证书</li>\n<li>config：配置参数文件</li>\n<li>cert-dir：kubelet 证书生成目录</li>\n<li>pod-infra-container-image：管理 Pod 网络容器的镜像</li>\n</ul>\n<p>定义kubelet配置参数文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">在node执行</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/kubernetes/cfg/kubelet-config.yml &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">kind: KubeletConfiguration</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubelet.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"string\">address: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">port: 10250</span></span><br><span class=\"line\"><span class=\"string\">readOnlyPort: 10255</span></span><br><span class=\"line\"><span class=\"string\">cgroupDriver: cgroupfs</span></span><br><span class=\"line\"><span class=\"string\">clusterDNS:</span></span><br><span class=\"line\"><span class=\"string\">- 10.1.0.2</span></span><br><span class=\"line\"><span class=\"string\">clusterDomain: cluster.local </span></span><br><span class=\"line\"><span class=\"string\">failSwapOn: false</span></span><br><span class=\"line\"><span class=\"string\">authentication:</span></span><br><span class=\"line\"><span class=\"string\">  anonymous:</span></span><br><span class=\"line\"><span class=\"string\">    enabled: false</span></span><br><span class=\"line\"><span class=\"string\">  webhook:</span></span><br><span class=\"line\"><span class=\"string\">    cacheTTL: 2m0s</span></span><br><span class=\"line\"><span class=\"string\">    enabled: true</span></span><br><span class=\"line\"><span class=\"string\">  x509:</span></span><br><span class=\"line\"><span class=\"string\">    clientCAFile: /opt/kubernetes/ssl/ca.pem </span></span><br><span class=\"line\"><span class=\"string\">authorization:</span></span><br><span class=\"line\"><span class=\"string\">  mode: Webhook</span></span><br><span class=\"line\"><span class=\"string\">  webhook:</span></span><br><span class=\"line\"><span class=\"string\">    cacheAuthorizedTTL: 5m0s</span></span><br><span class=\"line\"><span class=\"string\">    cacheUnauthorizedTTL: 30s</span></span><br><span class=\"line\"><span class=\"string\">evictionHard:</span></span><br><span class=\"line\"><span class=\"string\">  imagefs.available: 15%</span></span><br><span class=\"line\"><span class=\"string\">  memory.available: 100Mi</span></span><br><span class=\"line\"><span class=\"string\">  nodefs.available: 10%</span></span><br><span class=\"line\"><span class=\"string\">  nodefs.inodesFree: 5%</span></span><br><span class=\"line\"><span class=\"string\">maxOpenFiles: 1000000</span></span><br><span class=\"line\"><span class=\"string\">maxPods: 110</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>生成 bootstrap.kubeconfig 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.56.10:6443&quot;</span> <span class=\"comment\"># apiserver IP:PORT</span></span><br><span class=\"line\">TOKEN=<span class=\"string\">&quot;c47ffb939f5ca36231d9e3121a252940&quot;</span> <span class=\"comment\"># 与 token.csv 里保持一致</span></span><br><span class=\"line\"><span class=\"comment\"># 在master上生成bootstrap.kubeconfig文件（证书写入文件）</span></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">--certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">--embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">--server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">--kubeconfig=bootstrap.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials <span class=\"string\">&quot;kubelet-bootstrap&quot;</span> \\</span><br><span class=\"line\">--token=<span class=\"variable\">$&#123;TOKEN&#125;</span> \\</span><br><span class=\"line\">--kubeconfig=bootstrap.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">--cluster=kubernetes \\</span><br><span class=\"line\">--user=<span class=\"string\">&quot;kubelet-bootstrap&quot;</span> \\</span><br><span class=\"line\">--kubeconfig=bootstrap.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成结果</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> bootstrap.kubeconfig</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR3akNDQXFxZ0F3SUJBZ0lVQzdRU3FneGt6Nm1VdU04MW43dGxmOW........CRFk5cjN4UjlFK1pJd3E4UEV5OVZlbTk1Zm9zekhKME01bUZQZWFMV3ZzS1VhZEhlZGNEUHAKbWZYZ2Q2NS96dklUbUJNRDJ4VEFGVGJxeFZwMUxGdklMQXlQZDRQRC9xQ3d4clFqa0kxTHV1M3Fkd3lUQVkvZQoxZ2V0YldmUgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class=\"line\">    server: https://192.168.56.10:6443</span><br><span class=\"line\">  name: kubernetes</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: kubernetes</span><br><span class=\"line\">    user: kubelet-bootstrap</span><br><span class=\"line\">  name: default</span><br><span class=\"line\">current-context: default</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">users</span>:</span><br><span class=\"line\">- name: kubelet-bootstrap</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    token: c47ffb939f5ca36231d9e3121a252940</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node执行修改后（读取本地证书）</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/kubernetes/cfg/bootstrap.kubeconfig &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority: /opt/kubernetes/ssl/ca.pem</span><br><span class=\"line\">    server: https://192.168.56.10:6443</span><br><span class=\"line\">  name: kubernetes</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: kubernetes</span><br><span class=\"line\">    user: kubelet-bootstrap</span><br><span class=\"line\">  name: default</span><br><span class=\"line\">current-context: default</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">users</span>:</span><br><span class=\"line\">- name: kubelet-bootstrap</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    token: c47ffb939f5ca36231d9e3121a252940</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>systemd 管理 kubelet</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Kubernetes Kubelet</span><br><span class=\"line\">After=docker.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">EnvironmentFile=/opt/kubernetes/cfg/kubelet.conf</span><br><span class=\"line\">ExecStart=/opt/kubernetes/bin/kubelet <span class=\"variable\">$KUBELET_OPTS</span></span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">LimitNOFILE=65536</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>检查配置并复制证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-node002 ~]<span class=\"comment\"># grep 192 /opt/kubernetes/cfg/*</span></span><br><span class=\"line\">/opt/kubernetes/cfg/bootstrap.kubeconfig:    server: https://192.168.56.10:6443</span><br><span class=\"line\"></span><br><span class=\"line\">rsync -avz /opt/kubernetes/ssl/ca.pem k8s-node002:/opt/kubernetes/ssl/ca.pem</span><br><span class=\"line\">rsync -avz /opt/kubernetes/ssl/ca.pem k8s-node003:/opt/kubernetes/ssl/ca.pem</span><br></pre></td></tr></table></figure>\n\n<p>启动服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now kubelet</span><br><span class=\"line\"></span><br><span class=\"line\">apiserver 安装步骤中最后一步一定要做，否则kubelet无法启动</span><br></pre></td></tr></table></figure>\n\n<p>批准 kubelet 证书申请并加入集群</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get csr</span><br><span class=\"line\">NAME                                                   AGE   SIGNERNAME                                    REQUESTOR           CONDITION</span><br><span class=\"line\">node-csr-X3C5Z1wfip7IoiINuC405QxSc8QAspvzBxaSOkzYYf0   78s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl certificate approve node-csr-X3C5Z1wfip7IoiINuC405QxSc8QAspvzBxaSOkzYYf0</span><br><span class=\"line\">certificatesigningrequest.certificates.k8s.io/node-csr-X3C5Z1wfip7IoiINuC405QxSc8QAspvzBxaSOkzYYf0 approved</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-node001 ~]<span class=\"comment\"># kubectl get nodes</span></span><br><span class=\"line\">NAME          STATUS     ROLES    AGE   VERSION</span><br><span class=\"line\">k8s-node002   NotReady   &lt;none&gt;   7s    v1.18.12</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：由于网络插件还没有部署，节点会没有准备就绪 NotReady</p>\n</blockquote>\n<h4 id=\"部署kube-proxy\"><a href=\"#部署kube-proxy\" class=\"headerlink\" title=\"部署kube-proxy\"></a>部署kube-proxy</h4><p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /opt/kubernetes/cfg/kube-proxy.conf &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">KUBE_PROXY_OPTS=<span class=\"string\">&quot;--logtostderr=false \\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\</span></span><br><span class=\"line\"><span class=\"string\">--config=/opt/kubernetes/cfg/kube-proxy-config.yml&quot;</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF &gt;/opt/kubernetes/cfg/kube-proxy-config.yml</span></span><br><span class=\"line\"><span class=\"string\">kind: KubeProxyConfiguration</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class=\"line\"><span class=\"string\">address: 0.0.0.0 # 监听地址</span></span><br><span class=\"line\"><span class=\"string\">metricsBindAddress: 0.0.0.0:10249 # 监控指标地址,监控获取相关信息 就从这里获取</span></span><br><span class=\"line\"><span class=\"string\">clientConnection:</span></span><br><span class=\"line\"><span class=\"string\">  kubeconfig: /opt/kubernetes/cfg/kube-proxy.kubeconfig # 读取配置文件</span></span><br><span class=\"line\"><span class=\"string\">hostnameOverride: $k8s-node002 # 注册到k8s的节点名称唯一</span></span><br><span class=\"line\"><span class=\"string\">clusterCIDR: 10.0.0.0/24</span></span><br><span class=\"line\"><span class=\"string\">#mode: iptables # 使用iptables模式</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 使用 ipvs 模式</span></span><br><span class=\"line\"><span class=\"string\">#mode: ipvs # ipvs 模式</span></span><br><span class=\"line\"><span class=\"string\">#ipvs:</span></span><br><span class=\"line\"><span class=\"string\">#  scheduler: &quot;rr&quot;</span></span><br><span class=\"line\"><span class=\"string\">#iptables:</span></span><br><span class=\"line\"><span class=\"string\">#  masqueradeAll: true</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>生成 kube-proxy.kubeconfig 文件<br>生成 kube-proxy 证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># master执行</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> tls/k8s/</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; kube-proxy-csr.json &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;CN&quot;: &quot;system:kube-proxy&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;hosts&quot;: [],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;L&quot;: &quot;Shanghai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;ST&quot;: &quot;Shanghai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-node001 k8s]<span class=\"comment\"># ls kube-proxy*.pem</span></span><br><span class=\"line\">kube-proxy-key.pem  kube-proxy.pem</span><br><span class=\"line\"></span><br><span class=\"line\">推送证书到node</span><br><span class=\"line\">rsync -avz /opt/kubernetes/ssl/&#123;kube-proxy-key.pem,kube-proxy.pem&#125; k8s-node002:/opt/kubernetes/ssl/</span><br></pre></td></tr></table></figure>\n\n<p>生成 kubeconfig 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.56.10:6443&quot;</span></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">--certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">--embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">--server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">--kubeconfig=kube-proxy.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials kube-proxy \\</span><br><span class=\"line\">--client-certificate=./kube-proxy.pem \\</span><br><span class=\"line\">--client-key=./kube-proxy-key.pem \\</span><br><span class=\"line\">--embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">--kubeconfig=kube-proxy.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">--cluster=kubernetes \\</span><br><span class=\"line\">--user=kube-proxy \\</span><br><span class=\"line\">--kubeconfig=kube-proxy.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\">rsync -avz kube-proxy.kubeconfig k8s-node002:/opt/kubernetes/cfg/kube-proxy.kubeconfig</span><br><span class=\"line\">rsync -avz kube-proxy.kubeconfig k8s-node003:/opt/kubernetes/cfg/kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure>\n\n<p>systemd管理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes Proxy</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kube-proxy.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kube-proxy \\$KUBE_PROXY_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=65536</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now kube-proxy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署CNI网络\"><a href=\"#部署CNI网络\" class=\"headerlink\" title=\"部署CNI网络\"></a>部署CNI网络</h4><p>下载地址：<br><code>https://github.com/containernetworking/plugins/releases/download/v0.8.6/cni-plugins-linux-amd64-v0.8.6.tgz</code></p>\n<p>部署CNI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 所有node执行</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /opt/cni/&#123;bin,net.d&#125;</span><br><span class=\"line\">tar zxvf cni-plugins-linux-amd64-v0.8.6.tgz -C /opt/cni/bin</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\"><span class=\"comment\"># 多网卡环境下</span></span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - --ip-masq</span><br><span class=\"line\">        - --kube-subnet-mgr</span><br><span class=\"line\">        - --iface=enp0s8 <span class=\"comment\">#需要指定内网网卡</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f kube-flannel.yml</span><br><span class=\"line\">kubectl get pods -n kube-system</span><br><span class=\"line\">kubectl get node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打上节点标签</span></span><br><span class=\"line\">kubectl label nodes node002 node-role.kubernetes.io/master=</span><br><span class=\"line\">kubectl label nodes node003 node-role.kubernetes.io/worker=</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>部署好网络插件，Node 准备就绪。</p>\n</blockquote>\n<h4 id=\"授权apiserver访问kubelet\"><a href=\"#授权apiserver访问kubelet\" class=\"headerlink\" title=\"授权apiserver访问kubelet\"></a>授权apiserver访问kubelet</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">apiserver-to-kubelet-rbac.yaml</span> <span class=\"string\">&lt;&lt;</span> <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">rbac.authorization.kubernetes.io/autoupdate:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/bootstrapping:</span> <span class=\"string\">rbac-defaults</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:kube-apiserver-to-kubelet</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes/proxy</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes/stats</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes/log</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes/spec</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes/metrics</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pods/log</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:kube-apiserver</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:kube-apiserver-to-kubelet</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">User</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">kubernetes</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">apply</span> <span class=\"string\">-f</span> <span class=\"string\">apiserver-to-kubelet-rbac.yaml</span> </span><br></pre></td></tr></table></figure>\n<h4 id=\"安装coredns插件\"><a href=\"#安装coredns插件\" class=\"headerlink\" title=\"安装coredns插件\"></a>安装coredns插件</h4><blockquote>\n<p>不依赖kubeadm的方式，适用于不是使用kubeadm创建的k8s集群，或者kubeadm初始化集群之后，删除了dns相关部署。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装coredns组件</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> coredns &amp;&amp; <span class=\"built_in\">cd</span> coredns</span><br><span class=\"line\">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/coredns.yaml.sed</span><br><span class=\"line\">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/deploy.sh</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x deploy.sh</span><br><span class=\"line\">./deploy.sh -i 10.0.0.2 &gt; coredns.yml</span><br><span class=\"line\">kubectl apply -f coredns.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">kubectl get pods --namespace kube-system</span><br><span class=\"line\">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure>\n\n<p><strong>coredns</strong>配置cname解析</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">coredns</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">Corefile:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    .:53 &#123;</span></span><br><span class=\"line\"><span class=\"string\">        errors</span></span><br><span class=\"line\"><span class=\"string\">        health &#123;</span></span><br><span class=\"line\"><span class=\"string\">          lameduck 5s</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        ready</span></span><br><span class=\"line\"><span class=\"string\">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span></span><br><span class=\"line\"><span class=\"string\">          fallthrough in-addr.arpa ip6.arpa</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        rewrite name wikiforum.fxeyeinterface.com kong-proxy.kong.svc.cluster.local</span></span><br><span class=\"line\"><span class=\"string\">        prometheus :9153</span></span><br><span class=\"line\"><span class=\"string\">        forward . /etc/resolv.conf &#123;</span></span><br><span class=\"line\"><span class=\"string\">          max_concurrent 1000</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        cache 30</span></span><br><span class=\"line\"><span class=\"string\">        loop</span></span><br><span class=\"line\"><span class=\"string\">        reload</span></span><br><span class=\"line\"><span class=\"string\">        loadbalance</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过配置coredns，实现将外网域名CNAME到<code>svc.namespace/ingress kong/ingress nginx</code>等API Gateway上。实现k8s集群内部7层负载。</p>\n<p>第17行注意<code>wikiforum.fxeyeinterface.com</code>是一个外网域名，对应的 service 域名是将集群内部访问该域名的流量打到kong上面通过kong做七层负载作流量转发，修改好之后等待一分钟左右，coredns的 reload 插件会自动进行热加载，然后进入 pod 中测试看看是否生效。</p>\n<p><img src=\"/images/pasted-88.png\" alt=\"dig test\"></p>\n<p>可以看到<code>wikiforum.fxeyeinterface.com</code>解析出来的 ip 是<code>10.0.0.207</code>，<code>kong-proxy.kong.svc.cluster.local</code>解析出来的 ip 也是<code>10.0.0.207</code></p>\n<h3 id=\"对接第三方DEVOPS平台\"><a href=\"#对接第三方DEVOPS平台\" class=\"headerlink\" title=\"对接第三方DEVOPS平台\"></a>对接第三方DEVOPS平台</h3><p>生成集群管理权限的 config 证书编写集群管理文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; admin-csr.json</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;CN&quot;: &quot;admin&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;hosts&quot;: [],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;ST&quot;: &quot;Shanghai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;L&quot;: &quot;Shanghai&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;O&quot;: &quot;system:masters&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">生成证书：</span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">clusters:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">cluster:</span></span><br><span class=\"line\">    <span class=\"attr\">insecure-skip-tls-verify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">https://LB</span> <span class=\"string\">EIP:6443</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kubernetes</span></span><br><span class=\"line\"><span class=\"attr\">contexts:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">context:</span></span><br><span class=\"line\">    <span class=\"attr\">cluster:</span> <span class=\"string\">kubernetes</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">kubernetes-admin</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-admin@kubernetes</span></span><br><span class=\"line\"><span class=\"attr\">current-context:</span> <span class=\"string\">kubernetes-admin@kubernetes</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Config</span></span><br><span class=\"line\"><span class=\"attr\">preferences:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">users:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-admin</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">client-certificate-data:</span> &#123;<span class=\"string\">base64</span> <span class=\"string\">admin.pem</span>&#125;</span><br><span class=\"line\">    <span class=\"attr\">client-key-data:</span> &#123;<span class=\"string\">base64</span> <span class=\"string\">admin-key.pem</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Metrics-Server\"><a href=\"#安装-Metrics-Server\" class=\"headerlink\" title=\"安装 Metrics Server\"></a>安装 Metrics Server</h3><p>Metrics API相比于之前的监控采集方式(hepaster)是一种新的思路，官方希望核心指标的监控应该是稳定的，版本可控的，且可以直接被用户访问(例如通过使用 kubectl top 命令)，或由集群中的控制器使用(如HPA)，和其他的Kubernetes APIs一样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.4.1/components.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">记得加入 - --kubelet-insecure-tls 不验证客户端证书</span><br></pre></td></tr></table></figure>\n<p>报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">E0531 06:44:53.044655       1 configmap_cafile_content.go:243] key failed with : missing content <span class=\"keyword\">for</span> CA bundle <span class=\"string\">&quot;client-ca::kube-system::extension-apiserver-authentication::requestheader-client-ca-file&quot;</span></span><br><span class=\"line\">E0531 06:45:53.044657       1 configmap_cafile_content.go:243] key failed with : missing content <span class=\"keyword\">for</span> CA bundle <span class=\"string\">&quot;client-ca::kube-system::extension-apiserver-authentication::requestheader-client-ca-file&quot;</span></span><br><span class=\"line\">E0531 06:45:58.803448       1 configmap_cafile_content.go:243] key failed with : missing content <span class=\"keyword\">for</span> CA bundle <span class=\"string\">&quot;client-ca::kube-system::extension-apiserver-authentication::requestheader-client-ca-file&quot;</span></span><br></pre></td></tr></table></figure>\n<p>根据错误日志信息，可以知道是缺少认证的证书文件，导致不能访问 kube-apiserver 而出现的问题。<br>之所以出现这个错误是因为 kube-apiserver 没有开启 API 聚合功能。所以需要配置 kube-apiserver 参数，开启聚合功能即可。</p>\n<h4 id=\"API-聚合\"><a href=\"#API-聚合\" class=\"headerlink\" title=\"API 聚合\"></a>API 聚合</h4><p>这里的 API 聚合机制 是 Kubernetes 1.7 版本引入的特性，能够将用户扩展的 API 注册到 kube-apiserver 上，仍然通过 API Server 的 HTTP URL 对新的 API 进行访问和操作。为了实现这个机制，Kubernetes 在 kube-apiserver 服务中引入了一个 API 聚合层（API Aggregation Layer），用于将 扩展 API 的访问请求转发到用户服务的功能。</p>\n<p>为了能够将用户自定义的 API 注册到 Master 的 API Server 中，首先需要在 Master 节点所在服务器，配置 kube-apiserver 应用的启动参数来启用 API 聚合 功能，参数如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">--runtime-config=api/all=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">--requestheader-allowed-names=aggregator \\</span><br><span class=\"line\">--requestheader-group-headers=X-Remote-Group \\</span><br><span class=\"line\">--requestheader-username-headers=X-Remote-User \\</span><br><span class=\"line\">--requestheader-extra-headers-prefix=X-Remote-Extra- \\</span><br><span class=\"line\">--requestheader-client-ca-file=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">--proxy-client-cert-file=/opt/kubernetes/ssl/proxy-client.pem \\</span><br><span class=\"line\">--proxy-client-key-file=/opt/kubernetes/ssl/proxy-client-key.pem</span><br></pre></td></tr></table></figure>\n<p>如果 kube-apiserver 所在的主机上没有运行 kube-proxy，即无法通过服务的 ClusterIP 进行访问，那么还需要设置以下启动参数：<br><code>--enable-aggregator-routing=true</code></p>\n<p>在设置完成重启 kube-apiserver 服务，就启用 API 聚合 功能了。接下来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建证书</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; proxy-client-csr.json &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;CN&quot;</span>: <span class=\"string\">&quot;aggregator&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;hosts&quot;</span>: [],</span><br><span class=\"line\">  <span class=\"string\">&quot;key&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;algo&quot;</span>: <span class=\"string\">&quot;rsa&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;size&quot;</span>: 2048</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;names&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;C&quot;</span>: <span class=\"string\">&quot;CN&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ST&quot;</span>: <span class=\"string\">&quot;Shnghai&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;L&quot;</span>: <span class=\"string\">&quot;Shnghai&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;O&quot;</span>: <span class=\"string\">&quot;system:masters&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;OU&quot;</span>: <span class=\"string\">&quot;System&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 执行下面命令生成证书</span></span><br><span class=\"line\">cfssl gencert \\</span><br><span class=\"line\">  -profile=kubernetes \\</span><br><span class=\"line\">  -ca=./ca.pem \\</span><br><span class=\"line\">  -ca-key=./ca-key.pem \\</span><br><span class=\"line\">  proxy-client-csr.json | cfssljson -bare proxy-client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /root/tls/k8s/&#123;proxy-client.pem,proxy-client-key.pem&#125; /opt/kubernetes/ssl/</span><br><span class=\"line\"></span><br><span class=\"line\">rsync -avz /opt/kubernetes/ssl/&#123;proxy-client.pem,proxy-client-key.pem&#125; node002:/opt/kubernetes/ssl/</span><br></pre></td></tr></table></figure>\n\n<p>修改 kube-apiserver 参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">修改俩 Master 节点中全部 kube-apiserver 配置参数：</span><br><span class=\"line\"></span><br><span class=\"line\">vi /opt/kubernetes/cfg/kube-apiserver.conf</span><br><span class=\"line\">...</span><br><span class=\"line\">--runtime-config=api/all=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">--requestheader-allowed-names=aggregator \\</span><br><span class=\"line\">--requestheader-group-headers=X-Remote-Group \\</span><br><span class=\"line\">--requestheader-username-headers=X-Remote-User \\</span><br><span class=\"line\">--requestheader-extra-headers-prefix=X-Remote-Extra- \\</span><br><span class=\"line\">--requestheader-client-ca-file=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">--proxy-client-cert-file=/opt/kubernetes/ssl/proxy-client.pem \\</span><br><span class=\"line\">--proxy-client-key-file=/opt/kubernetes/ssl/proxy-client-key.pem</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">参数说明：</span><br><span class=\"line\"></span><br><span class=\"line\">–requestheader-client-ca-file： 客户端 CA 证书。</span><br><span class=\"line\">–requestheader-allowed-names： 允许访问的客户端 common names 列表，通过 header 中 –requestheader-username-headers 参数指定的字段获取。客户端 common names 的名称需要在 client-ca-file 中进行设置，将其设置为空值时，表示任意客户端都可访问。</span><br><span class=\"line\">–requestheader-username-headers： 参数指定的字段获取。</span><br><span class=\"line\">–requestheader-extra-headers-prefix： 请求头中需要检查的前缀名。</span><br><span class=\"line\">–requestheader-group-headers 请求头中需要检查的组名。</span><br><span class=\"line\">–requestheader-username-headers 请求头中需要检查的用户名。</span><br><span class=\"line\">–proxy-client-cert-file： 在请求期间验证 Aggregator 的客户端 CA 证书。</span><br><span class=\"line\">–proxy-client-key-file： 在请求期间验证 Aggregator 的客户端私钥。</span><br><span class=\"line\">–requestheader-allowed-names： 允许访问的客户端 common names 列表，通过 header 中 –requestheader-username-headers 参数指定的字段获取。客户端 common names 的名称需要在 client-ca-file 中进行设置，将其设置为空值时，表示任意客户端都可访问。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"单独安装Kuboard\"><a href=\"#单独安装Kuboard\" class=\"headerlink\" title=\"单独安装Kuboard\"></a>单独安装Kuboard</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Kuboard v3 - 内建用户库</span><br><span class=\"line\">sudo docker run -d \\</span><br><span class=\"line\">  --restart=unless-stopped \\</span><br><span class=\"line\">  --name=kuboard \\</span><br><span class=\"line\">  -p 10086:80/tcp \\</span><br><span class=\"line\">  -p 10081:10081/udp \\</span><br><span class=\"line\">  -p 10081:10081/tcp \\</span><br><span class=\"line\">  -e KUBOARD_ENDPOINT=<span class=\"string\">&quot;http://内网IP:10080&quot;</span> \\</span><br><span class=\"line\">  -e KUBOARD_AGENT_SERVER_UDP_PORT=<span class=\"string\">&quot;10081&quot;</span> \\</span><br><span class=\"line\">  -e KUBOARD_AGENT_SERVER_TCP_PORT=<span class=\"string\">&quot;10081&quot;</span> \\</span><br><span class=\"line\">  -v /root/kuboard-data:/data \\</span><br><span class=\"line\">  eipwork/kuboard:v3</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">## 测试</span></span><br><span class=\"line\">[root@node001 ~]<span class=\"comment\"># kubectl top nodes</span></span><br><span class=\"line\">NAME      CPU(cores)   CPU%   MEMORY(bytes)   MEMORY% </span><br><span class=\"line\">node001   235m         5%     2328Mi          30% </span><br><span class=\"line\">node002   190m         4%     1708Mi          22% </span><br><span class=\"line\">node003   106m         2%     1593Mi          20% </span><br><span class=\"line\">node004   77m          1%     1482Mi          19%</span><br></pre></td></tr></table></figure>\n\n<p>支持单面板管理多集群：<br><img src=\"/images/pasted-54.png\" alt=\"Kuboard v3\"><br><img src=\"/images/pasted-55.png\" alt=\"Kuboard v3\"></p>\n","categories":["OPS"],"tags":["OPS","Kubernetes"]},{"title":"Linux 基础知识 [已完结]","url":"/forward/312ec9e0.html","content":"<h1 id=\"启动过程\"><a href=\"#启动过程\" class=\"headerlink\" title=\"启动过程\"></a>启动过程</h1><p><img src=\"/images/pasted-186.png\" alt=\"CentOS7启动过程\"></p>\n<h1 id=\"网络调试\"><a href=\"#网络调试\" class=\"headerlink\" title=\"网络调试\"></a>网络调试</h1><h2 id=\"临时关启网卡\"><a href=\"#临时关启网卡\" class=\"headerlink\" title=\"临时关启网卡\"></a>临时关启网卡</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ifup &#123;interface&#125; || ifconfig &#123;interface&#125; up</span><br><span class=\"line\">ifdown &#123;interface&#125; || ifconfig &#123;interface&#125; down</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加多块网卡\"><a href=\"#添加多块网卡\" class=\"headerlink\" title=\"添加多块网卡\"></a>添加多块网卡</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[felix@es-node03 ~]$ <span class=\"built_in\">cat</span> /etc/sysconfig/network-scripts/ifcfg-ens160 </span><br><span class=\"line\">TYPE=Ethernet  <span class=\"comment\">#设备类型为以太网设备</span></span><br><span class=\"line\">BOOTPROTO=none <span class=\"comment\">#是否启用该设备 static静态IP 或dhp 或none无（不指定），如是none，配上IP地址和 static效果一样</span></span><br><span class=\"line\">DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_AUTOCONF=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens160  \t<span class=\"comment\">#网卡名字</span></span><br><span class=\"line\">UUID=6b1f051d-11c8-4d83-ba66-c6d98414ca84 <span class=\"comment\">#网卡UUID，全球唯一</span></span><br><span class=\"line\">DEVICE=ens160\t<span class=\"comment\">#设备名字，再内核中识别的名字</span></span><br><span class=\"line\">ONBOOT=<span class=\"built_in\">yes</span>\t\t<span class=\"comment\">#启用该设备，如果no，表示不启动此网络设备</span></span><br><span class=\"line\">IPADDR=192.168.200.153\t<span class=\"comment\">#IP地址</span></span><br><span class=\"line\">PREFIX=24\t\t<span class=\"comment\">#子网掩码，24相当于255.255.255.0</span></span><br><span class=\"line\">GATEWAY=192.168.200.1\t<span class=\"comment\">#网关</span></span><br><span class=\"line\">DNS1=172.18.16.1\t<span class=\"comment\">#首选DNS</span></span><br><span class=\"line\">IPV6_PEERDNS=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_PEERROUTES=<span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /etc/sysconfig/network-scripts/ifcfg-ens160 /etc/sysconfig/network-scripts/ifcfg-ens161</span><br><span class=\"line\"><span class=\"comment\">#更改内容ens161</span></span><br><span class=\"line\">NAME=ens161</span><br><span class=\"line\">UUID=6b1f051d-11c8-4d83-ba66-c6d98414ca84 <span class=\"comment\">#删除UUID</span></span><br><span class=\"line\">DEVICE=ens161</span><br><span class=\"line\">IPDADDR=192.168.200.154</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart NetworkManager</span><br><span class=\"line\">systemctl restart network</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置临时IP\"><a href=\"#配置临时IP\" class=\"headerlink\" title=\"配置临时IP\"></a>配置临时IP</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ifconfig &#123;interface&#125; &#123;ip addr&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看端口监听状态\"><a href=\"#查看端口监听状态\" class=\"headerlink\" title=\"查看端口监听状态\"></a>查看端口监听状态</h2><p>netstat命令：查看系统中网络连接状态信息<br>常用的参数格式：netstat- lntup</p>\n<ul>\n<li>-a -all显示本机所有连接和监听的端口</li>\n<li>-n --numeric don’t resolve names以数字形式显示当前建立的有效连接和端口</li>\n<li>-u 显示ud协议连接</li>\n<li>-t显示tcp协议连接</li>\n<li>-p，--programs显示连接对应的PID与程序名</li>\n<li>-u显示udp协议连接</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># netstat -lntup</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">协议  接收  发送    本地IP地址              远程IP地址              状态     PID</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:8070            0.0.0.0:*               LISTEN      3790/python3 </span><br></pre></td></tr></table></figure>\n<p><code>LISTEN</code>：(Listening for a connection.)侦听来自远方的TCP端口的连接请求<br><code>SYN-SENT</code>：(Active; sent SYN. Waiting for a matching connection request after having sent a connection request.)再发送连接请求后等待匹配的连接请求<br><code>SYN-RECEIVED</code>：(Sent and received SYN. Waiting for a confirming connection request acknowledgment after having both received and sent connection requests.)再收到和发送一个连接请求后等待对方对连接请求的确认<br><code>ESTABLISHED</code>：(Connection established.)代表一个打开的连接<br><code>FIN-WAIT-1</code>：(Closed; sent FIN.)等待远程TCP连接中断请求，或先前的连接中断请求的确认<br><code>FIN-WAIT-2</code>：(Closed; FIN is acknowledged; awaiting FIN.)从远程TCP等待连接中断请求<br><code>CLOSE-WAIT</code>：(Received FIN; waiting to receive CLOSE.)等待从本地用户发来的连接中断请求<br><code>CLOSING</code>：(Closed; exchanged FIN; waiting for FIN.)等待远程TCP对连接中断的确认<br><code>LAST-ACK</code>：(Received FIN and CLOSE; waiting for FIN ACK.)等待原来的发向远程TCP的连接中断请求的确认<br><code>TIME-WAIT</code>：(In 2 MSL (twice the maximum segment length) quiet wait after close. )等待足够的时间以确保远程TCP接收到连接中断请求的确认<br><code>CLOSED</code>：(Connection is closed.)没有任何连接状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">服务器中存在大量</span><br><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># cat /proc/sys/net/ipv4/tcp_fin_timeout </span></span><br><span class=\"line\">2</span><br><span class=\"line\"><span class=\"comment\">#通过缩短时间 time walt时间来快速释放链接</span></span><br><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 2</span><br></pre></td></tr></table></figure>\n<h2 id=\"DNS相关配置\"><a href=\"#DNS相关配置\" class=\"headerlink\" title=\"DNS相关配置\"></a>DNS相关配置</h2><p><code>/etc/hosts</code>文件，优先级高于DNS解析</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/hosts</span><br><span class=\"line\">192.168.200.148  node1</span><br><span class=\"line\">192.168.200.149  node2</span><br><span class=\"line\">192.168.200.153  node3</span><br></pre></td></tr></table></figure>\n<p><code>/etc/resolv.conf</code><br>注：在 centos5版本，配置dns用这个文件。在 centos6 7以后，直接在网卡配置文件中指定<code>DNS1=192168.1.1</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># cat /etc/resolv.conf </span></span><br><span class=\"line\"><span class=\"comment\"># Generated by NetworkManager</span></span><br><span class=\"line\">nameserver 172.18.16.1</span><br></pre></td></tr></table></figure>\n<p>问：为什么hosts优先级高于dns</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># grep &quot;hosts:&quot; /etc/nsswitch.conf</span></span><br><span class=\"line\"><span class=\"comment\">#hosts:     db files nisplus nis dns</span></span><br><span class=\"line\">hosts:      files dns myhostname <span class=\"comment\">#files（/etc/hosts）放在了dns前面）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"系统路由信息\"><a href=\"#系统路由信息\" class=\"headerlink\" title=\"系统路由信息\"></a>系统路由信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># route -n</span></span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         192.168.200.1   0.0.0.0         UG    0      0        0 ens160</span><br><span class=\"line\">表示任何网段    默认网关       所有主机  </span><br></pre></td></tr></table></figure>\n<p>添加删除路由条目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">route add -net 192.168.300.0 netmask 255.255.255.0 dev ens161</span><br><span class=\"line\">\t\t\t\t网段       掩码            出接口</span><br><span class=\"line\">route del -net 192.168.300.0 netmask 255.255.255.0</span><br></pre></td></tr></table></figure>\n<p>路由跟踪：查看经过多少三层设备的数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># traceroute 172.18.16.1</span></span><br><span class=\"line\">traceroute to 172.18.16.1 (172.18.16.1), 30 hops max, 60 byte packets</span><br><span class=\"line\"> 1  localhost (192.168.200.1)  22.189 ms  22.913 ms  23.730 ms</span><br><span class=\"line\"> 2  * * *</span><br></pre></td></tr></table></figure>\n<h2 id=\"ping命令\"><a href=\"#ping命令\" class=\"headerlink\" title=\"ping命令\"></a>ping命令</h2><p>ping {ip addr}</p>\n<ul>\n<li>-c 数目 在发送指定数目的包后停止</li>\n<li>-i 秒数 设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次</li>\n<li>-I ens161 指定从哪个接口出去</li>\n</ul>\n<p>arping -I ens160 192.168.200.1 #观察mac地址是否一样，一样则没有人冒充网关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ARPING 192.168.200.1 from 192.168.200.153 ens160</span><br><span class=\"line\">Unicast reply from 192.168.200.1 [E8:BD:D1:F6:6A:B3]  4.658ms</span><br><span class=\"line\">Unicast reply from 192.168.200.1 [E8:BD:D1:F6:6A:B3]  3.815ms</span><br><span class=\"line\">Unicast reply from 192.168.200.1 [E8:BD:D1:F6:6A:B3]  4.710ms</span><br></pre></td></tr></table></figure>\n<h2 id=\"watch命令\"><a href=\"#watch命令\" class=\"headerlink\" title=\"watch命令\"></a>watch命令</h2><p>watch作用：实时监测命令的运行结果，可以看到所有变化数据包的大小</p>\n<ul>\n<li>-d，–differences #高亮显示指令输出信息不同之处； </li>\n<li>-n，–interval seconds #指定指令执行的间隔时间（秒）</li>\n</ul>\n<p>例：每隔1秒高亮差异显示ens33相关信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch -d -n 1 ifconfig ens160</span><br><span class=\"line\">Every 1.0s: ifconfig ens160                  Tue Jun 16 10:32:20 2020</span><br><span class=\"line\"></span><br><span class=\"line\">ens160: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 192.168.200.153  netmask 255.255.255.0  broadcast 192.168.200.255</span><br><span class=\"line\">        inet6 fe80::250:56ff:fe9d:b0b  prefixlen 64  scopeid 0x20&lt;<span class=\"built_in\">link</span>&gt;</span><br><span class=\"line\">        ether 00:50:56:9d:0b:0b  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 9665169  bytes 8799755781 (8.1 GiB)</span><br><span class=\"line\">        RX errors 0  dropped 20  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 7473274  bytes 6814218750 (6.3 GiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"tcpdump抓包\"><a href=\"#tcpdump抓包\" class=\"headerlink\" title=\"tcpdump抓包\"></a>tcpdump抓包</h2><p>tcpdump常用参数：</p>\n<ul>\n<li>-c 指定包个数</li>\n<li>-n ip,端口用数字方式显示</li>\n<li>-i 指定接口</li>\n<li>port 指定端口</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># tcpdump -n -c 30 port 22 -i ens160</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SYN洪水攻击\"><a href=\"#SYN洪水攻击\" class=\"headerlink\" title=\"SYN洪水攻击\"></a>SYN洪水攻击</h2><p><strong>SYN洪水攻击主要源于</strong>： tcp协议的三次握手机制<br><strong>SYN洪水攻击的过程</strong>：</p>\n<ul>\n<li>在服务端返回一个确认的SYN-ACK包的时候有个潜在的弊端，如果发起的客户是一个不存在的客户端，那么服务端就不会接到客户端回应的ACK包。</li>\n<li>这时服务端需要耗费一定的数量的系统内存来等待这个<strong>未决的连接</strong>，直到等待超关闭时间，才能施放内存。</li>\n<li>如果恶意者通过通过ip欺骗，发送大量SYN包给受害者系统，导致服务端存在大量未决的连接并占用大量内存和tcp连接，从而导致正常客户端无法访问服务端，这就是SYN洪水攻击的过程。</li>\n</ul>\n<p>使用awl伪装MAC对内网的服务器施实syn洪水攻击<br>awl下载地址：<a href=\"https://pincheng.lanzous.com/ij9dxdq3aqd\">https://pincheng.lanzous.com/ij9dxdq3aqd</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># tar -xf awl-0.2.tar.gz </span></span><br><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># cd awl-0.2/</span></span><br><span class=\"line\">[root@es-node03 ~/awl-0.2]<span class=\"comment\"># ./configure &amp;&amp; make -j 4 &amp;&amp; make install</span></span><br><span class=\"line\">[root@es-node03 ~/awl-0.2]<span class=\"comment\"># which awl</span></span><br><span class=\"line\">/usr/local/bin/awl</span><br><span class=\"line\"></span><br><span class=\"line\">[root@es-node03 ~/awl-0.2]<span class=\"comment\"># ping 192.168.200.153</span></span><br><span class=\"line\">PING 192.168.200.153 (192.168.200.153) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 192.168.200.153: icmp_seq=1 ttl=64 time=0.322 ms</span><br><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># arp -n | grep 153</span></span><br><span class=\"line\">192.168.200.153          ether   00:50:56:9d:0b:0b   C    ens160</span><br><span class=\"line\"><span class=\"comment\">#获取目标主机mac地址</span></span><br></pre></td></tr></table></figure>\n<p>awl 的格式如下:<br><code>awl -i ens160 -m 00:50:56:9d:0b:0b -d 192.168.200.153 -p 80</code><br>参数如下:</p>\n<ul>\n<li>-i 发送包的接口,如果省略默认是eth0</li>\n<li>-m 被攻击机器的mac地址,程序不能根据被攻击IP得到MAC,需要手工指定.先ping 目标IP,再arp -a就可以看到.<br>如果省略则为ff:ff:ff:ff:ff:ff :这表示向同一网段內的所有主机发出ARP广播，进行SYN攻击，还容易使整个局域网瘫痪</li>\n<li>-d 被攻击机器的IP</li>\n<li>-p 被攻击机器的端口.<br>这里注意，手动指定-i参数很重要，比如我们的网卡是ens160,那就要指定 -i ens160，alvin的实测结果显示，不这样指定的时候，攻击无效。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># netstat -na | grep &quot;SYN_RECV&quot;</span></span><br><span class=\"line\">tcp        0      0 192.168.200.153:80      218.149.245.64:17552    SYN_RECV   </span><br><span class=\"line\">tcp        0      0 192.168.200.153:80      111.187.179.3:49721     SYN_RECV   </span><br><span class=\"line\">tcp        0      0 192.168.200.153:80      59.171.38.91:26277      SYN_RECV   </span><br><span class=\"line\">tcp        0      0 192.168.200.153:80      17.139.112.127:34437    SYN_RECV</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文件相关属性\"><a href=\"#文件相关属性\" class=\"headerlink\" title=\"文件相关属性\"></a>文件相关属性</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@f felix]<span class=\"comment\"># ls -lih</span></span><br><span class=\"line\">total 8.0K</span><br><span class=\"line\">537327051 drwxr-xr-x 2 root root 6 2019-09-29 16:59 felix1</span><br><span class=\"line\">        2385 -             rw-r--r-   -               1              root  root   0     2019-09-30 11:00 felix10.txt</span><br><span class=\"line\">       inode 文件类型  权限     SElinux         硬链接数    属主 属组  大小  修改时间            文件名</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引节点inode-amp-磁盘块Block\"><a href=\"#索引节点inode-amp-磁盘块Block\" class=\"headerlink\" title=\"索引节点inode&amp;磁盘块Block\"></a>索引节点inode&amp;磁盘块Block</h2><p><img src=\"/images/pasted-104.png\" alt=\"Linux文件访问流程\"></p>\n<ul>\n<li><p><strong>inode：</strong></p>\n</li>\n<li><p>概念：索引节点的概念出在ext文件系统中（ext2 ext3 ext4），在磁盘进行格式化(建立文件系统)操作时，会生成大量的inode和block，找到一个文件最终都要通过索引节点inode才能找到（相当于书的目录）。</p>\n</li>\n<li><p>定义：类似于文件的身份证，索引节点是文件在系统中的唯一标识。索引节点是硬盘上的一块存储空间。大小256字节或512字节。</p>\n</li>\n<li><p>作用：索引节点里存放的数据是文件的属性（大小、时间、用户和组、权限等）唯独不包含文件名（文件名在上级目录的block里）。同时存放指向文件Block的指针（类似于软链接）。</p>\n</li>\n<li><p>特点：1.在ext3/ext4文件系统(C5/C6默认文件系统)下，一个非空文件至少要占用一个且只有一个Inode以及一个或多个Block。在文件系统进行初始化时，Block数量远大于inode数量。</p>\n<ol start=\"2\">\n<li>Inode节点号相同的文件，互为硬链接文件，可以认为是一个文件的不同入口。</li>\n<li>Inode在某一个文件系统（分区）内是唯一的。   </li>\n</ol>\n</li>\n<li><p><strong>Block：</strong></p>\n</li>\n<li><p>作用：用来存放实际数据的实体单元（ext文件系统一般最大为4KB），即用来存放真实数据，例如：照片、视频等普通文件数据，单个大的文件需要占用多个Block块来存储，特别小的单个文件如果不能占满整个Block块，剩余的空间也无法再利用。</p>\n</li>\n<li><p>特点：</p>\n<ol>\n<li>磁盘读取数据是按Block为单位存取的。</li>\n<li>每读取一个Block就会消耗一次磁盘I/O</li>\n<li>若文件比较大，一个文件可能占用多个Block。</li>\n<li>若文件比较小，一个Block剩余空间会被浪费，无论内容有多小。</li>\n<li>block大小也是格式化时确定的，命令是 mkfs.ext4 -b 2048 -I 256 /dev/sdb。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"inode-amp-block管理：\"><a href=\"#inode-amp-block管理：\" class=\"headerlink\" title=\"inode&amp;block管理：\"></a>inode&amp;block管理：</h2><p>查看Inodes数量：<code>df -i</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@f felix]<span class=\"comment\"># df -i</span></span><br><span class=\"line\">文件系统          总数       已使用      剩余        使用百分比  挂载点</span><br><span class=\"line\">Filesystem        Inodes      IUsed     IFree           IUse%    Mounted on</span><br><span class=\"line\">/dev/vda3        207092736  99830     206992906    1%        /</span><br></pre></td></tr></table></figure>\n<p>查看Block数量：<code>df -h</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@f felix]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">文件系统         大小         已使用     空闲         使用百分比  挂载点</span><br><span class=\"line\">Filesystem        Size          Used       Avail           Use%      Mounted on</span><br><span class=\"line\">/dev/vda3        198G         4.3G        194G           3%         /</span><br></pre></td></tr></table></figure>\n<p>生产环境下排查硬盘满的原因及解法：<br><img src=\"/images/pasted-105.png\" alt=\"disk\"></p>\n<h2 id=\"linux文件类型\"><a href=\"#linux文件类型\" class=\"headerlink\" title=\"linux文件类型\"></a>linux文件类型</h2><p><img src=\"/images/pasted-106.png\" alt=\"filetype\"></p>\n<h2 id=\"文件权限机制\"><a href=\"#文件权限机制\" class=\"headerlink\" title=\"文件权限机制\"></a>文件权限机制</h2><p>权限是操作系统用来限制对资源访问的机制，权限一般分为读、写、执行。系统中每个文件都拥有特定的权限、所属用户及所属组，通过这样的机制来限制哪些用户、哪些组可以对特定文件进行什么样的操作。<br><img src=\"/images/pasted-107.png\" alt=\"upload successful\"></p>\n<h2 id=\"SELinux\"><a href=\"#SELinux\" class=\"headerlink\" title=\"SELinux\"></a>SELinux</h2><p><img src=\"/images/pasted-108.png\" alt=\"selinux\"></p>\n<h2 id=\"Linux软硬链接\"><a href=\"#Linux软硬链接\" class=\"headerlink\" title=\"Linux软硬链接\"></a>Linux软硬链接</h2><p><img src=\"/images/pasted-109.png\" alt=\"headlinksoftlink\"><br><strong>有关硬链接：</strong></p>\n<ol>\n<li>具有相同inode节点号的多个文件互为硬链接文件，相当于一个房间（文件）开了多个门（硬链接）；</li>\n<li>删除硬链接文件或者删除源文件任意之一，文件实体并未被删除；</li>\n<li>只有删除了源文件和所有对应的硬链接文件，文件实体才会被删除；</li>\n<li>硬链接文件是文件的另一个入口；</li>\n<li>可以通过给文件设置硬链接文件来防止重要文件被误删（防删不防改，备份，防删又防改。）；</li>\n<li>创建硬链接命令 ln 源文件 硬链接文件；</li>\n<li>硬链接文件是普通文件 -，可以用rm删除；</li>\n<li>对于静态文件（没有进程正在调用），当硬链接数为0时文件就被删除。注意：如果有进程正在调用，则无法删除或者即使文件名被删除但空间不会释放。</li>\n<li>目录/ 和 目录/.互为硬链接，目录/ 和 目录/子目录/.. 互为硬链接</li>\n</ol>\n<p><strong>硬链接扩展：</strong><br>cp 操作慢于 mv 命令<br>cp命令将源文件和cp出的新文件完全独立成了两个个体（即新文件改变了原本指向的inode和block）。<br>mv命令只是将文件名改了，并未重新指向新的inode和block。</p>\n<p><strong>有关软链接：</strong></p>\n<ol>\n<li>软链接类似windows系统的快捷方式；</li>\n<li>软链接里面存放的是源文件的路径，指向源文件的文件名；</li>\n<li>删除源文件，软链接依然存在，但无法访问源文件内容；</li>\n<li>软链接失效时一般是白字红底闪烁；</li>\n<li>创建软链接命令 ln -s 源文件 软链接文件；</li>\n<li>软链接和源文件是不同的文件，文件类型也不同，inode号也不同；</li>\n<li>软链接的文件类型是“l”，可以用rm删除。</li>\n</ol>\n<p><strong>软硬链接的区别：</strong></p>\n<ol>\n<li>原理上，硬链接和源文件的inode节点号相同，两者互为硬链接。软连接和源文件的inode节点号不同，进而指向的block也不同，软连接block中存放了源文件的路径名(文件名)。</li>\n<li>实际上，硬链接和源文件是同一份文件，而软连接是独立的文件，类似于快捷方式，存储着源文件的位置信息便于指向。</li>\n<li>使用限制上，不能对目录创建硬链接，不能对不同文件系统创建硬链接，不能对不存在的文件创建硬链接；可以对目录创建软连接，可以跨文件系统创建软连接，可以对不存在的文件创建软连接。</li>\n</ol>\n<h2 id=\"文件的时间戳\"><a href=\"#文件的时间戳\" class=\"headerlink\" title=\"文件的时间戳\"></a>文件的时间戳</h2><p><img src=\"/images/pasted-110.png\" alt=\"upload successful\"></p>\n<h2 id=\"文件-amp-目录权限\"><a href=\"#文件-amp-目录权限\" class=\"headerlink\" title=\"文件&amp;目录权限\"></a>文件&amp;目录权限</h2><p><img src=\"/images/pasted-111.png\" alt=\"文件权限\"><br><img src=\"/images/pasted-112.png\" alt=\"目录权限\"></p>\n<p>Linux基础权限 9个字符，分三组，三个字符一组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">2362 drwxr-xr-x 2 root root   6 2019-10-09 16:24 1.txt</span><br></pre></td></tr></table></figure>\n<p><code>rwx r-x r-x</code><br>前3字符：用户(属主)权限位<br>中3字符：用户组(属组)权限位<br>后3字符：其他用户权限位</p>\n<p>权限位置（UGO）：rwx，读 4，写2，可执行1，- 0<br><strong>可读r</strong>：表示读取、浏览文件内容（即读取文件实体block）的权限。<br><strong>可写w</strong>：表示具有新增、修改、删除文件内容的权限。</p>\n<ol>\n<li>如果没有可写w的配合，那么可以使用vim编辑文件时会提示无法编辑（但可以强制编辑），可以使用echo等命令进行重定向或追加。</li>\n<li>删除文件或创建文件的权限时受父目录（上一级目录）的权限控制的[因为文件名没有存放再Inode里），而是在上级目录的Block里存放着，若修改上级目录的Block(删除文件的本质)，当然会受上级目录的Inode的权限控制]，和文件本身的权限无关，因此，文件本身的可写w权限，和文件是否能被删除无关。（打狗也要看主人）</li>\n</ol>\n<p><img src=\"/images/pasted-113.png\" alt=\"rm file\"></p>\n<p><strong>可执行x</strong>：具有执行文件的权限</p>\n<ol>\n<li>文件本身要能够执行（命令，脚本）</li>\n<li>如果是普通用户，同时还需要具备可读r的权限才能够执行文件。</li>\n<li>root用户只要有可执行x的权限即可执行文件</li>\n</ol>\n<p><strong>umask：</strong>控制默认权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@es-node03 ~]<span class=\"comment\"># umask</span></span><br><span class=\"line\">0022</span><br></pre></td></tr></table></figure>\n\n<p><strong>文件：</strong><br>创建文件默认最大的权限为666（-rw-rw-rw-），其默认创建的文件没有可执行权限x位。<br>默认权限-umask=实际权限 #对于文件当umask中存在奇数位的时候，在计算完毕后，奇数位加1</p>\n<p><strong>目录：</strong><br>创建文件默认最大权限为777（rwxrwxrwx）<br>默认权限-umask=实际权限 </p>\n<p><strong>特殊权限3位：</strong><br><img src=\"/images/pasted-114.png\" alt=\"1\"></p>\n<p><img src=\"/images/pasted-115.png\" alt=\"2\"></p>\n<p>修改：放在基础权限数字的前面<br>[root@oldboyedu /oldboy]# chmod 7755 abc &lt;==UGO中只要存在x权限，则特殊权限位（s,s,t）都为小写，反之则都为大写<br>所以结果：abc rwsr-sr-t</p>\n<p><strong>suid：</strong><br>SUID作用：suid的作用就是让普通用户可以在执行某个设置了suid位的命令或程序时，拥有和root管理员一样的身份和权限（默认情况）。<br>例如：passwd命令<br><img src=\"/images/pasted-116.png\" alt=\"passwd命令\"><br>任何人执行passwd这个命令，就会以passwd这个命令的属主（即 root）相同的权限来执行passwd。这就是suid的作用（尚方宝剑）</p>\n<p><img src=\"/images/pasted-117.png\" alt=\"3\"></p>\n<p>suid总结：</p>\n<ol>\n<li>suid功能时正对二进制命令或程序的，不能用在Shell等类型脚本文件上。</li>\n<li>用户或属主对应的前三位权限的x位上，如果有s（S）就表示具备suid权限。</li>\n<li>suid的作用就是让普通用户可以在执行某个设置了suid位命令或程序时，拥有和root管理员一样的身份和权限（默认）。</li>\n<li>二进制命令程序需要有可执行权限x配合才行。</li>\n<li>suid对应的身份和权限今在程序命令执行过程中有效。</li>\n<li>suid是一把双刃剑，是一个比较危险的功能，对系统安全有一定的威胁，企业里用户授权可以使用sudo等替代sgid功能。</li>\n<li>在进行安全优化时，系统中默认设置了suid权限的命令要被取消掉。</li>\n</ol>\n<p><strong>sgid：</strong><br>对于二进制命令或者程序来说，sgid的功能和suid基本相同，唯一区别是suid是获得命令属主的身份和权限，而sgid则是获得命令属组的身份和权限。</p>\n<p>sgid总结：</p>\n<ol>\n<li>与suid不同的是，sgid既可以针对文件，亦可以针对目录。</li>\n<li>sgid的权限是针对用户组权限位的。</li>\n</ol>\n<ul>\n<li>对于文件来说，sgid：<ul>\n<li>sgid仅对二进制命令及程序有效。</li>\n<li>二进制命令或程序，也需要有可执行权限x配合。</li>\n<li>执行命令的任意用户可以获得该命令程序执行期间所属组的身份和权限。</li>\n</ul>\n</li>\n<li>对于目录来说，sgid：<ul>\n<li>Linux里默认情况所有创建，默认用户和组都是自身。</li>\n<li>sgid可以让用户在此目录下创建的文件和目录具有和此目录相同的用户组设置</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/pasted-118.png\" alt=\"3\"></p>\n<p><strong>粘滞位：</strong><br>文件夹权限全部打开，但是目录本身只能被属主或root删除。</p>\n<p><strong>文件属主，属组的特殊情况：</strong><br>当文件或目录的用户或用户组被删除时，文件对应的属主和属组位置就会显示UID或GID。<br>修复方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradd 用户名 -u UID</span><br><span class=\"line\">groupadd -g GID 组名 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生产环境应用\"><a href=\"#生产环境应用\" class=\"headerlink\" title=\"生产环境应用\"></a>生产环境应用</h2><p>安全权限的临界点：<br>文件的安全临界点：<code>644</code><br>目录的安全临界点：<code>755</code></p>\n<p>文件加解锁：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@S1 ~]<span class=\"comment\"># lsattr /etc/passwd</span></span><br><span class=\"line\">---------------- /etc/passwd</span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># chattr +i /etc/passwd   &lt;==锁定文件，不给删除不给修改</span></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># lsattr /etc/passwd</span></span><br><span class=\"line\">----i----------- /etc/passwd</span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># cp /etc/passwd&#123;,.ori&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span>: overwrite ‘/etc/passwd.ori’? y</span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># rm -rf /etc/passwd</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span>: cannot remove ‘/etc/passwd’: Operation not permitted</span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># echo ddd &gt; /etc/passwd</span></span><br><span class=\"line\">-bash: /etc/passwd: Permission denied</span><br><span class=\"line\"></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># touch felix.txt</span></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># chattr +a felix.txt  &lt;==可以追加内容，但不能删除。</span></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># lsattr felix.txt </span></span><br><span class=\"line\">-----a---------- felix.txt</span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># echo 123 &gt;&gt; felix.txt </span></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># echo 123 &gt;&gt; felix.txt </span></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># echo 123 &gt;&gt; felix.txt </span></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># cat felix.txt</span></span><br><span class=\"line\">123</span><br><span class=\"line\">123</span><br><span class=\"line\">123</span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># rm -rf felix.txt </span></span><br><span class=\"line\"><span class=\"built_in\">rm</span>: cannot remove ‘felix.txt’: Operation not permitted</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-119.png\" alt=\"4\"></p>\n<h2 id=\"用户和用户组\"><a href=\"#用户和用户组\" class=\"headerlink\" title=\"用户和用户组\"></a>用户和用户组</h2><p>用户，用户组，管理员之间的关系：</p>\n<p><img src=\"/images/pasted-120.png\" alt=\"5\"><br>UID<br><img src=\"/images/pasted-121.png\" alt=\"6\"></p>\n<p>相关配置文件：<br><code>/etc/passwd</code> 存储当前系统中所有用户的信息<br><img src=\"/images/pasted-122.png\" alt=\"7\"><br>1.root用户编号固定为0<br>2.除了root用户外的其他用户，当用户被创建时，会在/home目录下为用户创建一个和用户名相同的目录作为这个用户的家目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning maildrop]<span class=\"comment\"># cat /etc/shells </span></span><br><span class=\"line\">/bin/sh</span><br><span class=\"line\">/bin/bash</span><br><span class=\"line\">/sbin/nologin</span><br><span class=\"line\">/usr/bin/sh</span><br><span class=\"line\">/usr/bin/bash</span><br><span class=\"line\">/usr/sbin/nologin</span><br><span class=\"line\">/bin/tcsh</span><br><span class=\"line\">/bin/csh</span><br><span class=\"line\">[root@lihuaning maildrop]<span class=\"comment\"># ls -l /bin/sh</span></span><br><span class=\"line\">lrwxrwxrwx. 1 root root 4 2019-07-12 22:48 /bin/sh -&gt; bash</span><br></pre></td></tr></table></figure>\n<p>bash是sh的扩展，sh是bash的软链接</p>\n<p><code>/etc/shadow</code> 存储当前系统中所有用户的密码信息，shadow配置文件的行数与passwd文件相同。<br><img src=\"/images/pasted-123.png\" alt=\"8\"></p>\n<p><strong>添加用户：</strong><br><img src=\"/images/pasted-124.png\" alt=\"9\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># cat /etc/default/useradd  &lt;==useradd配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># useradd defaults file</span></span><br><span class=\"line\">GROUP=100  &lt;==依赖于/etc/login.defs 的USERGROUP_ENAB参数，如果no，则此处控制</span><br><span class=\"line\">HOME=/home  &lt;==定义默认家目录位置</span><br><span class=\"line\">INACTIVE=-1  &lt;==用户是否启用过期停权，-1不启用</span><br><span class=\"line\">EXPIRE=  &lt;==用户终止日期，不设置代表不启用</span><br><span class=\"line\">SHELL=/bin/bash  &lt;==定义默认shell</span><br><span class=\"line\">SKEL=/etc/skel  &lt;==配置所有新用户家目录的默认环境变量文件存放路径，从该文件中复制过去，为每个用户提供用户环境变量的目录</span><br><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># ls -A /etc/skel/</span></span><br><span class=\"line\">.bash_logout  .bash_profile  .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE_MAIL_SPOOL=<span class=\"built_in\">yes</span>  &lt;==创建mail文件</span><br><span class=\"line\"></span><br><span class=\"line\">修改方法：</span><br><span class=\"line\">useradd -D 接参数改 或者直接编辑配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">示例：</span><br><span class=\"line\">在切到该用户后，提示符变为如下，是因为用户的环境变量缺失导致的。</span><br><span class=\"line\">[root@lihuaning xjh]<span class=\"comment\"># su xjh</span></span><br><span class=\"line\">bash-4.2$</span><br><span class=\"line\"></span><br><span class=\"line\">解决：bash-4.2$ <span class=\"built_in\">cp</span> /etc/skel/.bash* .</span><br><span class=\"line\">若未生效：<span class=\"built_in\">source</span> .bash_logout .bashrc .bash_profile &lt;==使环境变量生效</span><br><span class=\"line\"></span><br><span class=\"line\">或者：</span><br><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># echo $PS1</span></span><br><span class=\"line\">[\\u@\\h \\W]\\$</span><br><span class=\"line\">bash-4.2$ <span class=\"built_in\">export</span> PS1=<span class=\"string\">&#x27;[\\u@\\h \\W]\\$&#x27;</span>  &lt;==临时生效</span><br><span class=\"line\">[xjh@lihuaning root]$</span><br><span class=\"line\"><span class=\"built_in\">logout</span> 登出再登陆</span><br></pre></td></tr></table></figure>\n\n<p>/etc/login.defs<br>是设置用户帐号限制的文件。该文件里的配置对root用户无效。如果/etc/shadow文件里有相同的选项，则以/etc/shadow里的设置为准，也就是说/etc/shadow的配置优先级高于/etc/login.defs</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@felix ~]# cat /etc/login.defs </span><br><span class=\"line\">#</span><br><span class=\"line\"># Please note that the parameters in this configuration file control the</span><br><span class=\"line\"># behavior of the tools from the shadow-utils component. None of these</span><br><span class=\"line\"># tools uses the PAM mechanism, and the utilities that use PAM (such as the</span><br><span class=\"line\"># passwd command) should therefore be configured elsewhere. Refer to</span><br><span class=\"line\"># /etc/pam.d/system-auth for more information.</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># *REQUIRED*</span><br><span class=\"line\">#   Directory where mailboxes reside, _or_ name of file, relative to the</span><br><span class=\"line\">#   home directory.  If you _do_ define both, MAIL_DIR takes precedence.</span><br><span class=\"line\">#   QMAIL_DIR is for Qmail</span><br><span class=\"line\">#</span><br><span class=\"line\">#QMAIL_DIR\tMaildir</span><br><span class=\"line\">MAIL_DIR\t/var/spool/mail  &lt;==创建用户时，要在目录/var/spool/mail中创建一个用户mail文件</span><br><span class=\"line\">#MAIL_FILE\t.mail</span><br><span class=\"line\"></span><br><span class=\"line\"># Password aging controls:</span><br><span class=\"line\">#</span><br><span class=\"line\">#\tPASS_MAX_DAYS\tMaximum number of days a password may be used.</span><br><span class=\"line\">#\tPASS_MIN_DAYS\tMinimum number of days allowed between password changes.</span><br><span class=\"line\">#\tPASS_MIN_LEN\tMinimum acceptable password length.</span><br><span class=\"line\">#\tPASS_WARN_AGE\tNumber of days warning given before a password expires.</span><br><span class=\"line\">#</span><br><span class=\"line\">PASS_MAX_DAYS\t99999  &lt;==密码最大有效期</span><br><span class=\"line\">PASS_MIN_DAYS\t0  &lt;==两次修改密码的最小间隔时间</span><br><span class=\"line\">PASS_MIN_LEN\t5  &lt;==密码最小长度，对于root无效</span><br><span class=\"line\">PASS_WARN_AGE\t7  &lt;==密码过期前多少天开始提示</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"># Min/max values for automatic uid selection in useradd</span><br><span class=\"line\">#创建用户时不指定UID的话自动UID的范围</span><br><span class=\"line\">UID_MIN                  1000</span><br><span class=\"line\">UID_MAX                 60000</span><br><span class=\"line\"># System accounts&lt;==虚拟用户UID范围</span><br><span class=\"line\">SYS_UID_MIN               201</span><br><span class=\"line\">SYS_UID_MAX               999</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"># Min/max values for automatic gid selection in groupadd</span><br><span class=\"line\">#自动组ID的范围</span><br><span class=\"line\">GID_MIN                  1000</span><br><span class=\"line\">GID_MAX                 60000</span><br><span class=\"line\"># System accounts</span><br><span class=\"line\">SYS_GID_MIN               201</span><br><span class=\"line\">SYS_GID_MAX               999</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"># If defined, this command is run when removing a user.</span><br><span class=\"line\"># It should remove any at/cron/print jobs etc. owned by</span><br><span class=\"line\"># the user to be removed (passed as the first argument).</span><br><span class=\"line\">#</span><br><span class=\"line\">#USERDEL_CMD\t/usr/sbin/userdel_local &lt;==当删除用户的时候执行的脚本，默认关闭</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"># If useradd should create home directories for users by default</span><br><span class=\"line\"># On RH systems, we do. This option is overridden with the -m flag on</span><br><span class=\"line\"># useradd command line.</span><br><span class=\"line\">#</span><br><span class=\"line\">CREATE_HOME\tyes  &lt;==是否创建家目录，可用-m控制</span><br><span class=\"line\"></span><br><span class=\"line\"># The permission mask is initialized to this value. If not specified, </span><br><span class=\"line\"># the permission mask will be initialized to 022.</span><br><span class=\"line\">UMASK           077  &lt;==家目录对对应的umask值</span><br><span class=\"line\"></span><br><span class=\"line\"># This enables userdel to remove user groups if no members exist.</span><br><span class=\"line\">#</span><br><span class=\"line\">USERGROUPS_ENAB yes  &lt;==删除用户时，同时删除对应组。（如果组内没有其他成员）</span><br><span class=\"line\"></span><br><span class=\"line\"># Use SHA512 to encrypt password.</span><br><span class=\"line\">ENCRYPT_METHOD SHA512  &lt;==密码的加密算法SHA512</span><br><span class=\"line\">注意：</span><br><span class=\"line\">\t1.给开发人员等添加用户，尽量给截止时间。</span><br></pre></td></tr></table></figure>\n<p><strong>修改用户：</strong><br><img src=\"/images/pasted-125.png\" alt=\"10\"><br><strong>删除用户：</strong><br><img src=\"/images/pasted-126.png\" alt=\"11\"><br>生产环境中一般先注释passwd中该用户的所属行，不立刻进行删除。</p>\n<p><strong>设置密码：</strong><br><img src=\"/images/pasted-127.png\" alt=\"12\"></p>\n<p>–stdin 从标准输入接受密码并设置</p>\n<p>不交互设置密码：<br>方法1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@oldboyedu ~]<span class=\"comment\"># echo 123456|passwd --stdin oldgirl</span></span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user oldgirl.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>\n<p>方法2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@oldboyedu ~]<span class=\"comment\"># echo 123456 &gt;pass</span></span><br><span class=\"line\">[root@oldboyedu ~]<span class=\"comment\"># cat pass</span></span><br><span class=\"line\">123456</span><br><span class=\"line\">[root@oldboyedu ~]<span class=\"comment\"># passwd --stdin oldgirl &lt;pass </span></span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user oldgirl.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>\n<p>生产环境中密码管理思路：</p>\n<ol>\n<li>用户密码要足够复杂,最好8位以上字母(含大小写)、数字、特殊字符的组合 </li>\n<li>较大的企业用户和密码可以统一管理(采用微软活动目录或 openldap开源工具)</li>\n<li>动态密码:动态口令,需要时登录到动态口令系统中,即时申请获得密码,但如果若干时间内不操作服务器,密码就会失效</li>\n</ol>\n<p><img src=\"/images/pasted-128.png\" alt=\"13\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@oldboyedu ~]<span class=\"comment\"># tail -4 /etc/passwd|awk -F &quot;:&quot; &#x27;&#123;print $1&quot;:oldboy&quot;&#125;&#x27; &gt;user.log</span></span><br><span class=\"line\">[root@oldboyedu ~]<span class=\"comment\"># cat user.log</span></span><br><span class=\"line\">gongli1:oldboy</span><br><span class=\"line\">gongli2:oldboy</span><br><span class=\"line\">chenglong1:oldboy</span><br><span class=\"line\">zongsheng:oldboy</span><br></pre></td></tr></table></figure>\n<p>chpasswd对密码文件的要求是上述user.log</p>\n<p>方法1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@oldboyedu ~]<span class=\"comment\"># chpasswd&lt;user.log </span></span><br></pre></td></tr></table></figure>\n<p>方法2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@oldboyedu ~]<span class=\"comment\"># tail -4 /etc/passwd|awk -F &quot;:&quot; &#x27;&#123;print $1&quot;:oldboy&quot;&#125;&#x27;|chpasswd </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>批量创建用户并设置密码：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@felix ~]<span class=\"comment\"># echo felix&#123;01..10&#125; | xargs -n1 | sed -rn &#x27;s#(.*)#useradd \\1;echo 123456 | passwd --stdin \\1#gp&#x27; | bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># echo命令输出用户名 | xargs -n1 对输出的元素进行分组，每组一个元素 | 利用sed -n参数取消默认输出,-r参数支持ERE扩展元字符在这里指括号() 匹配所有，替换为 useradd \\1取出所有已经分组的元素。此刻用户已经添加完毕;echo 123456 | passwd --stdin \\1取出每位用户并从标准输入设置密码 接p打印结果。 | 将结果输出给bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user felix01.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user felix02.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user felix03.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user felix04.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user felix05.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user felix06.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user felix07.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user felix08.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user felix09.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br><span class=\"line\">Changing password <span class=\"keyword\">for</span> user felix10.</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-129.png\" alt=\"14\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@felix ~]<span class=\"comment\"># chage -l felix01</span></span><br><span class=\"line\">Last password change\t\t\t\t\t: Oct 17, 2019 &lt;==密码最近修改时间 2019-10-17  -d参数可控制该行</span><br><span class=\"line\"></span><br><span class=\"line\">Password expires\t\t\t\t\t: never  &lt;==密码过期时间，从来不过期</span><br><span class=\"line\">-M参数控制该行</span><br><span class=\"line\"></span><br><span class=\"line\">Password inactive\t\t\t\t\t: never  &lt;==密码停权时间</span><br><span class=\"line\">-l参数控制该行</span><br><span class=\"line\"></span><br><span class=\"line\">Account expires\t\t\t\t\t\t: never  &lt;==账户过期时间 </span><br><span class=\"line\">-E参数控制该行</span><br><span class=\"line\"></span><br><span class=\"line\">Minimum number of days between password change\t: 0  &lt;==修改密码最小间隔天数 </span><br><span class=\"line\">-m参数控制该行</span><br><span class=\"line\"></span><br><span class=\"line\">Maximum number of days between password change\t: 99999  &lt;==最长时间  </span><br><span class=\"line\">-M控制该行</span><br><span class=\"line\"></span><br><span class=\"line\">Number of days of warning before password expires\t: 7 &lt;==密码过去提前几天进行警告 </span><br><span class=\"line\">-W控制该行</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@felix ~]<span class=\"comment\"># chage -E &quot;2020-10-1||$(date +%F -d&#x27;10day&#x27;)&quot; felix01  &lt;==修改账户过期时间，或十天后停权</span></span><br><span class=\"line\">[root@felix ~]<span class=\"comment\"># chage -l felix01</span></span><br><span class=\"line\">Last password change\t\t\t\t\t: Oct 17, 2019</span><br><span class=\"line\">Password expires\t\t\t\t\t: never</span><br><span class=\"line\">Password inactive\t\t\t\t\t: never</span><br><span class=\"line\">Account expires\t\t\t\t\t\t: Oct 01, 2020 *</span><br><span class=\"line\">Minimum number of days between password change\t: 0</span><br><span class=\"line\">Maximum number of days between password change\t: 99999</span><br><span class=\"line\">Number of days of warning before password expires\t: 7</span><br></pre></td></tr></table></figure>\n<p><strong>其他用户相关命令：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">id</span> <span class=\"comment\">#查看用户身份</span></span><br><span class=\"line\"><span class=\"built_in\">whoami</span> <span class=\"comment\">#查看当前用户</span></span><br><span class=\"line\">w <span class=\"comment\">#查看所以登陆用户</span></span><br><span class=\"line\">last <span class=\"comment\">#显示登陆过的用户信息列表</span></span><br><span class=\"line\">lastlog <span class=\"comment\">#汇报最近货指定用户的登录情况</span></span><br></pre></td></tr></table></figure>\n<p><strong>关于用户的骚操作：</strong><br><code>touch /etc/nologin</code> 执行该命令会禁止除了root用户以外的其他用户登录服务器只要是创建该文件即可，应用场景比如服务器维护时需要暂时禁止普通用户登录。</p>\n<p><strong>GID</strong></p>\n<p><img src=\"/images/pasted-130.png\" alt=\"15\"><br>相关配置文件：<code>/etc/group</code></p>\n<p><img src=\"/images/pasted-131.png\" alt=\"16\"></p>\n<p>用户身份切换su<br><img src=\"/images/pasted-132.png\" alt=\"17\"></p>\n<p><code>su</code> 和 <code>su -</code>的区别<br><img src=\"/images/pasted-133.png\" alt=\"18\"><br>前者用户身份切换但环境变量没改变。</p>\n<p><strong>sudo命令</strong><br><img src=\"/images/pasted-134.png\" alt=\"18\"></p>\n<p>执行流程：</p>\n<p><img src=\"/images/pasted-135.png\" alt=\"19\"><br>配置/ect/sudoers</p>\n<ul>\n<li>visudo</li>\n<li>vim sudoers  &lt;==不推荐</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[felix01@felix ~]$ <span class=\"built_in\">ls</span> /root</span><br><span class=\"line\"><span class=\"built_in\">ls</span>: cannot open directory /root: Permission denied</span><br><span class=\"line\"></span><br><span class=\"line\">[root@felix ~]<span class=\"comment\"># visudo</span></span><br><span class=\"line\">97 <span class=\"comment\">## Allow root to run any commands anywhere</span></span><br><span class=\"line\">98 root    ALL=(ALL)       ALL</span><br><span class=\"line\">99 felix01 ALL=(ALL)       /bin/ls,/bin/cp</span><br><span class=\"line\">    用户   主机=(角色)     命令（全路径 <span class=\"built_in\">which</span>），多个命令用,隔开</span><br><span class=\"line\">    </span><br><span class=\"line\">99 felix   ALL=(ALL)       ALL  //相当于felix设置成管理员</span><br><span class=\"line\">99 felix   ALL=(ALL)       NOPASSWD: ALL  //sudo去密码</span><br><span class=\"line\">[root@felix ~]<span class=\"comment\"># sudo su -</span></span><br><span class=\"line\">Last login: Thu Oct 17 15:30:38 CST 2019 from 10.93.151.253 on pts/0</span><br><span class=\"line\">[root@felix ~]<span class=\"comment\">#</span></span><br><span class=\"line\">禁止root远程连接</span><br><span class=\"line\"></span><br><span class=\"line\">[root@felix ~]<span class=\"comment\"># ll /var/db/sudo/felix/1   &lt;==密码过期时间戳文件，默认5分钟过期</span></span><br><span class=\"line\">-rw------- 1 root felix 48 2019-10-17 16:25 /var/db/sudo/felix/1</span><br><span class=\"line\">[felix@felix ~]$ sudo -k  &lt;==清除时间戳，使sudo提示输入密码</span><br><span class=\"line\">[felix@felix ~]$ sudo <span class=\"built_in\">ls</span> /root</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> felix: </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RPM-YUM软件安装相关\"><a href=\"#RPM-YUM软件安装相关\" class=\"headerlink\" title=\"RPM/YUM软件安装相关\"></a>RPM/YUM软件安装相关</h1><p><img src=\"/images/pasted-187.png\" alt=\"RPM/YUM\"></p>\n<h1 id=\"特殊字符-SHELL相关\"><a href=\"#特殊字符-SHELL相关\" class=\"headerlink\" title=\"特殊字符/SHELL相关\"></a>特殊字符/SHELL相关</h1><h2 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h2><p><strong>基本含义：</strong>通配符简单说就是键盘上的一些特殊字符，可以实现某些特殊的功能。<br><strong>例如：</strong>可以用*代表所有，来模糊搜索系统中的文件。<br><strong>作用：</strong>通配符适用范围是命令行中的[普通命令]或脚本编程中。</p>\n<p><strong>第一组：</strong>模糊匹配<br><img src=\"/images/pasted-188.png\" alt=\"模糊匹配\"></p>\n<p><strong>第二组：</strong>路径位置<br><img src=\"/images/pasted-189.png\" alt=\"路径位置\"></p>\n<p><strong>第三组：</strong>引号相关<br><img src=\"/images/pasted-190.png\" alt=\"引号相关\"><br>坑：反引号解析出命令结果能被够一个命令调用，而双引号不行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># tar -czf felix_$(date +%F).tar.gz felix &lt;==打包文件时通过$()解析命令给文件加上日期</span></span><br><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># ls</span></span><br><span class=\"line\">felix_2019-10-09.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p><strong>第四组：</strong>其他字符<br><img src=\"/images/pasted-191.png\" alt=\"其他字符\"></p>\n<h2 id=\"管道重定向\"><a href=\"#管道重定向\" class=\"headerlink\" title=\"管道重定向\"></a>管道重定向</h2><p> <strong>重定向</strong></p>\n<ul>\n<li>1&gt; 标准输出重定向 箭头方向就是数据流向，把左边的数据流向到右边，会覆盖之前的数据</li>\n<li>1&gt;&gt; 追加输出重定向，内容追加到文件尾部</li>\n<li>0&lt; 标准输入重定向 箭头方向就是数据流向，把右边的数据流向到右边，会覆盖之前的数据</li>\n<li>0&lt;&lt; 追加输入重定向，内容追加到文件尾部（可配合EOF）</li>\n<li>2&gt; 错误输出重定向，箭头方向就是数据流向，把左边的报错输出到右边（覆盖）</li>\n<li>2&gt;&gt; 错误追加输出重定向（追加）</li>\n<li>&lt;&lt;&lt; 将后面的内容作为前面命令的标准输入,用于处理变量</li>\n</ul>\n<p> <strong>特殊的重定向</strong><br>   将标准错误重定向到标准输出，即标准错误和标准输出一样重定向到文件中的三种方法</p>\n<ul>\n<li>方法1：<code>echo “I am felix” 1&gt;&gt;felix.txt 2&gt;&gt;felix.txt</code></li>\n<li>方法2：<code>echo “I am felix” &amp;&gt;&gt;felix.txt</code></li>\n<li>方法3：<code>echo “I am felix” &gt;&gt;felix 2&gt;&amp;1</code><br> 2&gt;&amp;1的意思就是将 标准错误输出和标准输出等价进行重定向</li>\n</ul>\n<p>  <strong>管道</strong><br>    定义：管道左边的命令的执行结果，通过管道交给右边命令进行再处理。<br>    <code>[root@f ~]# cat anaconda-ks.cfg | grep &quot;kexec&quot;</code> //没有实际意义<br>    正确方法如下：<br>    <code>[root@f ~]# grep &quot;kexec&quot; anaconda-ks.cfg</code> //少钻管道，提高效率</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@f felix]<span class=\"comment\"># find ./ -name &quot;felix*&quot; -type f -mtime -3 -exec ls -l &#123;&#125; \\;</span></span><br><span class=\"line\">[root@f felix]<span class=\"comment\"># find ./ -name &quot;felix*&quot; -type f -mtime -7 | xargs ls -l</span></span><br><span class=\"line\">[root@f felix]<span class=\"comment\"># find ./ -name &quot;felix*&quot; -type f | xargs rm -rf</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Linux正则\"><a href=\"#Linux正则\" class=\"headerlink\" title=\"Linux正则\"></a>Linux正则</h2><p><img src=\"/images/pasted-192.png\" alt=\"Linux正则\"><br><strong>概念：</strong>作用和特殊字符一样，是为处理大量字符串及文本而定义的一套规则和方法，化繁为简。假设“@”代表“I am”，“!”代表“felix”，则执行。echo “@!”的结果就是输出“I am felix”。<br><strong>作用：</strong>提高效率，快速获取到想要的内容。适用于三剑客命令 grep（egrep），sed，awk。以行为单位进行处理。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># ifconfig ens3|sed -rn &#x27;2s#^.*inet (.*) net.*$#\\1#gp&#x27;</span></span><br><span class=\"line\">10.93.169.253</span><br></pre></td></tr></table></figure>\n<p><strong>易混淆的事项：</strong></p>\n<ol>\n<li>和通配符区别</li>\n<li>开发正则，一般是Perl兼容正则表达式</li>\n<li>Linux系统的三剑客正则表达式*</li>\n</ol>\n<p><strong>环境准备：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> grep=<span class=\"string\">&#x27;grep --color=auto&#x27;</span>  &lt;==C6需要单独设置</span><br><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># export LC_ALL=C  &lt;==设置后，匹配操作不会出现匹配异常情况</span></span><br><span class=\"line\">操作：</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt;/etc/profile&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">alias grep=&#x27;grep --color=auto&#x27;</span></span><br><span class=\"line\"><span class=\"string\">alias egrep=&#x27;egrep --color=auto&#x27;</span></span><br><span class=\"line\"><span class=\"string\">export LC_ALL=C</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile  &lt;==使修改内容生效</span><br></pre></td></tr></table></figure>\n<p><strong>分类：</strong></p>\n<ol>\n<li>BRE（基本正则表达式）  grep</li>\n<li>ERE（扩展正则表达式）  egrep</li>\n</ol>\n<h3 id=\"BRE\"><a href=\"#BRE\" class=\"headerlink\" title=\"BRE\"></a>BRE</h3><p><img src=\"/images/pasted-193.png\" alt=\"BRE\"><br><strong>BRE实践：</strong></p>\n<ol>\n<li>^以…开头的行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># cat test.txt  &lt;==环境准别</span></span><br><span class=\"line\">I am oldboy teacher!</span><br><span class=\"line\">i teach linux</span><br><span class=\"line\">I like badminton ball billiard ball and chinese chess</span><br><span class=\"line\">oursiteishttp://www.oldboyedu.com</span><br><span class=\"line\">my qq num is 49000448</span><br><span class=\"line\">not49000e448.</span><br><span class=\"line\">my god ,i am not oldbey, but OLDBOY</span><br><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># grep &quot;^n&quot; test.txt  &lt;==匹配以n开头的行</span></span><br><span class=\"line\">not49000e448.</span><br><span class=\"line\"></span><br><span class=\"line\">过滤文件类型操作</span><br><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># ll  </span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 1.txt</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 2.txt</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 3.txt</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 4.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root   0 2019-10-09 16:24 a.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root   0 2019-10-09 16:24 b.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root   0 2019-10-09 16:24 c.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root   0 2019-10-09 16:24 d.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root   0 2019-10-09 18:19 est.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 195 2019-10-09 22:01 test.txt</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:23 text</span><br><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># ll | grep &quot;^d&quot; &lt;==过滤以d开头的文件，即过滤目录</span></span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 1.txt</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 2.txt</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 3.txt</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 4.txt</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:23 text</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>$以..结尾的行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># grep -n &quot;m$&quot; test.txt &lt;==匹配以m结尾的行</span></span><br><span class=\"line\">4:oursiteishttp://www.oldboyedu.com</span><br><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># grep -n &quot;\\!$&quot; test.txt  &lt;==匹配以!结尾的行，\\ 表示转义</span></span><br><span class=\"line\">1:I am oldboy teacher!</span><br><span class=\"line\"></span><br><span class=\"line\">过滤目录操作</span><br><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># ll -F  &lt;==给目录后面加上反斜线</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 1.txt/</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 2.txt/</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 3.txt/</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 4.txt/</span><br><span class=\"line\">-rw-r--r-- 1 root root   0 2019-10-09 16:24 a.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root   0 2019-10-09 16:24 b.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root   0 2019-10-09 16:24 c.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root   0 2019-10-09 16:24 d.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root   0 2019-10-09 18:19 est.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 195 2019-10-09 22:01 test.txt</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:23 text/</span><br><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># ll -F | grep &quot;/$&quot;  &lt;==通过匹配以反斜线结尾的文件 找出目录</span></span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 1.txt/</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 2.txt/</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 3.txt/</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:24 4.txt/</span><br><span class=\"line\">drwxr-xr-x 2 root root   6 2019-10-09 16:23 text/</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>^$ 过滤空行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># grep -n &quot;^$&quot; test.txt  &lt;==匹配空行</span></span><br><span class=\"line\">4:</span><br><span class=\"line\">7:</span><br><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># grep -nv &quot;^$&quot; test.txt  &lt;==通过-v参数取反输出，则去除了文件的空行</span></span><br><span class=\"line\">1:I am oldboy teacher!</span><br><span class=\"line\">2:i teach linux</span><br><span class=\"line\">3:I like badminton ball billiard ball and chinese chess</span><br><span class=\"line\">5:oursiteishttp://www.oldboyedu.com</span><br><span class=\"line\">6:my qq num is 49000448</span><br><span class=\"line\">8:not49000e448.</span><br><span class=\"line\">9:my god ,i am not oldbey, but OLDBOY</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>. 表示匹配任意一个字符，有且只有一个。类似于通配符中的 ?</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning felix]# grep &quot;.&quot; test.txt  &lt;==匹配到了任意字符，所有字符都匹配上了</span><br><span class=\"line\">I am oldboy teacher!</span><br><span class=\"line\">i teach linux</span><br><span class=\"line\">I like badminton ball billiard ball and chinese chess</span><br><span class=\"line\">oursiteishttp://www.oldboyedu.com</span><br><span class=\"line\">my qq num is 49000448</span><br><span class=\"line\">not49000e448.</span><br><span class=\"line\">my god ,i am not oldbey, but OLDBOY</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>\\ 表示转义</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># grep &quot;.$&quot; test.txt  &lt;==匹配以任意字符结尾的行</span></span><br><span class=\"line\">I am oldboy teacher!</span><br><span class=\"line\">i teach linux</span><br><span class=\"line\">I like badminton ball billiard ball and chinese chess</span><br><span class=\"line\">oursiteishttp://www.oldboyedu.com</span><br><span class=\"line\">my qq num is 49000448</span><br><span class=\"line\">not49000e448.</span><br><span class=\"line\">my god ,i am not oldbey, but OLDBOY</span><br><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># grep &quot;\\.$&quot; test.txt  &lt;==转意后 匹配以点结尾的行</span></span><br><span class=\"line\">not49000e448.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>* 表示重复前面字符 0次或多次</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># grep &quot;0*&quot; test.txt  &lt;==由于*表示匹配0次或多次，所以文件未匹配上的（即0次）也一并输出了</span></span><br><span class=\"line\">I am oldboy teacher!</span><br><span class=\"line\">i teach linux</span><br><span class=\"line\">I like badminton ball billiard ball and chinese chess</span><br><span class=\"line\"></span><br><span class=\"line\">oursiteishttp://www.oldboyedu.com</span><br><span class=\"line\">my qq num is 49000448</span><br><span class=\"line\"></span><br><span class=\"line\">not49000e448.</span><br><span class=\"line\">my god ,i am not oldbey, but OLDBOY</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>.*包含空行在内的所有行，加上-n参数显示所有行的行号 等价于cat -n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># grep -n &quot;.*&quot; test.txt </span></span><br><span class=\"line\">1:I am oldboy teacher!</span><br><span class=\"line\">2:i teach linux</span><br><span class=\"line\">3:I like badminton ball billiard ball and chinese chess</span><br><span class=\"line\">4:</span><br><span class=\"line\">5:oursiteishttp://www.oldboyedu.com</span><br><span class=\"line\">6:my qq num is 49000448</span><br><span class=\"line\">7:</span><br><span class=\"line\">8:not49000e448.</span><br><span class=\"line\">9:my god ,i am not oldbey, but OLDBOY</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>^.* 表示匹配以任意多个字符开头的行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># grep &quot;^.*boy&quot; felix/test.txt  &lt;==匹配以任意字符开头 以boy结尾的行。相当于通配符里的 *boy</span></span><br><span class=\"line\">I am oldboy teacher!</span><br><span class=\"line\">oursiteishttp://www.oldboyedu.com</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>.*$ 表示匹配以任意多个字符结尾的行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># grep &quot;am.*$&quot; felix/test.txt  &lt;==匹配以任意字符结尾但开头是am 的行</span></span><br><span class=\"line\">I am oldboy teacher!</span><br><span class=\"line\">my god ,i am not oldbey, but OLDBOY</span><br></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>[abc]匹配带有 或a或b或c任意一个的行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># grep &quot;[qg]&quot; felix/test.txt  &lt;==匹配带有q 或者 g的行 ^不能用感叹号替换（会被当做字符）</span></span><br><span class=\"line\">my qq num is 49000448</span><br><span class=\"line\">my god ,i am not oldbey, but OLDBOY</span><br></pre></td></tr></table></figure>\n\n<ol start=\"11\">\n<li>[^abc]取反</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># grep &quot;[^qg]&quot; felix/test.txt  &lt;==取反 或q或g</span></span><br><span class=\"line\">I am oldboy teacher!</span><br><span class=\"line\">i teach linux</span><br><span class=\"line\">I like badminton ball billiard ball and chinese chess</span><br><span class=\"line\">oursiteishttp://www.oldboyedu.com</span><br><span class=\"line\">my qq num is 49000448</span><br><span class=\"line\">not49000e448.</span><br><span class=\"line\">my god ,i am not oldbey, but OLDBOY</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ERE\"><a href=\"#ERE\" class=\"headerlink\" title=\"ERE\"></a>ERE</h3><p><img src=\"/images/pasted-194.png\" alt=\"预定义特殊中括号\"><br><img src=\"/images/pasted-195.png\" alt=\"ERE\"></p>\n<ol>\n<li>+匹配前一个字符一次或多次。贪婪模式，尽量往后匹配。</li>\n</ol>\n<p><img src=\"/images/pasted-196.png\" alt=\"+匹配\"></p>\n<ol start=\"2\">\n<li>[字符1字符2] 匹配[]中的字符或l或x 一次或多次</li>\n</ol>\n<p><img src=\"/images/pasted-197.png\" alt=\"字符1字符2\"></p>\n<ol start=\"3\">\n<li>? 匹配前一个字符0次或1次。</li>\n</ol>\n<p>?和*的区别</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">es?  0-1次  </span><br><span class=\"line\">   e</span><br><span class=\"line\">   es</span><br><span class=\"line\"></span><br><span class=\"line\">es*  0-n次</span><br><span class=\"line\">   e</span><br><span class=\"line\">   es</span><br><span class=\"line\">   ess</span><br><span class=\"line\">   essssss   </span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-198.png\" alt=\"多次匹配\"></p>\n<ol start=\"4\">\n<li>| 或者 同时过滤多个字符串</li>\n</ol>\n<p><img src=\"/images/pasted-199.png\" alt=\"过滤多个\"></p>\n<ol start=\"5\">\n<li>元字符</li>\n</ol>\n<p><code>egrep -o &quot;(0)(0)\\1\\2&quot; test.txt 等价于 egrep -o &quot;0000&quot; test.txt</code><br><img src=\"/images/pasted-200.png\" alt=\"元字符\"></p>\n<p><img src=\"/images/pasted-201.png\" alt=\"元字符\"></p>\n<ol start=\"6\">\n<li>\\b 匹配单词边界 类似grep -w</li>\n</ol>\n<p><img src=\"/images/pasted-202.png\" alt=\"\\b\"></p>\n<ol start=\"7\">\n<li>\\B 非单词边界匹配，即不匹配独立单词，而匹配非独立的单词</li>\n</ol>\n<p><img src=\"/images/pasted-203.png\" alt=\"\\B\"></p>\n<ol start=\"8\">\n<li>\\d 匹配单个数字，需要配合grep -P Perl语言的正则</li>\n</ol>\n<p><img src=\"/images/pasted-204.png\" alt=\"\\d\"></p>\n<h2 id=\"Linux四剑客\"><a href=\"#Linux四剑客\" class=\"headerlink\" title=\"Linux四剑客\"></a>Linux四剑客</h2><ul>\n<li>grep 过滤查找内容</li>\n<li>sed 取行，替换，删除，追加</li>\n<li>awk 取列</li>\n<li>find 查找文件</li>\n</ul>\n<h3 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h3><p><img src=\"/images/pasted-205.png\" alt=\"awk\"><br><code>sed -n &#39;1,5p&#39; /etc/passwd &gt; a.txt</code> &lt;==用sed取出1-5行，重定向到a.txt<br><img src=\"/images/pasted-206.png\" alt=\"awk-1\"></p>\n<p><code>awk -F &quot;:&quot; &#39;&#123;print $1&#125;&#39; a.txt</code> &lt;==指定分隔符后，{}中接动作 print 打印 $1表示第一列<br><img src=\"/images/pasted-207.png\" alt=\"awk-2\"><br>同上：逗号表示打印$1和$5，打印出的内容默认以空格分割。<br><img src=\"/images/pasted-208.png\" alt=\"awk-3\"><br>$1代表第一列，$2代表第二列，$0代表整行，$NF代表最后一列<br><img src=\"/images/pasted-209.png\" alt=\"awk-4\"></p>\n<blockquote>\n<p><strong>awk案例1</strong><br>打印1，3，最后一列<br><img src=\"/images/pasted-210.png\" alt=\"案例1\"><br>打印倒数第2列<br><code>awk -F &quot;:&quot; &#39;&#123;print $1,$3,$(NF-1)&#125;&#39; a.txt</code> &lt;==$(NF-1)代表倒数第二列<br><img src=\"/images/pasted-211.png\" alt=\"案例1\"></p>\n</blockquote>\n<blockquote>\n<p><strong>awk案例2</strong><br><code>awk &#39;NR&gt;1&amp;&amp;NR&lt;4&#39; a.txt</code> &lt;==NR大于1（即从2开始）and NR小于4（即到3结束）结果取出2 3行，and取交集<br><code>awk &#39;NR==2,NR==3&#39; a.txt</code> &lt;==NR等于2 NR等于3 即取出2 3行<br><img src=\"/images/pasted-212.png\" alt=\"案例2\"></p>\n</blockquote>\n<blockquote>\n<p><strong>awk案例3</strong><br><code>awk &#39;/root/&#39; a.txt</code>  &lt;==过滤只含root的行<br><img src=\"/images/pasted-213.png\" alt=\"案例3\"></p>\n</blockquote>\n<blockquote>\n<p><strong>awk案例4</strong><br>awk过滤非 指定字符串的行<br><code>awk &#39;/^[^r]/&#39; a.txt</code>  &lt;==[]中 ^r 是指非r(取反操作)，括号外的^以什么什么开头，这里指过滤出以非r开头的行<br><img src=\"/images/pasted-214.png\" alt=\"案例4\"></p>\n</blockquote>\n<blockquote>\n<p><strong>awk案例5</strong><br>awk取文件的第一列，第三列，最后一列并打印行号<br><code>awk -F &quot;:&quot;  &#39;&#123;print $1,$3,$NF&#125;&#39; a.txt | cat -n</code><br><img src=\"/images/pasted-215.png\" alt=\"案例5\"><br><code>awk -F &quot;:&quot;  &#39;&#123;print NR,$1,$3,$NF&#125;&#39; a.txt</code> &lt;==取第行号(NR),第一列($1),第二列($3),最后一列(NF)<br><img src=\"/images/pasted-216.png\" alt=\"案例5\"></p>\n</blockquote>\n<blockquote>\n<p><strong>awk案例6</strong><br>awk取ifconfig ens3的IP地址<br><code>ifconfig ens3 | awk -F &quot; &quot; &#39;NR==2&#123;print $2&#125;&#39;</code> &lt;==-F指定分割符，NR定位到行号2，取出指定列$2<br><code>ifconfig ens3 | awk &#39;NR==2&#123;print $2&#125;&#39;</code> &lt;==同上，缺少-F（因为不指定-F即默认以空格作为分割符）<br><img src=\"/images/pasted-217.png\" alt=\"案例6\"></p>\n</blockquote>\n<blockquote>\n<p><strong>多分隔符概念：</strong><br><code>echo --==--==--====-1.........2[[[[[[[3******4%%%%%%%5 | awk -F &quot;[-=.[*%]+&quot; &#39;&#123;print $3,$4&#125;&#39;</code> &lt;==-F参数指定分割符[]+，指的是将一堆括号内的符号看作一个分隔符，分隔符的左右两边分别是$n 和 $n+1<br>输出：2 3</p>\n</blockquote>\n<blockquote>\n<p><strong>awk案例7</strong><br>过滤文件中第一列内容匹配root的字符串，把符合的行的最后一列输出<br><code>awk -F &quot;:&quot; &#39;$1~/root/&#123;print $NF&#125;&#39; a.txt</code> &lt;==第一列($1) 匹配到(~) root，就把匹配到的这一行的最后一列打印出来<br><img src=\"/images/pasted-218.png\" alt=\"案例7\"></p>\n</blockquote>\n<blockquote>\n<p><strong>awk案例8</strong><br><code>awk -F &#39; &#39; &#39;$3&gt;80&#123;print $0&#125;&#39; c.txt</code>  &lt;==分数大于80的<br><code>awk -F &#39; &#39; &#39;$3==100&#123;print $0&#125;&#39; c.txt</code>  &lt;==分数等于100的<br><img src=\"/images/pasted-219.png\" alt=\"案例8\"></p>\n</blockquote>\n<p><strong>awk练习</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># cat a.txt </span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure>\n<p>问题1：取test.txt文件的第2行到第3行的内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]# awk -F &quot;:&quot; &#x27;NR==2,NR==3&#123;print $0&#125;&#x27; a.txt </span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure>\n<p>问题2：过滤出含有root字符串的行※。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]# awk -F &quot;:&quot; &#x27;$1~/root/&#123;print $0&#125;&#x27; a.txt </span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure>\n<p>问题3：删除含有root字符串的行※。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]# awk -F &quot;:&quot; &#x27;$1~/[^root]/&#123;print $0&#125;&#x27; a.txt </span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class=\"line\">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure>\n<p>问题4：取文件的第一列、第三列和最后一列内容，并打印行号※。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]# awk -F &quot;:&quot; &#x27;&#123;print NR,$1,$3,$NF&#125;&#x27; a.txt </span><br><span class=\"line\">1 root 0 /bin/bash</span><br><span class=\"line\">2 bin 1 /sbin/nologin</span><br><span class=\"line\">3 daemon 2 /sbin/nologin</span><br><span class=\"line\">4 adm 3 /sbin/nologin</span><br><span class=\"line\">5 lp 4 /sbin/nologin</span><br></pre></td></tr></table></figure>\n<p>问题5：取出Linux中执行ifconfig eth0后对应的IP地址（只能输出IP地址）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]# ifconfig ens3 | awk -F &quot; &quot; &#x27;NR==2&#123;print $2&#125;&#x27;</span><br><span class=\"line\">10.93.169.253</span><br></pre></td></tr></table></figure>\n<p>问题6：过滤文件中第一列内容匹配root的字符串，把符合的行的最后一列输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]# awk -F &quot;:&quot; &#x27;$1~/root/&#123;print $NF&#125;&#x27; a.txt </span><br><span class=\"line\">/bin/bash</span><br></pre></td></tr></table></figure>\n<p>问题7：过滤下列test1.txt文件中第三列内容分数大于70，并且小于95的人名和性别。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]# cat c.txt </span><br><span class=\"line\">张三 男 80</span><br><span class=\"line\">李四 女 70</span><br><span class=\"line\">王五 男 88</span><br><span class=\"line\">赵六 男 100</span><br><span class=\"line\">[root@lihuaning ~]# awk -F &quot; &quot; &#x27;$3&gt;70&amp;&amp;$3&lt;95&#123;print $1,$2&#125;&#x27; c.txt </span><br><span class=\"line\">张三 男</span><br><span class=\"line\">王五 男</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>cut命令:</strong> 简单取列<br><code>cut -d&quot; &quot; -f2-6 a.txt</code> &lt;==-d指定分隔符，-f指定取第几列。也可用逗号，单个字符提取<br><img src=\"/images/pasted-220.png\" alt=\"cut\"><br><code>cut -c7-,1-5 felixis.txt</code> &lt;==取第7个字符到结尾，再取1-5五个字符<br><img src=\"/images/pasted-221.png\" alt=\"cut\"></p>\n</blockquote>\n<h3 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h3><p><img src=\"/images/pasted-222.png\" alt=\"upload successful\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">复杂语法：</span><br><span class=\"line\"><span class=\"string\">&#x27;$&#x27;</span>    文件最后一行，</span><br><span class=\"line\"><span class=\"string\">&#x27;!&#x27;</span>     不进行</span><br><span class=\"line\"><span class=\"string\">&#x27;N&#x27;</span>    读入下一行并加入缓存尾；</span><br><span class=\"line\"><span class=\"string\">&#x27;;&#x27;</span>     语句分隔</span><br><span class=\"line\"><span class=\"string\">&#x27;/&#x27;</span>     查找（起始）</span><br><span class=\"line\"><span class=\"string\">&#x27;\\n&#x27;</span>   换行符（转意写法）</span><br><span class=\"line\"><span class=\"string\">&#x27;Number&#x27;</span>    Number（字符序列）</span><br><span class=\"line\"><span class=\"string\">&#x27;/&#x27;</span>    （查找结束）</span><br><span class=\"line\"><span class=\"string\">&#x27;P&#x27;</span>    输出缓存中顺序第一字符到’\\n<span class=\"string\">&#x27;之间的字符序列</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>D<span class=\"string\">&#x27;    删除缓存中顺序第一字符到’\\n&#x27;</span>之间的字符序列</span><br><span class=\"line\"></span><br><span class=\"line\">sed <span class=\"string\">&#x27;/abc/d;/efg/d&#x27;</span> a.txt &gt; a.log   删除abc或efg的行</span><br><span class=\"line\">其中，<span class=\"string\">&quot;abc&quot;</span>也可以用正则表达式来代替</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>sed案例1:</strong> 打印二到三行<br><code>sed -n &#39;2,3p&#39; test.txt</code> &lt;==取消默认输出<br><img src=\"/images/pasted-223.png\" alt=\"案例1\"></p>\n</blockquote>\n<blockquote>\n<p><strong>sed案例2:</strong> 过滤出含有oldboy字符串的行※<br><code>sed -n &#39;/oldboy/p&#39; test.txt</code><br><img src=\"/images/pasted-224.png\" alt=\"案例2\"></p>\n</blockquote>\n<blockquote>\n<p><strong>sed案例3:</strong> 删除含有oldboy字符串的行※<br><code>sed &#39;/oldboy/d&#39; test.txt</code> &lt;==未更改源文件<br><img src=\"/images/pasted-225.png\" alt=\"案例3\"><br>按行删除<br><code>sed  &#39;2d&#39; test.txt</code> &lt;==删除第二行 加-i写入文件;也可 ‘5,8d’ 删除5-8行<br><img src=\"/images/pasted-226.png\" alt=\"案例3\"></p>\n</blockquote>\n<blockquote>\n<p><strong>sed案例4:</strong> 将文件中的oldboy字符串全部替换为oldgirl※<br>vim中的替换 :%s/oldboy/oldgirl/g<br><code>sed &#39;s/oldboy/oldgirl/g&#39; test.txt</code>  &lt;== -i 直接修改文件<br><img src=\"/images/pasted-227.png\" alt=\"案例4\"></p>\n</blockquote>\n<blockquote>\n<p><strong>sed案例5:</strong> 一次性替换多次,替换oldboy为felix and 49000448为513247869<br><code>sed -e &#39;s/oldboy/felix/g&#39; -e &#39;s/49000448/513247869/g&#39; test.txt</code> &lt;==-e多次编辑,可通过-i 直接修改文件<br><img src=\"/images/pasted-228.png\" alt=\"案例5\"></p>\n</blockquote>\n<blockquote>\n<p><strong>sed案例6:</strong> 追加 a 按行追加<br><code>sed &#39;2a woca&#39; test.txt</code>  &lt;==在第二行后面追加 wocao<br><img src=\"/images/pasted-229.png\" alt=\"案例6\"></p>\n</blockquote>\n<blockquote>\n<p><strong>sed案例7:</strong> 插入 i 在指定行插入<br><code>sed &#39;2i wocacharu\\n第二行\\n第三行&#39; test.txt est.txt</code> &lt;== 加上\\n 可插入多行<br><img src=\"/images/pasted-230.png\" alt=\"案例7\"></p>\n</blockquote>\n<p><strong>sed练习</strong><br>正则是贪婪匹配模式。</p>\n<p><strong>ifconfig取ip</strong><br><img src=\"/images/pasted-231.png\" alt=\"ifconfig\"><br><code>ifconfig ens3 | sed -n 2p | sed &#39;s/^.*inet //g&#39; | sed &#39;s/  netm.*$//g&#39;</code><br>输出：10.93.169.253</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ifconfig ens3 &lt;===查看ens3网卡的配置信息</span><br><span class=\"line\">sed -n 2p     &lt;===取出第2行</span><br><span class=\"line\">sed &#x27;s/^.*inet //g&#x27;   &lt;===开始匹配以任意字符开头,匹配到(inet )后结束,并且替换为空(即删除匹配到的字符)</span><br><span class=\"line\">sed &#x27;s/  netm.*$//g &lt;===继续匹配以(  netm)且任意字符结尾,并且替换为空(即删除匹配到的字符)</span><br></pre></td></tr></table></figure>\n<p><strong>方法论：</strong><br>要取出目标,删除目标两边的,就得到了目标:先匹配上,然后再删除.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># ifconfig ens3 | sed -n 2p | sed -e &#x27;s/^.*inet //g&#x27; -e &#x27;s/  netm.*$//g&#x27;  &lt;===通过-e 进行多次编辑,减少了管道的使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># ifconfig ens3 | sed -ne &#x27;s/^.*inet //g&#x27; -e &#x27;s/  netm.*$//gp&#x27;  &lt;===通过-n 取消默认输出,再在结尾通过p输出已经匹配到的东西</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># ifconfig ens3 | sed -nr &#x27;2s#^.*inet (.*)  netmask.*$#\\1#gp&#x27;  &lt;===通过\\1将第一个括号里匹配到的东西通过p打印输出</span></span><br><span class=\"line\">10.93.169.253</span><br><span class=\"line\">ifconfig ens3  &lt;===查看ens3网卡配置信息</span><br><span class=\"line\">sed -nr <span class=\"string\">&#x27;2s#^.*inet (.*)  netmask.*$#\\1#gp&#x27;</span>   &lt;== -n参数取消默认输出,-r参数支持ERE扩展元字符在这里指括号()。取出第二行,匹配出inet及其开头和netmask及其末尾,然后通过\\n取出内容并替换为 (.*)所匹配到的ip,并它通过内置命令符p打印出来.</span><br></pre></td></tr></table></figure>\n\n<p><strong>截取第四行 权限部分 不含0</strong><br><img src=\"/images/pasted-232.png\" alt=\"qx\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning felix]<span class=\"comment\"># stat /etc/hosts | sed -nr &#x27;4s#^.*\\(0([0-9]*)/-.*$#\\1#gp&#x27;</span></span><br><span class=\"line\">644</span><br></pre></td></tr></table></figure>\n\n<p><strong>ip addr 取出ip</strong><br><img src=\"/images/pasted-233.png\" alt=\"ip\"></p>\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><p><img src=\"/images/pasted-234.png\" alt=\"grep\"></p>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p><strong>find命令</strong><br><strong>原理：</strong>磁盘遍历（速度慢）<br><strong>用法：</strong>按文件名查找：路径 名字(-name) “具体的文件*”<br><strong>参数：</strong></p>\n<ul>\n<li>-name 按文件名查找</li>\n<li>-type 按文件类型查找</li>\n<li>-exec 对查找的结果进行再处理</li>\n<li>-mtime 按修改时间查找<ul>\n<li>-4 表示文件更改时间距现在4天以内</li>\n<li>+4 表示文件更改时间距现在4天以前</li>\n<li>4 表示第4天<br><img src=\"/images/pasted-235.png\" alt=\"find\"></li>\n<li>-perm 按权限查找<br><img src=\"/images/pasted-236.png\" alt=\"find\"></li>\n<li>-a and 并且</li>\n<li>-o or 或者</li>\n<li>! 取反 放在哪个参数后面，就对该参数的结果取反</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<ol>\n<li><code>find ~/felix -name &quot;felix*&quot; -type f  -exec ls -l &#123;&#125; \\;</code>（{} 表占位符，将-exec之前处理的结果放入其中进行再处理，”;“作为结束标识符，考虑到各系统中分号会有不同的意义，所以前面要加反斜杠对分号进行转义。）</li>\n<li><code>find / -type d[f] -name &quot;felix&quot;</code> 按文件类型查找，多参数并存取交集</li>\n<li><code>find / -type d -o -name &quot;felix&quot;</code>  //-o参数取并集（结果匹配到了：所有目录 和 文件名为felix的文件）</li>\n</ol>\n<p><strong>xargs</strong><br>分组，或从标准输入执行命令</p>\n<ul>\n<li>-n数字 每个分组包含几个元素</li>\n<li>-d”” 指定分隔符，不指定默认是空格</li>\n<li>-i 把{}当作前面查找的结果</li>\n</ul>\n<p><strong>示例：</strong><br><code>find ./ -name &quot;felix*&quot; -type f | xargs -i cp &#123;&#125; /root/1/</code> //从标准输入执行命令</p>\n<h2 id=\"SHELL脚本\"><a href=\"#SHELL脚本\" class=\"headerlink\" title=\"SHELL脚本\"></a>SHELL脚本</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p><strong>shell登录方式：</strong></p>\n<ul>\n<li>通过系统用户登录后默认运行的Shell</li>\n<li>非登录交互式运行Shell（手动敲下bash或不需要输密码或远程ssh等操作）</li>\n<li>执行脚本运行非交互式Shell</li>\n</ul>\n<p>正常登录时的加载顺序：<br><img src=\"/images/pasted-254.png\" alt=\"load\"></p>\n<p><strong>父子shell问题：</strong><br>使用sh或bash或者默认执行脚本时，会开启一个子Shell运行，而使用source或者.执行脚本，则不会开子Shell，而是在同一个Shell里执行。</p>\n<p>通过source或”.”点号加载执行过的脚本，由于是在当前Shell中执行脚本，因此在脚本结束后，脚本中的变量（包括函数）值在当前Shell中依然存在，而sh和bash执行脚本都会启动新的子Shell执行，执行完后退回到父Shell。所以，变量（包括函数）值等无法保留。</p>\n<p>因此，在做Shell脚本开发时，如果脚本中有引用或执行其他脚本的内容或者配置文件的需求时，最好用“”点号或source先加载该脚本或配置文件，这样处理后，在加载脚本下面就可以调用source加载的脚本及配置文件中变量及函数等内容了。</p>\n<p><strong>变量：</strong><br>环境变量：又称为全局变量</p>\n<ul>\n<li>内置环境变量</li>\n<li>自定义环境变量</li>\n</ul>\n<p>查看：env命令<br><strong>定义：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">方法1:</span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># export FELIX=1</span></span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># echo $FELIX</span></span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">方法2：</span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># QIAOMU=2</span></span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># export QIAOMU  &lt;==不用export导出的话，就是普通变量</span></span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># echo $QIAOMU</span></span><br><span class=\"line\">2</span><br><span class=\"line\"></span><br><span class=\"line\">方法3：</span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># declare -x FLX=3</span></span><br><span class=\"line\">[root@Felix ~]<span class=\"comment\"># echo $FLX</span></span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<p>永久生效：可以放入/etc/bashrc中。</p>\n<p><strong>取消：</strong>unset FLX<br><strong>注意：</strong>书写crond定时任务时要注意，脚本中用到的环境变量最好在执行的Shell脚本中重新定义。</p>\n<p><strong>普通变量：</strong>又称为局部变量<br><strong>赋值方法：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">变量名=value   <span class=\"comment\">#&lt;==赋值时不加引号。</span></span><br><span class=\"line\">变量名=<span class=\"string\">&#x27;value&#x27;</span>  <span class=\"comment\">#&lt;==赋值时加单引号。</span></span><br><span class=\"line\">变量名=<span class=\"string\">&quot;value&quot;</span> <span class=\"comment\">#&lt;==赋值时加双引号。</span></span><br><span class=\"line\">变量名=`<span class=\"built_in\">ls</span>`     <span class=\"comment\">#&lt;==赋值时加反引号。</span></span><br></pre></td></tr></table></figure>\n<p><strong>常规普通变量定义：</strong><br>变量内容为连续数字或字符串时赋值，变量内容两边可以不加引号，例如a=123。</p>\n<ol>\n<li><p>变量的内容很多，有空格且希望解析内容中的变量，就加双引号，例如a=”/etc/rc.local $USER”，此时输出变量会对内容中的$USER进行解析然后再输出。(ps：双引号解析变量)</p>\n</li>\n<li><p>希望原样输出变量的内容时就用单引号引起内容进行赋值，例如：a=’$USER’。（ps：单引号所见即所得）</p>\n</li>\n<li><p>希望变量内容是命令的解析结果的定义及赋值：(ps：$()或` `可以解析命令) 要使用反引号将赋值的命令括起来，例如：a=`ls`，或者用$() 括起来，例如：a=$(ls)。</p>\n</li>\n<li><p>{金庸新}著 天子心经（ps：{}大括号用于区分变量与字符串）</p>\n</li>\n</ol>\n<p><strong>特殊的awk：</strong><br><img src=\"/images/pasted-255.png\" alt=\"awk\"></p>\n<p><strong>变量总结：</strong></p>\n<ol>\n<li>变量名<br>变量名组成、定义规范</li>\n<li>等号<br>赋值符，两边不能有空格</li>\n<li>变量内容<br>单引号(所见即所得)、双引号(解析变量)、反引号(解析命令)、不加引号(连续的数字或字符串赋值)</li>\n<li>输出<br>用echo 或 printf<br>变量名加$符号，如果变量后面有内容，用{}引用变量部分。</li>\n</ol>\n<h3 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h3><p><img src=\"/images/pasted-263.png\" alt=\"特殊变量\"><br><strong>常用特殊位置变量：</strong></p>\n<ul>\n<li>$0 获取当前执行Shell脚本文件名，如果执行脚本带路径，那么就包括脚本路径</li>\n<li>$n 获取当前执行的shell脚本的第n个参数值，n=1..9，当n为0时表示脚本的文件名，如果n大于9，则用大括号括起来，例如${10}，防止金庸新的情况出现，接的参数以空格隔开</li>\n<li>$# 获取当前执行的shell脚本后面接的参数的总个数</li>\n<li>$* 获取当前执行的shell脚本的所有参数，但是将所有参数视为一个单个字符串”$1 $2 $3”</li>\n<li>$@ 获取当前执行的shell脚本的所有参数，但是将所有参数是为独立字符串”$1” “$2” “$3”</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># set -- &quot;I am&quot; itsix felix</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $1</span></span><br><span class=\"line\">I am</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $2</span></span><br><span class=\"line\">itsix</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $3</span></span><br><span class=\"line\">felix</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $#</span></span><br><span class=\"line\">3</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $*</span></span><br><span class=\"line\">I am itsix felix</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $@</span></span><br><span class=\"line\">I am itsix felix</span><br></pre></td></tr></table></figure>\n<p><strong>shell进程特殊状态变量</strong></p>\n<ul>\n<li>$? 获取执行上一个指令的执行状态返回值（0为成功，非零为失败），这个变量最常用</li>\n<li>$$ 获取当前执行的shell脚本的进程号（PID），这个变量不常用，了解即可</li>\n<li>$! 获取上一个在后台工作的进程的进程号（PID），这个变量不常用，了解即可</li>\n<li>$_ 获取在此之前执行的命令或脚本的最后一个参数，这个变量不常用，了解即可</li>\n</ul>\n<h3 id=\"变量子串\"><a href=\"#变量子串\" class=\"headerlink\" title=\"变量子串\"></a>变量子串</h3><p><img src=\"/images/pasted-264.png\" alt=\"变量子串\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$&#123;parameter&#125;</span>返回变量<span class=\"variable\">$parameter</span>的内容</span><br><span class=\"line\"><span class=\"variable\">$&#123;#parameter&#125;</span> 返回变量<span class=\"variable\">$parameter</span>内容的长度（按字符），也适合特殊变量*</span><br><span class=\"line\"><span class=\"variable\">$&#123;parameter:offset&#125;</span>在变量<span class=\"variable\">$&#123;parameter&#125;</span>中，从位置offset之后开始提取子串到结尾</span><br><span class=\"line\"><span class=\"variable\">$&#123;parameter:offset:length&#125;</span>在变量<span class=\"variable\">$&#123;parameter&#125;</span>中，从位置offset之后开始提取长度为length的子串</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $&#123;OLDBOY&#125;</span></span><br><span class=\"line\">I am oldboy</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $&#123;#OLDBOY&#125;  &lt;==返回变量内容长度。**</span></span><br><span class=\"line\">11</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $&#123;OLDBOY:5:3&#125;  &lt;==从第五个字符开始，往后取三个字符。**</span></span><br><span class=\"line\">old</span><br></pre></td></tr></table></figure>\n\n<p><strong>字串应用-删除</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#从开头删除</span></span><br><span class=\"line\"><span class=\"variable\">$&#123;parameter#word&#125;</span>\t\t从变量<span class=\"variable\">$&#123;parameter&#125;</span>【开头】开始删除最【短】匹配的word子串</span><br><span class=\"line\"><span class=\"variable\">$&#123;parameter##word&#125;</span>\t\t从变量<span class=\"variable\">$&#123;parameter&#125;</span>【开头】开始删除最【长】匹配的word子串</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-256.png\" alt=\"delete\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#从结尾删除</span></span><br><span class=\"line\"><span class=\"variable\">$&#123;parameter%word&#125;</span>\t\t从变量<span class=\"variable\">$&#123;parameter&#125;</span>结尾开始删除最短匹配的word子串</span><br><span class=\"line\"><span class=\"variable\">$&#123;parameter%%word&#125;</span>\t\t从变量<span class=\"variable\">$&#123;parameter&#125;</span>结尾开始删除最长匹配的word子串</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-257.png\" alt=\"delete\"><br><strong>删除小结：</strong></p>\n<ul>\n<li>#表示从开头删除匹配最短。</li>\n<li>##表示从开头删除匹配最长。</li>\n<li>%表示从结尾删除匹配最短。</li>\n<li>%%表示从结尾删除匹配最长。</li>\n<li>a*c表示匹配的字符串，<em>匹配所有，a</em>c匹配开头为a中间任意多个字符结尾为c的。</li>\n<li>a*C表示匹配的字符串，<em>匹配所有，a</em>C匹配开头为a中间任意多个字符结尾为C的。<br>口诀：一个匹配删除最短，两个匹配删除最长</li>\n</ul>\n<p><strong>字串应用-替换</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#类似sed替换</span></span><br><span class=\"line\"><span class=\"variable\">$&#123;parameter/pattern/string&#125;</span>\t    使用string代替第一个匹配的pattern</span><br><span class=\"line\"><span class=\"variable\">$&#123;parameter//pattern/string&#125;</span>\t使用string代替所有匹配的pattern</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># OLDBOY=&quot;I am Felix. yes. Felix.&quot;</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $OLDBOY</span></span><br><span class=\"line\">I am Felix. <span class=\"built_in\">yes</span>. Felix.</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $&#123;OLDBOY/Felix/bangbang&#125;</span></span><br><span class=\"line\">I am bangbang. <span class=\"built_in\">yes</span>. Felix.</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $&#123;OLDBOY//Felix/bangbang&#125;</span></span><br><span class=\"line\">I am bangbang. <span class=\"built_in\">yes</span>. bangbang.</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取变量内容长度的方法：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$OLDBOY</span>|<span class=\"built_in\">wc</span> -L</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#OLDBOY&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">expr</span> length <span class=\"string\">&quot;<span class=\"variable\">$OLDBOY</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$OLDBOY</span>|awk <span class=\"string\">&#x27;&#123;print length&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$OLDBOY</span>|awk <span class=\"string\">&#x27;&#123;print length($0)&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>练习：句子中小于6个字符的单词打印出来</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Whatever is worth doing is worth doing well.</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># sh ww.sh </span></span><br><span class=\"line\">is</span><br><span class=\"line\">worth</span><br><span class=\"line\">doing</span><br><span class=\"line\">is</span><br><span class=\"line\">worth</span><br><span class=\"line\">doing</span><br><span class=\"line\">well.</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># cat ww.sh </span></span><br><span class=\"line\">judge=<span class=\"string\">&quot;Whatever is worth doing is worth doing well.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> <span class=\"variable\">$judge</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;#word&#125;</span> -lt 6 ]</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$word</span>&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"特殊扩展变量\"><a href=\"#特殊扩展变量\" class=\"headerlink\" title=\"特殊扩展变量\"></a>特殊扩展变量</h3><p><img src=\"/images/pasted-258.png\" alt=\"Shell特殊扩展变量\"></p>\n<p><img src=\"/images/pasted-265.png\" alt=\"特殊扩展变量\"><br><code>$&#123;parameter:-word&#125;</code>：主胎不在家，备胎启用<br><strong>解释：</strong>如果parameter 变量值为空或未赋值，就会返回word字符串替代变量的值。*<br><strong>用途：</strong>如果变量未定义，则返回备用的值，防止变量为空值或未定义而导致异常。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># test=feichi</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $test</span></span><br><span class=\"line\">feichi</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># result=$&#123;test:-gun&#125;  &lt;==test变量存在，所有内容保持不变</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $result</span></span><br><span class=\"line\">feichi</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># unset test  &lt;==删除该变量</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $test</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># result=$&#123;test:-gun&#125;  &lt;==test变量未定义或为空，被替换成gun</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $result</span></span><br><span class=\"line\">gun</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $test</span></span><br></pre></td></tr></table></figure>\n\n<p><code>$&#123;parameter:=word&#125;</code>：主胎不在家，备胎转正<br><strong>解释：</strong>如果parameter变量值为空或未赋值，就设置这个变量值为word，并返回其值。位置变量和特殊变量不适用。<br><strong>用途：</strong>基本同上一个${parameter:-word}，但是又额外给parameter变量赋值了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># felix=feichi</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $felix</span></span><br><span class=\"line\">feichi</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># result=$&#123;felix:=513247869&#125;  &lt;==主胎在家，备胎未转正</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $result</span></span><br><span class=\"line\">feichi</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $felix</span></span><br><span class=\"line\">feichi</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># unset felix  &lt;==删除该变量</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $felix</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># result=$&#123;felix:=513247869&#125;  &lt;==主胎不在家，备胎转正</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $felix</span></span><br><span class=\"line\">513247869</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $result</span></span><br><span class=\"line\">513247869</span><br></pre></td></tr></table></figure>\n<p><code>$&#123;parameter:?word&#125;</code>：主胎不在，直接报错<br><strong>解释：</strong>如果parameter 变量值为空或未赋值，word字符串将被作为标准错误输出，否则输出变量的值。<br><strong>用途：</strong>用于捕捉由于变量未定义而导致的错误，并退出程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># felix=feichi</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $felix</span></span><br><span class=\"line\">feichi</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $&#123;felix:?error wocao&#125;  &lt;==主胎在，输出主胎</span></span><br><span class=\"line\">feichi</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># unset felix</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $&#123;felix:?error wocao&#125;  &lt;==主胎不在，将?后的字符当error输出</span></span><br><span class=\"line\">bash: felix: error wocao</span><br></pre></td></tr></table></figure>\n\n<p><code>$&#123;parameter:+word&#125;</code>：主胎在家，+后面的字符进行替换 来抢</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $felix</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># result=$&#123;felix:+dengao&#125;  &lt;==felix变量为空，什么都不干</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $felix</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $result</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># felix=feichi</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $felix</span></span><br><span class=\"line\">feichi</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># result=$&#123;felix:+dengao&#125;  &lt;==felix定义了内容，+后面的字符将其替换但不改变felix变量内的内容</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $result</span></span><br><span class=\"line\">dengao</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $felix</span></span><br><span class=\"line\">feichi</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p><strong>运算符：</strong><br><code>+、- </code>：        加、减*<br><code>*、/、%</code>：    乘法、除法、取余（取模）*<br><code>**</code>：        幂运算<br><code>++、--</code>：    增加及减少，可前置也可放在变量结尾，默认步长为1 如123，321<br><code>!、&amp;&amp;、||</code>：    逻辑非(取反)、逻辑与(and)、逻辑或(or)*<br><code>&lt;、&lt;=、&gt;、&gt;=</code>：比较符号（小于、小于等于、大于、大于等于）<br><code>==、!=、=</code>：    比较符号（相等、不相等、对于字符串“=”也可以表示相等）*<br><code>&lt;&lt;、&gt;&gt;</code>：    向左移位、向右移位<br><code>~、|、&amp;、^</code>：    按位取反、按位异或、按位与、按位或<br><code>=、+=、-=、*=、/=、%=</code>:    赋值运算符，例如a+=1相当a=a+1，a-=1相当a=a-1*</p>\n<p><strong>shell常见运算命令：</strong><br><img src=\"/images/pasted-259.png\" alt=\"运算命令\"><br><strong>数值运算：</strong><br>1）整数运算：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">方法1：<span class=\"built_in\">let</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># a=1</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># let a=a+1</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">2</span><br><span class=\"line\"></span><br><span class=\"line\">方法2：(())</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># a=1</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># ((a=a+1))</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">2</span><br><span class=\"line\"></span><br><span class=\"line\">方法3：<span class=\"built_in\">expr</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># a=10</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># expr $a + 10</span></span><br><span class=\"line\">20</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># a=`expr $a + 10`</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">20</span><br><span class=\"line\"></span><br><span class=\"line\">方法4：$[]</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># a=11</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $[a+11]</span></span><br><span class=\"line\">22</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># c=$[a+11]</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $c</span></span><br><span class=\"line\">22</span><br><span class=\"line\"></span><br><span class=\"line\">方法5：<span class=\"built_in\">declare</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># a=8</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># declare -i a=a+10</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">18</span><br><span class=\"line\"></span><br><span class=\"line\">案例：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># ((a=1+2**3-4%3))</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n\n<p><strong>2）整数或者小数运算</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">方法1：bc</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo 10+9|bc #加</span></span><br><span class=\"line\">19</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo 10*9|bc #乘</span></span><br><span class=\"line\">90</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo 10/9|bc #除</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo &quot;scale=4;10/9&quot;|bc #保留4位小数</span></span><br><span class=\"line\">1.1111</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo 3^2|bc  #幂运算</span></span><br><span class=\"line\">9</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo 1.1*2|bc  #小数乘</span></span><br><span class=\"line\">2.2</span><br><span class=\"line\"></span><br><span class=\"line\">方法2：awk</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo 1.1 2 | awk &#x27;&#123;print $1*$2&#125;&#x27;</span></span><br><span class=\"line\">2.2</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo 1.1 2 | awk &#x27;&#123;print $1%$2&#125;&#x27;</span></span><br><span class=\"line\">1.1</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo 4 2 | awk &#x27;&#123;print $1%$2&#125;&#x27;</span></span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p><strong>3）自增或自减运算（++--）</strong><br>执行echo $((a++))和echo $((a–))命令输出整个表达式时，输出的值为a的值，表达式执行完毕后，会对a进行++、–的运算，<br>执行echo $((++a))和echo $((–a))命令输出整个表达式时，会先对a进行++、–的运算，然后再输出表达式的值，即为a运算后的值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># a=10</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $((a--))  &lt;== --在$a后，表达式先不减。表达式执行完成会对$a进行++ --运算。</span></span><br><span class=\"line\">10</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">9</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $((--a)) &lt;== --在$a前，先对$a进行运算。表达式在输出值。</span></span><br><span class=\"line\">8</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n<p>有关++，–运算的记忆方法：<br>变量a在运算符前，输出表达式的值为a，然后a自增或自减；变量a在运算符后，输出表达式会先自增或自减，表达式的值就是自增或自减后a的值。</p>\n<p><strong>4）(())的逻辑判断</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># ((8&gt;7))</span></span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># ((8&lt;7))</span></span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># ((8&lt;7&amp;&amp;6&gt;5))</span></span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># ((8&lt;9&amp;&amp;6&gt;5))</span></span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># ((8&lt;7||6&gt;5))</span></span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># echo $?</span></span><br></pre></td></tr></table></figure>\n<p><strong>5）expr功能：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.计算</span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># expr 10 + 10</span></span><br><span class=\"line\">20</span><br><span class=\"line\"></span><br><span class=\"line\">2.获取字符串长度</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># a=&quot;felix&quot;</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">felix</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># expr length $a</span></span><br><span class=\"line\">5</span><br><span class=\"line\"></span><br><span class=\"line\">3.判断字符串是否为整数数字或字符</span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># a=1</span></span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># expr $a + 1 &amp;&gt;/dev/null</span></span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">0 </span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># a=oldboy</span></span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># expr $a + 1 &amp;&gt;/dev/null</span></span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># echo $?</span></span><br><span class=\"line\">2  &lt;==逆向思维：<span class=\"built_in\">expr</span>字符串或小数与整数相加会报错，即$? 不为0. 即$?为0</span><br><span class=\"line\">              就表示 两边运算符两边都是整数数，而不是字符串或浮点数</span><br><span class=\"line\">              </span><br><span class=\"line\">4.用来判断文件扩展名是否符合指定扩展名</span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># cat judge.sh </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">expr</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> : <span class=\"string\">&quot;.*\\.avi$&quot;</span> &gt;/dev/null ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;好兴奋啊&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;好失望啊&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># sh judge.sh oldboy.avi</span></span><br><span class=\"line\">好兴奋啊</span><br><span class=\"line\">[root@web01 /server/scripts]<span class=\"comment\"># sh judge.sh oldboy.log</span></span><br><span class=\"line\">好失望啊</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"脚本传参\"><a href=\"#脚本传参\" class=\"headerlink\" title=\"脚本传参\"></a>脚本传参</h3><p><img src=\"/images/pasted-266.png\" alt=\"脚本传参\"><br><strong>read命令：</strong><br>参数：</p>\n<ul>\n<li>-p：输出文字提示</li>\n<li>-t：指定超时时间</li>\n</ul>\n<p>本质：交互式给变量赋值<br><strong>例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1）相当于n=100</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># read -p &quot;请输入一个数字：&quot; n</span></span><br><span class=\"line\">请输入一个数字：100</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $n</span></span><br><span class=\"line\">100</span><br><span class=\"line\">2）相当于n=90 m=100</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># read -p &quot;请输入两个数字：&quot; n m</span></span><br><span class=\"line\">请输入两个数字：90 100</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $n $m</span></span><br><span class=\"line\">90 100</span><br></pre></td></tr></table></figure>\n<p><strong>变量赋值的3种方式：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.定义式</span><br><span class=\"line\">a=1</span><br><span class=\"line\"></span><br><span class=\"line\">2.<span class=\"built_in\">read</span>读入式</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;请输入两个数字：&quot;</span> n m</span><br><span class=\"line\"></span><br><span class=\"line\">3.脚本传参</span><br><span class=\"line\"><span class=\"variable\">$1</span>=100</span><br><span class=\"line\"></span><br><span class=\"line\">1.交互式传参：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># cat 01.dingyi.sh </span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;请输入a,b的值：&quot;</span> a b</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>+<span class=\"variable\">$b</span>=<span class=\"subst\">$((a+b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>-<span class=\"variable\">$b</span>=<span class=\"subst\">$((a-b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>*<span class=\"variable\">$b</span>=<span class=\"subst\">$((a*b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>/<span class=\"variable\">$b</span>=<span class=\"subst\">$((a/b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>**<span class=\"variable\">$b</span>=<span class=\"subst\">$((a**b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>%<span class=\"variable\">$b</span>=<span class=\"subst\">$((a%b)</span>)&quot;</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># sh 01.dingyi.sh</span></span><br><span class=\"line\">请输入a,b的值：9 10</span><br><span class=\"line\">9+10=19</span><br><span class=\"line\">9-10=-1</span><br><span class=\"line\">9*10=90</span><br><span class=\"line\">9/10=0</span><br><span class=\"line\">9**10=3486784401</span><br><span class=\"line\">9%10=9</span><br><span class=\"line\"></span><br><span class=\"line\">2.传参：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># cat 01.dingyi.sh</span></span><br><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>+<span class=\"variable\">$b</span>=<span class=\"subst\">$((a+b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>-<span class=\"variable\">$b</span>=<span class=\"subst\">$((a-b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>*<span class=\"variable\">$b</span>=<span class=\"subst\">$((a*b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>/<span class=\"variable\">$b</span>=<span class=\"subst\">$((a/b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>**<span class=\"variable\">$b</span>=<span class=\"subst\">$((a**b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>%<span class=\"variable\">$b</span>=<span class=\"subst\">$((a%b)</span>)&quot;</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># bash 01.dingyi.sh 7 6</span></span><br><span class=\"line\">7+6=13</span><br><span class=\"line\">7-6=1</span><br><span class=\"line\">7*6=42</span><br><span class=\"line\">7/6=1</span><br><span class=\"line\">7**6=117649</span><br><span class=\"line\">7%6=1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>`stty erase ‘^H’` read -p “input: “ read交互式删除退格</p>\n</blockquote>\n<h3 id=\"条件测试\"><a href=\"#条件测试\" class=\"headerlink\" title=\"条件测试\"></a>条件测试</h3><p><img src=\"/images/pasted-260.png\" alt=\"条件测试\"><br>一句话定义：判断符合条件才进行处理，不符合条件不处理。<br><strong>表达式1：如果条件成立，那么执行三个命令。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ 条件1 ] &amp;&amp; &#123;</span><br><span class=\"line\">    命令1     </span><br><span class=\"line\">\t命令2     </span><br><span class=\"line\">\t命令3 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>表达式2：如果表达式不成立，那么执行三个命令。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ 条件1 ]   </span><br><span class=\"line\"><span class=\"keyword\">then</span>     </span><br><span class=\"line\">\t命令1     </span><br><span class=\"line\">\t命令2     </span><br><span class=\"line\">\t命令3 </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">【等价】</span><br><span class=\"line\">[ 条件1 ] || &#123;</span><br><span class=\"line\">    \t命令1     </span><br><span class=\"line\">\t命令2     </span><br><span class=\"line\">\t命令3 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>表达式3：如果条件成立，那么执行命令1命令2，否则执行命令3。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ -L oldboy ] &amp;&amp; <span class=\"built_in\">echo</span> 1 || <span class=\"built_in\">echo</span> 0</span><br><span class=\"line\">【等价】</span><br><span class=\"line\">[ 条件1 ] &amp;&amp; &#123;</span><br><span class=\"line\">    命令1     </span><br><span class=\"line\">\t命令2     </span><br><span class=\"line\">&#125; || &#123; </span><br><span class=\"line\">\t命令3 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>分析：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ -x /sbin/ip ] ||        <span class=\"built_in\">exit</span> 1 </span><br><span class=\"line\">可执行         不成立  退出</span><br></pre></td></tr></table></figure>\n\n<p><strong>例子：（判断文件是否存在）test</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># ls</span></span><br><span class=\"line\">01.dingyi.sh  anaconda-ks.cfg  ww.sh</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># test -f a.txt &amp;&amp; echo felix &gt; a.txt || echo 没有</span></span><br><span class=\"line\">没有</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># touch a.txt</span></span><br><span class=\"line\">\t\t如果 存在        那么 执行              否则 执行</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># test -f a.txt &amp;&amp; echo felix &gt; a.txt || echo 没有</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># cat a.txt </span></span><br><span class=\"line\">felix</span><br></pre></td></tr></table></figure>\n<p><strong>例子：（判断文件是否有执行权限）test</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">                       如果 可执行      那么 执行      否则  打印</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># test -x ww.sh &amp;&amp; ./ww.sh || echo &quot;没有执行权限&quot;</span></span><br><span class=\"line\">没有执行权限</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># ll ww.sh </span></span><br><span class=\"line\">-rw-r--r-- 1 root root 133 12月 17 17:53 ww.sh</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># chmod +x ww.sh</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># ll ww.sh </span></span><br><span class=\"line\">-rwxr-xr-x 1 root root 133 12月 17 17:53 ww.sh</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># test -x ww.sh &amp;&amp; ./ww.sh || echo &quot;没有执行权限&quot;</span></span><br><span class=\"line\">is</span><br><span class=\"line\">worth</span><br><span class=\"line\">doing</span><br><span class=\"line\">is</span><br><span class=\"line\">worth</span><br><span class=\"line\">doing</span><br><span class=\"line\">well.</span><br></pre></td></tr></table></figure>\n\n<p><strong>例子：（判断文件是否有执行权限）[  ]</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -x ww.sh ]&amp;&amp; ./ww.sh || echo &quot;没有执行权限&quot;</span></span><br><span class=\"line\">is</span><br><span class=\"line\">worth</span><br><span class=\"line\">doing</span><br><span class=\"line\">is</span><br><span class=\"line\">worth</span><br><span class=\"line\">doing</span><br><span class=\"line\">well.</span><br></pre></td></tr></table></figure>\n\n<p><strong>例子：（判断文件是否有执行权限）[[]]</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [[ -x ww.sh ]]&amp;&amp; ./ww.sh || echo &quot;没有执行权限&quot;</span></span><br><span class=\"line\">is</span><br><span class=\"line\">worth</span><br><span class=\"line\">doing</span><br><span class=\"line\">is</span><br><span class=\"line\">worth</span><br><span class=\"line\">doing</span><br><span class=\"line\">well.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件测试表达式\"><a href=\"#文件测试表达式\" class=\"headerlink\" title=\"文件测试表达式\"></a>文件测试表达式</h3><p>一句话定义：对问文件的属性进行判断，然后根据结果进行处理。<br><img src=\"/images/pasted-261.png\" alt=\"文件测试表达式\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># touch felix.txt</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -f felix.txt ] &amp;&amp; echo 1 || echo 0</span></span><br><span class=\"line\">1                        如果..             那么..      否则..</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># rm -rf felix.txt </span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -f felix.txt ] &amp;&amp; echo 1 || echo 0  &lt;==文件不存在，则echo 0（-f 测试普通文件）</span></span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># mkdir felix</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -f felix ] &amp;&amp; echo 1 || echo 0  &lt;==felix为目录，不是普通文件所以输出echo 0</span></span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -d felix ] &amp;&amp; echo 1 || echo 0  &lt;==目录存在，则echo 0（-d 测试目录）</span></span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -e felix ] &amp;&amp; echo 1 || echo 0  &lt;==文件或目录存在，则echo 1（-e 测试文件或目录）</span></span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -r felix.txt ] &amp;&amp; echo 1 || echo 0  &lt;==文件或目录可读，不存在则echo 0（-r 测试文件是否可读）</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># touch felix.txt</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -r felix.txt ] &amp;&amp; echo 1 || echo 0  &lt;==文件或目录可读，则echo 1</span></span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -s felix.txt ] &amp;&amp; echo 1 || echo 0  &lt;==文件或目录大小不为0，空文件则输出0（-s 测试文件是否为空）</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo 1 &gt; felix.txt </span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -s felix.txt ] &amp;&amp; echo 1 || echo 0</span></span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -w felix.txt ] &amp;&amp; echo 1 || echo 0 &lt;==文件是否可写，可写则echo 1（-w 测试文件是否可写）</span></span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -x felix.txt ] &amp;&amp; echo 1 || echo 0  &lt;==文件是否可执行，不可执行则echo 0（-x 测试文件是否可执行）</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -L felix.txt ] &amp;&amp; echo 1 || echo 0</span></span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串测试表达式\"><a href=\"#字符串测试表达式\" class=\"headerlink\" title=\"字符串测试表达式\"></a>字符串测试表达式</h3><p>一句话定义：长度，是否为空，是否相等，是否不等。<br><img src=\"/images/pasted-262.png\" alt=\"字符串测试表达式\"></p>\n<blockquote>\n<p><strong>注意：</strong></p>\n</blockquote>\n<ol>\n<li>字符串判断要将字符串用 双引号” “</li>\n<li>等号两端必须要有空格</li>\n<li>“=”和”!=” 用于比较两个字符串是否相同</li>\n</ol>\n<p><code>-n no zero</code>不为零</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo &quot;$flx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -n &quot;$flx&quot; ] &amp;&amp; echo 1 || echo 0  &lt;==为零为假</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># flx=felix</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -n &quot;$flx&quot; ] &amp;&amp; echo 1 || echo 0  &lt;==不为零为真</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p><code>-z zero</code>为零</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># flx=felix</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -z &quot;$flx&quot; ] &amp;&amp; echo 1 || echo 0  &lt;==不为零为假</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># unset flx</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -z &quot;$flx&quot; ] &amp;&amp; echo 1 || echo 0  &lt;==为零为真</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>字符串测试相等</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo &quot;$flx&quot;</span></span><br><span class=\"line\">felix</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># nsu=&quot;12345&quot;</span></span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># echo $nsu</span></span><br><span class=\"line\">12345</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ &quot;$flx&quot; = &quot;$nsu&quot; ] &amp;&amp; echo 1 || echo 0  &lt;==变量内容不相等为假</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ &quot;$flx&quot; = &quot;felix&quot; ] &amp;&amp; echo 1 || echo 0  &lt;==内容相等为真</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ &quot;$&#123;#flx&#125;&quot; = &quot;$&#123;#nsu&#125;&quot; ] &amp;&amp; echo 1 || echo 0  &lt;==字符串长度相等为真</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"传参和条件测试练习\"><a href=\"#传参和条件测试练习\" class=\"headerlink\" title=\"传参和条件测试练习\"></a>传参和条件测试练习</h3><p>对传入的参数或者read读入的变量内容判断，如果不符合计算条件，提示用户，并退出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;请输入两个数，以空格分割：&quot;</span> a b</span><br><span class=\"line\">[ -z <span class=\"variable\">$a</span> ] || [ -z <span class=\"variable\">$b</span> ] &amp;&amp; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[error]:请输入两个数值&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"variable\">$a</span> <span class=\"variable\">$b</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">expr</span> <span class=\"variable\">$n</span> + 1 &amp;&gt; /dev/null</span><br><span class=\"line\">  [ $? -eq 0 ] &amp;&amp; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$n</span> [Data ok!]&quot;</span>;</span><br><span class=\"line\">  &#125;||&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[ERROR Data are not Numbers!]&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>+<span class=\"variable\">$b</span>=<span class=\"subst\">$((a+b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>-<span class=\"variable\">$b</span>=<span class=\"subst\">$((a-b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>*<span class=\"variable\">$b</span>=<span class=\"subst\">$((a*b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>/<span class=\"variable\">$b</span>=<span class=\"subst\">$((a/b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>%<span class=\"variable\">$b</span>=<span class=\"subst\">$((a%b)</span>)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span>**<span class=\"variable\">$b</span>=<span class=\"subst\">$((a**b)</span>)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">通过脚本传参的方式完成上面的例子</span><br><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#1.判断是否为两个参数</span></span><br><span class=\"line\">[ <span class=\"variable\">$#</span> -ne 2 ]&amp;&amp;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$0</span> num1 num2 ✔&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.判断参数是否为数字</span></span><br><span class=\"line\"><span class=\"built_in\">expr</span> <span class=\"variable\">$1</span> + <span class=\"variable\">$2</span> + 100 &amp;&gt;/dev/null</span><br><span class=\"line\">[ $? -eq 0 ]&amp;&amp;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[data ok]:<span class=\"variable\">$1</span> <span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\">&#125;||&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入两个正确的整数！&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.开始计算</span></span><br><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>+<span class=\"variable\">$b</span>=$((a+b))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>-<span class=\"variable\">$b</span>=$((a-b))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>^<span class=\"variable\">$b</span>=$((a**b))</span><br><span class=\"line\">[ <span class=\"variable\">$b</span> -eq 0 ]&amp;&amp;&#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[error] 除数为0，取余和除法不能计算。×&quot;</span></span><br><span class=\"line\">&#125;||&#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>/<span class=\"variable\">$b</span>=$((a/b))</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>%<span class=\"variable\">$b</span>=$((a%b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二元整数比较\"><a href=\"#二元整数比较\" class=\"headerlink\" title=\"二元整数比较\"></a>二元整数比较</h3><p><img src=\"/images/pasted-267.png\" alt=\"二元整数比较\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">整数比较：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ 1 -eq 1 ] &amp;&amp; echo 1 || echo 0  &lt;==等于</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ 1 -ne 1 ] &amp;&amp; echo 1 || echo 0  &lt;==不等于</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ 1 -ge 1 ] &amp;&amp; echo 1 || echo 0  &lt;==大于等于</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ 1 -gt 1 ] &amp;&amp; echo 1 || echo 0  &lt;==大于</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ 1 -lt 1 ] &amp;&amp; echo 1 || echo 0  &lt;==小于</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ 1 -le 1 ] &amp;&amp; echo 1 || echo 0  &lt;==小于等于</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p><strong>逻辑操作符</strong><br><img src=\"/images/pasted-268.png\" alt=\"逻辑操作符\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">在一个表达式中，放入多个条件。</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -f /etc/hosts -a 1 -eq 1 ] &amp;&amp; echo 1 || echo 0</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -f /etc/hosts -a 1 -eq 2 ] &amp;&amp; echo 1 || echo 0</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -f /etc/hosts -o 1 -eq 2 ] &amp;&amp; echo 1 || echo 0</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -f /etc/hosts -o 1 -eq 2 ] &amp;&amp; echo 1 || echo 0</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -f /etc/hosts -a ! 1 -eq 2 ] &amp;&amp; echo 1 || echo 0  &lt;==对指定条件进行取反</span></span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">连接两个括号的操作符：</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -f /etc/hosts ] &amp;&amp; [ 1 -eq 2 ] &amp;&amp; echo 1 || echo 0</span></span><br><span class=\"line\">0</span><br><span class=\"line\">[root@db02 ~]<span class=\"comment\"># [ -f /etc/hosts ] || [ 1 -eq 2 ] &amp;&amp; echo 1 || echo 0</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-269.png\" alt=\"逻辑操作符\"></p>\n<h3 id=\"菜单练习\"><a href=\"#菜单练习\" class=\"headerlink\" title=\"菜单练习\"></a>菜单练习</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\">Inl=<span class=\"string\">&quot;即将安装:&quot;</span></span><br><span class=\"line\">One=<span class=\"string\">&quot;\\033[40;32m MySQL\\033[0m&quot;</span></span><br><span class=\"line\">Two=<span class=\"string\">&quot;\\033[40;32m Nginx \\033[0m&quot;</span></span><br><span class=\"line\">Three=<span class=\"string\">&quot;\\033[40;32m PHP \\033[0m&quot;</span></span><br><span class=\"line\">Four=<span class=\"string\">&quot;\\033[40;32m Tomcat \\033[0m&quot;</span></span><br><span class=\"line\">Five=<span class=\"string\">&quot;\\033[40;32m ALL \\033[0m&quot;</span></span><br><span class=\"line\">Err=<span class=\"string\">&quot;\\033[40;31m[Error]\\033[0m Please check the..&quot;</span></span><br><span class=\"line\">Ok=<span class=\"string\">&quot;\\033[40;32m[OK] \\033[0mSuccessful installation&quot;</span></span><br><span class=\"line\">/bin/clear</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;Please select a&#123;1|2|3|4|5|6&#125;:&quot;</span> n</span><br><span class=\"line\"><span class=\"built_in\">expr</span> <span class=\"variable\">$n</span> + 1 &amp;&gt;/dev/null</span><br><span class=\"line\">[[ -z <span class=\"variable\">$n</span> || $? -ne 0 || ! <span class=\"variable\">$n</span> =~ [1-6] ]] &amp;&amp; &#123;</span><br><span class=\"line\">     /bin/clear</span><br><span class=\"line\">     /bin/bash <span class=\"variable\">$0</span></span><br><span class=\"line\">     <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[ <span class=\"variable\">$n</span> -eq 6 ] &amp;&amp; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[40;31mQuit!\\033[0m&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">&#125;||&#123;</span><br><span class=\"line\">    [ <span class=\"variable\">$n</span> -eq 5 ] &amp;&amp; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Inl&#125;</span><span class=\"variable\">$&#123;Five&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">sleep</span> 5</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Ok&#125;</span><span class=\"variable\">$&#123;Five&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">    &#125;||</span><br><span class=\"line\">        [ <span class=\"variable\">$n</span> -eq 4 ] &amp;&amp; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Inl&#125;</span><span class=\"variable\">$&#123;Four&#125;</span>&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">sleep</span> 5</span><br><span class=\"line\">            <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Ok&#125;</span><span class=\"variable\">$&#123;Four&#125;</span>&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">        &#125;||</span><br><span class=\"line\">            [ <span class=\"variable\">$n</span> -eq 3 ] &amp;&amp; &#123;</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Inl&#125;</span><span class=\"variable\">$&#123;Three&#125;</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">sleep</span> 5</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Ok&#125;</span><span class=\"variable\">$&#123;Three&#125;</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">            &#125;||</span><br><span class=\"line\">                [ <span class=\"variable\">$n</span> -eq 2 ] &amp;&amp; &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Inl&#125;</span><span class=\"variable\">$&#123;Two&#125;</span>&quot;</span></span><br><span class=\"line\">                    <span class=\"built_in\">sleep</span> 5</span><br><span class=\"line\">                    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Ok&#125;</span><span class=\"variable\">$&#123;Two&#125;</span>&quot;</span></span><br><span class=\"line\">                    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">                &#125;||</span><br><span class=\"line\">                    [ <span class=\"variable\">$n</span> -eq 1 ] &amp;&amp; &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Inl&#125;</span><span class=\"variable\">$&#123;One&#125;</span>&quot;</span></span><br><span class=\"line\">                        <span class=\"built_in\">sleep</span> 5</span><br><span class=\"line\">                        <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Ok&#125;</span><span class=\"variable\">$&#123;One&#125;</span>&quot;</span></span><br><span class=\"line\">                        <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-270.png\" alt=\"菜单\"></p>\n<h3 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"if判断\"></a>if判断</h3><p><strong>单分支：</strong>（如果……那么）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> &lt;条件表达式&gt;</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        指令</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> &lt;条件表达式&gt;; <span class=\"keyword\">then</span></span><br><span class=\"line\">    指令</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p><strong>双分支：</strong>（如果……那么……否则）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> &lt;条件表达式&gt;</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        指令</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">        指令</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p><strong>多分枝：</strong>（如果…….那么……或者那么……或者那么……否则）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> &lt;条件表达式&gt;;<span class=\"keyword\">then</span></span><br><span class=\"line\">    指令1</span><br><span class=\"line\"><span class=\"keyword\">elif</span> &lt;条件表达式&gt;;<span class=\"keyword\">then</span></span><br><span class=\"line\">    指令2</span><br><span class=\"line\"><span class=\"keyword\">elif</span> &lt;条件表达式&gt;;<span class=\"keyword\">then</span></span><br><span class=\"line\">    指令3</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    指令4</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>传参计算：</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#1.判断是否为两个参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -ne 2 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$0</span> num1 num2 ✔&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><strong>判断参数是否为数字</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">expr</span> <span class=\"variable\">$1</span> + <span class=\"variable\">$2</span> + 100 &amp;&gt;/dev/null</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -eq 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[data ok]:<span class=\"variable\">$1</span> <span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入两个正确的整数！&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 2</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>开始计算</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>+<span class=\"variable\">$b</span>=$((a+b))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>-<span class=\"variable\">$b</span>=$((a-b))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>^<span class=\"variable\">$b</span>=$((a**b))</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$b</span> -eq 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[error] 除数为0，取余和除法不能计算。×&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>/<span class=\"variable\">$b</span>=$((a/b))</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>%<span class=\"variable\">$b</span>=$((a%b))</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>内存告警</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># tail -1 /etc/mail.rc</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> from=513247869@qq.com smtp=smtp.qq.com smtp-auth-user=513247869 smtp-auth-password=qfztqqoggfblbgec</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\">free_mem=$(free -m | awk -F<span class=\"string\">&quot; &quot;</span> <span class=\"string\">&#x27;NR==2&#123;print $7&#125;&#x27;</span>)</span><br><span class=\"line\">flx=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;scale=2;<span class=\"variable\">$free_mem</span>/1024&quot;</span> |bc`</span><br><span class=\"line\"><span class=\"built_in\">date</span>=`<span class=\"built_in\">date</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span>`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$free_mem</span> -lt 8000 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[<span class=\"variable\">$date</span>] 废了，没内存了: <span class=\"variable\">$&#123;flx&#125;</span>G&quot;</span> |<span class=\"built_in\">tee</span> -a /var/log/mem.log <span class=\"comment\">#追加并输出</span></span><br><span class=\"line\">    /usr/bin/tail -1 /var/log/mem.log | /usr/bin/mail -s <span class=\"string\">&quot;<span class=\"subst\">$(date)</span> 内存警告&quot;</span> 513247869@qq.com</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[<span class=\"variable\">$date</span>] 内存还够: <span class=\"variable\">$&#123;flx&#125;</span>G&quot;</span> |<span class=\"built_in\">tee</span> -a /var/log/mem.log</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务监控\"><a href=\"#服务监控\" class=\"headerlink\" title=\"服务监控\"></a>服务监控</h3><p><img src=\"/images/pasted-271.png\" alt=\"服务监控\"><br>nc的控制参数不少，常用的几个参数如下所列：</p>\n<ul>\n<li>-l 用于指定nc将处于侦听模式。指定该参数，则意味着nc被当作server，侦听并接受连接，而非向其它地址发起连接。</li>\n<li>-p <port> 暂未用到（老版本的nc可能需要在端口号前加-p参数，下面测试环境是centos6.6，nc版本是nc-1.84，未用到-p参数）</li>\n<li>-s 指定发送数据的源IP地址，适用于多网卡机 </li>\n<li>-u 指定nc使用UDP协议，默认为TCP</li>\n<li>-v 输出交互或出错信息，新手调试时尤为有用</li>\n<li>-w 超时秒数，后面跟数字 </li>\n<li>-z 表示zero，表示扫描时不发送任何数据</li>\n</ul>\n<p><strong>Nginx监控</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#nginx=$(/application/nginx/sbin/nginx)</span></span><br><span class=\"line\"><span class=\"built_in\">date</span>=`<span class=\"built_in\">date</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span>`</span><br><span class=\"line\">nginxcmd=<span class=\"string\">&quot;/application/nginx/sbin/nginx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#监控服务</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -eq 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    /usr/bin/netstat -lntup | grep 80 &amp;&gt; /dev/null</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[<span class=\"variable\">$date</span>] 不行了，nginx崩了&quot;</span> |<span class=\"built_in\">tee</span> -a /var/log/nginx_state.log</span><br><span class=\"line\">        /usr/bin/tail -1 /var/log/nginx_state.log | /usr/bin/mail -s <span class=\"string\">&quot;<span class=\"subst\">$(date)</span> nginx告警&quot;</span> 513247869@qq.com</span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[<span class=\"variable\">$date</span>]nginx 状态正常!&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动脚本</span></span><br><span class=\"line\">[[ <span class=\"variable\">$#</span> -ne 1 ]] &amp;&amp; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> = <span class=\"string\">&quot;start&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"variable\">$nginxcmd</span> -c /application/nginx/conf/nginx.conf &amp;&gt; /dev/null</span><br><span class=\"line\">    /bin/bash <span class=\"variable\">$0</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> = <span class=\"string\">&quot;restart&quot;</span> -o <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> = <span class=\"string\">&quot;reload&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"variable\">$nginxcmd</span> -c /application/nginx/conf/nginx.conf &amp;&gt; /dev/null</span><br><span class=\"line\">    <span class=\"variable\">$nginxcmd</span> -s reload &amp;&gt; /dev/null</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> = <span class=\"string\">&quot;stop&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"variable\">$nginxcmd</span> -s stop &amp;&gt; /dev/null</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[ERROR] <span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 2</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数传参\"><a href=\"#函数传参\" class=\"headerlink\" title=\"函数传参\"></a>函数传参</h3><p>语法1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> 函数名() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>语法2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> 函数名 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>语法3：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">函数名 () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>函数的执行过程：</strong></p>\n<ol>\n<li>执行Shell函数时，函数名前的function和函数后的小括号都不要带。</li>\n<li>函数的定义必须在要执行前面定义或加载好（先定义，再执行）。</li>\n<li>Shell执行系统中各种程序的顺序为：系统别名→函数→系统命令→可执行文件。</li>\n<li>函数执行时，会和调用它的脚本共用变量，也可以为函数设定局部变量以及特殊位置参数。</li>\n<li>在shell函数里面，return命令功能与exit类似，作用是退出函数，而exit是退出脚本文件。</li>\n<li>return 语句会返回一个退出值（即返回值）给调用函数的当前程序，而exit会返回一个退出值（即返回值）给执行程序的当前Shell。</li>\n<li>如果函数存放在独立的文件中，被脚本加载使用时，需要使用source或者.来加载。</li>\n<li>在函数内一般使用local定义局部变量，这些变量离开函数后即消失。</li>\n</ol>\n<p><strong>函数传参：</strong></p>\n<ul>\n<li>Shell的位置参数（$1、$2…、$#、$*、$?以及$@）都可以作为函数的参数使用。</li>\n<li>此时父脚本的参数临时地被函数参数所掩盖或隐藏。</li>\n<li>$0比较特殊，它仍然是父脚本的名称。</li>\n<li>当函数执行完成时，原来的命令行脚本的参数即恢复。</li>\n<li>函数的参数变量是在函数体里面定义的。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># sh function.sh </span></span><br><span class=\"line\">I am felix</span><br><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># cat function.sh </span></span><br><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">felix</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;I am felix&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">felix</span><br></pre></td></tr></table></figure>\n<p><strong>第一步：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># sh function.sh </span></span><br><span class=\"line\">I am 第一个参数</span><br><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># cat function.sh </span></span><br><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">felix</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;I am <span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">felix 第一个参数  &lt;==这个参数传递给了函数felix，felix函数中再通过<span class=\"variable\">$1</span>进行带入</span><br></pre></td></tr></table></figure>\n<p><strong>第二步：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># sh function.sh 第一 </span></span><br><span class=\"line\">I am 第一</span><br><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># cat function.sh </span></span><br><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">felix</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;I am <span class=\"variable\">$1</span>&quot;</span>  &lt;==2.这里的<span class=\"variable\">$1</span>是指函数的第一个参数。此脚本中函数的第一个参数就是脚本的第一个参数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">felix <span class=\"variable\">$1</span>  &lt;==1.这里的<span class=\"variable\">$1</span>是指脚本的第一个参数，将用户传入脚本的第一个参数传给函数</span><br><span class=\"line\"></span><br><span class=\"line\">函数内定义私有变量：</span><br><span class=\"line\">函数()&#123;</span><br><span class=\"line\"><span class=\"built_in\">local</span> s=1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>检查url是否正常</strong></p>\n<ol>\n<li>检查url是否正常</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># sh check_url.sh baidi.com</span></span><br><span class=\"line\">URL is no</span><br><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># cat check_url.sh </span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">wegt -q <span class=\"variable\">$1</span> &amp;&gt;/dev/null    &lt;==-q 不显示输出</span><br><span class=\"line\">retval=$?</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$retval</span> -eq 0 ]   &lt;==判断返回值</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;URL is ok&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;URL is no&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>调用函数实现</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check_url</span></span>()&#123;</span><br><span class=\"line\">wget -q -o /dev/null --spider --tries=1 -T 5 <span class=\"variable\">$1</span>   &lt;==3.check函数接收main函数的参数，得出结果</span><br><span class=\"line\"><span class=\"comment\">#T#超时时间</span></span><br><span class=\"line\"><span class=\"comment\">#spider#爬虫，模拟访问不下载</span></span><br><span class=\"line\"><span class=\"comment\">#tries #wegt次数</span></span><br><span class=\"line\"><span class=\"comment\">#-T #超时时间   </span></span><br><span class=\"line\">retval=$?</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$retval</span> -eq 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;URL is ok&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;URL is no&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">    check_url <span class=\"variable\">$1</span>   &lt;==2.main函数的参数传递给check函数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main $*   &lt;==1.传递脚本参数给main函数</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>传参的方式调用函数</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">usage</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! <span class=\"variable\">$1</span> =~ http://.*$ ]]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage:<span class=\"variable\">$0</span> http://www.xxx.com&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check_url</span></span>()&#123;</span><br><span class=\"line\">wget -q <span class=\"variable\">$1</span> &amp;&gt;/dev/null</span><br><span class=\"line\">retval=$?</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$retval</span> -eq 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;URL is ok&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;URL is no&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">    usage <span class=\"variable\">$1</span></span><br><span class=\"line\">    check_url <span class=\"variable\">$1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main $*</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"系统自带函数\"><a href=\"#系统自带函数\" class=\"headerlink\" title=\"系统自带函数\"></a>系统自带函数</h3><p><strong>action函数</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Run some action. Log its output.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">action</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> STRING rc</span><br><span class=\"line\"></span><br><span class=\"line\">    STRING=<span class=\"variable\">$1</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;<span class=\"variable\">$STRING</span> &quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span> &amp;&amp; success $<span class=\"string\">&quot;<span class=\"variable\">$STRING</span>&quot;</span> || failure $<span class=\"string\">&quot;<span class=\"variable\">$STRING</span>&quot;</span></span><br><span class=\"line\">    rc=$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$rc</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>调用action</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">[ -f /etc/init.d/functions ] &amp;&amp; . /etc/init.d/functions   &lt;==函数库文件存在就加载</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">usage</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! <span class=\"variable\">$1</span> =~ http://.*$ ]]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage:<span class=\"variable\">$0</span> http://www.xxx.com&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check_url</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">wget -q -o /dev/null --spider --tries=1 -T 5 <span class=\"variable\">$1</span>   </span><br><span class=\"line\"><span class=\"comment\">#spider#爬虫，模拟访问不下载</span></span><br><span class=\"line\"><span class=\"comment\">#tries #wegt次数</span></span><br><span class=\"line\"><span class=\"comment\">#-T #超时时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">retval=$?</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$retval</span> -eq 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    action <span class=\"string\">&quot;URL is ok&quot;</span> /bin/true   &lt;==调用action函数</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    action <span class=\"string\">&quot;URL is no&quot;</span> /bin/false</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">    usage <span class=\"variable\">$1</span></span><br><span class=\"line\">    check_url <span class=\"variable\">$1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main $*</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试</strong><br><img src=\"/images/pasted-272.png\" alt=\"test\"></p>\n<h3 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h3><p>case结构条件句的语法格式为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;变量&quot;</span> <span class=\"keyword\">in</span> </span><br><span class=\"line\">    值1)</span><br><span class=\"line\">        指令1...</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    值2)</span><br><span class=\"line\">        指令2...</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        指令3...</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\">相当于<span class=\"keyword\">if</span>多分支语句。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;变量&quot;</span>  =<span class=\"string\">&quot;值1&quot;</span>  ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    指令1...</span><br><span class=\"line\"><span class=\"keyword\">elif</span>  [ <span class=\"string\">&quot;变量&quot;</span>  =<span class=\"string\">&quot;值2&quot;</span>  ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    指令2...</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    指令3...</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>菜单实现</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"comment\"># File Name: 3.sh</span></span><br><span class=\"line\"><span class=\"comment\"># Created Time: Thu 26 Dec 2019 01:55:17 PM CST</span></span><br><span class=\"line\"><span class=\"comment\"># Version: V1.0</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Felix</span></span><br><span class=\"line\"><span class=\"comment\"># Organization: 360JR OPS</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"comment\">#vars</span></span><br><span class=\"line\">Inl=<span class=\"string\">&quot;即将安装:&quot;</span></span><br><span class=\"line\">One=<span class=\"string\">&quot;\\033[40;32m MySQL\\033[0m&quot;</span></span><br><span class=\"line\">Two=<span class=\"string\">&quot;\\033[40;32m Nginx \\033[0m&quot;</span></span><br><span class=\"line\">Three=<span class=\"string\">&quot;\\033[40;32m PHP \\033[0m&quot;</span></span><br><span class=\"line\">Four=<span class=\"string\">&quot;\\033[40;32m Tomcat \\033[0m&quot;</span></span><br><span class=\"line\">Five=<span class=\"string\">&#x27;\\033[40;32m ALL \\033[0m&#x27;</span></span><br><span class=\"line\">Err=<span class=\"string\">&quot;\\033[40;31m[Error]\\033[0m Please check the..&quot;</span></span><br><span class=\"line\">Ok=<span class=\"string\">&quot;\\033[40;32m[OK] \\033[0mSuccessful installation&quot;</span></span><br><span class=\"line\">[ -f /etc/init.d/functions ] &amp;&amp; . /etc/init.d/functions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#menus</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">list</span></span>()&#123;</span><br><span class=\"line\">    /bin/clear</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;-------------------------</span></span><br><span class=\"line\"><span class=\"string\"> By Felix:</span></span><br><span class=\"line\"><span class=\"string\">  1.[\\033[40;34m Install\\033[0m<span class=\"variable\">$One</span>  ].a</span></span><br><span class=\"line\"><span class=\"string\">  2.[\\033[40;34m Install\\033[0m<span class=\"variable\">$Two</span> ].b</span></span><br><span class=\"line\"><span class=\"string\">  3.[\\033[40;34m Install\\033[0m<span class=\"variable\">$Three</span>   ].c</span></span><br><span class=\"line\"><span class=\"string\">  4.[\\033[40;34m Install\\033[0m<span class=\"variable\">$Four</span>].d</span></span><br><span class=\"line\"><span class=\"string\">  5.[\\033[40;34m Install\\033[0m<span class=\"variable\">$Five</span>   ].e</span></span><br><span class=\"line\"><span class=\"string\">  6.[\\033[40;34m Exit\\033[0m           ].f</span></span><br><span class=\"line\"><span class=\"string\">-------------------------&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Please select a&#123;1|a,2|b,3|c,4|d,5|e,6|f&#125;:&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> n</span><br><span class=\"line\">    gather=<span class=\"variable\">$n</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ftc</span></span>()&#123;</span><br><span class=\"line\">    /bin/clear</span><br><span class=\"line\">    /bin/bash <span class=\"variable\">$0</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1      </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Input value judgment</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">isdigit</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">expr</span> <span class=\"variable\">$gather</span> + 1 &amp;&gt;/dev/null</span><br><span class=\"line\">    x=$?</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$gather</span>&quot;</span> =~ ^[a-f]$ ]];<span class=\"keyword\">then</span>   <span class=\"comment\">#&lt;==如果匹配到a-f就什么都不干</span></span><br><span class=\"line\">        :</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [[ -z <span class=\"variable\">$gather</span> || <span class=\"variable\">$x</span> -ne 0 || ! <span class=\"variable\">$gather</span> =~ ^[1-6]$ ]];<span class=\"keyword\">then</span>   <span class=\"comment\">#&lt;==如果传入值不为数字就重新执行脚本</span></span><br><span class=\"line\">        ftc</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Installation status diagram</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">choose</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Inl&#125;</span> $*&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">win</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;Ok&#125;</span> $*&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Choose to determine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">checkbox</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$gather</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        6|f)</span><br><span class=\"line\">            <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[40;31mQuit!\\033[0m&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        5|e)</span><br><span class=\"line\">            choose <span class=\"variable\">$&#123;Five&#125;</span></span><br><span class=\"line\">            win <span class=\"variable\">$&#123;Five&#125;</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        4|d)</span><br><span class=\"line\">            choose <span class=\"variable\">$&#123;Four&#125;</span></span><br><span class=\"line\">            win <span class=\"variable\">$&#123;Four&#125;</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        3|c)</span><br><span class=\"line\">            choose <span class=\"variable\">$&#123;Three&#125;</span></span><br><span class=\"line\">            win <span class=\"variable\">$&#123;Three&#125;</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        2|b)</span><br><span class=\"line\">            choose <span class=\"variable\">$&#123;Two&#125;</span></span><br><span class=\"line\">            win <span class=\"variable\">$&#123;Two&#125;</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        1|a)</span><br><span class=\"line\">            choose <span class=\"variable\">$&#123;One&#125;</span></span><br><span class=\"line\">            win <span class=\"variable\">$&#123;One&#125;</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            :</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Call all</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">    list</span><br><span class=\"line\">    isdigit</span><br><span class=\"line\">    checkbox</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-273.png\" alt=\"菜单\"></p>\n<h3 id=\"返回值传递\"><a href=\"#返回值传递\" class=\"headerlink\" title=\"返回值传递\"></a>返回值传递</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 21 81</span></span><br><span class=\"line\"><span class=\"comment\"># description: startup rsync scripts</span></span><br><span class=\"line\">PID=/var/run/rsyncd.pid</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ -f <span class=\"variable\">$PID</span> -a -s <span class=\"variable\">$PID</span> ]</span><br><span class=\"line\">\t   <span class=\"keyword\">then</span></span><br><span class=\"line\">\t       :</span><br><span class=\"line\">\t   <span class=\"keyword\">else</span></span><br><span class=\"line\">\t       rsync --daemon</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> $?   &lt;==把函数执行结果通过<span class=\"built_in\">return</span>传出</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -f <span class=\"variable\">$PID</span> -a -s <span class=\"variable\">$PID</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">kill</span> `<span class=\"built_in\">cat</span> <span class=\"variable\">$PID</span>`</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> $?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        retval=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        retval=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span> 2</span><br><span class=\"line\">        start</span><br><span class=\"line\">        retval=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage；<span class=\"variable\">$0</span> &#123;start|stop|restart&#125;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> <span class=\"variable\">$retval</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"C6启动脚本\"><a href=\"#C6启动脚本\" class=\"headerlink\" title=\"C6启动脚本\"></a>C6启动脚本</h3><p>service管理的服务需要将其脚本文件放在/etc/init.d目录中，通过chkconfig管理。<br><strong>rsync启动脚本解析</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 21 81</span></span><br><span class=\"line\"><span class=\"comment\"># description: rsync service start and stop scripts</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Felix</span></span><br><span class=\"line\"><span class=\"comment\"># Organization:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#加载自带函数库</span></span><br><span class=\"line\">[ -f /etc/rc.d/init.d/functions ] &amp;&amp; <span class=\"built_in\">source</span> /etc/rc.d/init.d/functions</span><br><span class=\"line\"><span class=\"comment\">#程序锁文件，用来判断程序是否启动</span></span><br><span class=\"line\">lockdir=<span class=\"string\">&#x27;/var/lock/subsys&#x27;</span></span><br><span class=\"line\">lock_file_path=<span class=\"string\">&quot;<span class=\"variable\">$lockdir</span>/rsync&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pid文件</span></span><br><span class=\"line\">rsyncd_pid_file_path=<span class=\"string\">&quot;/var/run/rsyncd.pid&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#成功提示函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">log_success_msg</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">#action为特殊的提示函数，$@为所有参数。</span></span><br><span class=\"line\">    action <span class=\"string\">&quot;SUCCESS! <span class=\"variable\">$@</span>&quot;</span> /bin/true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#失败提示函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">log_failure_msg</span></span>()&#123;</span><br><span class=\"line\">    action  <span class=\"string\">&quot;ERROR! <span class=\"variable\">$@</span>&quot;</span> /bin/false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>()&#123;</span><br><span class=\"line\">    rsync --daemon &amp;&gt;/dev/null</span><br><span class=\"line\">    retval=$?</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$retval</span> -eq 0 ]  <span class=\"comment\">#&lt;==获取状态码，为0表示启动成功</span></span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        log_success_msg <span class=\"string\">&quot;Rsyncd is started.&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -w <span class=\"string\">&quot;<span class=\"variable\">$lockdir</span>&quot;</span> <span class=\"comment\">#判断锁目录是否可写。</span></span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">touch</span> <span class=\"string\">&quot;<span class=\"variable\">$lock_file_path</span>&quot;</span> <span class=\"comment\">#创建锁文件，表示程序已经正常启动。</span></span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            log_failure_msg <span class=\"string\">&quot;Rsync lockfile denied&quot;</span> <span class=\"comment\">#目录不可写，创建锁文件失败，调用失败函数提示。</span></span><br><span class=\"line\">            <span class=\"built_in\">return</span> 1</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Rsyncd startup fail.&quot;</span>  <span class=\"comment\">#返回值不为0，表示启动失败。</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#停止函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -s <span class=\"string\">&quot;<span class=\"variable\">$rsyncd_pid_file_path</span>&quot;</span>  <span class=\"comment\">#判断文件是否不为空。</span></span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\">#读取pidfile</span></span><br><span class=\"line\">        rsyncd_pid=`<span class=\"built_in\">cat</span> <span class=\"string\">&quot;<span class=\"variable\">$rsyncd_pid_file_path</span>&quot;</span>`  <span class=\"comment\">#不为空则获取pid</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">kill</span> -0 <span class=\"variable\">$rsyncd_pid</span> 2&gt;/dev/null)  <span class=\"comment\">#通过进程号，判断对应的进程是否存在。</span></span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">kill</span> <span class=\"variable\">$rsyncd_pid</span>   <span class=\"comment\">#进程存在就杀死进程</span></span><br><span class=\"line\">            retval=$?</span><br><span class=\"line\">            <span class=\"keyword\">if</span> [ <span class=\"variable\">$retval</span> -eq 0 ]</span><br><span class=\"line\">            <span class=\"keyword\">then</span></span><br><span class=\"line\">                log_success_msg <span class=\"string\">&quot;Rsync Stop&quot;</span> <span class=\"comment\">#调用停止成功函数。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -f <span class=\"string\">&quot;<span class=\"variable\">$lock_file_path</span>&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">then</span></span><br><span class=\"line\">                    <span class=\"built_in\">rm</span> <span class=\"string\">&quot;<span class=\"variable\">$lock_file_path</span>&quot;</span>  <span class=\"comment\">#删除锁文件。</span></span><br><span class=\"line\">                <span class=\"keyword\">fi</span></span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                log_failure_msg <span class=\"string\">&quot;Rsyncd Stop.&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span></span><br><span class=\"line\">            <span class=\"keyword\">fi</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            log_failure_msg <span class=\"string\">&quot;rsync server_pid&#x27;s process is not running!&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">rm</span> <span class=\"string\">&quot;<span class=\"variable\">$rsyncd_pid_file_path</span>&quot;</span>   <span class=\"comment\">#进程号对应的进程未启动，就删除pid文件。并提示</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        log_failure_msg <span class=\"string\">&quot;Rsync server PID file is null or not exist!&quot;</span>   <span class=\"comment\">#进程号不存，提示</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        retval=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        retval=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span> 2</span><br><span class=\"line\">        start</span><br><span class=\"line\">        retval=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> $<span class=\"string\">&quot;Usage:<span class=\"variable\">$0</span> &#123;start|stop|restart&#125;&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> <span class=\"variable\">$retval</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Nginx启动脚本解析</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 21 81</span></span><br><span class=\"line\"><span class=\"comment\"># description: nginx service start and stop scripts</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Felix</span></span><br><span class=\"line\"><span class=\"comment\"># Organization:</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"comment\"># File Name: 2.sh</span></span><br><span class=\"line\"><span class=\"comment\"># Created Time: 2019年12月30日 星期一 13时52分38秒</span></span><br><span class=\"line\"><span class=\"comment\"># Version: V1.0</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Felix</span></span><br><span class=\"line\"><span class=\"comment\"># Organization: 360JR OPS</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"comment\">#加载自带函数库</span></span><br><span class=\"line\">[ -f /etc/rc.d/init.d/functions ] &amp;&amp; <span class=\"built_in\">source</span> /etc/rc.d/init.d/functions</span><br><span class=\"line\"><span class=\"comment\">#程序锁文件，用来判断程序是否启动</span></span><br><span class=\"line\">lockdir=<span class=\"string\">&#x27;/var/lock/subsys&#x27;</span></span><br><span class=\"line\">lock_file_path=<span class=\"string\">&quot;<span class=\"variable\">$lockdir</span>/nginx&quot;</span></span><br><span class=\"line\">installation_site=<span class=\"string\">&quot;/application/nginx&quot;</span> </span><br><span class=\"line\">sbin=<span class=\"string\">&quot;<span class=\"variable\">$installation_site</span>/sbin/nginx&quot;</span></span><br><span class=\"line\">conf=<span class=\"string\">&quot;<span class=\"variable\">$installation_site</span>/conf/nginx.conf&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#pid文件</span></span><br><span class=\"line\">nginx_pid_file_path=<span class=\"string\">&quot;<span class=\"variable\">$installation_site</span>/logs/nginx.pid&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#成功提示函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">log_success_msg</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">#action为特殊的提示函数，$@为所有参数。</span></span><br><span class=\"line\">    action <span class=\"string\">&quot;SUCCESS! <span class=\"variable\">$@</span>&quot;</span> /bin/true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#失败提示函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">log_failure_msg</span></span>()&#123;</span><br><span class=\"line\">    action <span class=\"string\">&quot;ERROR! <span class=\"variable\">$@</span>&quot;</span> /bin/false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -f <span class=\"variable\">$lock_file_path</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"variable\">$sbin</span> -c <span class=\"variable\">$conf</span> &amp;&gt; /dev/null</span><br><span class=\"line\">    gather=$?</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$gather</span> -eq 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        log_success_msg <span class=\"string\">&quot;Nginx is started.&quot;</span></span><br><span class=\"line\">        [ -w <span class=\"variable\">$lockdir</span> ] &amp;&amp; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">touch</span> <span class=\"variable\">$lock_file_path</span></span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"variable\">$gather</span></span><br><span class=\"line\">        &#125;||&#123;</span><br><span class=\"line\">            log_failure_msg <span class=\"string\">&quot;Nginx lockfile denied&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">return</span> 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        log_failure_msg <span class=\"string\">&quot;Nginx startd failed&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"variable\">$gather</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -s <span class=\"variable\">$nginx_pid_file_path</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        nginx_pid=$(<span class=\"built_in\">cat</span> <span class=\"string\">&quot;<span class=\"variable\">$nginx_pid_file_path</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">kill</span> -0 <span class=\"variable\">$nginx_pid</span> &amp;&gt;/dev/null)</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"variable\">$sbin</span> -s stop</span><br><span class=\"line\">            gather=$?</span><br><span class=\"line\">            [ <span class=\"variable\">$gather</span> -eq 0 ]&amp;&amp;&#123;</span><br><span class=\"line\">                log_success_msg <span class=\"string\">&quot;Nginx Stop&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> [ -f <span class=\"string\">&quot;<span class=\"variable\">$lock_file_path</span>&quot;</span> ]</span><br><span class=\"line\">                <span class=\"keyword\">then</span></span><br><span class=\"line\">                    <span class=\"built_in\">rm</span> <span class=\"string\">&quot;<span class=\"variable\">$lock_file_path</span>&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">fi</span></span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"variable\">$gather</span></span><br><span class=\"line\">            &#125;||&#123;</span><br><span class=\"line\">                log_failure_msg <span class=\"string\">&quot;Nginx Stop&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"variable\">$gather</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            log_failure_msg <span class=\"string\">&quot;Nginx service has not been started&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">rm</span> <span class=\"string\">&quot;<span class=\"variable\">$nginx_pid_file_path</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        log_failure_msg <span class=\"string\">&quot;Nginx service PID file is null or not exist!&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">reload</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"variable\">$sbin</span> -t &amp;&gt; /dev/null</span><br><span class=\"line\">   <span class=\"keyword\">if</span> [ $? -eq 0 ]</span><br><span class=\"line\">   <span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"built_in\">kill</span> -HUP $(<span class=\"built_in\">cat</span> <span class=\"string\">&quot;<span class=\"variable\">$nginx_pid_file_path</span>&quot;</span>)</span><br><span class=\"line\">       log_success_msg <span class=\"string\">&quot;Nginx Reload&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">fi</span></span><br><span class=\"line\">   <span class=\"built_in\">return</span> $?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        retval=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        retval=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span> 2</span><br><span class=\"line\">        start</span><br><span class=\"line\">        retval=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        retval=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> $<span class=\"string\">&quot;Usage:<span class=\"variable\">$0</span> &#123;start|stop|restart|reload&#125;&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> <span class=\"variable\">$retval</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"C7启动脚本\"><a href=\"#C7启动脚本\" class=\"headerlink\" title=\"C7启动脚本\"></a>C7启动脚本</h3><p>手动编写脚本，一般会在源码包安装时使用。<br>systemd有系统和用户区分；系统（<code>/user/lib/systemd/system/</code>）、用户（<code>/etc/lib/systemd/user/</code>）.一般系统管理员手工创建的单元文件建议存放在<code>/etc/systemd/system/</code>目录下面;每一个服务以.service结尾，一般会分为3部分：[Unit]、[Service]和[Install]</p>\n<p><code>vim /usr/lib/systemd/system/服务名.service</code></p>\n<p>脚本的内容格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]:服务的说明模块</span><br><span class=\"line\">Description:描述服务</span><br><span class=\"line\">Documentation=man:sshd(8) man:sshd_config(5) :文档列表说明</span><br><span class=\"line\">After:服务依赖类别说明</span><br><span class=\"line\">Wants=sshd-keygen.service:可选的依赖服务</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]服务运行参数的设置</span><br><span class=\"line\">Type=forking是后台运行的形式</span><br><span class=\"line\">PIDFile为存放PID的文件路径</span><br><span class=\"line\">EnvironmentFile=/etc/sysconfig/sshd环境变量等的配置文件</span><br><span class=\"line\">ExecStart为服务的具体运行命令</span><br><span class=\"line\">ExecReload为重启命令</span><br><span class=\"line\">ExecStop为停止命令</span><br><span class=\"line\">PrivateTmp=True表示给服务分配独立的临时空间</span><br><span class=\"line\">注意：启动、重启、停止命令全部要求使用绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]服务安装的相关设置，可设置为多用户</span><br><span class=\"line\">WantedBy=multi-user.target这里为设置多用户级别。可为空格分隔的列表， 表示在使用 systemctl <span class=\"built_in\">enable</span> 启用此单元时， 将会在对应的目录设置对应文件的软连接/etc/systemd/system/multi-user.target.wants/目录下新建一个/usr/lib/systemd/system/nginx.service 文件的链接。想对应，可以用 <span class=\"built_in\">disable</span> 把它从 wants 目录给删除</span><br></pre></td></tr></table></figure>\n<p><strong>附录：</strong></p>\n<ul>\n<li>Type=simple（默认值）：systemd认为该服务将立即启动。服务进程不会fork。如果该服务要启动其他服务，不要使用此类型启动，除非该服务是socket激活型。</li>\n<li>Type=forking：systemd认为当该服务进程fork，且父进程退出后服务启动成功。对于常规的守护进程（daemon），除非你确定此启动方式无法满足需求，使用此类型启动即可。使用此启动类型应同时指定 PIDFile=，以便systemd能够跟踪服务的主进程。</li>\n<li>Type=oneshot：这一选项适用于只执行一项任务、随后立即退出的服务。可能需要同时设置 RemainAfterExit=yes 使得 systemd 在服务进程退出之后仍然认为服务处于激活状态。</li>\n<li>Type=notify：与 Type=simple 相同，但约定服务会在就绪后向 systemd 发送一个信号。这一通知的实现由 libsystemd-daemon.so 提供。</li>\n<li>Type=dbus：若以此方式启动，当指定的 BusName 出现在DBus系统总线上时，systemd认为服务就绪。</li>\n</ul>\n<p>编写php-fpm的启动脚本</p>\n<ol>\n<li>创建php-fpm.service 脚本文件<br><code>vim /usr/lib/systemd/system/nginx.service</code></li>\n<li>编写脚本内容<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=php</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/usr/local/php/sbin/php-fpm</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"PPTP安装脚本\"><a href=\"#PPTP安装脚本\" class=\"headerlink\" title=\"PPTP安装脚本\"></a>PPTP安装脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\"><span class=\"comment\"># Check if user is root</span></span><br><span class=\"line\">[ $(<span class=\"built_in\">id</span> -u) != <span class=\"string\">&quot;0&quot;</span> ] &amp;&amp; &#123; <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[31mError: You must be root to run this script\\033[0m&quot;</span>; <span class=\"built_in\">exit</span> 1; &#125; </span><br><span class=\"line\">clear</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文件不存在则执行安装</span></span><br><span class=\"line\">[ ! -e <span class=\"string\">&#x27;/usr/bin/curl&#x27;</span> ] &amp;&amp; yum -y install curl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取公网IP</span></span><br><span class=\"line\">VPN_IP=`curl ipv4.icanhazip.com`</span><br><span class=\"line\"><span class=\"comment\">#网关</span></span><br><span class=\"line\">VPN_LOCAL=<span class=\"string\">&quot;192.168.0.150&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#地址池</span></span><br><span class=\"line\">VPN_REMOTE=<span class=\"string\">&quot;192.168.0.151-200&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入内容不为空则跳出循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> -p <span class=\"string\">&quot;Please input UserName: &quot;</span> VPN_USER </span><br><span class=\"line\">    [ -n <span class=\"string\">&quot;<span class=\"variable\">$VPN_USER</span>&quot;</span> ] &amp;&amp; <span class=\"built_in\">break</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入内容不为空则跳出循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> -p <span class=\"string\">&quot;Please input PassWord: &quot;</span> VPN_PASS</span><br><span class=\"line\">    [ -n <span class=\"string\">&quot;<span class=\"variable\">$VPN_PASS</span>&quot;</span> ] &amp;&amp; <span class=\"built_in\">break</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">clear</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断是文件是否存在&amp;&amp;过滤出的字符串长度是否为0。如果不为0就是C7系统</span></span><br><span class=\"line\"><span class=\"comment\">#if [ -f /etc/redhat-release -a -n &quot;`grep &#x27; 7\\.&#x27; /etc/redhat-release`&quot; ];then</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断是文件是否存在&amp;&amp;过滤出的字符串长度是否为0。如果不为0就是C6系统</span></span><br><span class=\"line\">[ -f /etc/redhat-release -a -n <span class=\"string\">&quot;`grep &#x27; 6\\.&#x27; /etc/redhat-release`&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">C7</span></span>()&#123;  </span><br><span class=\"line\">    <span class=\"comment\">#CentOS_REL=7 安装epel源</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -e /etc/yum.repos.d/epel.repo ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">cat</span> &gt; /etc/yum.repos.d/epel.repo &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">[epel]</span><br><span class=\"line\">name=Extra Packages <span class=\"keyword\">for</span> Enterprise Linux 7 - <span class=\"variable\">$basearch</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch</span></span><br><span class=\"line\">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;<span class=\"built_in\">arch</span>=<span class=\"variable\">$basearch</span></span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">EOF</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"comment\">#安装依赖包，和iptables</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> Package <span class=\"keyword\">in</span> wget make openssl gcc-c++ ppp pptpd iptables iptables-services </span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">        yum -y install <span class=\"variable\">$Package</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">\t[ $? -ne 0 ] &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"comment\">#开启防火墙转发功能</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;net.ipv4.ip_forward = 1&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">C6</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">#CentOS_REL=6</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> Package <span class=\"keyword\">in</span> wget make openssl gcc-c++ iptables ppp </span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">        yum -y install <span class=\"variable\">$Package</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    [ $? -eq 0 ] &amp;&amp; &#123;</span><br><span class=\"line\">    sed -i <span class=\"string\">&#x27;s@net.ipv4.ip_forward.*@net.ipv4.ip_forward = 1@g&#x27;</span> /etc/sysctl.conf</span><br><span class=\"line\">    rpm -Uvh http://poptop.sourceforge.net/yum/stable/rhel6/pptp-release-current.noarch.rpm</span><br><span class=\"line\">    yum -y install pptpd</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">return</span> $?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">es</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[31mDoes not support this OS, Please contact the author! \\033[0m&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">conf</span></span>()&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -eq 0 ]</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\">    sysctl -p /etc/sysctl.conf</span><br><span class=\"line\">    <span class=\"comment\">#pptpd.conf配置</span></span><br><span class=\"line\">    <span class=\"comment\"># Local IP address of your VPN server</span></span><br><span class=\"line\">    [ -z <span class=\"string\">&quot;`grep &#x27;^localip&#x27; /etc/pptpd.conf`&quot;</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;localip <span class=\"variable\">$VPN_LOCAL</span>&quot;</span> &gt;&gt; /etc/pptpd.conf </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#Scope for your home network</span></span><br><span class=\"line\">    [ -z <span class=\"string\">&quot;`grep &#x27;^remoteip&#x27; /etc/pptpd.conf`&quot;</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;remoteip <span class=\"variable\">$VPN_REMOTE</span>&quot;</span> &gt;&gt; /etc/pptpd.conf </span><br><span class=\"line\">    </span><br><span class=\"line\">    [ -z <span class=\"string\">&quot;`grep &#x27;^stimeout&#x27; /etc/pptpd.conf`&quot;</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;stimeout 172800&quot;</span> &gt;&gt; /etc/pptpd.conf</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#dns配置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;`grep &#x27;^ms-dns&#x27; /etc/ppp/options.pptpd`&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">         <span class=\"built_in\">cat</span> &gt;&gt; /etc/ppp/options.pptpd &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">ms-dns 223.5.5.5 # Aliyun DNS Primary</span></span><br><span class=\"line\"><span class=\"string\">ms-dns 114.114.114.114 # 114 DNS Primary</span></span><br><span class=\"line\"><span class=\"string\">ms-dns 8.8.8.8 # Google DNS Primary</span></span><br><span class=\"line\"><span class=\"string\">ms-dns 209.244.0.3 # Level3 Primary</span></span><br><span class=\"line\"><span class=\"string\">ms-dns 208.67.222.222 # OpenDNS Primary</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"comment\">#账号密码配置</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$VPN_USER</span> pptpd <span class=\"variable\">$VPN_PASS</span> *&quot;</span> &gt;&gt; /etc/ppp/chap-secrets</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">FiWa</span></span>()&#123;</span><br><span class=\"line\">ETH=`route | grep default | awk <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span>`</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">iptables -X</span><br><span class=\"line\">iptables -Z</span><br><span class=\"line\"><span class=\"comment\">#允许22端口</span></span><br><span class=\"line\">iptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#允许本地环回口</span></span><br><span class=\"line\">iptables -A INPUT -i lo -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#允许pptp端口，针对已经或即将启动的新链接</span></span><br><span class=\"line\">[ -z <span class=\"string\">&quot;`grep &#x27;1723 -j ACCEPT&#x27; /etc/sysconfig/iptables`&quot;</span> ] &amp;&amp; iptables -I INPUT 1 -p tcp -m state --state NEW -m tcp --dport 1723 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#允许47端口</span></span><br><span class=\"line\">[ -z <span class=\"string\">&quot;`grep &#x27;gre -j ACCEPT&#x27; /etc/sysconfig/iptables`&quot;</span> ] &amp;&amp; iptables -I INPUT 2 -p gre -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#只放行关系连接和回应报文，防止攻击</span></span><br><span class=\"line\">iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -t nat -A POSTROUTING -o <span class=\"variable\">$ETH</span> -j MASQUERADE</span><br><span class=\"line\">iptables -I FORWARD -p tcp --syn -i ppp+ -j TCPMSS --set-mss 1356</span><br><span class=\"line\">service iptables save</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s@^-A INPUT -j REJECT --reject-with icmp-host-prohibited@#-A INPUT -j REJECT --reject-with icmp-host-prohibited@&#x27;</span> /etc/sysconfig/iptables </span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s@^-A FORWARD -j REJECT --reject-with icmp-host-prohibited@#-A FORWARD -j REJECT --reject-with icmp-host-prohibited@&#x27;</span> /etc/sysconfig/iptables </span><br><span class=\"line\">service iptables restart</span><br><span class=\"line\">chkconfig iptables on</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">service pptpd restart</span><br><span class=\"line\">chkconfig pptpd on</span><br><span class=\"line\">clear</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;You can now connect to your VPN via your external IP \\033[32m<span class=\"variable\">$&#123;VPN_IP&#125;</span>\\033[0m&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;Username: \\033[32m<span class=\"variable\">$&#123;VPN_USER&#125;</span>\\033[0m&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;Password: \\033[32m<span class=\"variable\">$&#123;VPN_PASS&#125;</span>\\033[0m&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> &lt;条件表达式&gt;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   命令集</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> &lt;条件表达式&gt;;<span class=\"keyword\">do</span></span><br><span class=\"line\">    命令集</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>计算器无限循环</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#1.判断是否为两个参数</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>;<span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"comment\">#如果用户未输入，就一直进行循环。否则跳出循环 进行下面的判断</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;Please enter two Numbers：&quot;</span> x y</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$x</span> -o -z <span class=\"variable\">$y</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span> </span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$0</span> num1 num2 ✔&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">break</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#if [ $# -ne 2 ]</span></span><br><span class=\"line\"><span class=\"comment\">#    then</span></span><br><span class=\"line\"><span class=\"comment\">#    echo &quot;$0 num1 num2 ✔&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#    exit 1</span></span><br><span class=\"line\"><span class=\"comment\">#fi</span></span><br><span class=\"line\"><span class=\"comment\">#2.判断参数是否为数字</span></span><br><span class=\"line\"><span class=\"built_in\">expr</span> <span class=\"variable\">$x</span> + <span class=\"variable\">$y</span> + 100 &amp;&gt;/dev/null</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -eq 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[data ok]:<span class=\"variable\">$x</span> <span class=\"variable\">$y</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入两个正确的整数！&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 2</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.开始计算</span></span><br><span class=\"line\">a=<span class=\"variable\">$x</span></span><br><span class=\"line\">b=<span class=\"variable\">$y</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>+<span class=\"variable\">$b</span>=$((a+b))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>-<span class=\"variable\">$b</span>=$((a-b))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>^<span class=\"variable\">$b</span>=$((a**b))</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$b</span> -eq 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[error] 除数为0，取余和除法不能计算。×&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>/<span class=\"variable\">$b</span>=$((a/b))</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span>%<span class=\"variable\">$b</span>=$((a%b))</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>检查URL是否正常</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\">[ -f /etc/init.d/functions ] &amp;&amp; . /etc/init.d/functions</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">usage</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! <span class=\"variable\">$1</span> =~ http://.*$ ]]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage:<span class=\"variable\">$0</span> http://www.xxx.com&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check_url</span></span>()&#123;</span><br><span class=\"line\">    wget -q -o /dev/null --spider --tries=1 -T 5 <span class=\"variable\">$1</span></span><br><span class=\"line\">    retval=$?</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$retval</span> -eq 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        action <span class=\"string\">&quot;URL is ok&quot;</span> /bin/true</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        action <span class=\"string\">&quot;URL is no&quot;</span> /bin/false</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">true</span>;<span class=\"keyword\">do</span></span><br><span class=\"line\">    usage <span class=\"variable\">$1</span></span><br><span class=\"line\">    check_url <span class=\"variable\">$1</span></span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 2</span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main $*</span><br></pre></td></tr></table></figure>\n\n<p><strong>计算从1++到100</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 1 <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"> 2 <span class=\"comment\">###################################################</span></span><br><span class=\"line\"> 3 <span class=\"comment\"># File Name: 1+100.sh  </span></span><br><span class=\"line\"> 4 <span class=\"comment\"># Created Time: Thu 09 Jan 2020 03:23:14 PM CST</span></span><br><span class=\"line\"> 5 <span class=\"comment\"># Version: V1.0 </span></span><br><span class=\"line\"> 6 <span class=\"comment\"># Author: Felix </span></span><br><span class=\"line\"> 7 <span class=\"comment\"># Organization: 360JR OPS</span></span><br><span class=\"line\"> 8 <span class=\"comment\">###################################################</span></span><br><span class=\"line\"> 9 <span class=\"built_in\">sum</span>=0    </span><br><span class=\"line\">10 i=1                                                                                                                 </span><br><span class=\"line\">11 <span class=\"keyword\">while</span> [ <span class=\"variable\">$i</span> -lt 101 ]</span><br><span class=\"line\">12 <span class=\"keyword\">do</span>  </span><br><span class=\"line\">13     ((sum=<span class=\"variable\">$sum</span>+<span class=\"variable\">$i</span>))  &lt;==<span class=\"built_in\">let</span>的话不要加$</span><br><span class=\"line\">14     ((i++))</span><br><span class=\"line\">15 <span class=\"keyword\">done</span></span><br><span class=\"line\">16 <span class=\"built_in\">echo</span> <span class=\"variable\">$sum</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>读入文件里的年龄并计算</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># cat age.txt </span></span><br><span class=\"line\">feichi 20</span><br><span class=\"line\">feichi01 22</span><br><span class=\"line\">feichi02 23</span><br><span class=\"line\">feichi03 24</span><br><span class=\"line\">feichi04 25</span><br><span class=\"line\">[root@KFSAMBA ~]<span class=\"comment\"># cat age.sh</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"comment\"># File Name: age.sh</span></span><br><span class=\"line\"><span class=\"comment\"># Created Time: Fri 10 Jan 2020 01:02:34 PM CST</span></span><br><span class=\"line\"><span class=\"comment\"># Version: V1.0</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Felix</span></span><br><span class=\"line\"><span class=\"comment\"># Organization: 360JR OPS</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\">age=0</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line  &lt;==一行一行读入</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    i=`<span class=\"built_in\">echo</span> <span class=\"variable\">$line</span> | awk -F<span class=\"string\">&quot; &quot;</span> <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span>`  &lt;==通过awk取年龄</span><br><span class=\"line\">    ((age=<span class=\"variable\">$age</span>+<span class=\"variable\">$i</span>))  &lt;==计算赋值</span><br><span class=\"line\"><span class=\"keyword\">done</span>&lt;./age.txt </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$age</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成随机数\"><a href=\"#生成随机数\" class=\"headerlink\" title=\"生成随机数\"></a>生成随机数</h3><ol>\n<li><p>使用openssl生成随机密码<br><code>openssl rand -base64 20</code>几乎所有Linux发行版都包含openssl。我们可以利用它的随机功能来生成可以用作密码的随机字母字符串，其中后面的数字10和20是指定密码的长度。</p>\n</li>\n<li><p>使用urandom生成随机密码<br><code>strings /dev/urandom |tr -dc A-Za-z0-9 | head -c20; echo</code></p>\n</li>\n</ol>\n<ul>\n<li>tr -dc 保留哪些字符</li>\n</ul>\n<ol start=\"3\">\n<li><code>$RANDOM</code>：<br>作用：可以随机生成0~32767之间的整数数字</li>\n</ol>\n<p><img src=\"/images/pasted-276.png\" alt=\"RANDOM\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$RANDOM</span>|<span class=\"built_in\">md5sum</span>|<span class=\"built_in\">cut</span> -c 1-10|<span class=\"built_in\">tr</span> <span class=\"string\">&quot;[A-Z0-9]&quot;</span> <span class=\"string\">&quot;[a-z]&quot;</span></span><br><span class=\"line\">       随机数      md5计算   截取1-10  替换数字为字符</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>UUID随机数<br><code>cat /proc/sys/kernel/random/uuid</code></p>\n</li>\n<li><p>使用md5sum生成随机密码<br><code>date |md5sum</code><br>以上是用Linux命令生成随机密码，除此之外还可以使用第三方工具进行生成，如mkpasswd、randpw、pwgen、spw，gpg、xkcdpass等，有兴趣的可以了解一下！</p>\n</li>\n<li><p>mkpasswd命令<br>mkpasswd命令 是make password的简写。可以随机生成字符串。<br>安装：<code>yum install -y expect</code><br>语法：<br>mkpasswd [选项] [参数]<br>选项：</p>\n</li>\n</ol>\n<ul>\n<li>-l：指定长度</li>\n<li>-d：数字的个数</li>\n<li>-c：小写字母个数</li>\n<li>-C：大写字母个数</li>\n<li>-s：特殊字符个数</li>\n</ul>\n<p><strong>随机文件生成</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ ! -d felix ] &amp;&amp; <span class=\"built_in\">mkdir</span> -p felix</span><br><span class=\"line\"><span class=\"built_in\">cd</span> felix/</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;How many do I need to create: &quot;</span> x</span><br><span class=\"line\">c=`<span class=\"built_in\">seq</span> <span class=\"variable\">$x</span>`</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"variable\">$c</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    prefix=`<span class=\"built_in\">date</span> +%N|<span class=\"built_in\">md5sum</span>| <span class=\"built_in\">echo</span> <span class=\"variable\">$RANDOM</span>|<span class=\"built_in\">md5sum</span>|<span class=\"built_in\">cut</span> -c 1-6|<span class=\"built_in\">tr</span> <span class=\"string\">&#x27;[0-9]&#x27;</span> <span class=\"string\">&#x27;[a-z]&#x27;</span>`</span><br><span class=\"line\">    <span class=\"built_in\">touch</span> <span class=\"variable\">$&#123;prefix&#125;</span>_felix.html</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$n</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>脚本执行技巧</strong><br>后台执行脚本<br><img src=\"/images/pasted-274.png\" alt=\"后台执行脚本\"><br>杀死后台脚本<br><img src=\"/images/pasted-275.png\" alt=\"杀死后台脚本\"></p>\n<p><strong>简单的文本处理</strong><br><img src=\"/images/pasted-277.png\" alt=\"简单的文本处理\"></p>\n<p><strong>随机文件+批量改名</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">批量创建随机文件</span><br><span class=\"line\">[ ! -d felix ] &amp;&amp; <span class=\"built_in\">mkdir</span> -p felix</span><br><span class=\"line\"><span class=\"built_in\">cd</span> felix/</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;How many do I need to create: &quot;</span> x</span><br><span class=\"line\">c=`<span class=\"built_in\">seq</span> <span class=\"variable\">$x</span>`</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"variable\">$c</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    prefix=`<span class=\"built_in\">date</span> +%N|<span class=\"built_in\">md5sum</span>|<span class=\"built_in\">cut</span> -c 1-6|<span class=\"built_in\">tr</span> <span class=\"string\">&#x27;[0-9]&#x27;</span> <span class=\"string\">&#x27;[a-z]&#x27;</span>`</span><br><span class=\"line\">    <span class=\"built_in\">touch</span> <span class=\"variable\">$&#123;prefix&#125;</span>_felix.html</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$n</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">批量修改文件</span><br><span class=\"line\">方法1：<span class=\"keyword\">for</span>循环</span><br><span class=\"line\">files=`<span class=\"built_in\">ls</span> felix/`</span><br><span class=\"line\"><span class=\"built_in\">cd</span> felix</span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> <span class=\"variable\">$files</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">mv</span> <span class=\"variable\">$file</span> <span class=\"variable\">$&#123;file//felix.html/feieileks.HTML&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">方法2：rename命令</span><br><span class=\"line\">rename from  to towards</span><br><span class=\"line\">例：飞驰.html 改成马飞飞.html</span><br><span class=\"line\">rename 飞驰.html 马飞飞.html *飞驰.html</span><br><span class=\"line\">            源文件名 目标文件名  针对哪些文件进行修改</span><br><span class=\"line\"></span><br><span class=\"line\">方法3：拼接法</span><br><span class=\"line\">[root@KFSAMBA ~/felix]<span class=\"comment\"># ls | awk -F &#x27;_&#x27; &#x27;&#123;print &quot;mv&quot;,$0,$1&quot;_felix.html&quot;&#125;&#x27; | bash</span></span><br><span class=\"line\">bcechf_felix.html  cfbbbc_felix.html  djeaad_felix.html  fchafb_felix.html  hcgagf_felix.html</span><br></pre></td></tr></table></figure>\n\n<p><strong>ddos防御</strong></p>\n<blockquote>\n<p>思路：查ESTABLISHED并对其进行排序去重，看ESTABLISHED状态下是否有IP大于指定次数。如果大于指定次数就利用防火墙进行屏蔽。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"comment\"># File Name: ctrl_ddos.sh</span></span><br><span class=\"line\"><span class=\"comment\"># Created Time: Tue 14 Jan 2020 02:36:15 PM CST</span></span><br><span class=\"line\"><span class=\"comment\"># Version: V1.0</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Felix</span></span><br><span class=\"line\"><span class=\"comment\"># Organization: 360JR OPS</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\">[ -f /etc/init.d/functions ] &amp;&amp; . /etc/init.d/functions</span><br><span class=\"line\"><span class=\"built_in\">log</span>=/tmp/ip.log</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">pan</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> -eq 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        action <span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> /bin/true</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        action <span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> /bin/false</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">defense</span></span>()&#123;</span><br><span class=\"line\">netstat -na | awk -F<span class=\"string\">&#x27;[ :]+&#x27;</span> <span class=\"string\">&#x27;$NF~/ESTABLISHED/&#123;print $(NF-2)&#125;&#x27;</span>|<span class=\"built_in\">sort</span>|<span class=\"built_in\">uniq</span> -c|<span class=\"built_in\">sort</span> -nr|<span class=\"built_in\">head</span> -10 &gt; <span class=\"variable\">$log</span> &amp;&amp; <span class=\"built_in\">echo</span> --operation: <span class=\"variable\">$i</span>--</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    ip=`<span class=\"built_in\">echo</span> <span class=\"variable\">$line</span>|awk <span class=\"string\">&#x27;&#123;print $(NF)&#125;&#x27;</span>`</span><br><span class=\"line\">    zahl=`<span class=\"built_in\">echo</span> <span class=\"variable\">$line</span>|awk <span class=\"string\">&#x27;&#123;print $(NF-1)&#125;&#x27;</span>`</span><br><span class=\"line\">    fw=`iptables -nL|grep -w <span class=\"variable\">$ip</span> |<span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$zahl</span> -gt 10 ] &amp;&amp; [ <span class=\"variable\">$fw</span> -eq 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        pan 1 <span class=\"string\">&quot;Source IP: <span class=\"variable\">$ip</span>&quot;</span></span><br><span class=\"line\">        iptables -I INPUT -s <span class=\"variable\">$ip</span> -j DROP</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        pan 0 <span class=\"string\">&quot;Source IP: <span class=\"variable\">$ip</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span>&lt;<span class=\"variable\">$log</span></span><br><span class=\"line\">    ((i++))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   <span class=\"keyword\">do</span></span><br><span class=\"line\">       <span class=\"built_in\">sleep</span> 5</span><br><span class=\"line\">       defense</span><br><span class=\"line\">   <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> :;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> -p<span class=\"string\">&quot;是否启动DDOS主动防御 [Y/n] &quot;</span> n</span><br><span class=\"line\">    [ -n <span class=\"variable\">$&#123;n:=y&#125;</span> ] &amp;&amp; <span class=\"built_in\">break</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">gather=`<span class=\"built_in\">echo</span> <span class=\"variable\">$n</span>|<span class=\"built_in\">tr</span> [A-Z] [a-z]`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$&#123;gather&#125;</span>&quot;</span> = <span class=\"string\">&quot;y&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    pan 0 <span class=\"string\">&quot;已开启&quot;</span></span><br><span class=\"line\">    main</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    pan 1 <span class=\"string\">&quot;<span class=\"variable\">$gather</span> 未识别&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>单词长度判断</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#判断句子中的单词是否大于三个字母</span></span><br><span class=\"line\"><span class=\"built_in\">log</span>=<span class=\"string\">&quot;To be or not to be that is a question&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$log</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> <span class=\"variable\">$log</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;#l&#125;</span> -le 3 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;这是不大于3个字母的单词&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$l</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;这是大于3个字母的单词&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$l</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>华为华三交换机配置备份</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\"><span class=\"comment\"># File Name: back_swcfg.sh</span></span><br><span class=\"line\"><span class=\"comment\"># Created Time: Thu Jan 16 12:27:00 2020</span></span><br><span class=\"line\"><span class=\"comment\"># Version: V2.0</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Felix</span></span><br><span class=\"line\"><span class=\"comment\"># Organization: 360JR OPS</span></span><br><span class=\"line\"><span class=\"comment\">###################################################</span></span><br><span class=\"line\">[ -f /etc/init.d/functions ] &amp;&amp; . /etc/init.d/functions</span><br><span class=\"line\">[ <span class=\"variable\">$UID</span> -ne 0 ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Please use the root account!&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">pan</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> -eq 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        action <span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> /bin/true</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        action <span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> /bin/false</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sw=(`<span class=\"built_in\">seq</span> 1 16` `<span class=\"built_in\">seq</span> 31 47` 61 `<span class=\"built_in\">seq</span> 63 76`)</span><br><span class=\"line\"><span class=\"built_in\">date</span>=`<span class=\"built_in\">date</span> +%F`</span><br><span class=\"line\">net=<span class=\"string\">&quot;10.93.130.&quot;</span></span><br><span class=\"line\">logfile=<span class=\"string\">&quot;/cfgdata/backup_cfg.log&quot;</span></span><br><span class=\"line\">cfgname=<span class=\"string\">&quot;startup.cfg&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /cfgdata/<span class=\"variable\">$date</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&#x27;SAMBA:\\\\\\10.93.131.251\\SWCFG USER:zjadmin PASS:591740 \\nAutomatic backup every Friday morning at 1:30 a.m\\n&#x27;</span> &gt; <span class=\"variable\">$logfile</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;The SWCFG backup situation:&quot;</span> &gt;&gt; <span class=\"variable\">$logfile</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;sw[@]&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    sshpass -p admin=h3c scp admin@<span class=\"variable\">$&#123;net&#125;</span><span class=\"variable\">$&#123;i&#125;</span>:flash:/<span class=\"variable\">$cfgname</span> /cfgdata/<span class=\"variable\">$date</span>/<span class=\"variable\">$&#123;net&#125;</span><span class=\"variable\">$&#123;i&#125;</span>_<span class=\"variable\">$cfgname</span></span><br><span class=\"line\">    cfg_file=<span class=\"string\">&quot;/cfgdata/<span class=\"variable\">$date</span>/<span class=\"variable\">$&#123;net&#125;</span><span class=\"variable\">$&#123;i&#125;</span>_<span class=\"variable\">$cfgname</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -f <span class=\"variable\">$cfg_file</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        pan 0 <span class=\"string\">&quot;<span class=\"variable\">$cfg_file</span> BACKUP&quot;</span> </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$cfg_file</span>  BACKUP   [OK]&quot;</span> &gt;&gt; <span class=\"variable\">$logfile</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        pan 1 <span class=\"string\">&quot;<span class=\"variable\">$cfg_file</span> BACKUP&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$cfg_file</span>  BACKUP   [BAD!]&quot;</span> &gt;&gt; <span class=\"variable\">$logfile</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /cfgdata/ -<span class=\"built_in\">type</span> d -mtime +30 | xargs <span class=\"built_in\">rm</span> -rf </span><br><span class=\"line\">mail -s <span class=\"string\">&quot;<span class=\"subst\">$(date +%S_%T)</span> ZJSW Configuration file backup report!&quot;</span> liwenjie@360jinrong.net &lt;  <span class=\"variable\">$logfile</span></span><br><span class=\"line\">mail -s <span class=\"string\">&quot;<span class=\"subst\">$(date +%S_%T)</span> ZJSW Configuration file backup report!&quot;</span> yaofeichi-jk@360jinrong.net &lt;  <span class=\"variable\">$logfile</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"循环状态控制\"><a href=\"#循环状态控制\" class=\"headerlink\" title=\"循环状态控制\"></a>循环状态控制</h3><p><img src=\"/images/pasted-278.png\" alt=\"循环状态控制\"></p>\n<p><strong>随机MD5破解</strong><br><img src=\"/images/pasted-279.png\" alt=\"随机MD5破解\"><br>f4cb084dc0  &lt;==破解这个</p>\n<p>原理：$RANDOM可以随机生成0~32767</p>\n<ol>\n<li><p>利用seq进行生成seq 0 32767</p>\n</li>\n<li><p>利用md5进行加密运算并前1-10位和源字符串进行比对</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;计算中...&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> `<span class=\"built_in\">seq</span> 0 32767`</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    pass=`<span class=\"built_in\">echo</span> <span class=\"variable\">$x</span>|<span class=\"built_in\">md5sum</span>|<span class=\"built_in\">cut</span> -c 1-10`  &lt;==此处有小问题</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$pass</span>&quot;</span> == <span class=\"string\">&quot;f4cb084dc0&quot;</span> ] </span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Calculate the number to be <span class=\"variable\">$x</span>!&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>正解:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;计算中...&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> `<span class=\"built_in\">seq</span> 0 32767`</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    pass=`<span class=\"built_in\">echo</span> <span class=\"variable\">$x</span>|<span class=\"built_in\">md5sum</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$pass</span> =~ ^.*f4cb084dc0.*$ ]]   <span class=\"comment\">#正则匹配</span></span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Calculate the number to be <span class=\"variable\">$x</span>!&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#数组改编判断单词长度</span></span><br><span class=\"line\">array=(1 2 3 4 5)</span><br><span class=\"line\"><span class=\"built_in\">log</span>=(To be or not to be that is a questio)</span><br><span class=\"line\">i=0                                       </span><br><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"variable\">$i</span> -lt <span class=\"variable\">$&#123;#log[@]&#125;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;#log[i]&#125;</span> -le 3 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;此单词 <span class=\"variable\">$&#123;log[i]&#125;</span>，小于等于3&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;此单词 <span class=\"variable\">$&#123;log[i]&#125;</span>，大于3&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    ((i++))</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">length=(To be or not to be that is a questio)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;length[*]&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((i=<span class=\"number\">0</span>;i&lt;<span class=\"variable\">$&#123;#length[*]&#125;</span>;i++))</span><br><span class=\"line\"><span class=\"keyword\">do</span>   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;#length[i]&#125;</span> -ge 3 ]               </span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;length[i]&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检查url</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">[ -f /etc/init.d/functions ] &amp;&amp; . /etc/init.d/functions</span><br><span class=\"line\">url_arr=(</span><br><span class=\"line\">    https://www.baidu.com/</span><br><span class=\"line\">    https://www.qq.com/</span><br><span class=\"line\">    https://www.jd.com/</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">pan</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> -eq 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        action <span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> /bin/true</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        action <span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span> /bin/false</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check_url</span></span>()&#123;</span><br><span class=\"line\">    wget -q -o /dev/null --spider --tries=1 -T 5 <span class=\"variable\">$1</span></span><br><span class=\"line\">    retval=$?</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$retval</span> -eq 0 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        pan 0 <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        pan 1 <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">loop</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> <span class=\"variable\">$@</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">        check_url <span class=\"variable\">$url</span></span><br><span class=\"line\">        <span class=\"built_in\">sleep</span> 2</span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> :;<span class=\"keyword\">do</span></span><br><span class=\"line\">        loop <span class=\"variable\">$&#123;url_arr[*]&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h1><p><img src=\"/images/pasted-237.png\" alt=\"cron\"><br><strong>用户的定时任务</strong></p>\n<ul>\n<li><code>cron</code> 定时任务的软件名</li>\n<li><code>crond</code> 服务进程名</li>\n<li><code>crontab</code> 命令是用来设置定时任务规则的配置命令</li>\n</ul>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># cat /etc/crontab </span></span><br><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For details see man 4 crontabs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example of job definition:</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------- minute (0 - 59)</span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  |</span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * (command to be executed)</span></span><br></pre></td></tr></table></figure>\n<p><strong>共6列：</strong></p>\n<ol>\n<li>分钟（0-59） </li>\n<li>小时（0-23） </li>\n<li>日（1-31）</li>\n<li>月（1-12）</li>\n<li>周（0-6）</li>\n<li>要执行的命令或程序</li>\n</ol>\n<p><strong>特殊字符：</strong></p>\n<ul>\n<li>* &lt;==每，每个<ul>\n<li>00 23 * * * cmd &lt;==每天的23:00执行cmd</li>\n</ul>\n</li>\n<li>- &lt;==连续的区间<ul>\n<li>00 8-23 * * * cmd &lt;==每天的8:00 9:00 …23:00 执行cmd</li>\n</ul>\n</li>\n<li>列举 1,2,5,8<ul>\n<li>00 1,2,5,8 * * * cmd &lt;==每天的1:00,2:00,5:00,8:00执行cmd</li>\n</ul>\n</li>\n<li>/n n任意数字 每隔n单位时间<ul>\n<li>00 */10 * * * cmd &lt;==每隔10小时执行cmd</li>\n</ul>\n</li>\n</ul>\n<p><strong>方法论：</strong>大象放冰箱分三步<br>   a.命令行执行成功<br>   b.配置定时任务 crontab -e<br>   c.检查</p>\n<p><strong>练习：</strong></p>\n<ol>\n<li>让服务器每5分钟和互联网时间做一次同步</li>\n<li>每天晚上0带你把站点目录/var/www/html下的内容打包备份到/data目录下，并生成不同的备份名称</li>\n</ol>\n<p>解答：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># crontab -l</span></span><br><span class=\"line\">*/5 * * * * /usr/sbin/ntpdate ntp1.aliyun.com  &amp;&gt;/dev/null == &gt;/dev/null 2&gt;&amp;1 &lt;==防止生成的小文件占用inode</span><br><span class=\"line\">00 00 */1 * * /usr/bin/tar -czf /root/www_$(<span class=\"built_in\">date</span> +%F).tar.gz /root/felix &amp;&gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">报错日志：<span class=\"built_in\">cat</span> /var/log/cron</span><br><span class=\"line\">Oct 15 23:08:01 lihuaning CROND[2483]: (root) CMD (/usr/bin/tar -czf /root/www_$(<span class=\"built_in\">date</span> +)</span><br><span class=\"line\">原因：定时任务对于%的要求，需要\\转义</span><br></pre></td></tr></table></figure>\n<p>正确答案：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">*/1 * * * * /usr/bin/tar -czf /root/www_$(<span class=\"built_in\">date</span> +\\%F\\%T).tar.gz /root/felix &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure>\n<p>优秀答案：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.命令行执行</span><br><span class=\"line\">cd /root</span><br><span class=\"line\">/usr/bin/tar -czf /root/www_$(date +\\%F\\%T).tar.gz ./felix</span><br><span class=\"line\"></span><br><span class=\"line\">2.尽量用脚本文件实现</span><br><span class=\"line\">[root@lihuaning ~]# mkdir /server/scripts -p  &lt;==建立专门存放脚本的目录</span><br><span class=\"line\">[root@lihuaning ~]# cd /server/scripts/ </span><br><span class=\"line\">[root@lihuaning scripts]# vim bak.sh  &lt;==编写备份脚本</span><br><span class=\"line\">cd /root</span><br><span class=\"line\">/usr/bin/tar -czf /root/www_$(date +%F_%T).tar.gz ./felix</span><br><span class=\"line\">[root@lihuaning scripts]# /bin/sh /server/scripts/bak.sh  &lt;==/bin/bash 作用是不需要额外再给脚本加上执行权限</span><br><span class=\"line\">编写定时任务</span><br><span class=\"line\">*/1 * * * * /bin/sh /server/scripts/bak.sh &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure>\n<p><strong>系统定时任务计划</strong></p>\n<ol>\n<li>不用管理员干预，系统自动执行。</li>\n<li>也可以利用系统任务位管理员服务。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># ll /var/log/messages*  &lt;==系统的日志</span></span><br><span class=\"line\">-rw------- 1 root root   88198 2019-10-15 20:52 /var/log/messages</span><br><span class=\"line\">-rw------- 1 root root  785720 2019-09-22 03:41 /var/log/messages-20190922</span><br><span class=\"line\">-rw------- 1 root root 1762523 2019-09-29 03:42 /var/log/messages-20190929</span><br><span class=\"line\">-rw------- 1 root root  240134 2019-10-07 03:17 /var/log/messages-20191007</span><br><span class=\"line\">-rw------- 1 root root  153081 2019-10-13 03:25 /var/log/messages-20191013</span><br><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># ll /var/log/secure*  &lt;==系统安全日志</span></span><br><span class=\"line\">-rw------- 1 root root 2728 2019-10-15 20:52 /var/log/secure</span><br><span class=\"line\">-rw------- 1 root root 3869 2019-09-21 17:10 /var/log/secure-20190922</span><br><span class=\"line\">-rw------- 1 root root 2940 2019-09-29 03:05 /var/log/secure-20190929</span><br><span class=\"line\">-rw------- 1 root root 2580 2019-10-07 00:01 /var/log/secure-20191007</span><br><span class=\"line\">-rw------- 1 root root 4750 2019-10-12 18:05 /var/log/secure-20191013</span><br><span class=\"line\"></span><br><span class=\"line\">[root@lihuaning ~]<span class=\"comment\"># ll /etc/cron.daily/logrotate /etc/logrotate.conf </span></span><br><span class=\"line\">-rwx------. 1 root root 180 2013-07-31 19:46 /etc/cron.daily/logrotate</span><br><span class=\"line\">-rw-r--r--. 1 root root 662 2013-07-31 19:46 /etc/logrotate.conf</span><br><span class=\"line\">按天切割日志，就可以用logrottate</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><ol>\n<li>No space left on device</li>\n</ol>\n<p><strong>原因：</strong>磁盘满的报错，往往是inode被占满了。(df -i)<br><strong>诱因：</strong>因为定时任务结尾没添加：&amp;&gt; /dev/null，导致定时任务执行的时候把输出部分给系统(root)发邮件。系统邮件服务postfix默认不开，这些给系统发的邮件就会堆在临时目录（大量小文件堆积）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C5 /var/spool/clientmqueue/</span><br><span class=\"line\">C6 C7 /var/spool/postfix/maildrop/</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>定时任务手动可以执行，但是放定时任务中不执行。<br>export变量生产案例<br>现象：登陆后怎么操作命令都对，但是命令就是放到定时任务不行。<br>原因：定时任务在执行脚本的时候，多数情况没办法加载环境变量，特别是（/etc/profile）中所定义的变量。</li>\n</ol>\n<p><strong>本质原因：</strong>bash的登陆方式</p>\n<ul>\n<li>手工登录，加载所有环境变量(/.bash_profile,~/.bash_rc,/etc/profile,/etc/bashrc)。</li>\n<li>定时任务执行脚本属于非登陆状态(/etc/bashrc)。</li>\n</ul>\n<p>由于大部分运维都会把变量放到此文件/etc/profile，把这个文件里的变量定义在执行的脚本中进行 重新定义即可。而在crond执行Shell时只能识别位数不多的系统环境变量，普通环境变量一般是无法识别的，如果在编写的脚本中需要使用环境变量，最好使用exprot重新声明一下该变量，以确保脚本正确执行。</p>\n<h2 id=\"编写例子\"><a href=\"#编写例子\" class=\"headerlink\" title=\"编写例子\"></a>编写例子</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">命令实例1：*/1 * * * * /bin/sh /scripts/data.sh</span><br><span class=\"line\">在本例中除了数字与命令脚本外，还使用到了符号<span class=\"string\">&quot;*&quot;</span>，*号的意思“每一”。</span><br><span class=\"line\">第一列的意思为分钟，特殊符号“/”表示每隔的意思，即表示每隔一分钟执行/bin/sh /scripts/data.sh程序。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例2：30 3,12 * * * /bin/sh /scripts/oldboy.sh</span><br><span class=\"line\">在本例中，第一列为30，表示30分钟；第二列为 3,12，这代表3点及 12点，此定时任务的意思是每天凌晨3点和中午12点的半点时刻（或描述为每天凌晨3：30和中午12：30）执行/scripts/oldboy.sh脚本。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例3：30 */6 * * * /bin/sh /scripts/oldboy.sh</span><br><span class=\"line\">在本例中，第一列为30，表示30分钟；第二列*/6代表每6个小时，也相当于 6、12、18、24 的作用。此定时任务的意思是每隔6个小时的半点时刻执行/scripts/oldboy.sh脚本任务。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例4：30 8-18/2 * * * /bin/sh /scripts/oldboy.sh </span><br><span class=\"line\">在本例中，其中的第一列为30，表示30分钟；第二列8-18/2代表在早晨8点到下午18点之间每隔2小时，也相当于把8、10、12、14、16、18单独列出。</span><br><span class=\"line\">那么，此定时任务的意思就是早晨8点到下午18点之间，每隔2小时的半点时刻执行/scripts/oldboy.sh脚本任务。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例5：30 21 * * * /application/apache/bin/apachectl graceful</span><br><span class=\"line\">本例表示每晚的21:30重启apache。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例6：45 4 1,10,22 * * /application/apache/bin/apachectl graceful</span><br><span class=\"line\">本例表示每月1、10、22日的凌晨4 : 45分重启apache。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例7：10 1 * * 6,0 /application/apache/bin/apachectl graceful</span><br><span class=\"line\">本例表示每周六、周日的凌晨1 : 10分重启apache。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例8：0,30 18-23 * * * /application/apache/bin/apachectl graceful</span><br><span class=\"line\">本例表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例9：00 */1 * * * /application/apache/bin/apachectl graceful</span><br><span class=\"line\">本例表示每隔一小时整点重启apache</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例10：* 23,00-07/1 * * * /application/apache/bin/apachectl graceful</span><br><span class=\"line\">本例并不表示晚上23点和早上0-7点之间每隔一小时重启Apache。</span><br><span class=\"line\">要说明的是，以上结果是不规范的，也是不对的。大家想想为什么？</span><br><span class=\"line\">以上定时任务的第一列为*，表示每分都执行任务即晚上23点和早上0-7点之间每隔一小时的每分都重启Apache，很可怕吧。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例11：00 11 * 4 1-3 /application/apache/bin/apachectl graceful</span><br><span class=\"line\">本例表示4月的每周一到周三的上午11点整重启Apache。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例12：30 09 * * 0 去做兼职</span><br><span class=\"line\">本例表示每周日上午9:30去做兼职。</span><br><span class=\"line\"></span><br><span class=\"line\">命令实例13：00 10 * * * 去国政中心上班</span><br><span class=\"line\">本例表示每上午10:00去国政中心上班。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"磁盘和存储\"><a href=\"#磁盘和存储\" class=\"headerlink\" title=\"磁盘和存储\"></a>磁盘和存储</h1><h2 id=\"存储介绍\"><a href=\"#存储介绍\" class=\"headerlink\" title=\"存储介绍\"></a>存储介绍</h2><p>SCSI比喻成驴，SATA比喻为马，SAS比喻为骡子，骡子既不爱得病，力气又大。因此SAS比SATA、SCSI的综合情况要更优秀。</p>\n<p>SAS是新一代的SCSI技术，和现在流行的Serial ATA（SATA）磁盘相同，都是采用串行技术以获得更高的传输速度<br>SAS优势：</p>\n<ul>\n<li>SAS技术降低了磁盘阵列的成本</li>\n<li>串行接口让传输性能提高</li>\n<li>扩展性更好</li>\n<li>安装简单，可以热插拔</li>\n<li>兼容性好，兼容SATA</li>\n</ul>\n<p>对比：</p>\n<ul>\n<li>企业生产场景普及程度：SAS&gt;SSD&gt;SATA</li>\n<li>单位容量对比性能和价格：SSD&gt;SAS&gt;SATA（一块SSD和一块SATA）</li>\n<li>单位价格购买磁盘容量：SATA&gt;SAS&gt;SSD</li>\n</ul>\n<p>光纤通道<br>作用：光纤通道磁盘是为了提高磁盘存储系统的速度和灵活性才开发的，它的出现大大提高了多磁盘系统的通信速度。光纤通道是为在像服务器这样的多磁盘系统环境而设计，能满足高端工作站、服务器、海量存储子网络、外设间通过集线器、交换机和点对点连接进行双向、串行数据通讯等系统对高数据传输率的要求。<br>特性：热拔插性、高速带宽、远程连接、连接设备数量大等。</p>\n<p>SSD硬盘：<br>固态磁盘（Solid State Drive、IDE FLASH DISK）是由控制单元和存储单元（FLASH芯片）组成的。简单说：就是用固态电子存储芯片阵列而制成的磁盘。</p>\n<p>分类：</p>\n<ol>\n<li>基于闪存（FLASH 芯片）的固态磁盘，类似于U盘</li>\n<li>基于DROM的固态磁盘</li>\n</ol>\n<p>接口类型：</p>\n<ul>\n<li>SATA接口：SATA SATA2 SATA3.0</li>\n<li>PATA(IDE接口)：IDE44PIN IDE40PIN</li>\n<li>PCI-E接口：mSATA PCIE(IDE) PCIE(SATA)ZIF:ZIF接口等</li>\n</ul>\n<h2 id=\"磁盘选型\"><a href=\"#磁盘选型\" class=\"headerlink\" title=\"磁盘选型\"></a>磁盘选型</h2><ol>\n<li><p>企业级SAS硬盘（默认）<br>常见的SAS硬盘是15000转/分，没有特殊需求默认买SAS硬盘。满足容量的基础上，尽量保持4块磁盘以上。</p>\n</li>\n<li><p>企业级SATA硬盘<br>7200-10000转/分，常见容量为1T、2T、4T、6T，优点是经济实惠，容量大，从具体需求和性价比考虑。在工作中多用SATA盘做线下备份（即不提供服务的数据存储或者并发业务访问不是很大的业务应用），比如站点程序及数据库、图片的线下备份等<br>适用场景：没钱、数据量少、数据不给用户提供服务、用于备份</p>\n</li>\n</ol>\n<p>小结：</p>\n<ul>\n<li>线上业务，用SAS磁盘</li>\n<li>线下业务，用SATA磁盘，磁带库</li>\n<li>线上高并发，小容量业务，SSD磁盘</li>\n<li>成本思想：根据数据的访问热度，智能分析分层存储。SATA+SSD</li>\n</ul>\n<ol start=\"3\">\n<li>SSD固态盘<br>特点：容量小，价格贵，速度快。一般用于数据量小并且有超大规模高并发的业务（这不是唯一的办法，还可以通过磁盘加内存缓存的技术方式解决这个大规模并发问题。）</li>\n</ol>\n<p>百度、腾讯、360核心业务都会采用SSD磁盘，应用层也必须会在项目架构层面做各种缓存。<br>大公司如淘宝，某些业务可能会根据数据的热度来综合使用分层存储，以达到性价比最佳的情况。</p>\n<p>服务器默认的RAID板卡，一般只支持：0和1<br>如果是独立RAID板卡，一般支持：0、1、5、10等常见级别</p>\n<h2 id=\"RAID\"><a href=\"#RAID\" class=\"headerlink\" title=\"RAID\"></a>RAID</h2><p><strong>什么是Raid?</strong><br>Raid是廉价冗余磁盘阵列( Redundant Array of Inexpensive Disk)的简称,有时也简称磁盘阵列( Disk Array)Raid是一种把多块独立的物理磁盘按不同的技术方式组合起来形成一个磁盘组,在逻辑上(做完RAID,装系统后)看起来就是一块大的磁盘,可以提供比单个物理磁盘更大的存储容量或更高的存储性能,同时又能提供不同级别数据冗余备份的一种技术。</p>\n<p><strong>Raid级别介绍</strong><br>把多个物理磁盘通过不同的技术方式组成磁盘阵列,这个不同的技术方式就被称为<br>RAID级别</p>\n<ul>\n<li>Raid级别一般有:Raid0、Raid1、Raid2、Raid3、Raid4、Raid5,Raid6、Raid7、Raid0+1（即Raid10）、Raid53等</li>\n<li>生产环境常用Raid级别：Raid0，Raid1，Raid5，Raid10。</li>\n</ul>\n<p>冗余：冗余,指重复配置系统的一些部件,当系统发生故障时,冗余配置的部件介入并承担故障部件的工作,由此减少系统的故障时间 Redundant,自动备援,即当某一设备发生损坏时它可以自动作为后备式设备替代该设备。</p>\n<p><strong>RAID分类：</strong></p>\n<ol>\n<li><p>软RAID技术（退出历史舞台）<br>在Linuⅸ下在安装系统过程中或者安装系统后通过自带的软件就能实现软RAID功能使用软RAID可省去购买昂贵的硬件RAID控制器和附件就能极大地增强磁盘的IO性能和可靠性。由于是用软件去实现的RAID功能,所以它配置灵活、管理方便。同时使用软件RAID,还可以实现将几个物理磁盘合并成一个更大的虚拟设备,从而达到性能改进和数据冗余的目的。</p>\n</li>\n<li><p>硬RAID技术<br>基于硬件的RAID解决方案比基于软件RAID技术在使用性能和服务性能上会更胜筹,具体表现在检测和修复多位错误的能力、错误磁盘自动检测和阵列重建等方面。从安全性上考虑,基于硬件的RAID解决方案也是更安全的,因此,在实际的生产场景工作中,基于硬件的RAD解决方案应该是我们的首选。互联网公司常用的生产DELL服务器,默认的就会支持RAID0,1,如果RAID5,10就需要买RAID卡。</p>\n</li>\n<li><p>LVM全称（Logic Volume Management（Manager））逻辑卷管理，它的最大用途是可以【灵活的管理磁盘的容量】，让磁盘分区可以随意放大或缩小，便于更好的应用磁盘的剩余空间，如果过于强调性能与备份，那么还是应该使用RAID功能，而不是LVM。</p>\n</li>\n</ol>\n<p>LVM是软件实现的，性能一般降低5%-10%。买服务器插满磁盘做好RAID，分区规划好，永远都不需要LVM。<br><strong>RAID和LVM区别：</strong></p>\n<ul>\n<li>LVM：灵活的管路磁盘容量，有一定的冗余和性能，很弱。</li>\n<li>RAID：更侧重性能和数据安全。</li>\n</ul>\n<p>磁盘阵列可以把多个磁盘驱动器通过不同的连接方式连接在一起协同工作，大大提高读取速度，同时把磁盘系统的可靠性提高到接近无错的境界，使其可靠性极高。<br>用RAID最直接的好处是：</p>\n<ul>\n<li>提升数据安全性。</li>\n<li>提升数据读写性能。</li>\n<li>提供更大的单一逻辑磁盘数据容量存储。</li>\n</ul>\n<p>DELLR740使用6块盘实践RAID制作结论</p>\n<ul>\n<li>Raid0支持1块盘到多块盘，容量是所有盘之和。(可靠性最低，坏一块全部坏)</li>\n<li>Raid1只支持2块盘，容量损失一块盘。（镜像）</li>\n<li>Raid5最少三块盘，不管硬盘数量多少，只损失一块盘容量。（奇偶校验）</li>\n<li>Raid6最少4块盘，5块盘也可以，损失2块盘，不管硬盘多少，只损失两块盘容量。</li>\n<li>Raid10最少4块盘，必须偶数硬盘，不管硬盘多少，都损失一半容量，不支持虚拟磁盘。（镜像过后做条带）</li>\n</ul>\n<h3 id=\"RAID0\"><a href=\"#RAID0\" class=\"headerlink\" title=\"RAID0\"></a>RAID0</h3><p><img src=\"/images/pasted-238.png\" alt=\"RAID0\"><br>生产应用场景：</p>\n<ul>\n<li>负载均衡集群下面的多个相同RS节点服务器。</li>\n<li>分布式文件存储下面的主节点或CHUNK SERVER。</li>\n<li>MySQL主从复制的多个Slave服务器。</li>\n<li>对性能要求很高，对冗余要求很低的相关业务。<br>以4块做RAID0为例：<br><img src=\"/images/pasted-239.png\" alt=\"RAID0\"></li>\n</ul>\n<h3 id=\"RAID1\"><a href=\"#RAID1\" class=\"headerlink\" title=\"RAID1\"></a>RAID1</h3><p><img src=\"/images/pasted-240.png\" alt=\"RAID1\"></p>\n<ol>\n<li>RAID1又称为Mirror或Mirroring（镜像），它的宗旨是最大限度的保证用户数据的可用性和可修复性。RAID1的操作方式是把用户写入一个磁盘的数据百分之百地自动复制到另外一个磁盘上，从而实现存储双份的数据。</li>\n<li>要制作RAID1，要求至少是两块磁盘（仅支持2块盘？），整个RAID大小等于两个磁盘中最小的那块磁盘的容量（当然，最好使用同样大小的磁盘），数据有50%的冗余，在存储时同时写入两块磁盘，实现了数据完整备份；但相对降低了写入性能，但是读取数据时可以并发，相当于两块Raid0的读取效率（有待实践验证）。</li>\n</ol>\n<p><img src=\"/images/pasted-241.png\" alt=\"RAID1\"></p>\n<h3 id=\"RAID5\"><a href=\"#RAID5\" class=\"headerlink\" title=\"RAID5\"></a>RAID5</h3><p><img src=\"/images/pasted-242.png\" alt=\"RAID5\"></p>\n<ol>\n<li>RAID5是一种存储性能、数据安全和存储成本兼顾（中庸）的存储解决方案。</li>\n<li>RAID5需要三块或以上的物理磁盘，可以提供热备盘实现故障的恢复；采用奇偶校验，可靠性强，且只有同时损坏两块硬盘时数据才会完全损坏，只损坏一块硬盘时，系统会根据存储的奇偶校验位重建数据，临时提供服务；此时如果有热备盘，系统还会自动在热备盘上重建故障磁盘上的数据；</li>\n</ol>\n<p><img src=\"/images/pasted-243.png\" alt=\"RAID5\"><br><img src=\"/images/pasted-244.png\" alt=\"RAID5\"></p>\n<h3 id=\"RAID10\"><a href=\"#RAID10\" class=\"headerlink\" title=\"RAID10\"></a>RAID10</h3><p><img src=\"/images/pasted-245.png\" alt=\"RAID10\"><br>RAID10是先将四块硬盘在纵向上分别两两做镜像，镜像后再在横向上做条带。<br><img src=\"/images/pasted-246.png\" alt=\"RAID10\"><br>RAID10极端情况下，支持一边坏1块。</p>\n<h3 id=\"RAID01\"><a href=\"#RAID01\" class=\"headerlink\" title=\"RAID01\"></a>RAID01</h3><p><img src=\"/images/pasted-247.png\" alt=\"RAID01\"><br>RAID01是先将四块硬盘中横向上分别两两做条带，条带后再在纵向上做镜像。<br>RAID01极端情况下，支持单边坏2块。</p>\n<p>总结：RAID10和RAID01在读和写的性能上没有太大差距，从发生故障的概率上看RAID01远大于RAID10</p>\n<h2 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h2><p>生产场景分区方案：<br><img src=\"/images/pasted-250.png\" alt=\"分区\"></p>\n<p>磁盘命名规则：</p>\n<ul>\n<li>IDE: /dev/hda /dev/hdb</li>\n<li>SCSI:/dev/sda /dev/sdb</li>\n<li>NVME:/dev/nvme0n1 nvme1n1 （内核版本3.3开始支持）<br>分区：</li>\n<li>sda1 sda2 sda3</li>\n<li>nvme0n1p1 nvme0n1p2 nvme0n1p3</li>\n</ul>\n<p><strong>磁盘分区的类型：</strong></p>\n<ol>\n<li><p>主分区（primary）</p>\n<ul>\n<li>系统中必须要存在的分区，系统盘选择主分区安装。</li>\n<li>数字编号1-4(sda1-sda4)。</li>\n<li>主分区最多四个，最少一个。</li>\n</ul>\n</li>\n<li><p>扩展分区（extend）</p>\n<ul>\n<li>相当于一个独立的小磁盘。</li>\n<li>拥有独立的分区表。</li>\n<li>不能独立存在，即不能存放数据。</li>\n<li>必须在扩展分区上建立逻辑分区能存放数据。</li>\n<li>占用主分区的编号（主分区+扩展分区）最多4个。</li>\n<li>扩展分区可以没有，最多一个。</li>\n</ul>\n</li>\n<li><p>逻辑分区（logic）</p>\n<ul>\n<li>数字编号从5开始。</li>\n<li>逻辑分区存放于扩展分区之上。</li>\n<li>存放任意普通数据。</li>\n</ul>\n</li>\n</ol>\n<p><strong>磁盘分区的工作原理：</strong><br>磁盘存储逻辑结构图<br><img src=\"/images/pasted-248.png\" alt=\"upload successful\"></p>\n<ol>\n<li>磁盘是按柱面分区的</li>\n<li>磁盘分区登记的地点，磁盘分区表<ul>\n<li>磁盘分区表存放分区是结果信息的（起始柱面-结束柱面）C6精细到了扇区。</li>\n<li>磁盘分区表存放位置，0磁道(最外围)，0磁头(第一个盘面)，1扇区。（512字节）。</li>\n<li>占用1扇区前512字节的最后64字节（分区表），前446字节存放系统引导信息。后两个字节存放分区结束标志（55AA）</li>\n<li>磁盘分区表容量有限为64字节，一个分区固定占16字节。所以64/16=4个分区（主分区+扩展分区）</li>\n</ul>\n</li>\n</ol>\n<p><strong>磁盘分区的实践：</strong><br>磁盘分区的本质，就是修改64字节的分区表。（如果是扩展分区，则修改扩展分区独立的分区表）</p>\n<h3 id=\"fdisk\"><a href=\"#fdisk\" class=\"headerlink\" title=\"fdisk\"></a>fdisk</h3><p><strong>fdisk命令</strong>，修改MBR分区表：<br>既能修改小于2T也能修改大于2T的磁盘.</p>\n<ul>\n<li>fdisk-Partition table manipulator for Linux linux下最常用的分区工具，一般是装完系统后进行分区。装系统之前的分区，多数都是系统ISO里面的工具分，或者raid里分小磁盘。</li>\n<li>fdisk只能root权限用户使用。</li>\n<li>fdisk适合于对装系统后的剩余空间进行分区，例如：安装系统时没有全部分区，或者安装系统后添加新磁盘。</li>\n<li>fdisk 支持mbr分区表（2TB以内）,大于2TB的磁盘需要先转换硬盘格式为gpt格式 <code>g</code>参数进行转换。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">分区实战：3P+1E(3L)  1 2 3 5 6 7 每个150M</span><br><span class=\"line\">[root@S1 ~]# ll /dev/sd*</span><br><span class=\"line\">brw-rw----. 1 root disk 8,  0 Oct 20 23:59 /dev/sda</span><br><span class=\"line\">brw-rw----. 1 root disk 8,  1 Oct 20 23:59 /dev/sda1</span><br><span class=\"line\">brw-rw----. 1 root disk 8,  2 Oct 20 23:59 /dev/sda2</span><br><span class=\"line\">brw-rw----. 1 root disk 8,  3 Oct 20 23:59 /dev/sda3</span><br><span class=\"line\">brw-rw----. 1 root disk 8, 16 Oct 20 23:59 /dev/sdb</span><br><span class=\"line\">[root@S1 ~]# fdisk -l  &lt;==查看分区信息</span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/sda: 21.5 GB, 21474836480 bytes, 41943040 sectors</span><br><span class=\"line\">Units = sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class=\"line\">Disk label type: dos</span><br><span class=\"line\">Disk identifier: 0x000ed3d3</span><br><span class=\"line\"></span><br><span class=\"line\">   Device Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sda1   *        2048     1050623      524288   83  Linux</span><br><span class=\"line\">/dev/sda2         1050624     5244927     2097152   82  Linux swap / Solaris</span><br><span class=\"line\">/dev/sda3         5244928    41943039    18349056   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectors</span><br><span class=\"line\">Units = sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">[root@S1 ~]# fdisk /dev/sdb &lt;==对sdb进行分区</span><br><span class=\"line\">Welcome to fdisk (util-linux 2.23.2).</span><br><span class=\"line\"></span><br><span class=\"line\">Changes will remain in memory only, until you decide to write them.</span><br><span class=\"line\">Be careful before using the write command.</span><br><span class=\"line\"></span><br><span class=\"line\">Device does not contain a recognized partition table</span><br><span class=\"line\">Building a new DOS disklabel with disk identifier 0x8ecef2f8.</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m for help): m</span><br><span class=\"line\">Command action</span><br><span class=\"line\">   a   toggle a bootable flag</span><br><span class=\"line\">   b   edit bsd disklabel</span><br><span class=\"line\">   c   toggle the dos compatibility flag</span><br><span class=\"line\">   d   delete a partition\t\t&lt;==删除一个分区</span><br><span class=\"line\">   g   create a new empty GPT partition table &lt;==转换硬盘格式为gpt</span><br><span class=\"line\">   G   create an IRIX (SGI) partition table</span><br><span class=\"line\">   l   list known partition types\t&lt;==查看已知的分区类型</span><br><span class=\"line\">   m   print this menu\t\t&lt;==查看分区的帮助信息</span><br><span class=\"line\">   n   add a new partition\t\t&lt;==添加一个新分区</span><br><span class=\"line\">   o   create a new empty DOS partition table</span><br><span class=\"line\">   p   print the partition table\t&lt;==查看分区结果信息</span><br><span class=\"line\">   q   quit without saving changes\t&lt;==退出不保存</span><br><span class=\"line\">   s   create a new empty Sun disklabel</span><br><span class=\"line\">   t   change a partition&#x27;s system id&lt;==调整分区类型</span><br><span class=\"line\">   u   change display/entry units</span><br><span class=\"line\">   v   verify the partition table</span><br><span class=\"line\">   w   write table to disk and exit\t&lt;==保存并退出</span><br><span class=\"line\">   x   extra functionality (experts only)</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m for help): p</span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectors</span><br><span class=\"line\">Units = sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class=\"line\">Disk label type: dos</span><br><span class=\"line\">Disk identifier: 0x5faeac4d</span><br><span class=\"line\"></span><br><span class=\"line\">   Device Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\"></span><br><span class=\"line\">=======================开始创建主分区==========================</span><br><span class=\"line\">Command (m for help): n</span><br><span class=\"line\">Partition type:</span><br><span class=\"line\">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default p): </span><br><span class=\"line\">Using default response p</span><br><span class=\"line\">Partition number (1-4, default 1): </span><br><span class=\"line\">First sector (2048-2097151, default 2048): </span><br><span class=\"line\">Using default value 2048</span><br><span class=\"line\">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-2097151, default 2097151): +150M</span><br><span class=\"line\">Partition 1 of type Linux and of size 150 MiB is set</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m for help): n   </span><br><span class=\"line\">Partition type:</span><br><span class=\"line\">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default p): p</span><br><span class=\"line\">Partition number (2-4, default 2): </span><br><span class=\"line\">First sector (309248-2097151, default 309248): </span><br><span class=\"line\">Using default value 309248</span><br><span class=\"line\">Last sector, +sectors or +size&#123;K,M,G&#125; (309248-2097151, default 2097151): +150M</span><br><span class=\"line\">Partition 2 of type Linux and of size 150 MiB is set</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m for help): n</span><br><span class=\"line\">Partition type:</span><br><span class=\"line\">   p   primary (2 primary, 0 extended, 2 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default p): p</span><br><span class=\"line\">Partition number (3,4, default 3): </span><br><span class=\"line\">First sector (616448-2097151, default 616448): </span><br><span class=\"line\">Using default value 616448</span><br><span class=\"line\">Last sector, +sectors or +size&#123;K,M,G&#125; (616448-2097151, default 2097151): +150M</span><br><span class=\"line\">Partition 3 of type Linux and of size 150 MiB is set</span><br><span class=\"line\"></span><br><span class=\"line\">=======================开始创建扩展分区==========================</span><br><span class=\"line\">Command (m for help): n</span><br><span class=\"line\">Partition type:</span><br><span class=\"line\">   p   primary (3 primary, 0 extended, 1 free)</span><br><span class=\"line\">   e   extended</span><br><span class=\"line\">Select (default e): </span><br><span class=\"line\">Using default response e</span><br><span class=\"line\">Selected partition 4</span><br><span class=\"line\">First sector (923648-2097151, default 923648): </span><br><span class=\"line\">Using default value 923648</span><br><span class=\"line\">Last sector, +sectors or +size&#123;K,M,G&#125; (923648-2097151, default 2097151): \t&lt;==给剩余全部空间</span><br><span class=\"line\">Using default value 2097151</span><br><span class=\"line\">Partition 4 of type Extended and of size 573 MiB is set</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m for help): p</span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectors</span><br><span class=\"line\">Units = sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class=\"line\">Disk label type: dos</span><br><span class=\"line\">Disk identifier: 0x5faeac4d</span><br><span class=\"line\"></span><br><span class=\"line\">   Device Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048      309247      153600   83  Linux</span><br><span class=\"line\">/dev/sdb2          309248      616447      153600   83  Linux</span><br><span class=\"line\">/dev/sdb3          616448      923647      153600   83  Linux</span><br><span class=\"line\">/dev/sdb4          923648     2097151      586752    5  Extended</span><br><span class=\"line\"></span><br><span class=\"line\">=======================开始创建逻辑分区==========================</span><br><span class=\"line\">Command (m for help): n</span><br><span class=\"line\">All primary partitions are in use</span><br><span class=\"line\">Adding logical partition 5</span><br><span class=\"line\">First sector (925696-2097151, default 925696): </span><br><span class=\"line\">Using default value 925696</span><br><span class=\"line\">Last sector, +sectors or +size&#123;K,M,G&#125; (925696-2097151, default 2097151): +150M</span><br><span class=\"line\">Partition 5 of type Linux and of size 150 MiB is set</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m for help): n</span><br><span class=\"line\">All primary partitions are in use</span><br><span class=\"line\">Adding logical partition 6</span><br><span class=\"line\">First sector (1234944-2097151, default 1234944): </span><br><span class=\"line\">Using default value 1234944</span><br><span class=\"line\">Last sector, +sectors or +size&#123;K,M,G&#125; (1234944-2097151, default 2097151): +150M</span><br><span class=\"line\">Partition 6 of type Linux and of size 150 MiB is set</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m for help): n</span><br><span class=\"line\">All primary partitions are in use</span><br><span class=\"line\">Adding logical partition 7</span><br><span class=\"line\">First sector (1544192-2097151, default 1544192): </span><br><span class=\"line\">Using default value 1544192</span><br><span class=\"line\">Last sector, +sectors or +size&#123;K,M,G&#125; (1544192-2097151, default 2097151):  </span><br><span class=\"line\">Using default value 2097151</span><br><span class=\"line\">Partition 7 of type Linux and of size 270 MiB is set</span><br><span class=\"line\"></span><br><span class=\"line\">=======================查看结果3P 1E(3L)==========================</span><br><span class=\"line\">Command (m for help): p</span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectors</span><br><span class=\"line\">Units = sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class=\"line\">Disk label type: dos</span><br><span class=\"line\">Disk identifier: 0x5faeac4d</span><br><span class=\"line\"></span><br><span class=\"line\">   Device Boot      Start         End      Blocks   Id  System</span><br><span class=\"line\">/dev/sdb1            2048      309247      153600   83  Linux</span><br><span class=\"line\">/dev/sdb2          309248      616447      153600   83  Linux</span><br><span class=\"line\">/dev/sdb3          616448      923647      153600   83  Linux</span><br><span class=\"line\">/dev/sdb4          923648     2097151      586752    5  Extended</span><br><span class=\"line\">/dev/sdb5          925696     1232895      153600   83  Linux</span><br><span class=\"line\">/dev/sdb6         1234944     1542143      153600   83  Linux</span><br><span class=\"line\">/dev/sdb7         1544192     2097151      276480   83  Linux</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m for help):</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"parted\"><a href=\"#parted\" class=\"headerlink\" title=\"parted\"></a>parted</h3><p><strong>parted命令</strong>，gpt分区格式：<br>既能修改小于2T也能修改大于2T的磁盘.</p>\n<p><img src=\"/images/pasted-249.png\" alt=\"parted命令\"><br>改硬盘格式：<code>parted -s /dev/sdb mklabel gpt/msdos</code> 二选一，大于两T用gpt反之选msdos即mbr<br>增加分区：<code>parted -s /dev/sdb mkpart primary 581 100%==-1</code><br>删除分区：<code>parted -s /dev/sdb rm [分区号]</code><br>查看分区：<code>parted -s /dev/sdb p</code></p>\n<p><strong>mkpart PART-TYPE START END</strong><br>PART-TYPE(分区类型)</p>\n<ul>\n<li>primary 主分区</li>\n<li>logical 逻辑分区</li>\n<li>extended 扩展分区</li>\n</ul>\n<p><strong>START 设定磁盘分区起始点；可以为0，numberMiB/GiB/TiB；</strong></p>\n<ul>\n<li>0 设定当前分区的起始点为磁盘的第一个扇区；</li>\n<li>1G 设定当前分区的起始点为磁盘的1G处开始；</li>\n</ul>\n<p><strong>END 设定磁盘分区结束点；</strong></p>\n<ul>\n<li>-1 设定当前分区的结束点为磁盘的最后一个扇区；</li>\n<li>10G 设定当前分区的结束点为磁盘的10G处；</li>\n</ul>\n<p>需求：4块2T盘，RAID5大小6T（RAID5损失了1块盘的容量）<br>现有一个做了RAID5的硬盘，要求三个分区<br>硬盘分区总大小：    6.2T<br>/data0            4.8T<br>/data1            1T<br>            400G （无需格式化，作DRBD+Hearbeat+MySQL高可用集群）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@S1 ~]# parted /dev/sdb</span><br><span class=\"line\">GNU Parted 3.1</span><br><span class=\"line\">Using /dev/sdb</span><br><span class=\"line\">Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.</span><br><span class=\"line\">(parted) p                                                                </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 1074MB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: msdos\t\t&lt;==此时文件系统为msdos</span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start  End  Size  Type  File system  Flags</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) mklabel gpt                  &lt;==修改磁盘为GPT格式[MBR格式为 msdos ]</span><br><span class=\"line\">\t\t等价于：parted -s /dev/sdb mklabel gpt &lt;==非交互式磁盘为GPT格式，-s取消提示</span><br><span class=\"line\">Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to</span><br><span class=\"line\">continue?</span><br><span class=\"line\">Yes/No? Y                                                                 </span><br><span class=\"line\">(parted) p                                                                </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 1074MB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt\t\t&lt;==修改结果</span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start  End  Size  File system  Name  Flags</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) mkpart primary 0 124\t&lt;==新建分区定义起始大小（M）为单位</span><br><span class=\"line\">\t\t\t\t等价于：parted -s /dev/sdb mkpart primary 0 124</span><br><span class=\"line\">Warning: The resulting partition is not properly aligned for best performance.</span><br><span class=\"line\">Ignore/Cancel? I                                                          </span><br><span class=\"line\">(parted) p              \t\t&lt;==显示分区信息                                                  </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 1074MB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start   End    Size   File system  Name     Flags</span><br><span class=\"line\"> 1      17.4kB  124MB  124MB               primary</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) mkpart primary 581 -1    &lt;==分配所有剩余空间给第2个分区</span><br><span class=\"line\">\t\t\t\t 等价于：parted -s /dev/sdb mkpart primary 581 100%</span><br><span class=\"line\">(parted) p                                                                </span><br><span class=\"line\">Model: ATA VBOX HARDDISK (scsi)</span><br><span class=\"line\">Disk /dev/sdb: 1074MB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags: </span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start   End     Size   File system  Name     Flags</span><br><span class=\"line\"> 1      17.4kB  580MB   580MB               primary</span><br><span class=\"line\"> 2      581MB   1073MB  492MB              primary</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) rm 2 &lt;==删除分区2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h2><p><strong>文件系统：</strong></p>\n<ul>\n<li>什么是文件系统？<ul>\n<li>是计算机存储和组织数据的方法或机制。落地是一个软件。</li>\n</ul>\n</li>\n<li>为什么需要文件系统？<ul>\n<li>磁盘、物理介质、磁粒子物理元素。硬件需要软件驱动使用，磁盘需要文件系统驱动。</li>\n<li>文件系统通过磁盘实现管理规划、存取数据。</li>\n</ul>\n</li>\n<li>文件系统都有哪些常见种类？<ul>\n<li>Windows: NTFS、fat32、msdos</li>\n<li>Linux: ext2、ext3(C5)、ext4(C6)、xfs(C7)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件系统创建和挂载\"><a href=\"#文件系统创建和挂载\" class=\"headerlink\" title=\"文件系统创建和挂载\"></a>文件系统创建和挂载</h3><p>mkfs 格式化（的本质创建文件系统）</p>\n<ul>\n<li>-t //指定文件系统</li>\n<li>-b //指定Block大小</li>\n<li>-I //指定Inode大小</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@S1 ~]<span class=\"comment\"># mkfs -t ext4 /dev/sdb1  &lt;==格式化ext4文件系统，本质就是生成一定数量的Inode和Block。等价于mkfs.exts /dev/sdb1</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Filesystem label=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">Block size=1024 (<span class=\"built_in\">log</span>=0)</span><br><span class=\"line\">Fragment size=1024 (<span class=\"built_in\">log</span>=0)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">25688 inodes, 102400 blocks</span><br><span class=\"line\">5120 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">First data block=1</span><br><span class=\"line\">Maximum filesystem blocks=33685504</span><br><span class=\"line\">13 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">8192 blocks per group, 8192 fragments per group</span><br><span class=\"line\">1976 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t8193, 24577, 40961, 57345, 73729</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: <span class=\"keyword\">done</span>                            </span><br><span class=\"line\">Writing inode tables: <span class=\"keyword\">done</span>                            </span><br><span class=\"line\">Creating journal (4096 blocks): <span class=\"keyword\">done</span></span><br><span class=\"line\">Writing superblocks and filesystem accounting information: <span class=\"keyword\">done</span></span><br><span class=\"line\">-----------------------------------------------------------------------------------</span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># mkfs -t ext4 -b 4096 -I 512 /dev/sdb1 &lt;==指定Inode和Block大小</span></span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Filesystem label=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">Block size=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Fragment size=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">25600 inodes, 25600 blocks</span><br><span class=\"line\">1280 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">First data block=0</span><br><span class=\"line\">Maximum filesystem blocks=27262976</span><br><span class=\"line\">1 block group</span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">25600 inodes per group</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: <span class=\"keyword\">done</span>                            </span><br><span class=\"line\">Writing inode tables: <span class=\"keyword\">done</span>                            </span><br><span class=\"line\">Creating journal (1024 blocks): <span class=\"keyword\">done</span></span><br><span class=\"line\">Writing superblocks and filesystem accounting information: <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># dumpe2fs /dev/sdb1 | egrep -i &quot;size&quot; &lt;==检查结果</span></span><br><span class=\"line\">dumpe2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Filesystem features:      has_journal ext_attr resize_inode dir_index filetype extent 64bit flex_bg sparse_super large_file huge_file uninit_bg dir_nlink extra_isize</span><br><span class=\"line\">Block size:               4096</span><br><span class=\"line\">Fragment size:            4096</span><br><span class=\"line\">Group descriptor size:    64</span><br><span class=\"line\">Flex block group size:    16</span><br><span class=\"line\">Inode size:\t          512</span><br><span class=\"line\">Required extra isize:     28</span><br><span class=\"line\">Desired extra isize:      28</span><br><span class=\"line\">Journal size:             4096k</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>mount </p>\n<ul>\n<li>-t 指定文件类型</li>\n<li>-o 挂载的选项[rw,remount]</li>\n<li>-a 挂载所有磁盘</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@S1 ~]<span class=\"comment\"># mount -t ext4 /dev/sdb1 /mnt/ &lt;==挂载文件系统</span></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># df -h</span></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># cat /proc/mounts &lt;==查看挂载状态</span></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># umount -lf /mnt/ &lt;==强制卸载</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># mount  /dev/sdb2 /mnt/  &lt;==没有格式化，没法挂载。</span></span><br><span class=\"line\">mount: /dev/sdb2 is write-protected, mounting read-only</span><br><span class=\"line\">mount: unknown filesystem <span class=\"built_in\">type</span> <span class=\"string\">&#x27;(null)&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">xfs格式化sdb2</span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># mkfs.xfs /dev/sdb2</span></span><br><span class=\"line\">meta-data=/dev/sdb2         isize=256    agcount=4, agsize=59072 blks</span><br><span class=\"line\">          =                          sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">          =                          crc=0        finobt=0</span><br><span class=\"line\">data    =                          bsize=4096   blocks=236288, imaxpct=25</span><br><span class=\"line\">          =                          sunit=0      swidth=0 blks</span><br><span class=\"line\">naming=version 2              bsize=4096   ascii-ci=0 ftype=0</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=853, version=2</span><br><span class=\"line\">           =                         sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                  extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># mount  /dev/sdb2 /mnt/</span></span><br></pre></td></tr></table></figure>\n\n<p>开机自动挂载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">方法一：</span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># blkid &lt;==查看设备属性 UUID fstype</span></span><br><span class=\"line\">/dev/sda1: UUID=<span class=\"string\">&quot;4b292773-2b2d-4f7d-807c-ba025a45dc58&quot;</span> TYPE=<span class=\"string\">&quot;xfs&quot;</span> </span><br><span class=\"line\">/dev/sda2: UUID=<span class=\"string\">&quot;3fc4e794-5e50-437e-87e1-1e692621df3c&quot;</span> TYPE=<span class=\"string\">&quot;swap&quot;</span> </span><br><span class=\"line\">/dev/sda3: UUID=<span class=\"string\">&quot;4664ec93-5655-4d88-80cd-aec984aaf857&quot;</span> TYPE=<span class=\"string\">&quot;xfs&quot;</span> </span><br><span class=\"line\">/dev/sdb1: UUID=<span class=\"string\">&quot;360280b7-4a46-4e11-843d-d97e62cfe3bc&quot;</span> TYPE=<span class=\"string\">&quot;ext4&quot;</span> </span><br><span class=\"line\">/dev/sdb2: UUID=<span class=\"string\">&quot;814731d0-a1ca-48fc-9522-8cf3eae33c8a&quot;</span> TYPE=<span class=\"string\">&quot;xfs&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/fstab</span></span><br><span class=\"line\"><span class=\"comment\"># Created by anaconda on Wed Oct  9 11:54:43 2019</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">UUID=4664ec93-5655-4d88-80cd-aec984aaf857   /               xfs           defaults           0              0</span><br><span class=\"line\">UUID=4b292773-2b2d-4f7d-807c-ba025a45dc58  /boot         xfs            defaults           0              0</span><br><span class=\"line\">UUID=3fc4e794-5e50-437e-87e1-1e692621df3c   swap         swap         defaults           0              0</span><br><span class=\"line\">设备\t\t\t\t                挂载点  文件系统类型  默认挂载选项   是否备份 是否开机磁盘检查</span><br><span class=\"line\">defaults</span><br><span class=\"line\">              Use default options: rw, suid, dev, <span class=\"built_in\">exec</span>, auto, nouser, and async.</span><br><span class=\"line\"></span><br><span class=\"line\">UUID=814731d0-a1ca-48fc-9522-8cf3eae33c8a    /mnt         xfs            defaults           0              0  &lt;==开机挂载</span><br><span class=\"line\"></span><br><span class=\"line\">mount -a &lt;==实现fstab中的配置文件立刻生效</span><br><span class=\"line\"></span><br><span class=\"line\">方法二：</span><br><span class=\"line\">/usr/bin/mount -t xfs /dev/sdb2 /mnt &lt;==为临时挂载，可将其放入/etc/rc.local，也可实现自动挂载。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件系统修复\"><a href=\"#文件系统修复\" class=\"headerlink\" title=\"文件系统修复\"></a>文件系统修复</h3><p>查看ext文件系统的内部细节：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@S1 ~]<span class=\"comment\"># dumpe2fs /dev/sdb1</span></span><br><span class=\"line\">Inode count:              25688</span><br><span class=\"line\">Block count:              102400 &lt;==inode block数量</span><br><span class=\"line\">Block size:               1024 &lt;==Block大小 1k</span><br><span class=\"line\">Inode size:\t          128 &lt;==Inode大小</span><br><span class=\"line\"></span><br><span class=\"line\">[root@S1 ~]<span class=\"comment\"># fsck #检查并修复Linux⽂件系统</span></span><br><span class=\"line\">fsck         fsck.btrfs   fsck.cramfs  fsck.ext2    fsck.ext3    fsck.ext4    fsck.minix   fsck.xfs</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li>正常的磁盘不能操作</li>\n<li>操作时要卸载</li>\n</ol>\n<p>参数:</p>\n<ul>\n<li>-a非互交模式，自动修复</li>\n<li>-c检查是否存在有损坏的区块。</li>\n<li>-C fsck.ext3命令会把全部的执行过程，都交由其逆向叙述，便于监控程序</li>\n<li>-d详细显示命令执行过程</li>\n<li>-f强制进行检查</li>\n<li>-F检查文件系统之前，先清理该保存设备块区内的数据</li>\n<li>-l把文件中所列出的损坏区块，加入标记</li>\n<li>-L清除所有损坏标志，重新标记</li>\n<li>-n非交互模式,把欲检查的文件系统设成只读</li>\n<li>-P 设置fsck.ext2命令所能处理的inode大小为多少</li>\n<li>-r交互模式</li>\n<li>-R忽略目录</li>\n<li>-s顺序检查</li>\n<li>-S效果和指定“-s”参数类似</li>\n<li>-t 显示fsck.ext2命令的时序信息。</li>\n<li>-v显示详细的处理过程</li>\n<li>-y关闭互动模式</li>\n</ul>\n<p>选择参数:</p>\n<ul>\n<li>-b指定分区的第一个磁区的起始地址/Super Block</li>\n<li>-B 设置该分区每个区块的大小</li>\n<li>-I设置欲检查的文件系统，其inode缓冲区的区块数目</li>\n<li>-V显示版本信息</li>\n</ul>\n<p><code>[root@S1 ~]# xfs_repair /dev/sdb2</code> 检查和修复xfs文件系统</p>\n<h2 id=\"救援模式\"><a href=\"#救援模式\" class=\"headerlink\" title=\"救援模式\"></a>救援模式</h2><p>当系统磁盘挂载项写入fstab中，此时机器重启了。但是盘被拔出来或者磁盘的文件系统损坏无法挂载时，系统会开不开机。这个时候就要进入救援模式吧fstab中的挂载项注释掉。</p>\n<ol>\n<li>grub菜单按e键，找到如下位置。</li>\n</ol>\n<p><img src=\"/images/pasted-251.png\" alt=\"救援模式1\"><br>2. 修改为：</p>\n<p><img src=\"/images/pasted-252.png\" alt=\"救援模式2\"><br>3. Ctrl+x执行：</p>\n<p><img src=\"/images/pasted-253.png\" alt=\"救援模式3\"><br>执行<code>chroot sysroot</code>获取root权限。<br>vi 编辑fstab<br>exec /sbin/init 重启OK</p>\n<p>同样适用单用户模式找回root密码<br>如果开启了selinux 还需要执行<br><code>touch /.autorelabel</code>  &lt;==selinux在重启后更新label(既selinux安全上下文 其中包含：SELinux用户、SELinux角色、类型、安全级别)</p>\n","categories":["OPS"],"tags":["OPS","SHELL","RAID"]}]